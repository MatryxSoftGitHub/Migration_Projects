// //#####################################################################################
// //     Common Functions
// //#####################################################################################
String Error_Description = "Failed due to data issue"
String FailComments = "Failed coments"
String sDesktopFilePath = ""
//**************************************************************************************
clickOnReportsAndforms_AndScroll(Integer nScrolls, Boolean pforward)
	%FuncInfo[Desc="This will enter security credentials in the security alert popup in IE",Group="CommonFunctions"]
	//Scrolling to Bottom of the Report
	BranchPlus.HoverMouse()
	w_bp_frame.ReportsFrame.dw_report.Click()
	MouseWheel(nScrolls, pforward)
	Sleep(5)
	//Error Handling
	if GetErrorCount()>0  			
		writeReportLog("Failed to clickOnReportsAndforms_AndScroll","Failed", Error_Description ,"")

//**************************************************************************************
//Ex:  MouseWheel(1,False) --> Scroll Down
//  MouseWheel(1,True) ->> Scroll UP
MouseScroll(String sWheelTurns, MouseScrollDirection sScrollDirection)
	%FuncInfo[Desc="This scrolls the mouse wheel up/down based on the input for the turns given as input",Group="Other"]
	//Author: Kavyashree Parkala
	System.Execute (GetRunDir ()+"\Project\Other\DoMouseScroll.exe "+ sScrollDirection + " " + sWheelTurns)
	
MouseWheel(Integer nScrolls, Boolean pforward)
	%FuncInfo[Desc="This will enter security credentials in the security alert popup in IE",Group="CommonFunctions"]
	String sWheelTurns = nScrolls.Format()
	if pforward == true
		System.Execute (GetRunDir ()+"\Project\Other\DoMouseScroll.exe "+ "up" + " " + sWheelTurns)
	else
		System.Execute (GetRunDir ()+"\Project\Other\DoMouseScroll.exe "+ "down" + " " + sWheelTurns)
	if GetErrorCount()>0 
		writeReportLog("Failed in MouseWheel","Failed", Error_Description,"")

//**************************************************************************************
//@Method validateDataAndReport
//@Date 16 Feb 2018
//@Description //This Fucntion will compare actualData & ExepctedData and will Log/Report 
//EX:validateDataAndReport("$100", "$210", "Validation for Distribution of Check Amount")
//**************************************************************************************
validateDataAndReport(Object actualData,Object expectedData,String customMessage)
	%FuncInfo[Desc="This will enter security credentials in the security alert popup in IE",Group="CommonFunctions"]
	if actualData.ToUpper() == expectedData.ToUpper()
		// writeReportLog( customMessage & "  is Matching","Passed",FailComments,"YES")
		writeReportLog( customMessage + "  is Matching | Actual and Expected data is : " + actualData,"Passed",FailComments,"")
		//Msgbox "PASS: " & customMessage & "  is Matching"	
	else
		writeReportLog( customMessage + "  is Not Matching. Actual >> " +  actualData + " Expected Data >> " + expectedData,"Failed",FailComments,"")
		//Msgbox "FAIL: " & customMessage & "  is Not Matching. Actual >> " &  actualData & " Expected Data >> " & expectedData
	//Error handling
	if GetErrorCount()>0 
		writeReportLog("Failed in validateDataAndReport","Failed", Error_Description,"")

//====================================================================================================
writeReportLog(String StepDescription,String Scenariostatus,String FailComments,String SnapshotRequired)
	%FuncInfo[Desc="This will enter security credentials in the security alert popup in IE",Group="CommonFunctions"]
	// 
	//Validating for the Value in the Scenario Status
	// if Scenariostatus = "Passed" and Scenariostatus = "Failed" and Scenariostatus = "Skipped" and Scenariostatus = "Warning" 
		// LogFailureMessage("Failed in Method writeReportLog","Scenario Status is Empty. Please pass the proper value other wise custom reports will not get updated") 
	// //Reading the required Data from Env Variables
	// Environment.Value("ReportStep") = Environment.Value("ReportStep") + 1
	// stepNumber = Environment.Value("ReportStep")
	// LogFolder = Environment.Value("LogFolder")
	// ReportName = Environment.Value("TestName")& ""& Environment.Value("TestNameSuffix") &".html"  
	// forReading = 1
	// forWriting = 2
	// Set fso = CreateObject("Scripting.FileSystemObject" )
	// Set textFile = fso.Open(LogFolder&"\"&ReportName, forReading )
	// if Not textFile.AtEndOfStream  
		// text = textFile.ReadAll    
		// textFile.Close
	// //testDuration = fncFetchExecutionTime(startTime, endTime)
	// sFilename = CaptureScreenshot(LogFolder)
	// Select Case Scenariostatus
		// Case "Passed"
			// if SnapshotRequired = "Y" 
			// replaceText = "<tr name=""tablerow""><td>"&stepNumber&"</td><td>"&StepDescription&"</td><td class=""bg-success text-white""><a HREF=" & sFilename & ">Passed</a></td><td>"&FailComments&"</td></tr>" &vbCrLf& "<!-- Inject Result Row TR -->"
			// else    
			// replaceText = "<tr name=""tablerow""><td>"&stepNumber&"</td><td>"&StepDescription&"</td><td class=""bg-success text-white"">Passed</td><td>"&FailComments&"</td></tr>" &vbCrLf& "<!-- Inject Result Row TR -->"
			// //UFT Logger
			// if SnapshotRequired = "Y" 
				// LogSuccessMessage_And_CaptureScreenShot(StepDescription,FailComments)
			// else
				// Reporter.ReportEvent micPass,StepDescription,FailComments
		// Case "Failed"
			// replaceText = "<tr name=""tablerow""><td>"&stepNumber&"</td><td>"&StepDescription&"</td><td class=""bg-danger text-white""><a HREF=" & sFilename & ">Failed</a></td><td>"&FailComments&"</td></tr>" &vbCrLf& "<!-- Inject Result Row TR -->"    
			// //Logging the Failure in UFT Report
			// LogFailureMessage(StepDescription,FailComments)        	
			// //Reporter.ReportEvent micFail,StepDescription,FailComments
			// Environment.Value("TestStatus") = False       	       	     	
		// Case "Skipped"
			// replaceText = "<tr name=""tablerow""><td>"&stepNumber&"</td><td>"&StepDescription&"</td><td class=""bg-warning text-white""><a HREF=" & sFilename & ">Skipped</a></td><td>"&FailComments&"</td></tr>" &vbCrLf& "<!-- Inject Result Row TR -->"    
			// Reporter.ReportEvent micWarning,StepDescription,FailComments
		// Case "Warning"
			// replaceText = "<tr name=""tablerow""><td>"&stepNumber&"</td><td>"&StepDescription&"</td><td class=""bg-warning text-white""><a HREF=" & sFilename & ">Warning</a></td><td>"&FailComments&"</td></tr>" &vbCrLf& "<!-- Inject Result Row TR -->"    
			// Reporter.ReportEvent micWarning,StepDescription,FailComments

//====================================================================================================
CopyFile(String FiletoCopy,String DestinationFolder)
	%FuncInfo[Desc="This will enter security credentials in the security alert popup in IE",Group="CommonFunctions"]
	
	System.CopyFile (FiletoCopy, DestinationFolder)
	// String fso
				// String Filepath,WarFileLocation

//====================================================================================================
CaptureScreenshot(String sFilePath)
	%FuncInfo[Desc="This will enter security credentials in the security alert popup in IE",Group="CommonFunctions"]
	String sDateTimeNow, sFileName
	DateTime dt = DateTime.Now()
	sDateTimeNow = dt.Format("yyyyMMddhhss")
	sFileName = "Desktop_" + sDateTimeNow+".png"
	sFilePath = sFilePath+sFileName
	UA.SaveSnapshot(sFilePath)
//====================================================================================================
//******************************************************************************************************************
// getTodaysDate()
//******************************************************************************************************************
String getTodaysDate()
	%FuncInfo[Desc="This will enter security credentials in the security alert popup in IE",Group="CommonFunctions"]
	Date dt = Date.Now()
	String sDateTimeNow = dt.Format("M/d/yyyy")
	return sDateTimeNow
//*******************************************************************************************
//This will generate the Today//s Date in MM/DD/YYYY format
String getTodaysDate_mmddyyyy_format()    
	%FuncInfo[Desc="This will enter security credentials in the security alert popup in IE",Group="CommonFunctions"]
	Date dt = Date.Now()
	String sDateTimeNow = dt.Format("MM/dd/yyyy")
	return sDateTimeNow
	

String generateRandomNumber()	
	%FuncInfo[Desc="This will enter security credentials in the security alert popup in IE",Group="CommonFunctions"]
	// rndNum = DateDiff("s",CDate("1/1/1970"), Now()) * 1000
	// //LogMessage "Random Number Generated" , rndNum
	// generateRandomNumber = rndNum
	// //Error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in generateRandomNumber","Failed", Error_Description,"")
	DateTime dt = DateTime.Now()
	String rndNum = dt.Format("MMddyyyyhhmmss")
	return rndNum
	

//***************************************************************************************************************************
//@Method:  Generate_RandomNumber(randomNumber_Length)
//@Author: Sumithra
//@Date 9th july 2018
//@Description: This function is to generate random number of specic length
//Ex:  Generate_RandomNumber(10)
//***************************************************************************************************************************
String Generate_RandomNumber(Integer randomNumber_Length)
	%FuncInfo[Desc="This will enter security credentials in the security alert popup in IE",Group="CommonFunctions"]
	String sMaxVal ="", sMinVal = "",sOne="1",sZero="0",sNine="9"
	for(Integer iLoop =1; iLoop<=randomNumber_Length;iLoop++)
		if iLoop==1
			sMinVal=sOne
		else
			sMinVal=sZero
		sMinVal = sMinVal+sMinVal
	for(Integer iLoop =1; iLoop<=randomNumber_Length;iLoop++)
			sMaxVal = sMaxVal+sNine
	Real rRandomValues = Random.Generate (Integer.Parse(sMinVal),Integer.Parse(sMaxVal))
	return rRandomValues.Format()
	
// '******************************************************************************************************************* 
// '@methodName : random_AlphaSpecial_String() 
// '@Author     : Chandra 
// '@Date       : 30 July 2018 
// '@Description: This Function will get random Alphabets and Special  charaters 
//  
// 'Ex: Call random_AlphaSpecial_String(20) 
// '******************************************************************************************************************* 
String random_AlphaSpecial_String(Integer strLen) 
	String str = ""
	//'Constant String 
	const String LETTERS = "abcdefghijklmnopqrstuvwxyz,'-" 
	for (Integer i = 1 ; i<= strLen ; i++)
		 //Generate Random Character and Concatenate 
		str = str + LETTERS[Random.Generate( 1, LETTERS.Length())]
	//Error handling  
	  if GetErrorCount() > 0                  
		  writeReportLog("Failed to generate random_AlphaSpecial_String","Failed", "" ,"") 
	return str

// '******************************************************************************************************************* 
// '@methodName : random_AlphaNumeric_String() 
// '@Author     : Chandra 
// '@Date       : 30 July 2018 
// '@Description: This Function will get random Alphabets and Numeric  charaters 
//  
// 'Ex: Call random_AlphaNumeric_String(20) 
// '******************************************************************************************************************* 
String random_AlphaNumeric_String(Integer strLen) 
	String str = ""
	//'Constant String 
	const String LETTERS = "abcdefghijklmnopqrstuvwxyz0123456789" 
	for (Integer i = 1 ; i<= strLen ; i++)
		 //Generate Random Character and Concatenate 
		str = str + LETTERS[Random.Generate( 1, LETTERS.Length())]
	//Error handling  
	  if GetErrorCount() > 0                  
		  writeReportLog("Failed to generate random_AlphaNumeric_String","Failed", "" ,"") 
	return str

// '******************************************************************************************************************* 
// '@methodName : random_AlphaNumericSpecialChar_String() 
// '@Author     : Chandra 
// '@Date       : 30 July 2018 
// '@Description: This Function will get random Alphabets, Numarics and Special  charaters 
//  
// 'Ex: Call random_AlphaNumericSpecialChar_String(20) 
// '******************************************************************************************************************* 
 String random_AlphaNumeric_SplCharacter_String( Integer strLen ) 
	String str = ""
	// 'Constant String 
	const String  LETTERS = "abcdefghijklmnopqrstuvwxyz0123456789,'-" 
	for (Integer i = 1 ; i<= strLen ; i++)
		//  'Generate Random Character and Concatenate 
		str = str + LETTERS[Random.Generate( 1, LETTERS.Length())]
	// 'Error handling  
	 if GetErrorCount() > 0                  
		 writeReportLog("Failed to generate random_AlphaNumericSpecialChar_String","Failed", "" ,"") 
	return str

//***************************************************************************************************************************
//@Method:  Kill Any Process
//@Author: Jeevan
//@Date 20th july 2018
//@Description: This function is to Kill any Process running from Task Manager
//Ex:  KillProcess("UFT.exe")
//***************************************************************************************************************************
KillProcess(String sProcessName) 
	 %FuncInfo[Desc="This function will kill system process.Do not add extension with the process name.",Group="Process"] 
	 String sProcess = "Taskkill " + "/IM " + sProcessName +"*" + " /" + "F" 
	 System.Execute (sProcess)  

//**********************************************************************************************
//@methodName: Generate_RandomNumber_UserDefind(LengthOfRandomNumber)
//@Description: This function is to get random number of specified length
//@Author: Ranjitha N
//@Date 22 Aug 2018
//Ex:  Generate_RandomNumber_UserDefind("9","10")
//    msgbox Generate_RandomNumber_UserDefind("ABCDEFGHIJKLMNOPQRSTUVWXYS","10")
//***********************************************************************************************  
String Generate_RandomNumber_UserDefind(String rand_Number,String strLen )
	%FuncInfo[Desc="This function is to get random number of specified length",Group="CommonFunctions"]
	//String str
	//Constant String
	// LETTERS = rand_Number
	// for i = 1 to strLen
		// //Generate Random Character and Concatenate
		// str = str & Substring( LETTERS, RandomNumber( 1, Len( LETTERS ) ), 1 )
	// Generate_RandomNumber_UserDefind = str
	//Error handling 
	String str="",str1=""
	for (Integer iLoop = 1; iLoop<=rand_Number.Length(); iLoop++)
		if rand_Number.Length()==1
			str=rand_Number[iLoop]
			break
		else
			str1 = rand_Number[iLoop]+","
			str = str+str1
	// Print (sss)
	List<String> lsrand_Number = str.Split (",")
	str1=""
	for (Integer iLoop = 1; iLoop<=Integer.Parse(strLen); iLoop++)
		str1 =str1+ lsrand_Number.Random()
	return str1

//*****************************************************************************************************************
//@methodName: random_AlphaCharacter_String( ByVal strLen)
//@Author Ranjitha
//@Date 28 July 2018
//@Description This will generate alpha characters with required length
//Ex:  random_AlphaCharacter_String(20)
//*****************************************************************************************************************
String random_AlphaCharacter_String(Integer ByValstrLen )
	%FuncInfo[Desc="This will generate alpha characters with required length",Group="CommonFunctions"]
	String str = ""
	//Constant List of String
	const List<String> lsLETTERS = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","yz"}
	for (Integer iLoop = 1; iLoop<=ByValstrLen; iLoop++)
		str =str+ lsLETTERS.Random()
	return str

//***********************************************************************************************************************
//@methodName: changeSystemDateTime(newDate)
//@Author: Karthik
//@Date 25 Nov 2018
//@Description This will change the system date
//Ex:  changeSystemDateTime("11/10/2018")
//***********************************************************************************************************************
changeSystemDateTime(String newDate)
	%FuncInfo[Desc="This will enter security credentials in the security alert popup in IE",Group="CommonFunctions"]
	System.Execute("date {newDate}") 
	//	Set oShell = CreateObject("WScript.Shell")
	//	oShell.run "cmd.exe /C date "& newDate
	//Open Command Prompt in Admin Mode
	if GetErrorCount()>0  			
			writeReportLog("Failed to changeSystemDateTime","Failed", Error_Description ,"")

//**************************************************************************************************************************
//@Method: addDays_for_SepecifiedDate(number_of_Days_to_add,date_Value)
//@Author: Karthik
//@Date 11 Dec 2018
//@Description: This function add Months/Days to date passed to function.
//@Return Value : This function returns modified date in the format MM/DD/YYYY
//Ex: msgbox addDays_for_SepecifiedDate("d",3,"11/12/2018")
//	 msgbox addDays_for_SepecifiedDate("m",3,"11/12/2018")
//***************************************************************************************************************************
String addDays_for_SepecifiedDate(String interval,String numberToAdd,String date_Value)
	%FuncInfo[Desc="This will enter security credentials in the security alert popup in IE",Group="CommonFunctions"]
	String sDate,sMonth,sYear,sFormattedDateTime
	DateTime dtNewDateTime
	Integer iLoop = 1,iCount =0,iY,iInnerLoop,i
	if interval.ToLower() =="d"
		dtNewDateTime = DateTime.Parse ("dd/MM/yyyy", date_Value)
		dtNewDateTime = dtNewDateTime.Add (Integer.Parse(numberToAdd))
		sFormattedDateTime = dtNewDateTime.Format ("MM/dd/yyyy")
	if interval.ToLower() =="m"
		sDate = date_Value.GetField ("/", 1)
		sMonth = date_Value.GetField ("/", 2)
		sYear = date_Value.GetField ("/", 3)
		i = Integer.Parse(sMonth)+Integer.Parse(numberToAdd)
		for (iInnerLoop = 1; iInnerLoop <= 10; ++iInnerLoop)
			if i>12
				i = i-12
				iCount++// for years
				 continue
			else
				break
		iY = Integer.Parse (sYear)+iCount++
		if i== 2//for leap year
			if sDate =="29" || sDate =="30" || sDate =="31" 
				if iY % 4 == 0
					if iY % 100 != 0
						sDate="29"
					else
						sDate="28"
		sFormattedDateTime = i.Format ()+"/"+sDate+"/"+iY.Format ()
	return sFormattedDateTime
		
	// modified_Date =  DateAdd(interval,numberToAdd,date_Value)
		// //return modified date
	// addDays_for_SepecifiedDate = Right("0" & month(modified_Date),2) & "/" &  Right("0" & Day(modified_Date), 2) & "/" & year(modified_Date)
	// //Error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/: addDays_for_SepecifiedDate","Failed", Error_Description ,"")

//***********************************************************************************************************************
//@methodName: handle_Browser_DialogPopup(browserTitle,dialogTitle,buttonName)
//@Author: Chandra
//@Date 18 Mar 2019
//@Description This will handle the security alert popup in IE
//Ex:  handle_Browser_DialogPopup("NADA Used Car Guide","Security Alert","Yes")
//***********************************************************************************************************************
handle_Browser_DialogPopup(String browserTitle,String dialogTitle,String buttonName)
	%FuncInfo[Desc="This will handle the security alert popup in IE",Group="CommonFunctions"]
	if (TopWin["*{browserTitle}*"].DialogBox["*{dialogTitle}*"].PushButton["*{buttonName}*"].WaitWhileExists(15) == true )
		TopWin["*{browserTitle}*"].DialogBox["*{dialogTitle}*"].PushButton["*{buttonName}*"].Click()
	else if TopWin["*{browserTitle}*"].DialogBox["*{dialogTitle}*"].PushButton["*{buttonName}*"].WaitWhileExists(5) 
		TopWin["*{browserTitle}*"].DialogBox["*{dialogTitle}*"].PushButton["*{buttonName}*"].Click()
	//Error handling
	if GetErrorCount()>0 
		writeReportLog("Failed in handle_Browser_DialogPopup","Failed", Error_Description,"")

//*********************************************************************************************
//@methodName: formatDateWithSpecifiedDelimeter(date_Value,format)
//@Author Chandra
//@Date 19 Dec 2018
//@Description This is to get Specified date formate as YYYY DD MM 
//Ex: Result = formatDateWithSpecifiedDelimeter("12/19/2018","YYYYDDMM","/")
// 	 Result = formatDateWithSpecifiedDelimeter("12/19/2018","YYYYMMDD","-")
// 	 Result = formatDateWithSpecifiedDelimeter("12/19/2018","MMDDYYYY","-")
//*********************************************************************************************
String formatDateWithSpecifiedDelimeter(String date_Value,String dateformat,String formatSymbal)
	%FuncInfo[Desc="This is to get Specified date formate as YYYY DD MM ",Group="CommonFunctions"]
	//Get Date Based on formate like YYYYDDMM or YYYYMMDD etc	
	String RequiredDateformat
	List<String> lsDate = date_Value.Split("-")
	if dateformat.ToUpper()==("YYYYMMDD")
		RequiredDateformat = lsDate[3]+formatSymbal+lsDate[2]+formatSymbal+lsDate[1]
	else if dateformat.ToUpper()==("YYYYDDMM")
		RequiredDateformat = lsDate[3]+formatSymbal+lsDate[1]+formatSymbal+lsDate[2]
	else if dateformat.ToUpper()==("MMDDYYYY")
		RequiredDateformat = lsDate[2]+formatSymbal+lsDate[1]+formatSymbal+lsDate[3]
	return RequiredDateformat

//****************************** GENERIC FUNCTION ***********************************************
//@methodName: is_FileExists(filePath)
//@Author Chandra
//@Date 03 Jan 2018
//@Description This is to verify if the file exists in particular location
//Ex:  is_FileExists("C:\Users\ap1\Downloads\Statistics_Report.txt")
//	 is_FileExists("\\sfc-nas-1\Downloads\Statistics_Report.xlsx")	
//*********************************************************************************************
is_FileExists(String filePath)
	%FuncInfo[Desc="This is to verify if the file exists in particular location",Group="CommonFunctions"]
	//Initializing the file system objects
	Boolean is_FileExists = false
	is_FileExists = System.FileExists (filePath)
	
	if GetErrorCount()>0  			
		writeReportLog("Failed in Step/: is_FileExists ","Failed", Error_Description ,"")


//**************************************************************************************************************
//@Method get_RandomNumber_Within_Range(MinimumRange, MaximumRange)
//@Author Chandra
//@Date 06 Feb 2019
//@Description This will get the Rand Number with in Range of values( MinimumRange, MaximumRange ) 
//@Retruning the Random Number
//Ex:  get_RandomNumber_Within_Range(1, 50)
//***************************************************************************************************************
Integer get_RandomNumber_Within_Range(String MinimumRange,String MaximumRange)
	%FuncInfo[Desc="This will get the Rand Number with in Range of values( MinimumRange, MaximumRange ) ",Group="CommonFunctions"]
	Integer iRandom = Random.Generate (Integer.Parse(MinimumRange),Integer.Parse(MaximumRange))
	return iRandom
	// String iMax : iMax = MaximumRange
	// String iMin : iMin = MinimumRange
	// //get Random Number within the Range
	// Randomize
	// get_RandomNumber_Within_Range = Int(((iMax - iMin) * Rnd) + iMin)
	// //Error handling 
	// if GetErrorCount()>0  			
			// writeReportLog("Failed to get_RandomNumber_Within_Range","Failed", Error_Description ,"")
//*********************************************************************
//@methodName: isIndependentDialogExist()
//@Author Karthik
//@Date 17 July 2019
//@Description This will return the status of Independent Dialog
//EX: msgbox isIndependentDialogExist("Prepare To Scan")
//*********************************************************************
Boolean isIndependentDialogExist(String dialogName)
	%FuncInfo[Desc="This will enter security credentials in the security alert popup in IE",Group="CommonFunctions"]
	Boolean bIndependentDialogExist = DialogBox["*{dialogName}*"].WaitWhileExists(10)
	if GetErrorCount()>0 
		writeReportLog("Failed in method isIndependentDialogExist","Failed", Error_Description,"")
	return bIndependentDialogExist

//*************************************************************************
//@methodName: validate_StaticText_InIndependentDialog()
//@Author Karthik
//@Date 17 July 2019
//@Description This will valdiate for the Static Text which in Independent Dialog
//EX:  validate_StaticText_InIndependentDialog("Prepare To Scan","Prepare")
//***************************************************************************
validate_StaticText_InIndependentDialog(String dialogName,String expectedStaticText)
	%FuncInfo[Desc="This will enter security credentials in the security alert popup in IE",Group="CommonFunctions"]
	//
	if DialogBox["*{dialogName}*"].IsPresent()
	//Fetching actual Static Text
	String actStaticText = DialogBox["*{dialogName}*"].StaticText["*{expectedStaticText}*"].GetAttr("Title")
	//Validating
	validateDataAndReport(actStaticText,expectedStaticText,"Validation of Static Text in Independent Dialog " + dialogName)
	//Error Handling
	if GetErrorCount()>0 
		writeReportLog("Failed in method validate_StaticText_InIndependentDialog","Failed", Error_Description,"")

//*************************************************************************
//@methodName: clickButton_InIndependentDialog()
//@Author Karthik
//@Date 17 July 2019
//@Description This will valdiate for the Static Text which is available inside the Branch Frame
//EX:  clickButton_InIndependentDialog("Prepare To Scan","OK")
//***************************************************************************
clickButton_InIndependentDialog(String dialogName,String buttonToClick)
	%FuncInfo[Desc="This will enter security credentials in the security alert popup in IE",Group="CommonFunctions"]
	if DialogBox["*{dialogName}*"].PushButton["*{buttonToClick}*"].WaitWhileExists(5) 
		DialogBox["*{dialogName}*"].PushButton["*{buttonToClick}*"].Click()
	else if DialogBox["*{dialogName}*"].PushButton["*{buttonToClick}*"].WaitWhileExists(5) 
		DialogBox["*{dialogName}*"].PushButton["*{buttonToClick}*"].Click()
	else
		writeReportLog("Looks like Button " + buttonToClick + " is not available in Independent Dialog " + dialogName,"Failed","","")
	//Error Handling
	if GetErrorCount()>0 
		writeReportLog("Failed in method clickButton_InIndependentDialog","Failed", Error_Description,"")

//**************************************************************************************************
//@method getStateCode
//@Description this Method will Provide the State Code if we pass the StateName for the US States
//@Return State Code
//@Input State Name for which you want state Code
//@Author Karthik Shekar
//EX: msgbox getStateCode("Alabama")
//**************************************************************************************************
String getStateCode(String stateName)
	%FuncInfo[Desc="this Method will Provide the State Code if we pass the StateName for the US States",Group="CommonFunctions"]
	String getStateCode
	switch (stateName.ToUpper())
		case ("GEORGIA").ToUpper()
		case ("SOUTH CAROLINA")
			getStateCode = "SC"
		case ("NORTH CAROLINA")
			getStateCode = "NC"
		case ("VIRGINIA")
			getStateCode = "VA"
		case ("INDIAN")
			getStateCode = "IN"
		case ("OHIO")
			getStateCode = "OH"
		case ("KENTUCKY")
			getStateCode = "KY"
		case ("TENNESSEE")
			getStateCode = "TN"
		case ("ALABAMA")
			getStateCode = "AL"
		case ("FLORIDA")
			getStateCode = "FL"
		case ("TEXAS")
			getStateCode = "TX"
		default
			// writeReportLog("Looks like state code has not been defiend in function getStateCode for state " & stateName,"Failed","","")
	

//**************************************************************************************************************
//@Method get_RandomNumber_Within_Range(MinimumRange, MaximumRange)
//@Author Chandra
//@Date 06 Feb 2019
//@Description This will get the Rand Number with in Range of values( MinimumRange, MaximumRange ) 
//@Retruning the Random Number
//Ex:  get_RandomNumber_Within_Range(1, 50)
//***************************************************************************************************************
Integer get_RandomNumber_Within_Range1(String MinimumRange, String MaximumRange)
	%FuncInfo[Desc="This will get the Rand Number with in Range of values( MinimumRange, MaximumRange )",Group="CommonFunctions"]
	Integer iRandom = Random.Generate (Integer.Parse(MinimumRange),Integer.Parse(MaximumRange))
	return iRandom
	
	// String iMax : iMax = MaximumRange
	// String iMin : iMin = MinimumRange
	// //get Random Number within the Range
	// Randomize
	// get_RandomNumber_Within_Range = Int(((iMax - iMin) * Rnd) + iMin)
	//Error handling 
	if GetErrorCount()>0  			
			writeReportLog("Failed to get_RandomNumber_Within_Range","Failed", Error_Description ,"")

//*************************************************************************************************************************************************
//@Method: runSQLQuery_FetchMultipleValues_WithWarning(query, requiredFieldName)   
//@Author Sumithra
//@Date 13 Aug 2019
//@Description This function is run the SQL query to fetch multiple values with warning
//Ex: runSQLQuery_FetchMultipleValues_WithWarning(query, "loan_nbr:trans_id")   
//*************************************************************************************************************************************************
String runSQLQuery_FetchMultipleValues_WithWarning(String query,String requiredFieldNames)
	%FuncInfo[Desc="This will enter security credentials in the security alert popup in IE",Group="CommonFunctions"]
	//Variable declaration
	String conn, rs, outputString = "", sRunSQLQuery_FetchMultipleValues_WithWarning
	Database db
	List<String> lsValues, arr
	LogSuccessMessage("Test Data Get Query",query)
	//Object declaration
	// Set conn= createobject("adodb.connection")
	// set rs = createobject("adodb.recordset")
	//Connection string
	conn =  "Dsn=branch;Uid=support;Pwd=sql;"
	db.Connect(conn)
	//Executing the Query
	db.Execute(query)
	db.FetchToList(lsValues)
	//Validating for Query No Results
	if lsValues == null
		writeReportLog("Looks Like Query >> " + query +  " did not found any record","Warning", Error_Description,"")		 
		sRunSQLQuery_FetchMultipleValues_WithWarning =""
		//Exit Test and Update Summary Report
		// exitTestAndUpdateSummaryReport()
	else
		//splitting the name
		arr = requiredFieldNames.Split(";")
		for (Integer i =1; i<=lsValues.Count(); i++)
			if i != 0 
				outputString = outputString + ";"
				requiredFieldNames = lsValues[i]
				outputString = outputString + requiredFieldNames
		//Returing the Value
		sRunSQLQuery_FetchMultipleValues_WithWarning = outputString 
	db.Disconnect()
	//if Query Does not Return Any Result
	if GetErrorCount()>0 
		writeReportLog("DB column Names " + requiredFieldNames + " which you are looking is not available in the query Result; Query : " + query ,"Warning", Error_Description,"")		
	return sRunSQLQuery_FetchMultipleValues_WithWarning

//*******************************************************************************************************
//@methodName : getCurrentTimeInMilliSeconds
//@Author     : Karthik
//@Description: This will generate the Random unique number ( i.e., current time in Milli Seconds )
//Ex:  getCurrentTimeInMilliSeconds()
//*******************************************************************************************************
String getCurrentTimeInMilliSeconds()
	%FuncInfo[Desc="This will generate the Random unique number ( i.e., current time in Milli Seconds )",Group="CommonFunctions"]
	//getCurrentTimeInMilliSeconds = Day(Now)&"_"&Month(Now)&"_"&Year(Now)&"_"&Hour(Now)&"_"&Minute(Now)&"_"&Second(Now)
	DateTime dt = DateTime.Now()
	String sDateTimeNow = dt.Format("ddMMyyyyhhmmss")
	return sDateTimeNow

//*********************************************************************************************
//@methodName: SleepUntillReportLoads(Parent_Object,Object_Name,CustomReport)
//@Author Sumithra
//@Date 19 September 2019
//@Description This will Sleep untill report is loads
//Ex  SleepUntillReportLoads("ReportHeader","ReportName")
//******************************************************************************************
waitUntillReportLoads(String ParentObject,String ObjectName)
	%FuncInfo[Desc="This will Sleep untill report is loads",Group="CommonFunctions"]
	$ParentObject.$ObjectName.WaitUntilExists(20)
		
	//PbWindow(""&ParentObject&"").InsightObject(""&ObjectName&"").GetAttr( "visible",true)
	//PbWindow(""&ParentObject&"").InsightObject(""&ObjectName&"").HoverMouse	

//*****************************************************************************************
//@Method calculateEMI
//@Author Karthik.Shekar
//@Description This function will calculate the expected EMI based on the Finance Amount, Annual Interest Rate(APR) & Number of months
//@Param
//	financedAmount --> Amount Financed to Customer
//	interestRateAnnual --> Annual Interest Rate ( in decimals )
//	numOfMonths --> Number of Months for which loan has been issued
//@return This function will return the computed EMI
//EX: msgbox calculateEMI("10000","0.20","36")
//EX: msgbox calculateEMI("9000","0.19","24")
//*******************************************************************************************
calculateEMI(Real financedAmount, Real interestRateAnnual, Real numOfMonths)
	%FuncInfo[Desc="This function will calculate the expected EMI based on the Finance Amount, Annual Interest Rate(APR) & Number of months",Group="CommonFunctions"]
	//print "Data: " & financedAmount & "," & interestRateAnnual  & "," &  numOfMonths
	//On Error resume 
	Real monthlyRate = interestRateAnnual / 12
	//Actual Calculation
	Real emi = 1 + monthlyRate
	emi = Math.Pow(emi,numOfMonths)
	emi = 1 / emi
	emi = 1 - emi
	emi = emi/monthlyRate
	emi = financedAmount / emi
	emi = emi - 0.005
	//Logger
	// writeReportLog("Expected EMI is " & Round(emi,2),"Passed","Financed Amount = " &financedAmount & ";Annual Interest Rate = " & interestRateAnnual & ";Number of Months =" & numOfMonths,"")
	//Returning the calculated EMI
	//calculateEMI = formatNumber(emi)
		//calculateEMI = Round(Round(emi,3),2)
	// 	print "2nd forumla Round(Round(Round(emi,4),3),2) >>" & Round(Round(Round(emi,4),3),2)
	// 	print "1st formula Round(Round(emi,3),2) >>" & Round(Round(emi,3),2)
	// 	print "2nd forumla Round(emi,2) >>" & Round(emi,2)
	// 	print "Cdouble >> " & Round(CDbl(emi),2)
	Real calculateEMI = Math.Round(emi,2)
	//To fix to 2 decimal places without rounding;
	//calculateEMI = int(emi  * 100) / 100
	//Error handling
		if GetErrorCount()>0 
			writeReportLog("Failed in initilizeBranchPlusTest","Failed", Error_Description,"")
	

//***********************************************************************************************************************
//@methodName: identifyMonthlyClosingRequired(refDate, dueDate)
//@Author: Karthik
//@Date 29 Nov 2018
//@Description This will identify whether need to run monthly job or not
//Ex:  identifyMonthlyClosingRequired("26/11/2018", "28/11/2018")
//***********************************************************************************************************************
String identifyMonthlyClosingRequired(String refDate,String dueDate)
	%FuncInfo[Desc="This will identify whether need to run monthly job or not",Group="CommonFunctions"]
	//identify monthly closing is reqired or not
	String identifyMonthlyClosingRequired
	Integer rerYear,dueYear,rerMonth,dueMonth
	rerYear = Integer.Parse (refDate.GetField("/",3))
	dueYear = Integer.Parse (dueDate.GetField("/",3))
	rerMonth = Integer.Parse (refDate.GetField("/",2))
	dueMonth = Integer.Parse (dueDate.GetField("/",2))
	if rerYear< dueYear
		identifyMonthlyClosingRequired = "01-{dueDate.GetField("/",2)}-{dueDate.GetField("/",3)}"
	else if rerMonth <dueMonth
		identifyMonthlyClosingRequired = "01-{dueDate.GetField("/",2)}-{dueDate.GetField("/",3)}"
	else		
		identifyMonthlyClosingRequired = ""		
	return identifyMonthlyClosingRequired
		
		// if year(refDate) < year(dueDate) 	
			// identifyMonthlyClosingRequired = DateSerial(Year(dueDate),Month(dueDate),1)
		// elseif Month(refDate) < month(dueDate) 
			// identifyMonthlyClosingRequired = DateSerial(Year(dueDate),Month(dueDate),1)
		// else		
			// identifyMonthlyClosingRequired = ""		
	//Error handing
	if GetErrorCount()>0  			
		writeReportLog("Failed in Step/identifyMonthlyClosingRequired","Failed", Error_Description ,"")

String DateSerial (Integer Year, Integer Month, Integer Day)
	String sDate = "{Year}"+ "/" + "{Month}"+ "/" + "{Day}"
	return sDate

Integer Year (String date)
	Integer iYear 
	String sDate
	Date dt = Date.Parse("MM/dd/yyyy", date)
	sDate =dt.Format("MM/dd/yyyy")
	String sYear = sDate.Right(4)
	iYear = Integer.Parse(sYear)
	return iYear
	

Integer Month (String date)
	Integer iMonth 
	String sDate
	Date dt = Date.Parse("MM/dd/yyyy", date)
	sDate =dt.Format("MM/dd/yyyy")
	String sMonth = sDate.Left(2)
	iMonth = Integer.Parse(sMonth)
	return iMonth
	

String dateadd(String sDays, Integer iDays, String sDate) //"d",-1,endDate)
	Date dt, dtAddedDays
	dt = Date.Parse("MM/dd/yyyy", sDate)
	String sAddedDate = ""
	switch (sDays)
		case "d"
			dtAddedDays = dt.Add(iDays)
			sAddedDate = dtAddedDays.Format("MM/d/yyyy")
		case "dd"
			dtAddedDays = dt.Add(iDays)
			sAddedDate = dtAddedDays.Format("MM/dd/yyyy")
		case "yyyy"
			dtAddedDays = dt.Add(iDays*365)
			sAddedDate = dtAddedDays.Format("MM/dd/yyyy")
		default
			
	return sAddedDate
//**********************************************************************************
//@Method isPrimoPDFDialogExist
//@Author Karthik.Shekar
//@Date 23 Dec 2019
//@Description this function will return Ture if the Primo PDF Dialog exist else it will return false
//@Return True/False 
//EX: isPrimoPDFDialogExist()
//************************************************************************************
Boolean isPrimoPDFDialogExist()
	%FuncInfo[Desc="this function will return Ture if the Primo PDF Dialog exist else it will return false",Group="CommonFunctions"]
	Boolean isPrimoPDFDialogExist =  DialogBox["PrimoPDF"].WaitWhileExists(10)
	if GetErrorCount()>0 
		writeReportLog("Failed in isPrimoPDFDialogExist","Failed", Error_Description ,"")
	return isPrimoPDFDialogExist

//**********************************************************************************
//@Method click_CancelButton_InPrimoPDFDialog
//@Author Karthik.Shekar
//@Date 23 Dec 2019
//@Description this function will click on the Cancel Buttion in the Primo PDF Dialog
//EX: click_CancelButton_InPrimoPDFDialog()
//************************************************************************************
click_CancelButton_InPrimoPDFDialog()
	%FuncInfo[Desc="this function will click on the Cancel Buttion in the Primo PDF Dialog",Group="CommonFunctions"]
	DialogBox["PrimoPDF"].HoverMouse()
	DialogBox["PrimoPDF"].PushButton["Cancel"].Click()
	if GetErrorCount()>0 
		writeReportLog("Failed in click_CancelButton_InPrimoPDFDialog","Failed", Error_Description ,"")

String convertSingleWordToCamelCase(String myString)
	%FuncInfo[Desc="this function will click on the Cancel Buttion in the Primo PDF Dialog",Group="CommonFunctions"]
	String sCamelCase = myString.Replace(myString[1],myString[1].ToUpper())
	return sCamelCase
	
	// firstLetter=UCase(Left(mystring,1))
	// otherLetters=LCase(Right(mystring,Len(mystring)-1))
	// convertSingleWordToCamelCase = firstLetter & otherLetters	

//*****************************************************************************************************************************************
//@methodName: convert_EachWord_In_Sentence_To_CamelCase
//@Description: This function will convert the Each Word in the Sentence to Camel Case
//@Author: Karthik
//@Date 25 Aug 2020
//Ex: msgbox convert_EachWord_In_Sentence_To_CamelCase("TESTING TEH STRING to cAMEL") --> OUt put: Testing The String to Camel
//*****************************************************************************************************************************************
String convert_EachWord_In_Sentence_To_CamelCase(String myString)
	%FuncInfo[Desc="This function will convert the Each Word in the Sentence to Camel Case",Group="CommonFunctions"]
	String sSub,sCamelCase
	List<String> lsMyString = myString.Split(" ")
	for(Integer iLoop =1 ; iLoop<=lsMyString.Count(); iLoop++)
		lsMyString[iLoop] = lsMyString[iLoop].Replace (lsMyString[iLoop][1], lsMyString[iLoop][1].ToUpper())
		sSub = lsMyString[iLoop].Substring (2)
		lsMyString[iLoop] = lsMyString[iLoop].Replace (sSub, sSub.ToLower())
	sCamelCase = String.Join(lsMyString , " ")
	return sCamelCase
	
	// eachWord =Split(myString," ")
	// for itr = 0 To ubound(eachWord) Step 1
		// eachWord(itr) = convertSingleWordToCamelCase(eachWord(itr))
	// //Returning the Value
	// convert_EachWord_In_Sentence_To_CamelCase = Join(eachWord)			

//*********************************************************************************************
//@methodName: clickOn_InsightObject(Parent_Object,Object_Name,CustomReport)
//@Author Ambika
//@Date 21 Jan 2020
//@Description: This function is to clickInsight object
//Ex  clickOn_InsightObject("forms_InsightObjects","DirectLoanContract_Header","Allied website")
//******************************************************************************************
clickOn_InsightObject(String Parent_Object,String Object_Name,String CustomMsg)
	%FuncInfo[Desc="This function is to clickInsight object",Group="CommonFunctions"]
	//Validating Insight Objsect
	if TopWin["{Parent_Object}"].RenderImage["{Object_Name}"].WaitWhileExists(10) 
			//msgbox "Object Not Present in Repo"
			Print("Object Not Present in Repo")
	else
		//Highlight insight object
		TopWin["{Parent_Object}"].RenderImage["{Object_Name}"].HoverMouse()
		//click on insight object
		TopWin["{Parent_Object}"].RenderImage["{Object_Name}"].Click()			
	// else		
		// writeReportLog("Failed to clickOn_InsightObject","Failed", "","Y")	

//*****************************************************************************
//@Method getLastDayOfMonth
//@Author Karthik.Shekar
//@Date 16 April 2020
//@Description This function will return last day of the Month if we send the full date i.e., if we send "02/03/2020" then it will return "29/03/2020"
//	          or if we send "03/27/2020" then it returns "03/31/2020"
//@Return complete Date with Month end date set
//////Ex: msgbox GetNowLast("02/03/2020") --> mm/DD/yyyy format
//EX: msgbox getLastDayOfMonth(getTodaysDate_mmddyyyy_format())
//EX: msgbox getLastDayOfMonth(date())
//*****************************************************************************
String getLastDayOfMonth(String dueDate)
	%FuncInfo[Desc="This function will return last day of the Month if we send the full date i.e., if we send 02/03/2020 then it will return 29/03/2020 or if we send 03/27/2020 then it returns 03/31/2020",Group="CommonFunctions"]
	
	String sFormattedDateTime
	DateTime dtNewDateTime = DateTime.Parse ("dd/MM/yyyy", dueDate)
	Integer dYear = dtNewDateTime.GetYear()
	Integer dMonth = dtNewDateTime.GetMonth ()
	Integer dDay = dtNewDateTime.GetDay ()
	if dMonth==1 || dMonth==3 ||dMonth==5 ||  dMonth==7 || dMonth==8 ||dMonth==10 || dMonth==12
		dDay = 31
	else if dMonth==2 || dMonth==4 ||dMonth==6 ||  dMonth==9 || dMonth==11
		if dMonth==2
			if dYear % 4 == 0
				if dYear % 100 != 0
					dDay = 29
				else
					dDay = 28
			else
				dDay = 28
		else
			dDay = 30
	sFormattedDateTime = dDay.Format ()+"-"+dMonth.Format ()+"-"+dYear.Format ()
	Print (sFormattedDateTime)
	


// **********************************************************************************
// @Method: GetIPAddress
// @desc : Returns the IP address of the PC
// @params : Void
//@Author Karthik.Shekar
//@Date 06 July 2020
//@returns : IP Address
// **********************************************************************************
String GetIPAddress()
	%FuncInfo[Desc="Returns the IP address of the PC",Group="CommonFunctions"]
	// get the ip addresses
	List<String> lsDirPaths
	String sIpAdd
	System.Execute ("ipconfig", lsDirPaths)
	for(Integer iLoop=1; iLoop<=lsDirPaths.Count(); iLoop++)
		if lsDirPaths[iLoop].Contains(" IPv4 Address")
			sIpAdd = lsDirPaths[iLoop].GetField (":", 2)
			break
	return sIpAdd
	// Set IPConfigSet = GetObject("winmgmts:{impersonationLevel=impersonate}").ExecQuery _
					// ("select IPAddress from Win32_NetworkAdapterConfiguration where IPEnabled=TRUE")
	// // for each item in the collection
	// for Each IPConfig in IPConfigSet
		// // if the item isn//t empty
		// if Not IsNull(IPConfig.IPAddress) 
			// // loop through the addresses
			// for i = LBound(IPConfig.IPAddress) to UBound(IPConfig.IPAddress)
				// // set the return alue
				// ipAddr = IPConfig.IPAddress(i)
	// // destroy the object
	// Set IPConfigSet = Nothing	
	// // return the ip
	// GetIPAddress = ipAddr 


