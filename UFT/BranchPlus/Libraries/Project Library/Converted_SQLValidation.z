

//*****************************************************************************************
//@methodName : open_F7_Credit_Decision_Window()
//@Author     : Chandra
//@Date       : 26 July 2018
//@Description: This will get the Credit Decision Window
//Ex: open_F7_Credit_Decision_Window()
//*****************************************************************************************
open_F7_Credit_Decision_Window()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	BranchPlus.SetActive()
	//Navigate to choose loan type window
	 sendKeys("<F7>")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: open_F7_Credit_Decision_Window","Failed", "","Y")

//*****************************************************************************************
//@methodName : ClickOn_CancelButton_CreditDecisionWindow()
//@Author     : Chandra
//@Date       : 27 July 2018
//@Description: This will Click on Cancel Button the Credit Decision Window
//Ex: ClickOn_CancelButton_CreditDecisionWindow()
//*****************************************************************************************
ClickOn_CancelButton_CreditDecisionWindow()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 clickButton_InWindow("w_wiz_new_cust","Cancel")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: open_F7_Credit_Decision_Window","Failed", "","Y")

//*****************************************************************************************
//@methodName : Validate_CreditDecision_Step_Reference_Number()
//@Author     : Chandra
//@Date       : 27 July 2018
//@Description: This will Validate Step Number && Reference Number Credit Decision Window
//Ex: Validate_CreditDecision_Step_Reference_Number()
//*****************************************************************************************
Validate_CreditDecision_Step_Reference_Number()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String sWindowTitle 
	if BranchPlus.CreditDecision.IsPresent()
		sWindowTitle = BranchPlus.CreditDecision.GetAttr("Title")
		 writeReportLog("Validation Credit Decision Title: "+sWindowTitle,"Passed","","")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed Step/Function: Validate_CreditDecision_Step_Reference_Number","Failed", "" ,"")

//*****************************************************************************************
//@methodName : chooseLoanType_CreditDecision_Window()
//@Author     : Chandra
//@Date       : 27 July 2018
//@Description: This will Choose a Loan Type in Credit Decision Window
//Ex: chooseLoanType_CreditDecision_Window("Automobile Loan- Interest Bearing")
//*****************************************************************************************
chooseLoanType_CreditDecision_Window(String loanType)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Choosing the Type of Loan
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	if BranchPlus.CreditDecision.btnNext.WaitWhileExists(10)
	
	SetValue_PBDataWindow(crdDecision,"#1","acct_type",loanType)	
	 writeReportLog("Validation of Choose a Loan Type: "+loanType,"Passed","","")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed Step/Function: chooseLoanType_CreditDecision_Window","Failed", "" ,"")

//*****************************************************************************************
//@methodName : Validate_AutoLoan_RelevantImage_CreditDecisionWindow()
//@Author     : Chandra
//@Date       : 27 July 2018
//@Description: This will Validate Auto Loan Relevant Image in Credit Decision Window
//Ex: Validate_AutoLoan_RelevantImage_CreditDecisionWindow()
//*****************************************************************************************
Validate_AutoLoan_RelevantImage_CreditDecisionWindow()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Validate AutoLoan Relevant Image
	if BranchPlus.AutoLoan_RelevantImage.WaitWhileExists (10)
		 writeReportLog("Validation of Credit Decision Relevant Image","Passed","","")
	else
		 writeReportLog("Failed Credit Decision Relevant Image","Failed", "" ,"Y")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed Step/Function: Validate_AutoLoan_RelevantImage_CreditDecisionWindow","Failed", "" ,"")

//*****************************************************************************************
//@methodName : Validate_CONFIRM_Message_Window()
//@Author     : Chandra
//@Date       : 27 July 2018
//@Description: This will Validate CONFIRM Dailog Popup message YES, NO, Cancel && Print Buttons in Credit Decision Window
//Ex: Validate_CONFIRM_Message_Window("Yes") 
//*****************************************************************************************
Validate_CONFIRM_Message_Window(String ConfirmButton)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if BranchPlus.CreditDecision.w_message.WaitWhileExists (10)
		if ConfirmButton == "Yes" 
			BranchPlus.CreditDecision.w_message.Yes.Click()
			//Validate Error popup message
			 Validate_ErrorPopup_Title_Message()
		else if ConfirmButton == "No" 
			BranchPlus.CreditDecision.w_message.No.Click()
		else if ConfirmButton == "Cancel" 
			BranchPlus.CreditDecision.w_message.Cancel.Click()
		else if ConfirmButton == "Print" 
			BranchPlus.CreditDecision.w_message.Print.Click()
			 writeReportLog("Validation of Printer was successful","Passed","","Y")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Validate_CONFIRM_Message_Window","Failed", "","Y")

//*****************************************************************************************
//@methodName : Validate_ErrorPopup_Title_Message()
//@Author     : Chandra
//@Date       : 27 July 2018
//@Description: This will Validate Error Popup Title, message && Click on OK Button in Credit Decision Window
//Ex: Validate_ErrorPopup_Title_Message() 
//*****************************************************************************************
Validate_ErrorPopup_Title_Message()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String ErrorPopupTitle, ErrorPopupMessage
	if BranchPlus.CreditDecision.w_message.TextField[1].WaitWhileExists (10)
		//Get the Error Popup Title
		ErrorPopupTitle = BranchPlus.CreditDecision.w_message.GetAttr("Title")
		//Get the Error Popup Message
		ErrorPopupMessage = BranchPlus.CreditDecision.w_message.TextField[1].GetAttr("Text")
		 writeReportLog("Validation of Error Title: "+ ErrorPopupTitle +" with Popup Message: "+ErrorPopupMessage,"Passed","","Yes")
		//Click OK Button
		BranchPlus.CreditDecision.w_message.OK.Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Validate_ErrorPopup_Title_Message","Failed", "","Y")

//*****************************************************************************************
//@methodName : get_InterestType_CreditDecision()
//@Author     : Ranjitha
//@Date       : 27 July 2018
//@Description: This will fetch Interest type value in Credit Decision Window
//Ex:  get_InterestType_CreditDecision()
//*****************************************************************************************
 String get_InterestType_CreditDecision()
	String sGet_InterestType_CreditDecision
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	//Get Interest type
	if BranchPlus.CreditDecision.tbldwStep.WaitWhileExists(10)
		sGet_InterestType_CreditDecision = GetValue_PBDataWindow(crdDecision,"#1","int_type")
	//Error Handling
	return sGet_InterestType_CreditDecision
 
//*****************************************************************************************
//@methodName : selectDealerInfo_CreditDecisionWindow(dealerInfo)
//@Author     : Ranjitha
//@Date       : 27 July 2018
//@Description: This will select Dealer value in Credit Decision Window
//Ex:  selectDealerInfo_CreditDecisionWindow(dealerInfo)
//***************************************************************************************** 
selectDealerInfo_CreditDecisionWindow1(String dealerInfo)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//select dealer
	BranchPlus.CreditDecision.tbldwStep.WaitWhileExists(10)
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	SetValue_PBDataWindow(crdDecision,"#1","dealer_id",dealerInfo)	
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to selectDealerInfo_CreditDecisionWindow","Failed", "" ,"")

//*****************************************************************************************
//@methodName : select_Representative_CreditDecisionWindow(representName)
//@Author     : Ranjitha
//@Date       : 27 July 2018
//@Description: This will select representative value in Credit Decision Window
//Ex: select_Representative_CreditDecisionWindow("Finance  Dept")
//*****************************************************************************************
select_Representative_CreditDecisionWindow(String representName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject PbTable = BranchPlus.CreditDecision.tbldwStep
	 TypeText_PBDataWindow(PbTable,"#1","dealer_rep_id",representName)
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/select_Representative_CreditDecisionWindow","Failed", "","")

//*****************************************************************************************
//@methodName : validate_WindowName_CreditDecision(windowName)
//@Author     : Ranjitha
//@Date       : 27 July 2018
//@Description: This will validate the window name in Credit Decision Window
//Ex: validate_WindowName_CreditDecision("dealer")
//*****************************************************************************************
validate_WindowName_CreditDecision(String windowName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String Step_Reference_Number, StepNum, Step_Number = ""
	List <String> lsSplit_StepNum
	if BranchPlus.CreditDecision.u_wiz_cust_.WaitWhileExists (10)
		//Getting Step Number for validation purpose
		Step_Reference_Number = BranchPlus.CreditDecision.GetAttr("Title")
		lsSplit_StepNum = Step_Reference_Number.Split(" ")
		for(Integer itr=1; itr<=5; itr++)
			StepNum = lsSplit_StepNum[itr]
			Step_Number = Step_Number +" "+ StepNum
		 writeReportLog("Validation of "+ Step_Number+ " window is displayed","Passed","","")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to validate_WindowName_CreditDecision","Failed", "" ,"")

//*****************************************************************************************
//@methodName : clickOnBackButton_CreditDecisionWindow()
//@Author     : Ranjitha
//@Date       : 27 July 2018
//@Description: This will Click on Back button in Credit Decision Window
//Ex: clickOnBackButton_CreditDecisionWindow()
//*****************************************************************************************
clickOnBackButton_CreditDecisionWindow()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//click on next
	BranchPlus.CreditDecision.btnBack.Click()
	Sleep (2)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to clickOnBackButton_CreditDecisionWindow","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: enter_ApplicantZipCode_CreditDecision(zipcode)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter zip code value in Applicant Address window
//Ex:  enter_ApplicantZipCode_CreditDecision(zipcode)
//*****************************************************************************************************************
enter_ApplicantZipCode_CreditDecision(String zipcode)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Applicant Address
	 waitTillCreditDecisionLoads("STEP 6")
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	//AppObject Address 1
	SetValue_PBDataWindow(crdDecision,"#1","zipcode",zipcode)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enter_ApplicantZipCode_CreditDecision","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: enter_ApplicantCity_CreditDecision(city)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter city name in Applicant Address window
//Ex:  enter_ApplicantCity_CreditDecision(city)
//*****************************************************************************************************************
enter_ApplicantCity_CreditDecision(String city)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Applicant Address
	 waitTillCreditDecisionLoads("STEP 6")
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	//AppObject Address 1
	SetValue_PBDataWindow(crdDecision,"#1","city",city)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enter_ApplicantCity_CreditDecision","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: enter_ApplicantAddress1_CreditDecision(add3Name)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter Address1 in Applicant Address window
//Ex:  enter_ApplicantAddress1_CreditDecision(add3Name)
//*****************************************************************************************************************
enter_ApplicantAddress1_CreditDecision(String add1Name)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Applicant Address
	 waitTillCreditDecisionLoads("STEP 6")
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	//AppObject Address 1
	SetValue_PBDataWindow(crdDecision,"#1","addr1",add1Name)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enter_ApplicantAddress1_CreditDecision","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: enter_ApplicantAddress2_CreditDecision(add3Name)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter Address2 in Applicant Address window
//Ex:  enter_ApplicantAddress2_CreditDecision(add3Name)
//*****************************************************************************************************************
enter_ApplicantAddress2_CreditDecision(String add2Name)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Applicant Address
	 waitTillCreditDecisionLoads("STEP 6")
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	//AppObject Address 1
	SetValue_PBDataWindow(crdDecision,"#1","addr2",add2Name)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enter_ApplicantAddress2_CreditDecision","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: enter_ApplicantAddress3_CreditDecision(add3Name)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter Address3 in Applicant Address window
//Ex:  enter_ApplicantAddress3_CreditDecision(add3Name)
//*****************************************************************************************************************
enter_ApplicantAddress3_CreditDecision(String add3Name)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Applicant Address
	 waitTillCreditDecisionLoads("STEP 6")
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	//AppObject Address 1
	SetValue_PBDataWindow(crdDecision,"#1","addr3",add3Name)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enter_ApplicantAddress3_CreditDecision","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: enter_StreetAdd_USPSWindow_CreditDecision(streetadd1)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter street address in USPS Address window
//Ex:  enter_StreetAdd_USPSWindow_CreditDecision(streetadd1)
//*****************************************************************************************************************
enter_StreetAdd_USPSWindow_CreditDecision(String streetadd)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if BranchPlus.CreditDecision.USPS_Window.WaitWhileExists(5) 
		BranchPlus.CreditDecision.USPS_Window.Txt_SLEStreet.SetValue( streetadd)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enter_StreetAdd_USPSWindow_Credit","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: enter_StreetAdd1_USPSWindow_CreditDecision(streetadd1)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter street address1 in USPS Address window
//Ex:  enter_StreetAdd1_USPSWindow_CreditDecision(streetadd1)
//*****************************************************************************************************************
enter_StreetAdd1_USPSWindow_CreditDecision(String streetadd1)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if BranchPlus.CreditDecision.USPS_Window.WaitWhileExists(5) 
		BranchPlus.CreditDecision.USPS_Window.Txt_SLEStreet1.SetValue( streetadd1)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enter_StreetAdd1_USPSWindow_CreditDecision","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: enter_City_USPSWindow_CreditDecision(city)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter city name in USPS Address window
//Ex:  enter_City_USPSWindow_CreditDecision(city)
//*****************************************************************************************************************
enter_City_USPSWindow_CreditDecision(String city)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if BranchPlus.CreditDecision.USPS_Window.WaitWhileExists(5) 
		BranchPlus.CreditDecision.USPS_Window.Txt_SLECity.SetValue( city)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enter_City_USPSWindow_CreditDecision","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: get_FieldValue_USPSwindow(fieldName)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will fetch field value in USPS Address window
//Ex:  get_FieldValue_USPSwindow("sle_street")
//*****************************************************************************************************************
String get_FieldValue_USPSwindow(String fieldName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String sGet_FieldValue_USPSwindow, get_FieldValue_USPSwindow
	if BranchPlus.CreditDecision.USPS_Window.$fieldName.WaitWhileExists(5) 
		get_FieldValue_USPSwindow = BranchPlus.CreditDecision.USPS_Window.$fieldName.GetAttr("Text")
		sGet_FieldValue_USPSwindow = get_FieldValue_USPSwindow
	 //Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_FieldValue_USPSwindow","Failed", "" ,"")
	return sGet_FieldValue_USPSwindow

//*****************************************************************************************************************
//@methodName: enter_Homephone_CreditDecision(phone1)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter Home phone  in Applicant Address window
//Ex:  enter_Homephone_CreditDecision(phone1)
//*****************************************************************************************************************
enter_Homephone_CreditDecision(String phone1)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	SetValue_In_PBDataWindow_DP("dw_step","#1","phone1",phone1)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: enter_Homephone_CreditDecision","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: enter_Cellphone_CreditDecision(phone2)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter Cell phone  in Applicant Address window
//Ex:  enter_Cellphone_CreditDecision(phone2)
//*****************************************************************************************************************
enter_Cellphone_CreditDecision(String phone2)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	SetValue_In_PBDataWindow_DP("dw_step","#1","phone2",phone2)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: enter_Cellphone_CreditDecision","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: enter_Otherphone_CreditDecision(phone3)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter Otehr phone  in Applicant Address window
//Ex:  enter_Otherphone_CreditDecision(phone3)
//*****************************************************************************************************************
enter_Otherphone_CreditDecision(String phone3)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	SetValue_In_PBDataWindow_DP("dw_step","#1","phone3",phone3)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: enter_Otherphone_CreditDecision","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: Verification_of_Address1_ApplicantAddressWindow(ID)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Address1 field in Applicant Address window
//Ex:  Verification_of_Address1_ApplicantAddressWindow(ID)
//*****************************************************************************************************************
Verification_of_Address1_ApplicantAddressWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String getValueLength
	if System.GetEnvVar("FV_Flag") == "Y" 
		//*********************
		//Field Validation
		//*********************
		//Validate the Error pop to choose auto dealer
		 Validate_ErrorPopup_Title_Message()
		//Enter Address1 with more than 30 chraracters
		 enter_ApplicantAddress1_CreditDecision(random_AlphaNumeric_SplCharacter_String(12))
		//	//Get the Length of Entered value in Address1 field
		//	getValueLength = Len(getValue_In_PBDataWindow_DP("dw_step","#1","addr1"))
		//	//Comparing the Length of accepting characters 
		//	if getValueLength.Length() == 40
		//		 writeReportLog("Validation of Address1 field is not Accepting Alphabets && Special characters","Passed","","")
		//	else
		//		 writeReportLog("Failed : Address1 is Accepting Alphabets && Special characters: "+getValueLength,"Failed", "" ,"")
		//	
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter Address1 with less than 30 chraracters with only alphabets
		 enter_ApplicantAddress1_CreditDecision(random_AlphaNumeric_String(42))
		//Get the Length of Entered value in Address1 field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "addr1")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 40
			 writeReportLog("Validation of Address1 field is Accepting only 40 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : Address1 field is Accepting More than 40 characters","Failed", "" ,"")
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Click on Reset button
		 Click_Reset_ApplicantAddresswindow()
	//*********************
	//Work Flow
	//*********************
	//Enter Address1 with valid data
	String Address1 = random_AlphaCharacter_String(40)
	 enter_ApplicantAddress1_CreditDecision(Address1)
	 sendKeys("<TAB>")
	String sGetValue= getValue_In_PBDataWindow_DP("dw_step","#1", "addr1")
	Integer igetValueLength= sGetValue.Length()
	//Updated Address1 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "addr1","branchplusqa.bp_applicantaddress","address1",ID)
	 writeReportLog("Entered Address1 value: "+ Address1 +" in Applicant Address window (UI-{igetValueLength} DB-40)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Address1_ApplicantAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Address2_ApplicantAddressWindow(ID)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Address2 field in Applicant Address window
//Ex:  Verification_of_Address2_ApplicantAddressWindow(ID)
//*****************************************************************************************************************
Verification_of_Address2_ApplicantAddressWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String getValueLength
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter Address2 with more than 30 chraracters
		 enter_ApplicantAddress2_CreditDecision(random_AlphaNumeric_SplCharacter_String(42))
		//	//Get the Length of Entered value in Address2 field
		//	getValueLength = Len(getValue_In_PBDataWindow_DP("dw_step","#1", "addr2"))
		//	//Comparing the Length of accepting characters 
		//	if getValueLength.Length() == 40
		//		 writeReportLog("Validation of Address2 field is is not Accepting Alphabets && Special characters","Passed","","")
		//	else
		//		 writeReportLog("Failed : Address2 is Accepting Alphabets && Special characters: "+getValueLength,"Failed", "" ,"")
		//	
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter Address2 with less than 30 chraracters with only alphabets
		 enter_ApplicantAddress2_CreditDecision(random_AlphaNumeric_String(42))
		//Get the Length of Entered value in Address2 field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "addr2")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 40
			 writeReportLog("Validation of Address2 field is Accepting only 40 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : Address2 field is not Accepting More than 40 characters","Failed", "" ,"")
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Address2 with valid data
	String Address2 = random_AlphaCharacter_String(40)
	 enter_ApplicantAddress2_CreditDecision(Address2)
	 sendKeys("<TAB>")
	 getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "addr2")
	//Updated Address2 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "addr2","branchplusqa.bp_applicantaddress","address2",ID)
	 writeReportLog("Entered Address2 value: "+ Address2 +" in Applicant Address window (UI-"+"{getValueLength.Length()}"+",DB-40)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Address2_ApplicantAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Address3_ApplicantAddressWindow(ID)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Address3 field in Applicant Address window
//Ex:  Verification_of_Address3_ApplicantAddressWindow(ID)
//*****************************************************************************************************************
Verification_of_Address3_ApplicantAddressWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String getValueLength
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter Address3 with more than 30 chraracters
		 enter_ApplicantAddress3_CreditDecision(random_AlphaNumeric_SplCharacter_String(42))
		//	//Get the Length of Entered value in Address3 field
		//	getValueLength = Len(getValue_In_PBDataWindow_DP("dw_step","#1", "addr3"))
		//	//Comparing the Length of accepting characters 
		//	if getValueLength.Length() == 40
		//		 writeReportLog("Validation of Address3 field is Accepting only 30 characters: "+getValueLength,"Passed","","")
		//	else
		//		 writeReportLog("Failed : Address3 field is not Accepting More than 30 characters","Failed", "" ,"")
		//	
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter Address3 with less than 30 chraracters with only alphabets
		 enter_ApplicantAddress3_CreditDecision(random_AlphaNumeric_String(42))
		//Get the Length of Entered value in Addres3 field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "addr3")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 40
			 writeReportLog("Validation of Address3 field is Accepting only 40 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : Address3 field is not Accepting More than 40 characters","Failed", "" ,"")
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//*************************
	//Work Flow
	//*************************
	//Enter Address3 with valid data
	String Address3 = random_AlphaCharacter_String(40)
	 enter_ApplicantAddress3_CreditDecision(Address3)
	 sendKeys("<TAB>")
	getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "addr3")
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "addr3","branchplusqa.bp_applicantaddress","address3",ID)
	 writeReportLog("Entered Address3 value: "+ Address3 +" in Applicant Address window (UI-"+"{getValueLength.Length()}"+",DB-40)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Address3_ApplicantAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_City_ApplicantAddressWindow(city)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the City field in Applicant Address window
//Ex:  Verification_of_City_ApplicantAddressWindow(city)
//*****************************************************************************************************************
Verification_of_City_ApplicantAddressWindow(String city)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter City with more than 6 chraracters
		 enter_ApplicantCity_CreditDecision(random_AlphaNumeric_SplCharacter_String(32))
	//	//Get the Length of Entered value in City field
	//	getValueLength = Len(getValue_In_PBDataWindow_DP("dw_step","#1", "city"))
	//	//Comparing the Length of accepting characters 
	//	if getValueLength.Length() == 30 
	//		 writeReportLog("Validation of City field is Accepting only 30 characters: "+getValueLength,"Passed","","")
	//	else
	//		 writeReportLog("Failed : City field is not Accepting More than 30 characters","Failed", "" ,"")
	//	
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter City with more than 30 characters with only alphabets
		 enter_ApplicantCity_CreditDecision(random_AlphaNumeric_String(32))
		//Get the Length of Entered value in city field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "city")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 30 
			 writeReportLog("Validation of City field is Accepting only 30 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : City field is not Accepting More than 30 characters","Failed", "" ,"")
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//******************************
	//Work Flow
	//******************************
	//Enter City with valid data
	 enter_ApplicantCity_CreditDecision(city)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_City_ApplicantAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ZipCode_ApplicantAddressWindow(zipcode)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Zip Code field in Applicant Address window
//Ex:  Verification_of_ZipCode_ApplicantAddressWindow(zipcode)
//*****************************************************************************************************************
Verification_of_ZipCode_ApplicantAddressWindow(String zipcode)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//	//Enter Zip code with more than 6 chraracters
		//	 enter_ApplicantZipCode_CreditDecision(random_AlphaCharacter_String(5))
		//
		//	//Get the Length of Entered value in zip code field
		//	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "zipcode")
		//	//Comparing the Length of accepting characters 
		//	if getValueLength.Length() =="" 
		//		 writeReportLog("Validation of Zip Code field is not Accepting characters","Passed","","")
		//	else
		//		 writeReportLog("Failed : Zip Code field is Accepting characters: "+getValueLength,"Failed", "" ,"")
		//	
		//	
		//	//Click on  button
		//	 clickOnButton_CreditDecisionWindow()
		//	 handleUSPSWindow()
		//	
		//	//Click on back button
		//	 clickOnBackButton_CreditDecisionWindow()
		//Enter Zip Code with 10 digits 
		 enter_ApplicantZipCode_CreditDecision("{Generate_RandomNumber(10)}")
		//Get the Length of Entered value in zip code field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "zipcode")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 9 
			 writeReportLog("Validation of Zip Code field is Accepting only 9 digits","Passed","","")
		else
			 writeReportLog("Failed : Zip Code field is not Accepting more than 9 digits: "+getValueLength,"Failed", "" ,"")
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
	//	//Click on back button
	//	 clickOnBackButton_CreditDecisionWindow()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//********************
	//Work Flow
	//*********************
	//Enter Zip Code with valid data
	 enter_ApplicantZipCode_CreditDecision(zipcode)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ZipCode_ApplicantAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_HomePhone_ApplicantAddressWindow(ID)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Home Phone field in Applicant Address window
//Ex:  Verification_of_HomePhone_ApplicantAddressWindow(ID)
//*****************************************************************************************************************
Verification_of_HomePhone_ApplicantAddressWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String getValueLength
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//*********************
	//		//Field Validation
	//		//*********************
	//		//Click on  button
	//	//	 clickOnButton_CreditDecisionWindow()
	//	//	 handleUSPSWindow()
	//	//	 handleUSPSWindow_CoApplicant()
	//	//	 handleUSPSWindow_CoApplicant()
	//	//	
	//	//	//Click on back button
	//	//	 clickOnBackButton_CreditDecisionWindow()
	//		
	//	//	//Enter Home Phone with chraracters
	//	//	 enter_Homephone_CreditDecision(random_AlphaCharacter_String(10))
	//	//	
	//	//	//Get the Length of Entered value in home phone field
	//	//	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "phone1")
	//	//	//Comparing the Length of accepting characters 
	//	//	if getValueLength.Length() =="" 
	//	//		 writeReportLog("Validation of Home Phone field is not Accepting characters","Passed","","")
	//	//	else
	//	//		 writeReportLog("Failed : Home Phone field is Accepting characters: "+getValueLength,"Failed", "" ,"")
	//	//	
	//	//	
	//	//	//Click on  button
	//	//	 clickOnButton_CreditDecisionWindow()
	//	//	 handleUSPSWindow()
	//	//	
	//	//	//Click on back button
	//	//	 clickOnBackButton_CreditDecisionWindow()
	//		
	//		//Enter Home Phone with more than 10 digits
	//		 enter_Homephone_CreditDecision(Generate_RandomNumber(11))
	//		
	//		//Get the Length of Entered value in home phone field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "phone1")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==10 
	//			 writeReportLog("Validation of Home Phone field is Accepting only 10 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : Home Phone field is Accepting more than 10 digits: "+getValueLength,"Failed", "" ,"")
	//		
	//		
	//		//Click on  button
	//	//	 clickOnButton_CreditDecisionWindow()
	//	//	 handleUSPSWindow()
	//	//	 handleUSPSWindow_CoApplicant()
	//	//	 handleUSPSWindow_CoApplicant()
	//	//	
	//	//	//Click on back button
	//	//	 clickOnBackButton_CreditDecisionWindow()
	//	
	//******************
	//Work Flow
	//******************
	//Enter Home Phone with valid 10 digit characters
	String phone1 = Generate_RandomNumber(10)
	 enter_Homephone_CreditDecision(phone1)
	 sendKeys("<TAB>")
	getValueLength =getValue_In_PBDataWindow_DP("dw_step","#1", "phone1")
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "phone1","branchplusqa.bp_applicantaddress","homephone",ID)
	 writeReportLog("Entered Home Phone value: "+ phone1 +" in Applicant Address window (UI-"+"{getValueLength.Length()}"+",DB-10)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_HomePhone_ApplicantAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_CellPhone_ApplicantAddressWindow(ID)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Cell Phone field in Applicant Address window
//Ex:  Verification_of_CellPhone_ApplicantAddressWindow(ID)
//*****************************************************************************************************************
Verification_of_CellPhone_ApplicantAddressWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//*********************
	//		//Field Validation
	//		//*********************
	//		//Click on  button
	//	//	 clickOnButton_CreditDecisionWindow()
	//	//	 handleUSPSWindow()
	//	//	 handleUSPSWindow_CoApplicant()
	//	//	 handleUSPSWindow_CoApplicant()
	//	//	
	//	//	//Click on back button
	//	//	 clickOnBackButton_CreditDecisionWindow()
	//		
	//	//	//Enter Cell Phone with chraracters
	//	//	 enter_Cellphone_CreditDecision(random_AlphaCharacter_String(10))
	//	//	
	//	//	//Get the Length of Entered value in cell phone field
	//	//	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "phone2")
	//	//	//Comparing the Length of accepting characters 
	//	//	if getValueLength.Length() =="" 
	//	//		 writeReportLog("Validation of Cell Phone field is not Accepting characters","Passed","","")
	//	//	else
	//	//		 writeReportLog("Failed : Cell Phone field is Accepting characters: "+getValueLength,"Failed", "" ,"")
	//	//	
	//	//	
	//	//	//Click on  button
	//	//	 clickOnButton_CreditDecisionWindow()
	//	//	 handleUSPSWindow()
	//	//	
	//	//	//Click on back button
	//	//	 clickOnBackButton_CreditDecisionWindow()
	//		
	//		//Enter Cell Phone with more than 10 digits
	//		 enter_Cellphone_CreditDecision(Generate_RandomNumber(11))
	//		
	//		//Get the Length of Entered value in cell phone field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "phone2")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==10 
	//			 writeReportLog("Validation of Cell Phone field is Accepting only 10 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : Cell Phone field is Accepting more than 10 digits: "+getValueLength,"Failed", "" ,"")
	//		
	//		
	//	//	//Click on  button
	//	//	 clickOnButton_CreditDecisionWindow()
	//	//	 handleUSPSWindow()
	//	//	 handleUSPSWindow_CoApplicant()
	//	//	 handleUSPSWindow_CoApplicant()
	//	//	
	//	//	//Click on back button
	//	//	 clickOnBackButton_CreditDecisionWindow()
	//	
	//**********************
	//Work Flow
	//**********************
	//Enter Cell Phone with valid 10 digit characters
	String phone2 = Generate_RandomNumber(10)
	 enter_Cellphone_CreditDecision(phone2)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "phone2")
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "phone2","branchplusqa.bp_applicantaddress","cellphone",ID)
	 writeReportLog("Entered Cell Phone value: "+ phone2 +" in Applicant Address window (UI-"+"{getValueLength.Length()}"+",DB-10)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_CellPhone_ApplicantAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_OtherPhone_ApplicantAddressWindow(ID)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Other Phone field in Applicant Address window
//Ex:  Verification_of_OtherPhone_ApplicantAddressWindow(ID)
//*****************************************************************************************************************
Verification_of_OtherPhone_ApplicantAddressWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//*********************
	//		//Field Validation
	//		//*********************
	//		//Click on  button
	//	//	 clickOnButton_CreditDecisionWindow()
	//	//	 handleUSPSWindow()
	//	//	 handleUSPSWindow_CoApplicant()
	//	//	 handleUSPSWindow_CoApplicant()
	//	//	
	//	//	//Click on back button
	//	//	 clickOnBackButton_CreditDecisionWindow()
	//	//	
	//	//	//Enter Other Phone with chraracters
	//	//	 enter_Otherphone_CreditDecision(random_AlphaCharacter_String(10))
	//	//	
	//	//	//Get the Length of Entered value in Other phone field
	//	//	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "phone3")
	//	//	//Comparing the Length of accepting characters 
	//	//	if getValueLength.Length() =="" 
	//	//		 writeReportLog("Validation of Other Phone field is not Accepting characters","Passed","","")
	//	//	else
	//	//		 writeReportLog("Failed : Other Phone field is Accepting characters: "+getValueLength,"Failed", "" ,"")
	//	//	
	//	//	
	//	//	//Click on  button
	//	//	 clickOnButton_CreditDecisionWindow()
	//	//	 handleUSPSWindow()
	//	//	
	//	//	//Click on back button
	//	//	 clickOnBackButton_CreditDecisionWindow()
	//		
	//		//Enter Other Phone with more than 10 digits
	//		 enter_Otherphone_CreditDecision(Generate_RandomNumber(11))
	//			
	//		//Get the Length of Entered value in other phone field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "phone3")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==10 
	//			 writeReportLog("Validation of Other Phone field is Accepting only 10 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : Other Phone field is Accepting more than 10 digits: "+getValueLength,"Failed", "" ,"")
	//		
	//			
	//		//Click on  button
	//	//	 clickOnButton_CreditDecisionWindow()
	//	//	 handleUSPSWindow()
	//	//	 handleUSPSWindow_CoApplicant()
	//	//	 handleUSPSWindow_CoApplicant()
	//	//	
	//	//	//Click on back button
	//	//	 clickOnBackButton_CreditDecisionWindow()
	//	
	//*************************
	//Work Flow
	//*************************
	//Enter Other Phone with valid 10 digit characters
	String phone3 = Generate_RandomNumber(10)
	 enter_Otherphone_CreditDecision(phone3)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "phone3")
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "phone3","branchplusqa.bp_applicantaddress","otherphone",ID)
	 writeReportLog("Entered Other Phone value: "+ phone3 +" in Applicant Address window (UI-"+"{getValueLength.Length()}"+",DB-10)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_OtherPhone_ApplicantAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_data_USPSAddressWindow()
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will validate the data in USPS Address window
//Ex:  Verification_of_data_USPSAddressWindow()
//*****************************************************************************************************************
Verification_of_data_USPSAddressWindow()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Click on  button
	 clickOnButton_CreditDecisionWindow()
	 handleUSPSWindow()
	 handleUSPSWindow_CoApplicant()
	 handleUSPSWindow_CoApplicant()
	//Validate Error pop up
	 Validate_ErrorPopup_Title_Message()
	if BranchPlus.CreditDecision.u_wiz_cust_emplmt1.WaitWhileExists (10)
		//Click on back button
		 clickOnBackButton_CreditDecisionWindow()
	//	if BranchPlus.CreditDecision.PbObject("pbname:=dw_step").WaitWhileExists (10)
	//		//Click on back button
	//		 clickOnBackButton_CreditDecisionWindow()
	String sEnvAdd1, sEnvAdd2, sCity, sZip, sSteetAdd1USPS, sSteetAdd2USPS, sCity_USPS, sZip_USPS
	sEnvAdd1 = getValue_In_PBDataWindow_DP("dw_step","#1","addr1").ToUpper()
	sEnvAdd2 = getValue_In_PBDataWindow_DP("dw_step","#1","addr2").ToUpper()
	sCity = getValue_In_PBDataWindow_DP("dw_step","#1","city").ToUpper()
	sZip = getValue_In_PBDataWindow_DP("dw_step","#1","zipcode")
	sZip =sZip.Replace(" ","")
	//Click on  button 
	 clickOnButton_CreditDecisionWindow()
	sSteetAdd1USPS = get_FieldValue_USPSwindow("sle_street").ToUpper()
	sSteetAdd2USPS = get_FieldValue_USPSwindow("sle_street_1").ToUpper()
	sCity_USPS = get_FieldValue_USPSwindow("sle_city").ToUpper()
	sZip_USPS= get_FieldValue_USPSwindow("em_zip5")
	sZip_USPS = sZip_USPS.Replace(" ","")
	 validateDataAndReport(sSteetAdd1USPS,sEnvAdd1,"Validation of Address1 field in USPS window :"+sSteetAdd1USPS+ " && Applicant Address window :"+sEnvAdd1)
	 validateDataAndReport(sSteetAdd2USPS,System.GetEnvVar("add2"),"Validation of Address2 field in USPS window :"+sSteetAdd2USPS+ " && Applicant Address window :"+sEnvAdd1)
	 validateDataAndReport(sCity_USPS,sCity,"Validation of City field in USPS window :"+sCity_USPS+ " && Applicant Address window :"+sCity)
	 validateDataAndReport(sZip_USPS,sZip,"Validation of Zip Code field in USPS window :"+sZip_USPS+ " && Applicant Address window :"+sZip)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_data_USPSAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Validation_of_ShowOriginal_Button_USPSAddressWindow(buttonName)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will validate the Show Original button functionality in USPS Address window
//Ex:  Validation_of_ShowOriginal_Button_USPSAddressWindow(buttonName)
//*****************************************************************************************************************
Validation_of_ShowOriginal_Button_USPSAddressWindow(String buttonName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String sEnvAdd1, sEnvAdd2, sCity, sZip, sSteetAdd1USPS, sSteetAdd2USPS, sCity_USPS, sZip_USPS
	
	 enter_StreetAdd_USPSWindow_CreditDecision(random_AlphaNumeric_String(10))
	 enter_StreetAdd1_USPSWindow_CreditDecision(random_AlphaNumeric_String(10))
	 enter_City_USPSWindow_CreditDecision(random_AlphaNumeric_String(10))
	 click_Button_InWindow_DP("w_wiz_new_cust","w_usps_addressverification",buttonName)
	 validateDataAndReport(System.GetEnvVar("streetadd1_USPS"),System.GetEnvVar("add1"),"Validation of Address1 field in USPS window :"+System.GetEnvVar("streetadd1_USPS")+ " && Applicant Address window :"+System.GetEnvVar("add1"))
	 validateDataAndReport(sSteetAdd2USPS,System.GetEnvVar("add2"),"Validation of Address2 field in USPS window :"+sSteetAdd2USPS+ " && Applicant Address window :"+System.GetEnvVar("add2"))
	 validateDataAndReport(sCity_USPS,sCity,"Validation of City field in USPS window :"+sCity_USPS+ " && Applicant Address window :"+sCity)
	//Click on Use Address Above button
	 handleUSPSWindow()
	 handleUSPSWindow_CoApplicant()
	 handleUSPSWindow_CoApplicant()
	 Validate_ErrorPopup_Title_Message()
	if BranchPlus.CreditDecision.u_wiz_cust_emplmt1.WaitWhileExists (10)
		//Click on back button
		 clickOnBackButton_CreditDecisionWindow()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Validation_of_ShowOriginal_Button_USPSAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Validation_of_CreditCheck_Window(outputType)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will validate the data in Credit Check window
//Ex  Validation_of_CreditCheck_Window("Persona Plus")
//******************************************************************************************************************
Validation_of_CreditCheck_Window(String outputType)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String lName, fName, ssn_crdtwndw, city_crdtwndw, zipcode_crdtwndw
	//Click on Credit OK button
	 Click_Applicant_Credit_Check()
	//Select bureau id && output type
	 select_CreditBureau_CreditCheckWindow("EQUIFAX")
	 select_OutputType_CreditCheckWindow(outputType)
	//Validate data in credit Check window
	lName = getValue_CreditCheckWindow("last_name").ToUpper()
	fName = getValue_CreditCheckWindow("first_name").ToUpper()
	ssn_crdtwndw = getValue_CreditCheckWindow("ssn")
	city_crdtwndw = getValue_CreditCheckWindow("city").ToUpper()
	zipcode_crdtwndw = getValue_CreditCheckWindow("zipcode")
	 validateDataAndReport(lName,System.GetEnvVar("lastName"),"Validation of Last Name in Credit Check window :"+lName+ " && in Applicant Address window :"+System.GetEnvVar("lastName"))
	 validateDataAndReport(fName,System.GetEnvVar("firstName"),"Validation of First Name in Credit Check window :"+fName+ " && in Applicant Address window :"+System.GetEnvVar("firstName"))
	 validateDataAndReport(ssn_crdtwndw,System.GetEnvVar("SSN"),"Validation of SSN in Credit Check window :"+"xxxxx"+ssn_crdtwndw.Right(4)+ " && in Applicant Address window :"+"xxxxx"+System.GetEnvVar("SSN").Right(4))
	 validateDataAndReport(city_crdtwndw,System.GetEnvVar("city"),"Validation of City in Credit Check window :"+city_crdtwndw+ " && in Applicant Address window :"+System.GetEnvVar("city"))
	 validateDataAndReport(zipcode_crdtwndw,System.GetEnvVar("zip"),"Validation of Zip Code in Credit Check window :"+zipcode_crdtwndw+ " && in Applicant Address window :"+System.GetEnvVar("zip"))
	//Click on Get Report button
	 click_Button_InWindow_DP("w_wiz_new_cust","w_creditcheck","Get Report")
	AppObject repObj = BranchPlus.CreditReport.Reportdetails
	//Fetching Report Content
	String verifytitlecreditReport = GetValue_PBDataWindow(repObj,"#1","text_line")
	String verifyalertsCreditReport = GetValue_PBDataWindow(repObj,"#4","text_line")
	String verifyvalue1CreditReport, verifyvalue2CreditReport, verifyvalue3CreditReport
	//Validating for Credit Report Generation
	 validatePartialDataAndReport(verifytitlecreditReport,"THIS FORM PRODUCED BY EQUIFAX","Validate Title in Credit Report "+verifytitlecreditReport)
	// validatePartialDataAndReport(verifyalertsCreditReport,"IDENTITY SCAN .*","Validate Alert text in Credit Report "+verifyalertsCreditReport)
	if outputType == "Persona Plus" 
	else
		verifyvalue1CreditReport = GetValue_PBDataWindow(repObj,"#10","text_line")
		verifyvalue2CreditReport = GetValue_PBDataWindow(repObj,"#12","text_line")
		verifyvalue3CreditReport = GetValue_PBDataWindow(repObj,"#14","text_line")
		//Validating for Credit Report
	//		 validatePartialDataAndReport(verifyvalue1CreditReport,"COMPLIANCE DATA CENTER, INC. ","Validate Report in Credit Report "+verifyvalue1CreditReport)
	//		 validatePartialDataAndReport(verifyvalue2CreditReport,"*NO MATCH FOUND IN CDC//S OFAC DATABASE ","Validate Report in Credit Report "+verifyvalue2CreditReport)
	//		 validatePartialDataAndReport(verifyvalue3CreditReport,"*   END OF REPORT, COMPLIANCE DATA CENTER, INC.","Validate Report in Credit Report "+verifyvalue3CreditReport)
	//Click on Close button
	BranchPlus.CreditReport.Close.Click()
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to Validation_of_CreditCheck_Window","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: select_CreditBureau_CreditCheckWindow(valueToSelect)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will select the credit bureau id in Credit Check window
//Ex  select_CreditBureau_CreditCheckWindow("EQUIFAX")
//******************************************************************************************************************
select_CreditBureau_CreditCheckWindow(String valueToSelect)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject crdtwndw = BranchPlus.CreditDecision.Creditcheck.tblCreditcheck
	Sleep (2)
	 TypeText_PBDataWindow(crdtwndw,"#1","#21",valueToSelect)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to select_CreditBureau_CreditCheckWindow","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: select_OutputType_CreditCheckWindow(valueToSelect)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will select the output value in Credit Check window
//Ex  select_OutputType_CreditCheckWindow("Acrofile Plus Directory")
//******************************************************************************************************************
select_OutputType_CreditCheckWindow(String valueToSelect)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject crdtwndw = BranchPlus.CreditDecision.Creditcheck.tblCreditcheck
	 TypeText_PBDataWindow(crdtwndw,"#1","#4",valueToSelect)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to select_OutputType_CreditCheckWindow","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: getValue_CreditCheckWindow(ColName)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will fetch the value in Credit Check window
//Ex  getValue_CreditCheckWindow("zipcode")
//******************************************************************************************************************
String getValue_CreditCheckWindow(String ColName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String CellValue
	if BranchPlus.CreditDecision.Creditcheck.tblCreditcheck.WaitWhileExists (10)
		CellValue = BranchPlus.CreditDecision.Creditcheck.tblCreditcheck.CreditCheckTB.Row[1].$ColName.GetText()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: getValue_CreditCheckWindow","Failed", "","Y")
	return CellValue

//*****************************************************************************************************************
//@methodName: Verification_of_Address1_CoApplicantAddressWindow(Address1)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Address1 field of Co Applicant in Applicant window
//Ex  Verification_of_Address1_CoApplicantAddressWindow(Address1)
//******************************************************************************************************************
Verification_of_Address1_CoApplicantAddressWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Validate the Error pop to choose auto dealer
		// Validate_ErrorPopup_Title_Message()
		//Enter Address1 with more than 30 chraracters
		SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr1",random_AlphaNumeric_SplCharacter_String(12))
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Click on Copy button 
		 Click_Copy_CoApplicantwindow()
		//Clcik on Reset Button 
		 Click_Reset_CoApplicantwindow()
		//Enter Address1 with less than 30 chraracters with only alphabets
		SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr1",random_AlphaNumeric_String(32))
		//Get the Length of Entered value in Address1 field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "addr1")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 30 
			 writeReportLog("Validation of Address1 field is Accepting only 40 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : Address1 field is Accepting More than 40 characters","Failed", "" ,"")
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Address1 with valid data
	String Address1 = random_AlphaCharacter_String(40)
	SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr1",Address1)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "addr1")
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_coapp", "#1", "addr1","branchplusqa.bp_applicantaddress","joint_address1",System.GetEnvVar("ID"))
	 writeReportLog("Entered Co Applicant Address1 value: "+ Address1 +" in Applicant Address window (UI-"+"{getValueLength.Length()}"+",DB-40)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Address1_CoApplicantAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Address2_CoApplicantAddressWindow(Address2)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Address2 field of Co Applicant in Applicant window
//Ex  Verification_of_Address2_CoApplicantAddressWindow(Address2)
//******************************************************************************************************************
Verification_of_Address2_CoApplicantAddressWindow(String Address2)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Validate the Error pop to choose auto dealer
		// Validate_ErrorPopup_Title_Message()
		//Enter Address2 with more than 30 chraracters
		SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr2",random_AlphaNumeric_SplCharacter_String(12))
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter Address2 with less than 30 chraracters with only alphabets
		SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr2",random_AlphaNumeric_String(42))
		//Get the Length of Entered value in Address2 field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "addr2")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 30 
			 writeReportLog("Validation of Address2 field is Accepting only 30 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : Address2 field is Accepting More than 30 characters","Failed", "" ,"")
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Address2 with valid data
	Address2 = random_AlphaCharacter_String(40)
	SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr2",Address2)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "addr2")
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_coapp", "#1", "addr2","branchplusqa.bp_applicantaddress","joint_address2",System.GetEnvVar("ID"))
	 writeReportLog("Entered Co Applicant Address2 value: "+ Address2 +" in Applicant Address window(UI-"+"{getValueLength.Length()}"+",DB-40)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Address2_CoApplicantAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Address3_CoApplicantAddressWindow(Address3)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Address3 field of Co Applicant in Applicant window
//Ex  Verification_of_Address3_CoApplicantAddressWindow(Address3)
//******************************************************************************************************************
Verification_of_Address3_CoApplicantAddressWindow(String Address3)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Validate the Error pop to choose auto dealer
		// Validate_ErrorPopup_Title_Message()
		//Enter Address3 with more than 30 chraracters
		SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr3",random_AlphaNumeric_SplCharacter_String(12))
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter Address3 with less than 30 chraracters with only alphabets
		SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr3",random_AlphaNumeric_String(42))
		//Get the Length of Entered value in Address3 field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "addr3")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 30 
			 writeReportLog("Validation of Address3 field is Accepting only 40 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : Address3 field is Accepting More than 40 characters","Failed", "" ,"")
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Address3 with valid data
	Address3 = random_AlphaCharacter_String(40)
	SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr3",Address3)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "addr3")
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_coapp", "#1", "addr3","branchplusqa.bp_applicantaddress","joint_address3",System.GetEnvVar("ID"))
	 writeReportLog("Entered Co Applicant Address3 value: "+ Address3 +" in Applicant Address window(UI-"+"{getValueLength.Length()}"+",DB-40)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Address3_CoApplicantAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ZipCode_CoApplicant_ApplicantAddressWindow(zipcode)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the zip code field of Co Applicant in Applicant window
//Ex  Verification_of_ZipCode_CoApplicant_ApplicantAddressWindow(zipcode)
//******************************************************************************************************************
Verification_of_ZipCode_CoApplicant_ApplicantAddressWindow()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter Zip Code with 10 digits 
		SetValue_In_PBDataWindow_DP("dw_coapp","#1", "zipcode",Generate_RandomNumber(10))
		//Get the Length of Entered value in zip code field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "zipcode")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 9 
			 writeReportLog("Validation of Zip Code field is Accepting only 9 digits","Passed","","")
		else
			 writeReportLog("Failed : Zip Code field is not Accepting more than 9 digits: "+getValueLength,"Failed", "" ,"")
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
	//	//Click on back button
	//	 clickOnBackButton_CreditDecisionWindow()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//********************
	//Work Flow
	//*********************
	//Enter Zip Code with valid data
	SetValue_In_PBDataWindow_DP("dw_coapp","#1", "zipcode",System.GetEnvVar("Joint_CoApp_zipcode"))
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ZipCode_CoApplicant_ApplicantAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_City_CoApplicant_ApplicantAddressWindow(city)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the city field of Co Applicant in Applicant window
//Ex  Verification_of_City_CoApplicant_ApplicantAddressWindow(city)
//******************************************************************************************************************
Verification_of_City_CoApplicant_ApplicantAddressWindow(String city)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter City with more than 6 chraracters
		SetValue_In_PBDataWindow_DP("dw_coapp","#1","city",random_AlphaNumeric_SplCharacter_String(32))
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter City with more than 30 characters with only alphabets
		SetValue_In_PBDataWindow_DP("dw_coapp","#1","city",random_AlphaNumeric_String(32))
		//Get the Length of Entered value in city field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "city")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 30 
			 writeReportLog("Validation of City field is Accepting only 30 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : City field is not Accepting More than 30 characters","Failed", "" ,"")
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//******************************
	//Work Flow
	//******************************
	//Enter City with valid data
	SetValue_In_PBDataWindow_DP("dw_coapp","#1","city",city)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_City_CoApplicant_ApplicantAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_HomePhone_CoApplicant_ApplicantAddressWindow(phone1)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Home Phone field of Co Applicant in Applicant window
//Ex  Verification_of_HomePhone_CoApplicant_ApplicantAddressWindow(phone1)
//******************************************************************************************************************
Verification_of_HomePhone_CoApplicant_ApplicantAddressWindow(String phone1)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//*********************
	//		//Field Validation
	//		//*********************
	//		//Click on  button
	//		 clickOnButton_CreditDecisionWindow()
	//		 handleUSPSWindow()
	//		 handleUSPSWindow_CoApplicant()
	//		 handleUSPSWindow_CoApplicant()
	//		
	//		//Click on back button
	//		 clickOnBackButton_CreditDecisionWindow()
	//		
	//		//Enter Home Phone with more than 10 digits
	//		SetValue_In_PBDataWindow_DP("dw_coapp","#1","phone1",Generate_RandomNumber(11))
	//		
	//		//Click on  button
	//		 clickOnButton_CreditDecisionWindow()
	//		 handleUSPSWindow()
	//		 handleUSPSWindow_CoApplicant()
	//		 handleUSPSWindow_CoApplicant()
	//		
	//		//Click on back button
	//		 clickOnBackButton_CreditDecisionWindow()
	//		
	//		//Get the Length of Entered value in home phone field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "phone1")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==10 
	//			 writeReportLog("Validation of Home Phone field is Accepting only 10 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : Home Phone field is Accepting more than 10 digits: "+getValueLength,"Failed", "" ,"")
	//		
	//	
	//******************
	//Work Flow
	//******************
	//Enter Home Phone with valid 10 digit characters
	phone1 = Generate_RandomNumber(10)
	SetValue_In_PBDataWindow_DP("dw_coapp","#1","phone1",phone1)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "phone1")
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_coapp", "#1", "phone1","branchplusqa.bp_applicantaddress","joint_homephone",System.GetEnvVar("ID"))
	 writeReportLog("Entered Co Applicant Home Phone value: "+ phone1 +" in Applicant Address window (UI-"+"{getValueLength.Length()}"+",DB-10)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_HomePhone_CoApplicant_ApplicantAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_CellPhone_CoApplicant_ApplicantAddressWindow(phone2)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Cell Phone field of Co Applicant in Applicant window
//Ex  Verification_of_CellPhone_CoApplicant_ApplicantAddressWindow(phone2)
//******************************************************************************************************************
Verification_of_CellPhone_CoApplicant_ApplicantAddressWindow(String phone2)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//*********************
	//		//Field Validation
	//		//*********************
	//		//Click on  button
	//		 clickOnButton_CreditDecisionWindow()
	//		 handleUSPSWindow()
	//		 handleUSPSWindow_CoApplicant()
	//		 handleUSPSWindow_CoApplicant()
	//		
	//		//Click on back button
	//		 clickOnBackButton_CreditDecisionWindow()
	//		
	//		//Enter Cell Phone with more than 10 digits
	//		SetValue_In_PBDataWindow_DP("dw_coapp","#1","phone2",Generate_RandomNumber(11))
	//		
	//		//Get the Length of Entered value in Cell phone field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "phone2")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==10 
	//			 writeReportLog("Validation of Cell Phone field is Accepting only 10 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : Cell Phone field is Accepting more than 10 digits: "+getValueLength,"Failed", "" ,"")
	//		
	//		
	//		//Click on  button
	//		 clickOnButton_CreditDecisionWindow()
	//		 handleUSPSWindow()
	//		 handleUSPSWindow_CoApplicant()
	//		 handleUSPSWindow_CoApplicant()
	//		
	//		//Click on back button
	//		 clickOnBackButton_CreditDecisionWindow()
	//	
	//******************
	//Work Flow
	//******************
	//Enter Cell Phone with valid 10 digit characters
	phone2 = Generate_RandomNumber(10)
	SetValue_In_PBDataWindow_DP("dw_coapp","#1","phone2",phone2)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "phone2")
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_coapp", "#1", "phone2","branchplusqa.bp_applicantaddress","joint_cellphone",System.GetEnvVar("ID"))
	 writeReportLog("Entered Co Applicant Cell Phone value: "+ phone2 +" in Applicant Address window (UI-"+"{getValueLength.Length()}"+",DB-10)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_CellPhone_CoApplicant_ApplicantAddressWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_OtherPhone_CoApplicant_ApplicantAddressWindow(phone3)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Other Phone field of Co Applicant in Applicant window
//Ex  Verification_of_OtherPhone_CoApplicant_ApplicantAddressWindow(phone3)
//******************************************************************************************************************
Verification_of_OtherPhone_CoApplicant_ApplicantAddressWindow(String phone3)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//*********************
	//		//Field Validation
	//		//*********************
	//		//Click on  button
	//		 clickOnButton_CreditDecisionWindow()
	//		 handleUSPSWindow()
	//		 handleUSPSWindow_CoApplicant()
	//		 handleUSPSWindow_CoApplicant()
	//		
	//		//Click on back button
	//		 clickOnBackButton_CreditDecisionWindow()
	//		
	//		//Enter Other Phone with more than 10 digits
	//		SetValue_In_PBDataWindow_DP("dw_coapp","#1","phone3",Generate_RandomNumber(11))
	//		
	//		//Get the Length of Entered value in Other phone field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "phone3")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==10 
	//			 writeReportLog("Validation of Other Phone field is Accepting only 10 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : Other Phone field is Accepting more than 10 digits: "+getValueLength,"Failed", "" ,"")
	//		
	//		
	//		//Click on  button
	//		 clickOnButton_CreditDecisionWindow()
	//		 handleUSPSWindow()
	//		 handleUSPSWindow_CoApplicant()
	//		 handleUSPSWindow_CoApplicant()
	//		
	//		//Click on back button
	//		 clickOnBackButton_CreditDecisionWindow()
	//	
	//******************
	//Work Flow
	//******************
	//Enter Other Phone with valid 10 digit characters
	phone3 = Generate_RandomNumber(10)
	SetValue_In_PBDataWindow_DP("dw_coapp","#1","phone3",phone3)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "phone3")
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_coapp", "#1", "phone3","branchplusqa.bp_applicantaddress","joint_otherphone",System.GetEnvVar("ID"))
	 writeReportLog("Entered Co Applicant Other Phone value: "+ phone3 +" in Applicant Address window (UI-"+"{getValueLength.Length()}"+",DB-10)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_OtherPhone_CoApplicant_ApplicantAddressWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : Verification_CoApplicant_Adding_Existing_CustomerDetails()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will verification of existing customer adding in Co-Applicant Credit Decision Window
//Ex: Verification_CoApplicant_Adding_Existing_CustomerDetails("Path","10/02/1968") 
//*******************************************************************************************************************
 Verification_CoApplicant_Adding_Existing_CustomerDetails(String ID,String DOB)
	// variables
	String Search_LastName, Search_FirstName, Search_SSN, Search_ZipCode
	 //Add New row 
	 	 AddNewRow_DeleteRow_Search_CoApplicantWindow("Search")
	//Search customer with last name
	 Search_Existing_Customer_CoApplicantWindow("first_name","B")
	//Get the Existing customers Details
	Sleep (2)
	Search_LastName = getValue_AddApplicant_Search_CoApplicantWindow("last_name")
	Search_FirstName = getValue_AddApplicant_Search_CoApplicantWindow("first_name")
	Search_SSN = getValue_AddApplicant_Search_CoApplicantWindow("ssn")
	Search_ZipCode = getValue_AddApplicant_Search_CoApplicantWindow("zipcode")
	//Updating Data sheet
	 Update_Individual_Column_Data("bp_loantype_dealer_primaryapplicant","CoApplicant_LastName",Search_LastName,System.GetEnvVar("ID"))
	 Update_Individual_Column_Data("bp_loantype_dealer_primaryapplicant","CoApplicant_FirstName",Search_FirstName,System.GetEnvVar("ID"))
	 Update_Individual_Column_Data("bp_loantype_dealer_primaryapplicant","CoApplicant_ZipCode",Search_ZipCode,System.GetEnvVar("ID"))
	 Update_Individual_Column_Data("bp_loantype_dealer_primaryapplicant","CoApplicant_SSN",Search_SSN,System.GetEnvVar("ID"))
	//	DataTable.Value("CoApplicant_LastName","Joint") = Search_LastName
	//	DataTable.Value("CoApplicant_FirstName","Joint") = Search_FirstName
	//	DataTable.Value("CoApplicant_ZipCode","Joint") = Search_ZipCode
	//Updating the result sheet	
	// exportSpecificSheet(testDataPath,"Joint")
	//Click on COSIGN button
	 ClickOn_Add_COSIGN_JOINT_Search_CoApplicantWindow("Add CO&SIGN")
	//Validate added existing customer details
	// Validation_Existing_CustomerDetails_CoApplicantWindow(Search_LastName,Search_FirstName,Search_SSN,DOB)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Search_Existing_Customer_CoApplicantWindow","Failed", "","Y")
 
//*******************************************************************************************************************
//@methodName : Search_Existing_Customer_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will validate last name, first name && ssn Co-Applicant Credit Decision Window
//Ex: Search_Existing_Customer_CoApplicantWindow("last_name","D") 
//*******************************************************************************************************************
Search_Existing_Customer_CoApplicantWindow(String ColumnName,String valuetoSet)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if BranchPlus.CreditDecision.w_search_coapplicant.w_search.dw_search.WaitWhileExists (10)
		AppObject tblPBDataWindow = BranchPlus.CreditDecision.w_search_coapplicant.w_search.dw_search
		//AppObject data for last name
		 TypeText_PBDataWindow(tblPBDataWindow,"#1",ColumnName,valuetoSet)
		//Click on Ok Button
		BranchPlus.CreditDecision.w_search_coapplicant.w_search.OK.Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Search_Existing_Customer_CoApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : Validation_Existing_CustomerDetails_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will validate last name, first name && ssn Co-Applicant Credit Decision Window
//Ex: Validation_Existing_CustomerDetails_CoApplicantWindow("last_name") 
//*******************************************************************************************************************
 Validation_Existing_CustomerDetails_CoApplicantWindow(String Search_LastName, String Search_FirstName, String Search_SSN,String DOB)
	String Type_Name, lastName, firstName, SSN_number, DOB_Existing_Customer
	//get Type value && validate
	Type_Name = getValue_In_PBDataWindow_DP("dw_coapp","#2","#2")
	 validateDataAndReport(Type_Name.Trim(),"Cosigner" , "Validation of Co-Applicant Type: ExpCoApplicantType: " + Type_Name + " && ActCoApplicantType: Cosigner")
	//get last name value && validate
	lastName = getValue_In_PBDataWindow_DP("dw_coap","#2", "last_name")
	 validateDataAndReport(lastName.Trim(),Search_LastName.Trim() , "Validation of Co-Applicant Last Name: ExpLastName: " + lastName + " && ActLastName: "+ Search_LastName)
	//get first Name value && validate
	firstName = getValue_In_PBDataWindow_DP("dw_coapp","#2", "first_name")
	 validateDataAndReport(firstName.Trim(),Search_FirstName.Trim() , "Validation of Co-Applicant First Name: ExpFirstName: " + firstName + " && ActFirstName: "+ Search_FirstName)
	//get SSN Number && validate
	SSN_number = getValue_In_PBDataWindow_DP("dw_coapp","#2", "ssn")
	 validateDataAndReport(SSN_number.Trim(),Search_SSN.Trim() , "Validation of Co-Applicant SSN Number: ExpSSNnumber: " +"xxxxx"+SSN_number.Right(4) + " && ActSSNnumber: "+"xxxxx"+Search_SSN.Right(4))
	//Validate DOB 
	DOB_Existing_Customer = getValue_In_PBDataWindow_DP("dw_coapp","#2", "dob_dt")
	if DOB_Existing_Customer == "" 
		 clickOnButton_CreditDecisionWindow()
		//if DOB is not exist enter New DOB //Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		SetValue_In_PBDataWindow_DP("dw_coapp","#2", "dob_dt", DOB)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Validation_Existing_CustomerDetails_CoApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : ClickOn_Add_COSIGN_JOINT_Search_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will click on Add Joint adn Add Cosigner Buttons Search Co-Applicant Credit Decision Window
//Ex: ClickOn_Add_COSIGN_JOINT_Search_CoApplicantWindow("last_name") 
//*******************************************************************************************************************
ClickOn_Add_COSIGN_JOINT_Search_CoApplicantWindow(String buttonName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if BranchPlus.CreditDecision.w_search_coapplicant.$buttonName.WaitWhileExists (10)
		//		click on Add Cosign || Joint button
		BranchPlus.CreditDecision.w_search_coapplicant.$buttonName.Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: ClickOn_Add_COSIGN_JOINT_Search_CoApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : getValue_AddApplicant_Search_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will get the value in Add Applicant Search Co-Applicant Credit Decision Window
//Ex: getValue_AddApplicant_Search_CoApplicantWindow("last_name") 
//*******************************************************************************************************************
String getValue_AddApplicant_Search_CoApplicantWindow(String ColName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String CellValue
	if BranchPlus.CreditDecision.w_search_coapplicant.dw_list.WaitWhileExists (10)
		//get cell value 
		CellValue = BranchPlus.CreditDecision.w_search_coapplicant.dw_list.ApplicantSearchTB.Row[1].$ColName.GetText()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: getValue_AddApplicant_Search_CoApplicantWindow","Failed", "","Y")
	return CellValue

//*******************************************************************************************************************
//@methodName : AddNewRow_DeleteRow_Search_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will Add New Row, Delete Row && Search in Co Applicant Credit Decision Window
//Ex: AddNewRow_DeleteRow_Search_CoApplicantWindow() 
//*******************************************************************************************************************
AddNewRow_DeleteRow_Search_CoApplicantWindow(String buttonName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if BranchPlus.CreditDecision.$buttonName.WaitWhileExists (10)
		//click on AddRow || Delete || Search buttons
		BranchPlus.CreditDecision.$buttonName.Click()	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: AddNewRow_DeleteRow_Search_CoApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : Verification_of_Type_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will verify Type Field in Co Applicant Credit Decision Window
//Ex: Verification_of_Type_CoApplicantWindow("Joint") 
//*******************************************************************************************************************
Verification_of_Type_CoApplicantWindow(String TypeValue)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Add New row
		// AddNewRow_CoApplicantWindow()
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	SetValue_In_PBDataWindow_DP("dw_coapp","#1","#2",TypeValue)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Type_CoApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : Verification_of_LastName_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will verify Last Name Field in Co Applicant Credit Decision Window
//Ex: Verification_of_LastName_CoApplicantWindow("Devid") 
//*******************************************************************************************************************
Verification_of_LastName_CoApplicantWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		//Invalid Data
		SetValue_In_PBDataWindow_DP("dw_coapp","#1", "last_name", random_AlphaNumeric_SplCharacter_String(32))
		//Get the Length of Entered value in last name field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "last_name")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 30 
			 writeReportLog("Validation of Last Name field is Accepting only 30 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed to Last Name is Accepting More than 30 characters","Failed", "" ,"")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Valid Data
	AppObject tblwindow = CreditDecisionSTEP.CoApplicantTable
	String joint_lastName
	joint_lastName = generate_Name(30,"JointLastName")
	 TypeText_PBDataWindow(tblwindow,"#1", "last_name", joint_lastName)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "last_name")
	//Updating lastname value to DB
	  Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_coapp","#1", "last_name","branchplusqa.bp_loantype_dealer_primaryapplicant","joint_lastname",ID)
	  writeReportLog("Entered lastname value: "+ joint_lastName +" in prinmary applicant window (UI-"+"{getValueLength.Length()}"+",DB-30)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_LastName_PrimaryApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : Verification_of_FirstName_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will verify First Name Field in Co Applicant Credit Decision Window
//Ex: Verification_of_FirstName_CoApplicantWindow("Thomos") 
//*******************************************************************************************************************
Verification_of_FirstName_CoApplicantWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		//Invalid Data
		SetValue_In_PBDataWindow_DP("dw_coapp","#1", "first_name", random_AlphaNumeric_SplCharacter_String(32))
		//Get the Length of Entered value in first name field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "first_name")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 30 
			 writeReportLog("Validation of First Name field is Accepting only 30 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed First Name is Accepting More than 30 characters","Failed", "" ,"")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Valid Data
	AppObject tblwindow = CreditDecisionSTEP.CoApplicantTable
	String firstName_Joint = generate_Name(30,"JointFirstName")
	 TypeText_PBDataWindow(tblwindow,"#1", "first_name", firstName_Joint)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "first_name")
	//Updating firstname value generated to DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_coapp","#1", "first_name","branchplusqa.bp_loantype_dealer_primaryapplicant","joint_firstname",ID)
	 writeReportLog("Entered  joint firstname value: "+ firstName_Joint +" in primary applicant window (UI-"+"{getValueLength.Length()}"+",DB-30)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_FirstName_PrimaryApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : Verification_of_SSN_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will verify SSN Field in Co Applicant Credit Decision Window
//Ex: Verification_of_SSN_CoApplicantWindow("965896365") 
//*******************************************************************************************************************
 Verification_of_SSN_CoApplicantWindow(String ssn)
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		//Invalid Data
		SetValue_In_PBDataWindow_DP("dw_coapp","#1", "ssn", random_AlphaSpecial_String(10))
		//Get the Length of Entered value in last name field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "ssn")
		//Comparing the Length of accepting characters 
		if getValueLength == "" 
			 writeReportLog("Validation of SSN Number field is not Accepting Alphabets && Special characters","Passed","","")
		else
			 writeReportLog("Failed to SSN Number is Accepting Alphabets && Special characters: "+getValueLength,"Failed", "" ,"")
		//Enter More than 10 Digits
		SetValue_In_PBDataWindow_DP("dw_coapp","#1", "ssn", Generate_RandomNumber(10))
		//Get the Length of Entered value in last name field
		getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "ssn")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() != 10 
			 writeReportLog("Validation of SSN Number field is not Accepting more than 9 digits","Passed","","")
		else
			 writeReportLog("Failed to SSN Number is Accepting more than 9 digits: "+getValueLength,"Failed", "" ,"")
		//Enter Invalide SSN
		SetValue_In_PBDataWindow_DP("dw_coapp","#1", "ssn", "000321546")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Valid SSN Data
	SetValue_In_PBDataWindow_DP("dw_coapp","#1", "ssn", ssn)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_SSN_CoApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : Verification_of_DOB_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will verify Date of Birth Field in Co Applicant Credit Decision Window
//Ex: Verification_of_DOB_CoApplicantWindow("10/02/1963") 
//*******************************************************************************************************************
Verification_of_DOB_CoApplicantWindow(String DOB)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		//Invalid Data
		SetValue_In_PBDataWindow_DP("dw_coapp","#1", "dob_dt", "10/02/1805")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Date Validation error popup 
		 Validate_DateDailog_ErrorPopup_Title_Message()
		//Enter Invalid Future Date
		SetValue_In_PBDataWindow_DP("dw_coapp","#1", "dob_dt", "10/02/2020")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Valid DOB Data
	SetValue_In_PBDataWindow_DP("dw_coapp","#1", "dob_dt", DOB)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_DOB_CoApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : Verification_of_MiddleName_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will verify Middle name field in Co-Applicant Credit Decision Window
//Ex: Verification_of_MiddleName_CoApplicantWindow("Divid") 
//*******************************************************************************************************************
Verification_of_MiddleName_CoApplicantWindow_Joint(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Invalid Data
		SetValue_In_PBDataWindow_DP("dw_coapp","#1", "middle_name", random_AlphaNumeric_SplCharacter_String(32))
		//Get the Length of Entered value in Middle name field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "middle_name")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 30 
			 writeReportLog("Validation of Middle Name field is Accepting only 30 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed to Middle Name is Accepting More than 30 characters","Failed", "" ,"")
	//*********************
	//Work Flow
	//*********************
	//Enter Valid Middle Name Data
	AppObject tblwindow = CreditDecisionSTEP.CoApplicantTable
	String joint_MiddleName = generate_Name(30,"jointMiddleName")
	 TypeText_PBDataWindow(tblwindow,"#1", "middle_name", joint_MiddleName)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "middle_name")
	//Updating joint middlename value to DB
	  Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_coapp","#1", "middle_name","branchplusqa.bp_loantype_dealer_primaryapplicant","joint_middlename",ID)
	  writeReportLog("Entered joint_middlename value: "+ joint_MiddleName +" in prinmary applicant window (UI-"+"{getValueLength.Length()}"+",DB-30)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_MiddleName_PrimaryApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : Verification_of_Suffix_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will verify Suffix field in Co-Applicant Credit Decision Window
//Ex: Verification_of_Suffix_CoApplicantWindow("first") 
//*******************************************************************************************************************
 Verification_of_Suffix_CoApplicantWindow(String Suffix)
	//*********************
	//Field Validation
	//*********************
	//SetValue_In_PBDataWindow_DP("dw_coapp","#1", "#7", Suffix)
	//*********************
	//Work Flow
	//*********************
	//Valid Data
	SetValue_In_PBDataWindow_DP("dw_coapp","#1", "#6", Suffix)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Suffix_CoApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : Verification_of_FirstName_PrimaryApplicantWindow()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will verify First Name field in Primary Applicant Credit Decision Window
//Ex: Verification_of_FirstName_PrimaryApplicantWindow("Thomas") 
//*******************************************************************************************************************
 Verification_of_FirstName_PrimaryApplicantWindow(String ID)
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		//Invalid Data
		SetValue_In_PBDataWindow_DP("dw_step","#1", "first_name", random_AlphaNumeric_SplCharacter_String(32))
		//Get the Length of Entered value in first name field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "first_name")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 30 
			 writeReportLog("Validation of First Name field is Accepting only 30 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed First Name is Accepting More than 30 characters","Failed", "" ,"")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Valid Data
	AppObject tblwindow = BranchPlus.CreditDecision.tbldwStep
	String firstName = generate_Name(30,"FirstName")
	 TypeText_PBDataWindow(tblwindow,"#1","first_name", firstName)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "first_name")
	//Updating firstname value generated to DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step","#1", "first_name","branchplusqa.bp_loantype_dealer_primaryapplicant","firstname",ID)
	 writeReportLog("Entered firstname value: "+ firstName +" in primary applicant window (UI-"+"{getValueLength.Length()}"+",DB-30)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_FirstName_PrimaryApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : Verification_of_LastName_PrimaryApplicantWindow()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will verify Last Name field in Primary Applicant Credit Decision Window
//Ex: Verification_of_LastName_PrimaryApplicantWindow("Thomas") 
//*******************************************************************************************************************
 Verification_of_LastName_PrimaryApplicantWindow(String ID)
	String getValueLength 
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		//Invalid Data
		SetValue_In_PBDataWindow_DP("dw_step","#1", "last_name", random_AlphaNumeric_SplCharacter_String(32))
		//Get the Length of Entered value in last name field
		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "last_name")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 30 
			 writeReportLog("Validation of Last Name field is Accepting only 30 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed to Last Name is Accepting More than 30 characters","Failed", "" ,"")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Valid Data
	AppObject tblwindow = BranchPlus.CreditDecision.tbldwStep
	String lastName = generate_Name(30,"LastName")
	 TypeText_PBDataWindow(tblwindow,"#1", "last_name", lastName)
	 sendKeys("<TAB>")
	//Updating lastname value to DB
	  Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step","#1", "last_name","branchplusqa.bp_loantype_dealer_primaryapplicant","lastname",ID)
	 writeReportLog("Entered lastname value: "+ lastName +" in prinmary applicant window (UI-"+"{getValueLength.Length()}"+",DB-30)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_LastName_PrimaryApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : Verification_of_SSN_PrimaryApplicantWindow()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will verify SSN field in Primary Applicant Credit Decision Window
//Ex: Verification_of_SSN_PrimaryApplicantWindow("9658745961") 
//*******************************************************************************************************************
 Verification_of_SSN_PrimaryApplicantWindow(String ssn)
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		//Invalid Data
		SetValue_In_PBDataWindow_DP("dw_step","#1", "ssn", random_AlphaSpecial_String(10))
		//Get the Length of Entered value in last name field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "ssn")
		//Comparing the Length of accepting characters 
		if getValueLength == "" 
			 writeReportLog("Validation of SSN Number field is not Accepting Alphabets && Special characters","Passed","","")
		else
			 writeReportLog("Failed to SSN Number is Accepting Alphabets && Special characters: "+getValueLength,"Failed", "" ,"")
		//Enter More than 10 Digits
		SetValue_In_PBDataWindow_DP("dw_step","#1", "ssn", Generate_RandomNumber(10))
		//Get the Length of Entered value in last name field
		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "ssn")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() != 10
			 writeReportLog("Validation of SSN Number field is not Accepting more than 9 digits","Passed","","")
		else
			 writeReportLog("Failed to SSN Number is Accepting more than 9 digits: "+getValueLength,"Failed", "" ,"")
		//Enter Invalide SSN
		SetValue_In_PBDataWindow_DP("dw_step","#1", "ssn", "000321546")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()	
	//*********************
	//Work Flow
	//*********************
	//Enter Valid SSN Data
	SetValue_In_PBDataWindow_DP("dw_step","#1", "ssn", ssn)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_SSN_PrimaryApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : Verification_of_DOB_PrimaryApplicantWindow()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will verify Date of  Birth field in Primary Applicant Credit Decision Window
//Ex: Verification_of_DOB_PrimaryApplicantWindow("10/02/1965") 
//*******************************************************************************************************************
 Verification_of_DOB_PrimaryApplicantWindow(String DOB)
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		//Invalid Data
		SetValue_In_PBDataWindow_DP("dw_step","#1", "dob_dt", "10/02/1805")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Date Validation error popup 
		 Validate_DateDailog_ErrorPopup_Title_Message()
		//Enter Invalid Future Date
		SetValue_In_PBDataWindow_DP("dw_step","#1", "dob_dt", "10/02/2020")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Valid DOB Data
	SetValue_In_PBDataWindow_DP("dw_step","#1", "dob_dt", DOB)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_DOB_PrimaryApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : Verification_of_MiddleName_PrimaryApplicantWindow()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will verify Middle name field in Primary Applicant Credit Decision Window
//Ex: Verification_of_MiddleName_PrimaryApplicantWindow("Divid") 
//*******************************************************************************************************************
 Verification_of_MiddleName_PrimaryApplicantWindow(String ID)
	String getValueLength = ""
	
	if System.GetEnvVar("FV_Flag") == "Y"
		//*********************
		//Field Validation
		//*********************
		//Invalid Data
		SetValue_In_PBDataWindow_DP("dw_step","#1", "middle_name", random_AlphaNumeric_SplCharacter_String(32))
		//Get the Length of Entered value in Middle name field
		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "middle_name")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 30 
			 writeReportLog("Validation of Middle Name field is Accepting only 30 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed to Middle Name is Accepting More than 30 characters","Failed", "" ,"")
	//*********************
	//Work Flow
	//*********************
	//Enter Valid Middle Name Data
	AppObject tblwindow = BranchPlus.CreditDecision.tbldwStep
	String MiddleName = generate_Name(30,"MiddleName")
	 TypeText_PBDataWindow(tblwindow,"#1", "middle_name", MiddleName)
	 sendKeys("<TAB>")
	//Updating middlename value to DB
	  Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step","#1", "middle_name","branchplusqa.bp_loantype_dealer_primaryapplicant","middlename",ID)
	  writeReportLog("Entered middlename value: "+ MiddleName +" in prinmary applicant window(UI-"+"{getValueLength.Length()}"+",DB-40)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_MiddleName_PrimaryApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : Verification_of_DriverLicence_PrimaryApplicantWindow()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will verify Driver Licence field in Primary Applicant Credit Decision Window
//Ex: Verification_of_DriverLicence_PrimaryApplicantWindow("95687456") 
//*******************************************************************************************************************
Verification_of_DriverLicence_PrimaryApplicantWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String getValueLength = ""
	
	//Commented as it is negative validation for non mandatory field
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//*********************
	//		//Field Validation
	//		//*********************
	//		//Invalid Data
	//		SetValue_In_PBDataWindow_DP("dw_step","#1", "driverlic", random_AlphaNumeric_SplCharacter_String(23))
	//		//Get the Length of Entered value in Driver Licence field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "driverlic")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==20 
	//			 writeReportLog("Validation of Driver licence Number field is Accepting only 20 characters","Passed","","")
	//		else
	//			 writeReportLog("Failed to Driver licence Number field is Accepting more than 20 characters: "+getValueLength,"Failed", "" ,"")
	//		
	//	
	//*********************
	//Work Flow
	//*********************
	//Enter Valid Driver Licence Data
	AppObject tblwindow = BranchPlus.CreditDecision.tbldwStep
	String DriverLicence = random_AlphaNumeric_String(20)
	 TypeText_PBDataWindow(tblwindow,"#1","driverlic", DriverLicence)
	 sendKeys("<TAB>")
	//Updating driver license value to DB
	  Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step","#1", "driverlic","branchplusqa.bp_loantype_dealer_primaryapplicant","driverlicense",ID)
	  writeReportLog("Entered driver license value: "+ DriverLicence +" in prinmary applicant window (UI-"+"{getValueLength.Length()}"+",DB-20)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_DriverLicence_PrimaryApplicantWindow","Failed", "","Y")

//*******************************************************************************************************************
//@methodName : Verification_of_Suffix_PrimaryApplicantWindow()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will verify Suffix field in Primary Applicant Credit Decision Window
//Ex: Verification_of_Suffix_PrimaryApplicantWindow("first") 
//*******************************************************************************************************************
 Verification_of_Suffix_PrimaryApplicantWindow(String Suffix)
	//*********************
	//Field Validation
	//*********************
	//SetValue_In_PBDataWindow_DP("dw_step","#1", "#7", Suffix)
	//*********************
	//Work Flow
	//*********************
	//Valid Data
	SetValue_In_PBDataWindow_DP("dw_step","#1", "#7", Suffix)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Suffix_PrimaryApplicantWindow","Failed", "","Y")


//**********************************************************************************************************
//@methodName : Validate_DateDailog_ErrorPopup_Title_Message()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will Validate Date Validation Error Popup Title, message && Click on OK Button in Credit Decision Window
//Ex: Validate_DateDailog_ErrorPopup_Title_Message() 
//**********************************************************************************************************
Validate_DateDailog_ErrorPopup_Title_Message()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String ErrorPopupTitle, ErrorPopupMessage
	if DateValidation.WaitWhileExists (10)
		//Get the Error Popup Title
		ErrorPopupTitle = DateValidation.GetAttr("Caption")
		//Get the Error Popup Message
		ErrorPopupMessage = DateValidation.StaticText["* on row number 1 is not a valid date."].GetAttr("Title")
		 writeReportLog("Validation of Error Title: "+ ErrorPopupTitle +" with Popup Message: "+ErrorPopupMessage,"Passed","","")
		//Click OK Button
		DateValidation.OK.Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Validate_DateDailog_ErrorPopup_Title_Message","Failed", "","Y")

//******************************************************************************************************
//@methodName: clickOn_HelpButton_InWindow()
//@Author Chandra
//@Date 31 July 2018
//@Description This is click on Help button && Close the same tab
//Ex:  clickOn_HelpButton_InWindow("Help","scenet")
//********************************************************************************************************
clickOn_HelpButton_InWindow(String buttonName,String pageName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if  BranchPlus.CreditDecision.$buttonName.WaitWhileExists (10)
		BranchPlus.CreditDecision.$buttonName.Click()
		 writeReportLog("Display of Help web page was successful","Passed","","Y")
		//Close Tab of specific page displayed
		 close_SpecificTab_InBrowser_OpenURL(pageName)
	else if  BranchPlus.CreditDecision.$buttonName.WaitWhileExists (10)
		 BranchPlus.CreditDecision.$buttonName.Click()
		  writeReportLog("Display of Help web page was successful","Passed","","Y")
		 //Close Tab of specific page displayed
		 close_SpecificTab_InBrowser_OpenURL(pageName)
	else
		 writeReportLog("Failed to Click on Button : " + buttonName + " in window: " + windowName,"Failed",FailComments,"Button not found")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/clickOn_HelpButton_InWindow","Failed", "" ,"")

//***********************************GENERIC FUNCTION*******************************************
//@methodName: close_SpecificTab_InBrowser(pageName)
//@Author Chandra
//@Date 31 July 2018
//@Description This is will close the tab of specifica page displayed in IE browser
//Ex:  close_SpecificTab_InBrowser("secnet")
//********************************************************************************************************
close_SpecificTab_InBrowser_OpenURL(String pageName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Sleep(3)
	if IEMainPage.DirectUIHWND.CloseTab.WaitWhileExists(2) 
		IEMainPage.DirectUIHWND.CloseTab.Click()
	else if ChromeMainPage.WaitWhileExists(3) 
		 KillProcess("chrome.exe")
	else
		writeReportLog ("Closing "+ pageName + " tab in IE Browser is NOT successful","Failed","","")
	if GetErrorCount()>0  			
		 writeReportLog("Failed in close_SpecificTab_InBrowser_OpenURL","Failed", "" ,"")
	Sleep(2)

//*******************************************************************************************************
//@methodName: Verification_Deleting_CoApplicant_Details()
//@Author Chandra
//@Date 1 Aug 2018
//@Description This is will delete the Co applicant details in Primary Applicant window
//Ex:  Verification_Deleting_CoApplicant_Details()
//********************************************************************************************************
Verification_Deleting_CoApplicant_Details()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Click on Back button
	 clickOnBackButton_CreditDecisionWindow()
	//Validation of window name in Credit Decision Window
	// validate_WindowName_CreditDecision("name")
	SetValue_In_PBDataWindow_DP("dw_coapp","#2","middle_name","")
	 AddNewRow_DeleteRow_Search_CoApplicantWindow("Delete Row")
	 Handle_Dailog_Popup_CreditDecision_Window("w_message", "Yes")
	//	 AddNewRow_DeleteRow_Search_CoApplicantWindow("Delete Row")
	//	
	//	 Handle_Dailog_Popup_CreditDecision_Window("w_message", "Yes")
	//Click on  Button
	 clickOnButton_CreditDecisionWindow()
	//Validation of window name in Credit Decision Window
	// validate_WindowName_CreditDecision("home_addr")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to Verification_Deleting_CoApplicant_Details","Failed", "" ,"")

//*******************************************************************************************************
//@methodName: Handle_Dailog_Popup_CreditDecision_Window(windowName, buttonName)
//@Author Chandra
//@Date 1 Aug 2018
//@Description This is will handle the dialog pop up
//Ex:  Handle_Dailog_Popup_CreditDecision_Window("w_message", "Yes")
//********************************************************************************************************
Handle_Dailog_Popup_CreditDecision_Window(String windowName,String buttonName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if BranchPlus.CreditDecision.$windowName.$buttonName.WaitWhileExists (10)
		BranchPlus.CreditDecision.$windowName.$buttonName.Click()
	else if BranchPlus.CreditDecision.$windowName.$buttonName.WaitWhileExists (10)
		BranchPlus.CreditDecision.$windowName.$buttonName.Click()
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to Handle_Dailog_Popup_CreditDecision_Window","Failed", "" ,"")

//*******************************************************************************************************
//@methodName: Validation_of_CreditCheck_CoApplicant_Window(outputType)
//@Author Chandra
//@Date 1 Aug 2018
//@Description This is validate credit check window for Co Applicant user
//Ex:  Validation_of_CreditCheck_CoApplicant_Window("Persona Plus")
//********************************************************************************************************
Validation_of_CreditCheck_CoApplicant_Window(String outputType)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	// variables
	String lName, fName, ssn_crdtwndw, city_crdtwndw, zipcode_crdtwndw
	Sleep (3)
	 MouseWheel(3,true)
	Sleep (2)
	//Click on Credit OK button
	 Click_CrdtChk_CoApplicantwindow()
	//Select bureau id && output type
	 select_CreditBureau_CreditCheckWindow("EQUIFAX")
	 select_OutputType_CreditCheckWindow(outputType)
	//Validate data in credit Check window
	lName = getValue_CreditCheckWindow("last_name").ToUpper()
	fName = getValue_CreditCheckWindow("first_name").ToUpper()
	ssn_crdtwndw = getValue_CreditCheckWindow("ssn")
	zipcode_crdtwndw = getValue_CreditCheckWindow("zipcode").Replace(" ", "")
	
	 validateDataAndReport(lName,System.GetEnvVar("Joint_CoApp_LastName"),"Validation of Last Name in Credit Check window :"+lName+ " && in Applicant Address window :"+System.GetEnvVar("Joint_CoApp_LastName"))
	 validateDataAndReport(fName,System.GetEnvVar("Joint_CoApp_FirstName"),"Validation of First Name in Credit Check window :"+fName+ " && in Applicant Address window :"+System.GetEnvVar("Joint_CoApp_FirstName"))
	 validateDataAndReport(ssn_crdtwndw,System.GetEnvVar("Joint_CoApp_SSN"),"Validation of SSN in Credit Check window :"+"xxxxx"+ssn_crdtwndw.Right(4)+ " && in Applicant Address window :"+"xxxxx"+System.GetEnvVar("Joint_CoApp_SSN").Right(4))
	 validateDataAndReport(zipcode_crdtwndw,System.GetEnvVar("Joint_CoApp_zipcode"),"Validation of Zip Code in Credit Check window :"+zipcode_crdtwndw+ " && in Applicant Address window :"+System.GetEnvVar("Joint_CoApp_zipcode"))
	//Click on Get Report button
	 click_Button_InWindow_DP("w_wiz_new_cust","w_creditcheck","Get Report")
	AppObject repObj = BranchPlus.CreditReport.Reportdetails
	//Fetching Report Content
	String verifycreditReport = GetValue_PBDataWindow(repObj,"#1","#2")
	//Validating for Credit Report Generation
	 validatePartialDataAndReport(verifycreditReport,"THIS FORM PRODUCED BY EQUIFAX","Validate Credit Report")
	//Click on Close button
	BranchPlus.CreditReport.Close.Click()
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to Validation_of_CreditCheck_CoApplicant_Window","Failed", "" ,"")

//*******************************************************************************************************
//@methodName: getValue_CoApplicantWindow(rowNum,colName)
//@Author Chandra
//@Date 1 Aug 2018
//@Description This is fetch the value of Co Applicant user
//Ex:  getValue_CoApplicantWindow(rowNum,colName)
//********************************************************************************************************
String getValue_CoApplicantWindow(String rowNum,String colName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String sGetValue_CoApplicantWindow
	sGetValue_CoApplicantWindow = CreditDecisionSTEP.CoApplicantTable.Row[rowNum].$colName.GetText()
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getValue_CoApplicantWindow","Failed", "" ,"")
	return sGetValue_CoApplicantWindow
//*******************************************************************************************************
//@methodName: Verification_CoApplicant_Joint_Cosign_ApplicantWindow(cosign_CoApp_ZipCode)
//@Author Chandra
//@Date 1 Aug 2018
//@Description This will verify the details of Co Applicant users
//Ex:  Verification_CoApplicant_Joint_Cosign_ApplicantWindow("23111")
//********************************************************************************************************
Verification_CoApplicant_Joint_Cosign_ApplicantWindow(String cosign_CoApp_ZipCode,String cosign_CoApp_FirstName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String Joint_First_Last_Name, Cosign_First_Last_Name, Cosign_ZipCode
	//Get the value in Joint Co Applicant window
	Joint_First_Last_Name = getValue_In_PBDataWindow_DP("dw_coapp","#1", "compute_1")
	if Joint_First_Last_Name.ToUpper().IndexOf(System.GetEnvVar("Joint_CoApp_FirstName").ToUpper()) > 0 && (Joint_First_Last_Name.ToUpper().IndexOf("JOINT")) > 0 
		 writeReportLog("Validation of Co-Applicant First Name for Joint Type : "+System.GetEnvVar("Joint_CoApp_FirstName").ToUpper(),"Passed","","")
		 writeReportLog("Validation of Co-Applicant Window Type: JOINT","Passed","","")
	//Get the value in Cosign Co Applicant window
	Cosign_First_Last_Name = getValue_In_PBDataWindow_DP("dw_coapp","#2", "compute_1")
	if (Cosign_First_Last_Name.ToUpper().IndexOf(cosign_CoApp_FirstName.ToUpper())) > 0 && Cosign_First_Last_Name.ToUpper().IndexOf("COSIGN") > 0 
		 writeReportLog("Validation of Co-Applicant First Name for Cosign Type: "+cosign_CoApp_FirstName.ToUpper(),"Passed","","")
		 writeReportLog("Validation of Co-Applicant Window Type: COSIGN","Passed","","")
	//Get the value in Cosign Co Applicant window
	Cosign_ZipCode = getValue_In_PBDataWindow_DP("dw_coapp","#2", "zipcode")
	if Cosign_ZipCode.ToUpper().IndexOf(cosign_CoApp_ZipCode.ToUpper()) > 0 
		 writeReportLog("Validation of Co-Applicant Joint Window ZIP Code: "+Cosign_ZipCode.ToUpper(),"Passed","","")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to Verification_CoApplicant_Joint_Cosign_ApplicantWindow","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: Verification_of_TradeinDescription_CollateralWindow(tradeDesc)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Trade in Description field in Collateral window
//Ex  Verification_of_TradeinDescription_CollateralWindow(tradeDesc)
//******************************************************************************************************************
Verification_of_TradeinDescription_CollateralWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//	 	//Field Validation
	//	 	//**************************
	//	 	 //Enter Trade in Description field with invalid data more than 100 characters
	//		AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	//		SetValue_PBDataWindow(crdDecision,"#1","trade_in_descr",random_AlphaNumeric_String(102))
	//	
	//		//Get the Length of Entered value in Trade in Description field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "trade_in_descr")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==100 
	//			 writeReportLog("Validation of Trade in Description field is Accepting only 100 characters: "+getValueLength,"Passed","","")
	//		else
	//			 writeReportLog("Failed : Trade in Description field is Accepting More than 100 characters","Failed", "" ,"")
	//		
	//	
	//***************
	//Work Flow
	//***************
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	String tradeDesc = random_AlphaCharacter_String(100)
	SetValue_PBDataWindow(crdDecision,"#1","trade_in_descr",tradeDesc)
	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "other")
	//Updated Make random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "trade_in_descr","bp_collateral","tradedesc",System.GetEnvVar("ID"))
	 writeReportLog("Entered Trade in Description value: "+ tradeDesc +" in Collateral window (UI-"+"{getValueLength.Length()}"+",DB-100)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_TradeinDescription_CollateralWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Other_CollateralWindow(other)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Other field in Collateral window
//Ex  Verification_of_Other_CollateralWindow(other)
//******************************************************************************************************************
Verification_of_Other_CollateralWindow(String other)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//	 	//Field Validation
	//	 	//**************************
	//	 	 //Enter Other field with invalid data more than 20 characters
	//		AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	//		SetValue_PBDataWindow(crdDecision,"#1","other",random_AlphaNumeric_String(22))
	//	
	//		//Get the Length of Entered value in Other field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "other")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==20 
	//			 writeReportLog("Validation of Other field is Accepting only 20 characters: "+getValueLength,"Passed","","")
	//		else
	//			 writeReportLog("Failed : Other field is Accepting More than 20 characters","Failed", "" ,"")
	//		
	//	
	//***************
	//Work Flow
	//***************
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	other = random_AlphaCharacter_String(20)
	SetValue_PBDataWindow(crdDecision,"#1","other",other)
	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "other")
	//Updated Make random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "other","bp_collateral","other",System.GetEnvVar("ID"))
	 writeReportLog("Entered Other value: "+ other +" in Collateral window (UI-"+"{getValueLength.Length()}"+",DB-20)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Other_CollateralWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Cylinders_CollateralWindow(cylinder)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Cylinders field in Collateral window
//Ex  Verification_of_Cylinders_CollateralWindow(cylinder)
//******************************************************************************************************************
Verification_of_Cylinders_CollateralWindow(String cylinder)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//	 	//Field Validation
	//	 	//**************************
	//	 	 //Enter Cylinders field with invalid data more than 20 characters
	//		AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	//		SetValue_PBDataWindow(crdDecision,"#1","cylinder",random_AlphaNumeric_String(22))
	//	
	//		//Get the Length of Entered value in Cylinders field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "cylinder")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==20 
	//			 writeReportLog("Validation of Cylinders field is Accepting only 20 characters: "+getValueLength,"Passed","","")
	//		else
	//			 writeReportLog("Failed : Cylinders field is Accepting More than 20 characters","Failed", "" ,"")
	//		
	//	
	//***************
	//Work Flow
	//***************
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	cylinder = random_AlphaCharacter_String(20)
	SetValue_PBDataWindow(crdDecision,"#1","cylinder",cylinder)
	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "cylinder")
	//Updated Make random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "cylinder","bp_collateral","cylinder",System.GetEnvVar("ID"))
	 writeReportLog("Entered Cylinder value: "+ cylinder +" in Collateral window (UI-"+"{getValueLength.Length()}"+",DB-20)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Cylinders_CollateralWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Mileage_CollateralWindow(mileage)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Mileage field in Collateral window
//Ex  Verification_of_Mileage_CollateralWindow(mileage)
//******************************************************************************************************************
Verification_of_Mileage_CollateralWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//	 	//Field Validation
	//	 	//**************************
	//	 	 //Enter Mileage field with invalid data more than 6 digits
	//		AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	//		SetValue_PBDataWindow(crdDecision,"#1","mileage",Generate_RandomNumber(7))
	//	
	//		//Get the Length of Entered value in Mileage field
	//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_step","#1", "mileage"))
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==6 
	//			 writeReportLog("Validation of Mileage field is Accepting only 6 digits: "+getValueLength,"Passed","","")
	//		else
	//			 writeReportLog("Failed : Mileage field is Accepting More than 6 digits","Failed", "" ,"")
	//		
	//	
	//***************
	//Work Flow
	//***************
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	String mileage = Generate_RandomNumber_UserDefind("9","6")
	SetValue_PBDataWindow(crdDecision,"#1","mileage",mileage)
	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "mileage")
	//Updated Make random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "mileage","bp_collateral","mileage",System.GetEnvVar("ID"))
	 writeReportLog("Entered Mileage value: "+ mileage +" in Collateral window (UI-"+"{getValueLength.Length()}"+",DB-6)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Mileage_CollateralWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Color_CollateralWindow(color)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Color field in Collateral window
//Ex  Verification_of_Color_CollateralWindow(color)
//******************************************************************************************************************
Verification_of_Color_CollateralWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//	 	//Field Validation
	//	 	//**************************
	//	 	 //Enter Color field with invalid data more than 20 characters
	//		AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	//		SetValue_PBDataWindow(crdDecision,"#1","color",random_AlphaNumeric_String(22))
	//	
	//		//Get the Length of Entered value in Color field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "color")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==20 
	//			 writeReportLog("Validation of Color field is Accepting only 20 characters: "+getValueLength,"Passed","","")
	//		else
	//			 writeReportLog("Failed : Color field is Accepting More than 20 characters","Failed", "" ,"")
	//		
	//	
	//***************
	//Work Flow
	//***************
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	String color = random_AlphaCharacter_String(20)
	SetValue_PBDataWindow (crdDecision, "#1","color", color)
	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "color")
	//Updated Make random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "color","bp_collateral","color",System.GetEnvVar("ID"))
	 writeReportLog("Entered Color value: "+ color +" in Collateral window (UI-"+"{getValueLength.Length()}"+",DB-20)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Color_CollateralWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Year_CollateralWindow(mfyear)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the year field in Collateral window
//Ex  Verification_of_Year_CollateralWindow(mfyear)
//******************************************************************************************************************
Verification_of_Year_CollateralWindow(String mfyear)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//	 	//Field Validation
	//	 	//**************************
	//	 	 //Enter Year field with invalid data more than 5 digits
	//		AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	//		SetValue_PBDataWindow(crdDecision,"#1","year",Generate_RandomNumber(5))
	//	
	//		//Get the Length of Entered value in Year field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "year")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==4 
	//			 writeReportLog("Validation of Year field is Accepting only 4 digits: "+getValueLength,"Passed","","")
	//		else
	//			 writeReportLog("Failed : Year field is Accepting More than 4 digits","Failed", "" ,"")
	//		
	//	
	//***************
	//Work Flow
	//***************
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	SetValue_PBDataWindow(crdDecision,"#1","year",mfyear)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Year_CollateralWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Style_CollateralWindow(style)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Style field in Collateral window
//Ex  Verification_of_Style_CollateralWindow(style)
//******************************************************************************************************************
Verification_of_Style_CollateralWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//	 	//Field Validation
	//	 	//**************************
	//	 	 //Enter Style field with invalid data more than 20 characters
	//		AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	//		SetValue_PBDataWindow(crdDecision,"#1","style",random_AlphaNumeric_String(22))
	//	
	//		//Get the Length of Entered value in Style field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "style")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==20 
	//			 writeReportLog("Validation of Style field is Accepting only 20 characters: "+getValueLength,"Passed","","")
	//		else
	//			 writeReportLog("Failed : Style field is Accepting More than 20 characters","Failed", "" ,"")
	//		
	//	
	//***************
	//Work Flow
	//***************
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	String style = random_AlphaCharacter_String(20)
	SetValue_PBDataWindow(crdDecision,"#1","style",style)
	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "style")
	//Updated Make random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "style","bp_collateral","style",System.GetEnvVar("ID"))
	 writeReportLog("Entered Style value: "+ style +" in Collateral window (UI-"+"{getValueLength.Length()}"+",DB-20)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Style_CollateralWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Model_CollateralWindow(model)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Model field in Collateral window
//Ex  Verification_of_Model_CollateralWindow(model)
//******************************************************************************************************************
Verification_of_Model_CollateralWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//	 	//Field Validation
	//	 	//**************************
	//	 	 //Enter Model field with invalid data more than 20 characters
	//		AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	//		SetValue_PBDataWindow(crdDecision,"#1","model",random_AlphaNumeric_String(22))
	//	
	//		//Get the Length of Entered value in Model field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "model")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==20 
	//			 writeReportLog("Validation of Model field is Accepting only 20 characters: "+getValueLength,"Passed","","")
	//		else
	//			 writeReportLog("Failed : Model field is Accepting More than 20 characters","Failed", "" ,"")
	//		
	//	
	//***************
	//Work Flow
	//***************
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	String model = random_AlphaCharacter_String(20)
	SetValue_PBDataWindow(crdDecision,"#1","model",model)
	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "model")
	//Updated Make random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "model","bp_collateral","model",System.GetEnvVar("ID"))
	 writeReportLog("Entered Model value: "+ model +" in Collateral window (UI-"+"{getValueLength.Length()}"+",DB-20)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Model_CollateralWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Make_CollateralWindow(make)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Make field in Collateral window
//Ex  Verification_of_Make_CollateralWindow(make)
//******************************************************************************************************************
Verification_of_Make_CollateralWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	// 	if System.GetEnvVar("FV_Flag") == "Y"
	// 		//**************************
	//	 	//Field Validation
	//	 	//**************************
	//	 	 //Enter Make field with invalid data more than 20 characters
	//		AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	//		SetValue_PBDataWindow(crdDecision,"#1","make",random_AlphaNumeric_String(22))
	//	
	//		//Get the Length of Entered value in Make field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "make")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==20 
	//			 writeReportLog("Validation of Make field is Accepting only 20 characters: "+getValueLength,"Passed","","")
	//		else
	//			 writeReportLog("Failed : Make field is Accepting More than 20 characters","Failed", "" ,"")
	//		
	// 	
	//***************
	//Work Flow
	//***************
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	String make = random_AlphaCharacter_String(20)
	SetValue_PBDataWindow(crdDecision,"#1","make",make)
	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "make")
	//Updated Make random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "make","bp_collateral","make",System.GetEnvVar("ID"))
	 writeReportLog("Entered Make value: "+ make +" in Collateral window (UI-"+"{getValueLength.Length()}"+",DB-20)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Make_CollateralWindow","Failed", "","Y")
 
//*****************************************************************************************************************
//@methodName: Verification_of_Desc_CollateralWindow(desc)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Description field in Collateral window
//Ex  Verification_of_Desc_CollateralWindow(desc)
//******************************************************************************************************************
Verification_of_Desc_CollateralWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	// 	if System.GetEnvVar("FV_Flag") == "Y"
	// 		//**************************
	//	 	//Field Validation
	//	 	//**************************
	//	 	 //Enter Description field with invalid data more than 40 characters
	//		AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	//		SetValue_PBDataWindow(crdDecision,"#1","descr",random_AlphaNumeric_String(42))
	//	
	//		//Get the Length of Entered value in Description field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "descr")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() == 40
	//			 writeReportLog("Validation of Description field is Accepting only 40 characters: "+getValueLength,"Passed","","")
	//		else
	//			 writeReportLog("Failed : Description field is Accepting More than 40 characters","Failed", "" ,"")
	//		
	// 	
	//***************
	//Work Flow
	//***************
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	String descr = random_AlphaCharacter_String(40)
	SetValue_PBDataWindow(crdDecision,"#1","descr",descr)
	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "descr")
	//Updated Description random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "descr","bp_collateral","descr",System.GetEnvVar("ID"))
	 writeReportLog("Entered Decription value: "+ descr +" in Collateral window(UI-"+"{getValueLength.Length()}"+",DB-40)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Desc_CollateralWindow","Failed", "","Y")
 
//*****************************************************************************************************************
//@methodName: Verification_of_vin_CollateralWindow(vin)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the VIN field in Collateral window
//Ex  Verification_of_vin_CollateralWindow(vin)
//******************************************************************************************************************
 Verification_of_vin_CollateralWindow(String vin)
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	 if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Enter VIN field with invalid data more than 17 characters
		SetValue_PBDataWindow(crdDecision,"#1","vin",random_AlphaNumeric_String(19))
		//Get the Length of Entered value in VIN field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "vin")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() ==17 
			 writeReportLog("Validation of VIN field is Accepting only 17 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : VIN field is Accepting More than 17 characters","Failed", "" ,"")
	//***************
	//Work Flow
	//***************
	SetValue_PBDataWindow(crdDecision,"#1","vin",vin)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_vin_CollateralWindow","Failed", "","Y")
 
//*****************************************************************************************************************
//@methodName: get_LoanType_CreditDecision()
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will fetch the Loan type in Collateral window
//Ex: get_LoanType_CreditDecision()
//*****************************************************************************************************************
String get_LoanType_CreditDecision()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String sGet_LoanType_CreditDecision = GetValue_In_PBDataWindow_DP("dw_step","#1","coll_type")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_LoanType_CreditDecision","Failed", "","Y")
	return sGet_LoanType_CreditDecision

//*****************************************************************************************************************
//@methodName: select_Radiobutton_NewCollateral_CreditDecision(radiobuttonName)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will select the New Collateral radiobutton in Collateral window
//Ex:  select_Radiobutton_NewCollateral_CreditDecision("Yes")
//*****************************************************************************************************************
select_Radiobutton_NewCollateral_CreditDecision(String radiobuttonName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	SetValue_In_PBDataWindow_DP("dw_step","#1","new_yn",radiobuttonName)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: select_Radiobutton_NewCollateral_CreditDecision","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_InterestRate_FinanceDetailWindow(intrate)
//@Author Ranjitha
//@Date 7th Aug 2018
//@Description This will verify Interest rate in Finance Detail window
//Ex:  Verification_of_InterestRate_FinanceDetailWindow("0.16")
//*****************************************************************************************************************
Verification_of_InterestRate_FinanceDetailWindow(String intrate)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Enter Interest Rate field with invalid data more than 3 digits
		SetValue_In_PBDataWindow_DP("dw_step", "#1","int_rate",Generate_RandomNumber(8))
		//Validate the warning pop up
		 Validate_ErrorPopup_Title_Message()
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		//Validate the warning pop up
		 Validate_ErrorPopup_Title_Message()
		//Validate the error pop up
		 Validate_ErrorPopup_Title_Message()
		//Click on Back button
		 clickOnBackButton_CreditDecisionWindow()
		//Validate the error pop up
		 Validate_ErrorPopup_Title_Message()
	//	//Get the Length of Entered value in Interest Rate field
	//	getValueLength = int(getValue_In_PBDataWindow_DP("dw_step","#1","int_rate"))
	//	//Comparing the Length of accepting characters 
	//	if getValueLength.Length() ==7 
	//		 writeReportLog("Validation of Interest Rate field is Accepting only 7 digits","Passed","","")
	//	else
	//		 writeReportLog("Failed : Interest Rate field is Accepting more than 7 digits: "+getValueLength,"Failed", "" ,"")
	//	 
	//***************
	//Work Flow
	//***************
	SetValue_In_PBDataWindow_DP("dw_step","#1","int_rate",intrate)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_InterestRate_FinanceDetailWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Terms_FinanceDetailWindow(terms)
//@Author Ranjitha
//@Date 7th Aug 2018
//@Description This will verify Terms in Finance Detail window
//Ex:  Verification_of_Terms_FinanceDetailWindow("60")
//*****************************************************************************************************************
Verification_of_Terms_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//		//Field Validation
	//		//**************************
	//		//Enter Terms field with invalid data more than 3 digits
	//		SetValue_In_PBDataWindow_DP("dw_step", "#1","nbr_of_months",Generate_RandomNumber(5))
	//			 
	//		//Get the Length of Entered value in Terms field
	//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_step","#1","nbr_of_months"))
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==3 
	//			 writeReportLog("Validation of Terms field is Accepting only 3 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : Terms field is Accepting more than 3 digits: "+getValueLength,"Failed", "" ,"")
	//		 
	//	
	//***************
	//Work Flow
	//***************
	String terms = Generate_RandomNumber_UserDefind("9","3")
	SetValue_In_PBDataWindow_DP("dw_step","#1","nbr_of_months",terms)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "nbr_of_months")
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "nbr_of_months","bp_financedetails","loanterm",ID)
	 writeReportLog("Entered Term value: "+ terms +" in Finance Detail window (UI-"+"{getValueLength.Length()}"+",DB-3)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Terms_FinanceDetailWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_LoanAmount_FinanceDetailWindow(loanamt)
//@Author Ranjitha
//@Date 7th Aug 2018
//@Description This will verify Loan Amount in Finance Detail window
//Ex:  Verification_of_LoanAmount_FinanceDetailWindow("12000")
//*****************************************************************************************************************
Verification_of_LoanAmount_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//		//Field Validation
	//		//**************************
	//		//Enter Loan Amount field with invalid data more than 8 digits
	//		SetValue_In_PBDataWindow_DP("dw_step", "#1","purch_amt",Generate_RandomNumber(10))
	//			 
	//		//Get the Length of Entered value in Loan Amount field
	//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_step","#1","purch_amt"))
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==8 
	//			 writeReportLog("Validation of Loan Amount field is Accepting only 8 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : Loan Amount field is Accepting more than 8 digits: "+getValueLength,"Failed", "" ,"")
	//		 
	//	
	//***************
	//Work Flow
	//***************
	String loanamt = Generate_RandomNumber_UserDefind("9","8")
	SetValue_In_PBDataWindow_DP("dw_step","#1","purch_amt",loanamt)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "purch_amt")
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "purch_amt","bp_financedetails","loanamount",ID)
	 writeReportLog("Entered Loan Amount value: "+ loanamt +" in Finance Detail window (UI-"+"{getValueLength.Length()}"+",DB-8)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_LoanAmount_FinanceDetailWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Payment_FinanceDetailWindow(payamt)
//@Author Ranjitha
//@Date 7th Aug 2018
//@Description This will verify Payment  in Finance Detail window
//Ex:  Verification_of_Payment_FinanceDetailWindow("400")
//*****************************************************************************************************************
Verification_of_Payment_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//		//Field Validation
	//		//**************************
	//		//Enter payment  field with invalid data more than 8 digits
	//		SetValue_In_PBDataWindow_DP("dw_step", "#1","payment_",Generate_RandomNumber(10))
	//			 
	//		//Get the Length of Entered value in payment  field
	//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_step","#1","payment_"))
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==8 
	//			 writeReportLog("Validation of Payment  field is Accepting only 8 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : Payment  field is Accepting more than 8 digits: "+getValueLength,"Failed", "" ,"")
	//		 
	//	
	//***************
	//Work Flow
	//***************
	String payamt = Generate_RandomNumber_UserDefind("9","8")
	SetValue_In_PBDataWindow_DP("dw_step","#1","payment_",payamt)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "payment_")
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "payment_","bp_financedetails","payment",ID)
	 writeReportLog("Entered payment  Amount value: "+ payamt +" in Finance Detail window (UI-"+"{getValueLength.Length()}"+",DB-8)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Payment_FinanceDetailWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_DealerDiscount_FinanceDetailWindow(discamt)
//@Author Ranjitha
//@Date 7th Aug 2018
//@Description This will verify Dealer Discount in Finance Detail window
//Ex:  Verification_of_DealerDiscount_FinanceDetailWindow("750")
//*****************************************************************************************************************
Verification_of_DealerDiscount_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//		//Field Validation
	//		//**************************
	//		//Enter Dealer Discount field with invalid data more than 8 digits
	//		SetValue_In_PBDataWindow_DP("dw_step", "#1","discount_amt",Generate_RandomNumber(10))
	//			 
	//		//Get the Length of Entered value in Dealer Discount field
	//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_step","#1","discount_amt"))
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==8 
	//			 writeReportLog("Validation of Dealer Discount field is Accepting only 8 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : Dealer Discount field is Accepting more than 8 digits: "+getValueLength,"Failed", "" ,"")
	//		 
	//	
	//***************
	//Work Flow
	//***************
	//Enter Discount Amt with valid data
	String discamt = Generate_RandomNumber_UserDefind("9","8")
	SetValue_In_PBDataWindow_DP("dw_step","#1","discount_amt",discamt)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "discount_amt")
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "discount_amt","bp_financedetails","dealerdiscount",ID)
	 writeReportLog("Entered Discount Amount value: "+ discamt +" in Finance Detail window (UI-"+"{getValueLength.Length()}"+",DB-8)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_DealerDiscount_FinanceDetailWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: validateContractDate_CreditDecisionWindow()
//@Author Ranjitha
//@Date 7th Aug 2018
//@Description This will validate Contract Date in Finance Detail window
//Ex:  validateContractDate_CreditDecisionWindow()
//*****************************************************************************************************************
validateContractDate_CreditDecisionWindow()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	Date dDate = Date.Now()
	String sDate = dDate.Format("MM/dd/yyyy")
	//Verify Contract date validation 
	String loanDate = GetValue_PBDataWindow(crdDecision,"#1","funding_dt")
	//Validating the Data
	 validateDataAndReport(loanDate,sDate,"Validate Contract date: " + loanDate)	
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to validateContractDate_CreditDecisionWindow","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: Verification_of_OtherFee_ChargeAmt_FinanceDetailWindow(otherFee)
//@Author Ranjitha
//@Date 8th Aug 2018
//@Description This will verify Service Point VSC Charge Amt in Finance Detail window
//Ex:  Verification_of_OtherFee_ChargeAmt_FinanceDetailWindow(otherFee)
//*****************************************************************************************************************
Verification_of_OtherFee_ChargeAmt_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//add component description: OTHER
	 click_AddRow_Button_CreditDecisionWindow("Add Row")
	//select component description
	 Select_ComponentDescription_FinanceDetail_CreditDecision_Window("3","OTHER")
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//		//Field Validation
	//		//**************************
	//		//Enter Other Fee - Charge Amt field with invalid data more than 8 digits
	//		 enter_ChargeAmount_CreditDecision_window("3",Generate_RandomNumber(10))
	//		
	//		//Get the Length of Entered value in Other Fee - Charge Amt field
	//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_component","#3","charge_amt"))
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==6 
	//			 writeReportLog("Validation of Other Fee - Charge Amt field is Accepting only 6 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : Other Fee - Charge Amt field is Accepting more than 6 digits: "+getValueLength,"Failed", "" ,"")
	//		 
	//	
	//***************
	//Work Flow
	//***************
	//enter charge amount
	String otherFee = Generate_RandomNumber_UserDefind("9","8")
	 enter_ChargeAmount_CreditDecision_window("3",otherFee)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_component","#3", "charge_amt")
	//Updated Repo comm Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#3", "charge_amt","bp_financedetails","otherfee_fdw",ID)
	 writeReportLog("Entered Other Fee Amount value: "+ otherFee +" in Finance Detail window (UI-"+"{getValueLength.Length()}"+",DB-6)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_OtherFee_ChargeAmt_FinanceDetailWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ServicePointVSC_RepoComm_FinanceDetailWindow(RepoComm)
//@Author Ranjitha
//@Date 8th Aug 2018
//@Description This will verify Service Point VSC Repo Comm in Finance Detail window
//Ex:  Verification_of_ServicePointVSC_RepoComm_FinanceDetailWindow(RepoComm)
//*****************************************************************************************************************
Verification_of_ServicePointVSC_RepoComm_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//		//Field Validation
	//		//**************************
	//		//Enter Service Point VSC - Repo Comm field with invalid data more than 6 digits
	//		 enter_RepoComm_CreditDecision_window("2",Generate_RandomNumber(10))
	//		
	//		//Get the Length of Entered value in Service Point VSC - Repo Comm field
	//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_component","#2","rep_comm"))
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==6 
	//			 writeReportLog("Validation of Service Point VSC - Repo Comm field is Accepting only 6 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : Service Point VSC - Repo Comm field is Accepting more than 6 digits: "+getValueLength,"Failed", "" ,"")
	//		 
	//	
	//***************
	//Work Flow
	//***************
	//enter Repo comm
	String RepoComm = Generate_RandomNumber_UserDefind("9","8")
	 enter_RepoComm_CreditDecision_window("2",RepoComm)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_component","#2", "rep_comm")
	//Updated Repo comm Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#2", "rep_comm","bp_financedetails","repocomm_vsc_fdw",ID)
	 writeReportLog("Entered Repo Comm Amount value: "+ RepoComm +" in Finance Detail window (UI-"+"{getValueLength.Length()}"+",DB-6)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ServicePointVSC_RepoComm_FinanceDetailWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ServicePointVSC_DealerComm_FinanceDetailWindow(DealerComm)
//@Author Ranjitha
//@Date 8th Aug 2018
//@Description This will verify Service Point VSC Dealer Comm in Finance Detail window
//Ex:  Verification_of_ServicePointVSC_DealerComm_FinanceDetailWindow(DealerComm)
//*****************************************************************************************************************
Verification_of_ServicePointVSC_DealerComm_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//		//Field Validation
	//		//**************************
	//		//Enter Service Point VSC - Dealer Comm field with invalid data more than 6 digits
	//		 enter_DealerComm_CreditDecision_window("2",Generate_RandomNumber(10))
	//		
	//		//Get the Length of Entered value in Service Point VSC - Dealer Comm field
	//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_component","#2","dealer_comm"))
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==6 
	//			 writeReportLog("Validation of Service Point VSC - Dealer Comm field is Accepting only 6 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : Service Point VSC - Dealer Comm field is Accepting more than 6 digits: "+getValueLength,"Failed", "" ,"")
	//		 	
	//	
	//***************
	//Work Flow
	//***************
	//enter dealer comm
	String DealerComm = Generate_RandomNumber_UserDefind("9","8")
	 enter_DealerComm_CreditDecision_window("2",DealerComm)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_component","#2", "dealer_comm")
	//Updated Dealer comm Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#2", "dealer_comm","bp_financedetails","dealercomm_vsc_fdw",ID)
	 writeReportLog("Entered Dealer Comm Amount value: "+ DealerComm +" in Finance Detail window (UI-"+"{getValueLength.Length()}"+",DB-6)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ServicePointVSC_DealerComm_FinanceDetailWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ServicePointVSC_SurChrgAmt_FinanceDetailWindow(SurAmt)
//@Author Ranjitha
//@Date 8th Aug 2018
//@Description This will verify Service Point VSC SurChrg Amt in Finance Detail window
//Ex:  Verification_of_ServicePointVSC_SurChrgAmt_FinanceDetailWindow(SurAmt)
//*****************************************************************************************************************
Verification_of_ServicePointVSC_SurChrgAmt_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//		//Field Validation
	//		//**************************
	//		//Enter Service Point VSC - SurChrg Amt field with invalid data more than 8 digits
	//		 enter_SurchargeAmount_CreditDecision_window("2",Generate_RandomNumber(10))
	//		
	//		//Get the Length of Entered value in Service Point VSC - SurChrg Amt field
	//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_component","#2","surcharge_amt"))
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==6 
	//			 writeReportLog("Validation of Service Point VSC - SurChrg Amt field is Accepting only 6 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : Service Point VSC - SurChrg Amt field is Accepting more than 6 digits: "+getValueLength,"Failed", "" ,"")
	//		 
	//	
	//***************
	//Work Flow
	//***************
	//enter surcharge amount
	String SurAmt = Generate_RandomNumber_UserDefind("9","8")
	 enter_SurchargeAmount_CreditDecision_window(2,SurAmt)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_component","#2", "surcharge_amt")
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#2", "surcharge_amt","bp_financedetails","suramount_fdw",ID)
	 writeReportLog("Entered Sur Charge Amount value: "+ SurAmt +" in Finance Detail window (UI-"+"{getValueLength.Length()}"+",DB-6)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ServicePointVSC_SurChrgAmt_FinanceDetailWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ServicePointVSC_ChargeAmt_FinanceDetailWindow(ChrgeAmt)
//@Author Ranjitha
//@Date 8th Aug 2018
//@Description This will verify Service Point VSC Charge Amt in Finance Detail window
//Ex:  Verification_of_ServicePointVSC_ChargeAmt_FinanceDetailWindow(ChrgeAmt)
//*****************************************************************************************************************
Verification_of_ServicePointVSC_ChargeAmt_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//		//Field Validation
	//		//**************************
	//		//Enter Service Point VSC - Charge Amt field with invalid data more than 8 digits
	//		 enter_ChargeAmount_CreditDecision_window("2",Generate_RandomNumber(10))
	//		
	//		//Get the Length of Entered value in Service Point VSC - Charge Amt field
	//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_component","#2","charge_amt"))
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==6 
	//			 writeReportLog("Validation of Service Point VSC - Charge Amt field is Accepting only 6 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : Service Point VSC - Charge Amt field is Accepting more than 6 digits: "+getValueLength,"Failed", "" ,"")
	//		 
	//	
	//***************
	//Work Flow
	//***************
	//enter charge amount
	String ChrgeAmt = Generate_RandomNumber_UserDefind("9","8")
	 enter_ChargeAmount_CreditDecision_window("2",ChrgeAmt)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_component","#1", "charge_amt")
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#1", "charge_amt","bp_financedetails","chargeamount_fdw",ID)
	 writeReportLog("Entered Charge Amount value: "+ ChrgeAmt +" in Finance Detail window (UI-"+"{getValueLength.Length()}"+",DB-6)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ServicePointVSC_ChargeAmt_FinanceDetailWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_PFSGAP_RepoComm_FinanceDetailWindow(RepoComm)
//@Author Ranjitha
//@Date 8th Aug 2018
//@Description This will verify PFS GAP Repo Comm in Finance Detail window
//Ex:  Verification_of_PFSGAP_RepoComm_FinanceDetailWindow(RepoComm)
//*****************************************************************************************************************
Verification_of_PFSGAP_RepoComm_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//		//Field Validation
	//		//**************************
	//		//Enter PFS GAP - Repo Comm field with invalid data more than 6 digits
	//		 enter_RepoComm_CreditDecision_window("1",Generate_RandomNumber(10))
	//		
	//		//Get the Length of Entered value in PFS GAP - Repo Comm field
	//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_component","#1","rep_comm"))
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==6 
	//			 writeReportLog("Validation of PFS GAP - Repo Comm field is Accepting only 6 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : PFS GAP - Repo Comm field is Accepting more than 6 digits: "+getValueLength,"Failed", "" ,"")
	//		 
	//	
	//***************
	//Work Flow
	//***************
	//enter Repo comm
	String RepoComm = Generate_RandomNumber_UserDefind("9","8")
	 enter_RepoComm_CreditDecision_window("1",RepoComm)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_component","#1", "rep_comm")
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#1", "rep_comm","bp_financedetails","repocomm_fdw",ID)
	 writeReportLog("Entered Repo comm Amount value: "+ RepoComm +" in Finance Detail window (UI-"+"{getValueLength.Length()}"+",DB-6)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_PFSGAP_RepoComm_FinanceDetailWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_PFSGAP_DealerComm_FinanceDetailWindow(DealerComm)
//@Author Ranjitha
//@Date 8th Aug 2018
//@Description This will verify PFS GAP Dealer Comm in Finance Detail window
//Ex:  Verification_of_PFSGAP_DealerComm_FinanceDetailWindow(DealerComm)
//*****************************************************************************************************************
Verification_of_PFSGAP_DealerComm_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//		//Field Validation
	//		//**************************
	//		//Enter PFS GAP - Dealer Comm field with invalid data more than 6 digits
	//		 enter_DealerComm_CreditDecision_window("1",Generate_RandomNumber(10))
	//		
	//		//Get the Length of Entered value in PFS GAP - Dealer Comm field
	//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_component","#1","dealer_comm"))
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==6 
	//			 writeReportLog("Validation of PFS GAP - Dealer Comm field is Accepting only 6 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : PFS GAP - Dealer Comm field is Accepting more than 6 digits: "+getValueLength,"Failed", "" ,"")
	//		 
	//	
	//***************
	//Work Flow
	//***************
	//enter dealer comm
	String DealerComm = Generate_RandomNumber_UserDefind("9","8")
	 enter_DealerComm_CreditDecision_window("1",DealerComm)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_component","#1", "dealer_comm")
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#1", "dealer_comm","bp_financedetails","dealercomm_fdw",ID)
	 writeReportLog("Entered Dealer comm Amount value: "+ DealerComm +" in Finance Detail window (UI-"+"{getValueLength.Length()}"+",DB-8)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_PFSGAP_DealerComm_FinanceDetailWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_PFSGAP_ChargeAmt_FinanceDetailWindow(GapChrgAmt)
//@Author Ranjitha
//@Date 8th Aug 2018
//@Description This will verify PFS GAP Charge Amount in Finance Detail window
//Ex:  Verification_of_PFSGAP_ChargeAmt_FinanceDetailWindow(GapChrgAmt)
//*****************************************************************************************************************
Verification_of_PFSGAP_ChargeAmt_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//		//Field Validation
	//		//**************************
	//		//Enter PFS GAP - Charge Amt field with invalid data more than 8 digits
	//		 enter_ChargeAmount_CreditDecision_window("1",Generate_RandomNumber(10))
	//		
	//		//Get the Length of Entered value in PFS GAP - Charge Amt field
	//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_component","#1","charge_amt"))
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() ==6 
	//			 writeReportLog("Validation of PFS GAP - Charge Amt field is Accepting only 6 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : PFS GAP - Charge Amt field is Accepting more than 6 digits: "+getValueLength,"Failed", "" ,"")
	//		 
	//	
	//***************
	//Work Flow
	//***************
	String DocStampAmtBefore, GapChrgAmt,getValueLength
	if System.GetEnvVar("currentState") == "FL" 
		//get DocStamp amount
		DocStampAmtBefore = get_ChgAmt_CreditDecision_window("1")
		//enter charge amount
		GapChrgAmt = Generate_RandomNumber_UserDefind("9","8")
		 enter_ChargeAmount_CreditDecision_window("1",GapChrgAmt)
		 sendKeys("<TAB>")
		getValueLength = getValue_In_PBDataWindow_DP("dw_component","#1", "charge_amt")
		//Updated Discount Amt random data in DB
		 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#1", "charge_amt","bp_financedetails","gapchargeamount_fdw",ID)
		 writeReportLog("Entered charge Amount value: "+ GapChrgAmt +" in Finance Detail window (UI-"+"{getValueLength.Length()}"+",DB-6)","Passed",FailComments,"")
	else
		//enter charge amount
		GapChrgAmt = Generate_RandomNumber_UserDefind("9","8")
		 enter_ChargeAmount_CreditDecision_window("1",GapChrgAmt)
		 sendKeys("<TAB>")
		getValueLength = getValue_In_PBDataWindow_DP("dw_component","#1", "charge_amt")
		//Updated Discount Amt random data in DB
		 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#1", "charge_amt","bp_financedetails","gapchargeamount_fdw",ID)
		 writeReportLog("Entered charge Amount value: "+ GapChrgAmt +" in Finance Detail window (UI-"+"{getValueLength.Length()}"+",DB-6)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_PFSGAP_ChargeAmt_FinanceDetailWindow","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Judgment_Checkbox_AccountTab(value)
//@Author Ranjitha
//@Date 10th Aug 2018
//@Description This will verify Judgment checkbox in Account tab
//Ex:  Verification_of_Judgment_Checkbox_AccountTab("No")
//*****************************************************************************************************************
Verification_of_Judgment_Checkbox_AccountTab(String value)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_acct
	String date = Date.Now().Format("MM/dd/yyyy")
	if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Select Judgment checkbox
		SetValue_PBDataWindow(tblwindow,"#1","judgment_yn","ON")
		 TypeText_PBDataWindow(tblwindow,"#1","judgment_dt",date)
		//***************
		//Work Flow
		//***************
	 //Unselect Judgment Checkbox
	SetValue_PBDataWindow(tblwindow,"#1","judgment_yn",value)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Judgment_Checkbox_AccountTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Legal_Checkbox_AccountTab(value)
//@Author Ranjitha
//@Date 10th Aug 2018
//@Description This will verify Legal checkbox in Account tab
//Ex:  Verification_of_Legal_Checkbox_AccountTab("No")
//*****************************************************************************************************************
Verification_of_Legal_Checkbox_AccountTab(String value)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String label
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_acct
	AppObject tblwindow1 = BranchPlus.CustomerF2Window.dw_account_status_display
	if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Select legal checkbox
		SetValue_PBDataWindow(tblwindow,"#1","legal_yn","ON")
		//Clickon Save button
		 clickOnSaveButon()
		//Validate label in Account tab
		label = GetValue_PBDataWindow(tblwindow1,"#1","account_msg")
		if label.ToUpper() == "LEGAL" 
			writeReportLog ("Legal checkbox is checked && Label : "+label+" is displayed","Passed","","")
		//***************
		//Work Flow
		//***************
	 //Unselect legal Checkbox
	SetValue_PBDataWindow(tblwindow,"#1","legal_yn",value)
	//Clickon Save button
	 clickOnSaveButon()
	if BranchPlus.CustomerF2Window.dw_account_status_display.WaitWhileExists (10)
	else
		writeReportLog ( "Legal checkbox is unchecked && Label is disappeared","Passed","","")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Legal_Checkbox_AccountTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_PlusLoan_Checkbox_AccountTab(value)
//@Author Ranjitha
//@Date 10th Aug 2018
//@Description This will verify Plus Loan checkbox in Account tab
//Ex:  Verification_of_PlusLoan_Checkbox_AccountTab("No")
//*****************************************************************************************************************
Verification_of_PlusLoan_Checkbox_AccountTab(String value)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_acct
	if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Validate Plus loan checkbox
		String plusloan = GetValue_PBDataWindow(tblwindow,"#1","plus_loan_yn")
		if plusloan.ToUpper() == "ON" 
			writeReportLog ("Plus Loan checkbox is checked","Passed","","")
	//***************
	//Work Flow
	//***************
	 //Unselect Plus Loan Checkbox
	SetValue_PBDataWindow(tblwindow,"#1","plus_loan_yn",value)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_PlusLoan_Checkbox_AccountTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_BankDraft_Checkbox_AccountTab(value)
//@Author Ranjitha
//@Date 10th Aug 2018
//@Description This will verify Bank Draft checkbox in Account tab
//Ex:  Verification_of_BankDraft_Checkbox_AccountTab("No")
//*****************************************************************************************************************
Verification_of_BankDraft_Checkbox_AccountTab(String value)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_acct
	if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Select bank draft checkbox
		SetValue_PBDataWindow(tblwindow,"#1","bank_draft_yn","ON")
	//***************
	//Work Flow
	//***************
	 //Unselect Bank Draft Checkbox
	SetValue_PBDataWindow(tblwindow,"#1","bank_draft_yn",value)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_BankDraft_Checkbox_AccountTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Note_AccountTab(note)
//@Author Ranjitha
//@Date 10th Aug 2018
//@Description This will verify Note field in Account tab
//Ex:  Verification_of_Note_AccountTab("Automated Testing Note")
//*****************************************************************************************************************
Verification_of_Note_AccountTab(String note)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_acct
	if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Enter Note field with invalid data more than 255 digits
		SetValue_PBDataWindow(tblwindow,"#1","note",random_AlphaNumeric_String(258))
		//Get the Length of Entered value in Note field
		String getValueLength = getValue_In_PBDataWindow_DP("dw_acct","#1","note")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() <= 256 
			 writeReportLog("Validation of Note field is Accepting only 255 digits","Passed","","")
		else
			 writeReportLog("Failed : Note field is Accepting more than 255 digits: "+getValueLength,"Failed", "" ,"")
	//***************
	//Work Flow
	//***************
	 //enter Note
	SetValue_PBDataWindow(tblwindow,"#1","note",note)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Note_AccountTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_DeleteCoApplicant_details_CoapplicantTab()
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will Delete the coapplicants in Co Applicant tab
//Ex:  Verification_of_DeleteCoApplicant_details_CoapplicantTab()
//*****************************************************************************************************************
Verification_of_DeleteCoApplicant_details_CoapplicantTab()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Click on Delete button
	 clickButton_Delete()
	//Click on Yes button
	 clickButton_InWindow("w_message","Yes")
	//Click on Delete button
	 clickButton_Delete()
	//Click on Yes button
	 clickButton_InWindow("w_message","Yes")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_DeleteCoApplicant_details_CoapplicantTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_AddCoApplicant_details_CoapplicantTab(lastName,firstName,ssn,affilaion)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will add the coapplicant details in Search Co Applicant window
//Ex:  Verification_of_AddCoApplicant_details_CoapplicantTab(lastName,firstName,ssn,affilaion)
//*****************************************************************************************************************
Verification_of_AddCoApplicant_details_CoapplicantTab(String lastName,String firstName,String ssn,String affilaion)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String getValueLength
	AppObject tblwindow = BranchPlus.CreditDecision.w_search_coapplicant.w_search.dw_search
	if System.GetEnvVar("FV_Flag") == "Y"
		//Field validation
		//Validation of Last Name field
		SetValue_PBDataWindow(tblwindow,"#1","last_name",random_AlphaNumeric_String(32))
		//Get the Length of Entered value in last name field
		getValueLength = GetValue_PBDataWindow(tblwindow,"#1","last_name")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 30 
			 writeReportLog("Validation of Last Name field is Accepting only 30 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed to Last Name is Accepting More than 30 characters","Failed", "" ,"")
	//Woek flow -Valid Data 
	 TypeText_PBDataWindow(tblwindow,"#1","last_name",lastName)
	//****************************************************************************************
	if System.GetEnvVar("FV_Flag") == "Y"
		//Field validation
		//Validation of First Name field
		AppObject tblwindow = BranchPlus.CreditDecision.w_search_coapplicant.w_search.dw_search
		SetValue_PBDataWindow(tblwindow,"#1","first_name",random_AlphaNumeric_String(32))
		//Get the Length of Entered value in last name field
		getValueLength = GetValue_PBDataWindow(tblwindow,"#1","first_name")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 30 
			 writeReportLog("Validation of First Name field is Accepting only 30 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed to First Name is Accepting More than 30 characters","Failed", "" ,"")
	//Work Flow - Valid Data 
	 TypeText_PBDataWindow(tblwindow,"#1","first_name",firstName)
	//****************************************************************************************
	if System.GetEnvVar("FV_Flag") == "Y"
		//Field validation
		//Validation of SSN field
		AppObject tblwindow = BranchPlus.CreditDecision.w_search_coapplicant.w_search.dw_search
		SetValue_PBDataWindow(tblwindow,"#1","ssn",Generate_RandomNumber(10))
		//Get the Length of Entered value in last name field
		getValueLength = GetValue_PBDataWindow(tblwindow,"#1","ssn")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 9 
			 writeReportLog("Validation of SSN field is Accepting only 9 digits: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed to SSN is Accepting More than 9 digits","Failed", "" ,"")
	//Work Flow - Valid Data 
	 TypeText_PBDataWindow(tblwindow,"#1","ssn",ssn)
	//********************************************************************************************
	//Select the affiliation
	 TypeText_PBDataWindow(tblwindow,"#1","affil_type",affilaion)
	//Click on OK button
	 click_Button_InWindow_DP("w_search_coapplicant","w_search","Ok")
	//Click on Close button
	 clickButton_InWindow("w_search_coapplicant","Close")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_AddCoApplicant_details_CoapplicantTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: verification_Of_Adding_ExistingCoapplicantDetails()
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will add existing applicant in Add Co Applicant window
//Ex:  verification_Of_Adding_ExistingCoapplicantDetails()
//*****************************************************************************************************************
verification_Of_Adding_ExistingCoapplicantDetails()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblwindow = BranchPlus.CreditDecision.w_search_coapplicant.w_search.dw_search
	 SelectCell_PBDataWindow(tblwindow,"#1","first_name")
	 TypeText_PBDataWindow(tblwindow,"#1","first_name","B")
	//Click on OK button
	 click_Button_InWindow_DP("w_search_coapplicant","w_search","Ok")
	//Click on Add Cosign button
	 clickOnButton_InWindow("Add Coapplicant","Add CO&SIGN")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: verification_Of_Adding_ExistingCoapplicantDetails","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: createNewCoapplicant()
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will Create New coapplicant in Search Co Applicant window
//Ex:  createNewCoapplicant()
//*****************************************************************************************************************
createNewCoapplicant()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Click on Add Row button
	 ClickonAddRow_Button_F2Window()
	//Click on Cancel button
	 click_Button_InWindow_DP("w_search_coapplicant","w_search","Cancel")
	//Click on Create New button
	 clickButton_InWindow("w_search_coapplicant","Create &New")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: createNewCoapplicant","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_AddedCoApplicant_details_CoapplicantTab()
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will Verify the Newly added coapplicant details Co Applicant tab
//Ex:  Verification_of_AddedCoApplicant_details_CoapplicantTab()
//*****************************************************************************************************************
Verification_of_AddedCoApplicant_details_CoapplicantTab()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Get the data from CoApplicant tab
	String lastName, firstName, SSN, affiliation, primaryLang, expLang
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_coapp
	Sleep (2)
	lastName = GetValue_PBDataWindow(tblwindow,"#2","last_name")
	firstName = GetValue_PBDataWindow(tblwindow,"#2","first_name")
	SSN = GetValue_PBDataWindow(tblwindow,"#2","ssn")
	affiliation = GetValue_PBDataWindow(tblwindow,"#2","affil_type").ToUpper()
	primaryLang = GetValue_PBDataWindow(tblwindow,"#2","primary_lang")
	expLang = "English"
	 validateDataAndReport(lastName,System.GetEnvVar("Joint_lastName"),"Last Name in Add Applicant window : " + "{System.GetEnvVar("Joint_lastName")}" + " && in CoApplicant tab: " + lastName)
	 validateDataAndReport(firstName,System.GetEnvVar("Joint_firstName"),"First Name in Add Applicant window : " + "{System.GetEnvVar("Joint_firstName")}"  + " && in CoApplicant tab: " + firstName)
	 validateDataAndReport(SSN,System.GetEnvVar("Joint_ssn"),"SSN in Add Applicant window : " + "{System.GetEnvVar("Joint_ssn")}"+ " && in CoApplicant tab: " + SSN)
	 validateDataAndReport(affiliation.ToUpper(),System.GetEnvVar("Joint_affilaion").ToUpper(),"Affiliation in Add Applicant window : " + "{System.GetEnvVar("Joint_affilaion")}" + " && in CoApplicant tab: " + affiliation)
	 validateDataAndReport(primaryLang,expLang,"Primary Language in Add Applicant window : " + expLang + " && in CoApplicant tab: " + primaryLang)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_AddedCoApplicant_details_CoapplicantTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ExisitngCoApplicant_details_CoapplicantTab()
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will Verify the existing coapplicant details Co Applicant tab
//Ex:  Verification_of_ExisitngCoApplicant_details_CoapplicantTab()
//*****************************************************************************************************************
Verification_of_ExisitngCoApplicant_details_CoapplicantTab()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String lastName, firstName, SSN, affiliation, primaryLang, expLang, DOB, expaffiliation, CurrentDate, custage, age
	Date dob
	Real rcustage
	List<String> Split_age
	//Get the data from CoApplicant tab
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_coapp
	lastName = GetValue_PBDataWindow(tblwindow,"#1","last_name").ToUpper()
	firstName = GetValue_PBDataWindow(tblwindow,"#1","first_name").ToUpper()
	SSN = GetValue_PBDataWindow(tblwindow,"#1","ssn")
	affiliation = GetValue_PBDataWindow(tblwindow,"#1","affil_type").ToUpper()
	primaryLang = GetValue_PBDataWindow(tblwindow,"#1","primary_lang").ToUpper()
	DOB= GetValue_PBDataWindow(tblwindow,"#1","dob_dt")
	dob = Date.Parse("MM.dd.yyyy",DOB)
	CurrentDate = Date.Now().Format("MM.dd.yyyy")
	rcustage = (Real.Parse(CurrentDate)-Real.Parse(dob))/365.2425
	custage = rcustage.Format()
	Split_age = custage.Split(".")
	age = Split_age[0]
	expaffiliation = "JOINT"
	expLang = "ENGLISH"
	 validateDataAndReport(lastName,System.GetEnvVar("CoApp_LastName"),"Last Name in CreditDecision window : " + "{System.GetEnvVar("CoApp_LastName")}"+ " && in CoApplicant tab: " + lastName)
	 validateDataAndReport(firstName,System.GetEnvVar("CoApp_FirstName"),"First Name in CreditDecision window : " + "{System.GetEnvVar("CoApp_FirstName")}"  + " && in CoApplicant tab: " + firstName)
	 validateDataAndReport(SSN,System.GetEnvVar("CoApp_SSN"),"SSN in CreditDecision window : " +  "{System.GetEnvVar("CoApp_SSN")}" + " && in CoApplicant tab: " + SSN)
	 validateDataAndReport(affiliation,expaffiliation,"Affiliation in CreditDecision window : " + expaffiliation + " && in CoApplicant tab: " + affiliation)
	 validateDataAndReport(primaryLang,expLang,"Primary Language in CreditDecision window : " + expLang + " && in CoApplicant tab: " + primaryLang)
	 writeReportLog("Validation of Co Applicant age :"+age,"Passed","","")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ExisitngCoApplicant_details_CoapplicantTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: ClickonAddRow_Button_F2Window()
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will Click on Add Row button in F2 window
//Ex:  ClickonAddRow_Button_F2Window()
//*****************************************************************************************************************
ClickonAddRow_Button_F2Window()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	BranchPlus.btnAddRow.Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: ClickonAddRow_Button_F2Window","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: validate_Verify_OtherStipulationFields()
//@Author Thirumal Reddy
//@Date 7th Aug 2018
//@Description This will validate Contract Date in Finance Detail window
//Ex:  validate_Verify_OtherStipulationFields()
//*****************************************************************************************************************
validate_Verify_OtherStipulationFields(String value)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Integer arraylength
	String valueData
	 for (Integer rowName =1; rowName <=10; rowName ++)
		arraylength = rowName -1
		 //**************************
		//Field Validation
		//*************************
		//		if System.GetEnvVar("FV_Flag") == "Y"
		//	 	AppObject tblPBDataWindow =BranchPlus.CreditDecision.tbldwStep
		//	 	//Select the value from Other Stipulated drop down
		//		 TypeText_PBDataWindow(tblPBDataWindow, "#{rowName}"other_stipulation",random_AlphaNumeric_String(55))
		//		
		//		//Get the Length of Entered value in Address1 field
		//		 String getValueLength = getValue_In_PBDataWindow_DP("dw_step","#{rowName}"other_stipulation"))
		//		 descrValue = getValue_In_PBDataWindow_DP("dw_step","#{rowName}"descr")
		//		 
		//			 if getValueLength < 60 
		//			 	 writeReportLog("Maximum length of the field:"+descrValue+ "is less than 60 characters","Passed","","")
		//			 	
		//			 	else 
		//			 	 writeReportLog(descrValue+"Field is accepting more than 60 characters","Failed","","Y")
		//			 
		//		 	 
		 	//***************
		//Work Flow
		//***************
		 //Entering valid data into the respective fields
		 if arraylength != 0
			valueData = arraylength.Format()
			AppObject tblPBDataWindow =BranchPlus.CreditDecision.tbldwStep
			 // clear_Field_textBox("other_stipulation","#"+rowName)
				 TypeText_PBDataWindow(tblPBDataWindow, "#{rowName}", "other_stipulation",valueData)
			 // Select_Individual_Column_Data_RandomValue_Other("branchplusqa.bp_dropdown_values","other_stipulated_dropdown",tblPBDataWindow,"#{rowName}"other_stipulation")
			 //actvalue = getValue_In_PBDataWindow_DP("dw_step","#{rowName}"other_stipulation")
		 else 
			 writeReportLog("Data array is empty","Failed","","Y")
	 //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: validate_Verify_OtherStipulationFields","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: clear_Field_textBox(column_Name,rowNum)
//@Author Thirumal Reddy
//@Date 7th Aug 2018
//@Description This will validate Contract Date in Finance Detail window
//Ex:  clear_Field_textBox(other_stipulation","#1")
//*****************************************************************************************************************
clear_Field_textBox(String column_Name,Integer rowNum)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String DetailWindowTB
	//Object for Data Window
	AppObject tblPBDataWindow = BranchPlus.CreditDecision.tbldwStep
	tblPBDataWindow.$DetailWindowTB.Row[rowNum].$column_Name.SetFocus()
	//Click Cell
	tblPBDataWindow.$DetailWindowTB.Row[rowNum].$column_Name.Click()
	//AppObject Value
	tblPBDataWindow.$DetailWindowTB.Row[rowNum].$column_Name.SetText("")
		//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed to clear_Field_InBasicTab"+column_Name,"Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: handle_ErrorPopup_F2Window()
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will handle error pop up in F2 window
//Ex:  handle_ErrorPopup_F2Window()
//*****************************************************************************************************************
handle_ErrorPopup_F2Window()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String ErrorPopupTitle
	if w_message.WaitWhileExists (10)
		//Get the Error Popup Title
		ErrorPopupTitle = w_message.GetAttr("Title")
		//Click OK Button
		w_message.OK.Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: handle_ErrorPopup_F2Window","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_MonthlyPayment_AccountTab()
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the Monthly payment in Account window
//Ex:  Verification_of_MonthlyPayment_AccountTab()
//*****************************************************************************************************************
Verification_of_MonthlyPayment_AccountTab()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String loanamt, amtFinanced, totalintrst, totalfinanced, mnthlypmt
	String actamtFinanced, acttotalintrst, acttotalfinanced, expamtfinance, exptotfinanced
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_acct
	if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Before changing loan term 
		loanamt = GetValue_PBDataWindow(tblwindow,"#1","purch_amt")
		amtFinanced = GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")
		totalintrst = GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")
		totalfinanced = GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")
		//Select Override Payment checkbox 
		SetValue_PBDataWindow(tblwindow, "#1","override_pmt_amt_yn","ON")
		//get monthly pmt amount
		mnthlypmt = GetValue_PBDataWindow(tblwindow, "#1","pmt_amt")
		//Enter Monthly Payment field with invalid data more than 9 digits
		Real rvalue = Math.Round(Real.Parse(mnthlypmt)+100, 4)
		String value =  rvalue.Format()
		SetValue_PBDataWindow(tblwindow, "#1","pmt_amt",value)
		//Validate the warning pop up
		// handle_ErrorPopup_F2Window()
		//Get the Length of Entered value in Monthly payment field
		String getValueLength = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","pmt_amt")), 4).Format()
		//Comparing the Length of accepting characters 
		if value.FuzzyMatch(getValueLength) == 0
			 writeReportLog("Monthly Payment amount has updated successfully","Passed","","")
		//AppObject value in monthly payment field
		SetValue_PBDataWindow(tblwindow,"#1","pmt_amt","500")
		actamtFinanced = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")), 4).Format()
		acttotalintrst = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")), 4).Format()
		acttotalfinanced = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")), 4).Format()
		expamtfinance = Math.Round(Real.Parse(amtFinanced), 4).Format()
		exptotfinanced = Math.Round(Real.Parse(actamtFinanced), 4).Format()+Math.Round(Real.Parse(acttotalintrst), 4).Format()
		 validateDataAndReport(actamtFinanced,expamtfinance,"Validation of Amount Financed in Account Tab Expected: "+amtFinanced+ " && Actual: "+actamtFinanced)
		 validateDataAndReport(acttotalfinanced,exptotfinanced,"Validation of Total Financed Amount in Account Tab Expected: "+exptotfinanced+ " && Actual: "+acttotalfinanced)
	//***************
	//Work Flow
	//***************
	SetValue_PBDataWindow(tblwindow, "#1","override_pmt_amt_yn","OFF")
	//get monthly pmt amount
	String actmnthlypmt = GetValue_PBDataWindow(tblwindow, "#1","pmt_amt")
	if mnthlypmt.FuzzyMatch(actmnthlypmt) == 0 
		writeReportLog ("Override Payment checkbox is unselected.","Passed","","")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_MonthlyPayment_AccountTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_InterestRate_AccountTab(intrate)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the interest rate in Account window
//Ex:  Verification_of_InterestRate_AccountTab(".16")
//*****************************************************************************************************************
Verification_of_InterestRate_AccountTab(String intRate)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String loanamt, amtFinanced, totalintrst, totalfinanced, actamtFinanced, acttotalintrst, acttotalfinanced, expamtfinance, exptotfinanced
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_acct
	if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Before changing loan term 
		loanamt = GetValue_PBDataWindow(tblwindow,"#1","purch_amt")
		amtFinanced = GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")
		totalintrst = GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")
		totalfinanced = GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")
		//Enter Interest Rate field with invalid data more than 3 digits
		SetValue_PBDataWindow(tblwindow, "#1","int_rate",Generate_RandomNumber(8))
		//Validate the warning pop up
		 handle_ErrorPopup_F2Window()
		//AppObject value in interest rate field
		SetValue_PBDataWindow(tblwindow,"#1","int_rate","10")
		//Validate the warning pop up
		 handle_ErrorPopup_F2Window()
		actamtFinanced = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")), 4).Format()
		acttotalintrst = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")), 4).Format()
		acttotalfinanced = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")), 4).Format()
		expamtfinance = Math.Round(Real.Parse(amtFinanced), 4).Format()
		exptotfinanced = (Math.Round(Real.Parse(actamtFinanced), 4)+Math.Round(Real.Parse(acttotalintrst), 4)).Format()
		 validateDataAndReport(actamtFinanced,expamtfinance,"Validation of Amount Financed in Account Tab Expected: "+expamtfinance+ " && Actual: "+actamtFinanced)
		 validateDataAndReport(acttotalfinanced,exptotfinanced,"Validation of Total Financed Amount in Account Tab Expected: "+exptotfinanced+ " && Actual: "+acttotalfinanced)
	//***************
	//Work Flow
	//***************
	SetValue_PBDataWindow(tblwindow,"#1","int_rate",intRate)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_InterestRate_AccountTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Terms_AccountTab(loanterm)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the loan term in Account window
//Ex:  Verification_of_Terms_AccountTab("60")
//*****************************************************************************************************************
Verification_of_Terms_AccountTab(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String loanamt, amtFinanced, totalintrst, totalfinanced, actamtFinanced, acttotalintrst, acttotalfinanced, expamtfinance, exptotfinanced
	String getValueLength
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_acct
	
	if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Before changing loan term 
		loanamt = GetValue_PBDataWindow(tblwindow,"#1","purch_amt")
		amtFinanced = GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")
		totalintrst = GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")
		totalfinanced = GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")
		//Enter Terms field with invalid data more than 3 digits
		SetValue_PBDataWindow(tblwindow,"#1","nbr_of_months",Generate_RandomNumber(5))
		//Get the Length of Entered value in Terms field
		getValueLength = GetValue_PBDataWindow(tblwindow,"#1","nbr_of_months")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() ==3 
			 writeReportLog("Validation of Terms field is Accepting only 3 digits","Passed","","")
		else
			 writeReportLog("Failed : Terms field is Accepting more than 3 digits: "+getValueLength,"Failed", "" ,"")
		//AppObject value in terms field
		SetValue_PBDataWindow(tblwindow,"#1","nbr_of_months","100")
		actamtFinanced = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")), 4).Format()
		acttotalintrst = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")), 4).Format()
		acttotalfinanced = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")), 4).Format()
		expamtfinance = Math.Round(Real.Parse(amtFinanced), 4).Format()
		exptotfinanced = (Math.Round(Real.Parse(actamtFinanced), 4)+Math.Round(Real.Parse(acttotalintrst), 4)).Format()
		 validateDataAndReport(actamtFinanced,expamtfinance,"Validation of Amount Financed in Account Tab Expected: "+expamtfinance+ " && Actual: "+actamtFinanced)
		 validateDataAndReport(acttotalfinanced,exptotfinanced,"Validation of Total Financed Amount in Account Tab Expected: "+exptotfinanced+ " && Actual: "+acttotalfinanced)
	//***************
	//Work Flow
	//***************
	//SetValue_PBDataWindow(tblwindow,"#1","nbr_of_months",loanTerm)
	String loanTerm = Generate_RandomNumber_UserDefind("9","3")
	SetValue_PBDataWindow(tblwindow,"#1","nbr_of_months",loanTerm)
	 sendKeys("<TAB>")
	getValueLength = getValue_In_PBDataWindow_DP("dw_acct","#1", "nbr_of_months")
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "nbr_of_months","bp_financedetails","loanterm",ID)
	 writeReportLog("Entered Loan Term: "+ loanTerm +" in Account Tab(UI-"+"{getValueLength.Length()}"+",DB-3)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Terms_AccountTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_DownPayment_AccountTab(dwnpmt)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the down payment in Account window
//Ex:  Verification_of_DownPayment_AccountTab("100")
//*****************************************************************************************************************
 Verification_of_DownPayment_AccountTab(String ID)
	 AppObject tblwindow = BranchPlus.CustomerF2Window.dw_acct
	String loanamt, dealercheck, dwnpmt, totaldwnpmt, unpaidBal, tototherchrges, amtFinanced, totalintrst, totalfinanced
	String getValueLength
	String actloanamt, actdealercheck, actdwnpmt, acttotaldwnpmt, actunpaidbal, acttototherchrges, actamtFinanced, acttotalintrst, acttotalfinanced, expdealercheck, expdwnpmt
	String exptotaldwnpmt, expunpaidbal, expamtfinance, exptotfinanced
	
	 if System.GetEnvVar("FV_Flag") == "Y"
		 //**************************
		//Field Validation
		//**************************
		 //Before adding down_pmt amount 
		loanamt = GetValue_PBDataWindow(tblwindow,"#1","purch_amt")
		dealercheck = GetValue_PBDataWindow(tblwindow,"#1","dealer_check")
		dwnpmt = GetValue_PBDataWindow(tblwindow,"#1","down_pmt")
		totaldwnpmt = GetValue_PBDataWindow(tblwindow,"#1","cf_total_down_payment")
		unpaidBal = GetValue_PBDataWindow(tblwindow,"#1","cf_unpaid_balance")
		tototherchrges = GetValue_PBDataWindow(tblwindow,"#1","cmpnt_amt")
		amtFinanced = GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")
		totalintrst = GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")
		totalfinanced = GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")
		//Enter Down Payment field with invalid data more than 100 characters
		SetValue_PBDataWindow(tblwindow,"#1","down_pmt",Generate_RandomNumber(10))
		//Get the Length of Entered value in Down Payment field
		getValueLength = GetValue_PBDataWindow(tblwindow,"#1","down_pmt")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 9 
			 writeReportLog("Validation of Down Payment field is Accepting only 9 digits","Passed","","")
		else
			 writeReportLog("Failed : Down Payment field is Accepting more than 9 digits: "+getValueLength,"Failed", "" ,"")
		//AppObject value in down pmt field
		SetValue_PBDataWindow(tblwindow,"#1","down_pmt","100")
		actloanamt = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","purch_amt")), 4).Format()
		actdealercheck = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","dealer_check")), 4).Format()
		actdwnpmt = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","down_pmt")), 4).Format()
		acttotaldwnpmt = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cf_total_down_payment")), 4).Format()
		actunpaidbal = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cf_unpaid_balance")), 4).Format()
		acttototherchrges = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cmpnt_amt")), 4).Format()
		actamtFinanced = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")), 4).Format()
		acttotalintrst = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")), 4).Format()
		acttotalfinanced = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")), 4).Format()
		expdealercheck = (Math.Round(Real.Parse(dealercheck), 4)-Math.Round(Real.Parse(actdwnpmt), 4)).Format()
		expdwnpmt = (Math.Round(Real.Parse(dwnpmt), 4)+Math.Round(Real.Parse(actdwnpmt), 4)).Format()
		exptotaldwnpmt = (Math.Round(Real.Parse(totaldwnpmt), 4)+Math.Round(Real.Parse(actdwnpmt), 4)).Format()
		expunpaidbal = (Math.Round(Real.Parse(actloanamt), 4)-Math.Round(Real.Parse(actdwnpmt), 4)).Format()
		expamtfinance = (Math.Round(Real.Parse(amtFinanced), 4)-Math.Round(Real.Parse(actdwnpmt), 4)).Format()
		exptotfinanced = (Math.Round(Real.Parse(actamtFinanced), 4)+Math.Round(Real.Parse(acttotalintrst), 4)).Format()
		 validateDataAndReport(actdealercheck,expdealercheck,"Validation of Dealer Check Amount in Account Tab Expected: "+expdealercheck+ " && Actual: "+actdealercheck)
		 validateDataAndReport(actdwnpmt,expdwnpmt,"Validation of Down Payment in Account Tab Expected: "+expdwnpmt+ " && Actual: "+actdwnpmt)
		 validateDataAndReport(acttotaldwnpmt,exptotaldwnpmt,"Validation of Total Down Payment in Account Tab Expected: "+exptotaldwnpmt+ " && Actual: "+acttotaldwnpmt)
		 validateDataAndReport(actamtFinanced,expamtfinance,"Validation of Amount Financed in Account Tab Expected: "+expamtfinance+ " && Actual: "+actamtFinanced)
		 validateDataAndReport(actunpaidbal,expunpaidbal,"Validation of Unpaid Balance in Account Tab Expected: "+expunpaidbal+ " && Actual: "+actunpaidbal)
		 validateDataAndReport(acttotalfinanced,exptotfinanced,"Validation of Total Financed Amount in Account Tab Expected: "+exptotfinanced+ " && Actual: "+acttotalfinanced)
	//***************
	//Work Flow
	//***************
	//SetValue_PBDataWindow(tblwindow,"#1","down_pmt",dwnpmt)
	dwnpmt = Generate_RandomNumber_UserDefind("9","9")
	SetValue_PBDataWindow(tblwindow,"#1","down_pmt",dwnpmt)
	 sendKeys("<TAB>")
	getValueLength = getValue_In_PBDataWindow_DP("dw_acct","#1", "down_pmt")
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "down_pmt","bp_financedetails","downpayment",ID)
	 writeReportLog("Entered Down Payment value: "+ dwnpmt +" in Account Tab(UI-"+"{getValueLength.Length()}"+",DB-9)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_DownPayment_AccountTab","Failed", "","Y")
 
//*****************************************************************************************************************
//@methodName: Verification_of_TradeinPayoff_AccountTab(tradeinpayoff)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the TradeIn payoff in Account window
//Ex:  Verification_of_TradeinPayoff_AccountTab("100")
//*****************************************************************************************************************
 Verification_of_TradeinPayoff_AccountTab(String ID)
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_acct
	String loanamt, dealercheck, dwnpmt, totaldwnpmt, unpaidBal, tototherchrges, amtFinanced, totalintrst, totalfinanced, tradeinpayoff, netTradeinAmt
	String getValueLength
	String actloanamt, actdealercheck, actdwnpmt, acttotaldwnpmt, actunpaidbal, acttototherchrges, actamtFinanced, acttotalintrst, acttotalfinanced, expdealercheck, expdwnpmt, acttradeinpayoff, actnetTradeinAmt
	String exptotaldwnpmt, expunpaidbal, expamtfinance, exptotfinanced, exptradeinpayoff, expnetTradeinAmt
	 if System.GetEnvVar("FV_Flag") == "Y"
		 //**************************
		 //Field Validation
		//**************************
		//Before adding tradein payoff amount 
		loanamt = GetValue_PBDataWindow(tblwindow,"#1","purch_amt")
		dealercheck = GetValue_PBDataWindow(tblwindow,"#1","dealer_check")
		tradeinpayoff = GetValue_PBDataWindow(tblwindow,"#1","trade_in_payoff")
		netTradeinAmt = GetValue_PBDataWindow(tblwindow,"#1","cf_net_trade_in")
		totaldwnpmt = GetValue_PBDataWindow(tblwindow,"#1","cf_total_down_payment")
		unpaidBal = GetValue_PBDataWindow(tblwindow,"#1","cf_unpaid_balance")
		tototherchrges = GetValue_PBDataWindow(tblwindow,"#1","cmpnt_amt")
		amtFinanced = GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")
		totalintrst = GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")
		totalfinanced = GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")
		 //Enter Trade in payoff field with invalid data more than 100 characters
		SetValue_PBDataWindow(tblwindow,"#1","trade_in_payoff",Generate_RandomNumber(10))
		//Get the Length of Entered value in Trade in payoff field
		getValueLength = GetValue_PBDataWindow(tblwindow,"#1","trade_in_payoff")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 9 
			 writeReportLog("Validation of Trade-In Payoff field is Accepting only 9 digits","Passed","","")
		else
			 writeReportLog("Failed : Trade-In Payoff field is Accepting more than 9 digits: "+getValueLength,"Failed", "" ,"")
		//AppObject value in trade in pay off field
		SetValue_PBDataWindow(tblwindow,"#1","trade_in_payoff","100")
		actloanamt = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","purch_amt")), 4).Format()
		actdealercheck = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","dealer_check")), 4).Format()
		acttradeinpayoff = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","trade_in_payoff")), 4).Format()
		actnetTradeinAmt = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cf_net_trade_in")), 4).Format()
		acttotaldwnpmt = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cf_total_down_payment")), 4).Format()
		actunpaidbal = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cf_unpaid_balance")), 4).Format()
		acttototherchrges = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cmpnt_amt")), 4).Format()
		actamtFinanced = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")), 4).Format()
		acttotalintrst = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")), 4).Format()
		acttotalfinanced = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")), 4).Format()
		expdealercheck = (Math.Round(Real.Parse(dealercheck), 4)+Math.Round(Real.Parse(acttradeinpayoff), 4)).Format()
		exptradeinpayoff = (Math.Round(Real.Parse(tradeinpayoff), 4)+Math.Round(Real.Parse(acttradeinpayoff), 4)).Format()
		expnetTradeinAmt = (Math.Round(Real.Parse(netTradeinAmt), 4)-Math.Round(Real.Parse(acttradeinpayoff), 4)).Format()
		exptotaldwnpmt = (Math.Round(Real.Parse(actloanamt), 4)-Math.Round(Real.Parse(acttradeinpayoff), 4)).Format()
		expunpaidbal = (Math.Round(Real.Parse(actloanamt), 4)-Math.Round(Real.Parse(acttotaldwnpmt), 4)).Format()
		expamtfinance = (Math.Round(Real.Parse(acttototherchrges), 4)+Math.Round(Real.Parse(actunpaidbal), 4)).Format()
		exptotfinanced = (Math.Round(Real.Parse(actamtFinanced), 4)+Math.Round(Real.Parse(acttotalintrst), 4)).Format()
		 validateDataAndReport(actdealercheck,expdealercheck,"Validation of Dealer Check Amount in Account Tab Expected: "+expdealercheck+ " && Actual: "+actdealercheck)
		 validateDataAndReport(acttradeinpayoff,exptradeinpayoff,"Validation of Trade-In Payoff in Account Tab Expected: "+exptradeinpayoff+ " && Actual: "+acttradeinpayoff)
		 validateDataAndReport(actnetTradeinAmt,expnetTradeinAmt,"Validation of Net Trade-In Amount in Account Tab Expected: "+expnetTradeinAmt+ " && Actual: "+actnetTradeinAmt)
		 validateDataAndReport(acttotaldwnpmt,exptotaldwnpmt,"Validation of Total Down Payment in Account Tab Expected: "+exptotaldwnpmt+ " && Actual: "+acttotaldwnpmt)
		 validateDataAndReport(actamtFinanced,expamtfinance,"Validation of Amount Financed in Account Tab Expected: "+expamtfinance+ " && Actual: "+actamtFinanced)
		 validateDataAndReport(actunpaidbal,expunpaidbal,"Validation of Unpaid Balance in Account Tab Expected: "+expunpaidbal+ " && Actual: "+actunpaidbal)
		 validateDataAndReport(acttotalfinanced,exptotfinanced,"Validation of Total Financed Amount in Account Tab Expected: "+exptotfinanced+ " && Actual: "+acttotalfinanced)
	//***************
	//Work Flow
	//***************
	//SetValue_PBDataWindow(tblwindow,"#1","trade_in_payoff",tradeinpayoff)
	 tradeinpayoff = Generate_RandomNumber_UserDefind("9","9")
	SetValue_PBDataWindow(tblwindow,"#1","trade_in_payoff",tradeinpayoff)
	 sendKeys("<TAB>")
	getValueLength = getValue_In_PBDataWindow_DP("dw_acct","#1", "trade_in_payoff")
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "trade_in_payoff","bp_financedetails","tradeinpayoff",ID)
	 writeReportLog("Entered Trade-In Payoff Amount value: "+ tradeinpayoff +" in Account Tab(UI-"+"{getValueLength.Length()}"+",DB-9)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_TradeinPayoff_AccountTab","Failed", "","Y")
 
//*****************************************************************************************************************
//@methodName: Verification_of_TradeinAmount_AccountTab(tradeinamt)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the TradeIn Amount in Account window
//Ex:  Verification_of_TradeinAmount_AccountTab("100")
//*****************************************************************************************************************
 Verification_of_TradeinAmount_AccountTab(String ID)
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_acct
	String loanamt, dealercheck, dwnpmt, totaldwnpmt, unpaidBal, tototherchrges, amtFinanced, totalintrst, totalfinanced, tradeinpayoff, netTradeinAmt, tradeinamt
	String getValueLength
	String actloanamt, actdealercheck, actdwnpmt, acttotaldwnpmt, actunpaidbal, acttototherchrges, actamtFinanced, acttotalintrst, acttotalfinanced, expdealercheck, expdwnpmt, acttradeinpayoff, actnetTradeinAmt, acttradeinamt
	String exptotaldwnpmt, expunpaidbal, expamtfinance, exptotfinanced, exptradeinpayoff, expnetTradeinAmt, exptradeinamt
	
	 if System.GetEnvVar("FV_Flag") == "Y"
		 //**************************
		//Field Validation
		//**************************
		//Before adding trade in amount 
		loanamt = GetValue_PBDataWindow(tblwindow,"#1","purch_amt")
		dealercheck = GetValue_PBDataWindow(tblwindow,"#1","dealer_check")
		tradeinamt = GetValue_PBDataWindow(tblwindow,"#1","trade_in_amt")
		netTradeinAmt = GetValue_PBDataWindow(tblwindow,"#1","cf_net_trade_in")
		totaldwnpmt = GetValue_PBDataWindow(tblwindow,"#1","cf_total_down_payment")
		unpaidBal = GetValue_PBDataWindow(tblwindow,"#1","cf_unpaid_balance")
		tototherchrges = GetValue_PBDataWindow(tblwindow,"#1","cmpnt_amt")
		amtFinanced = GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")
		totalintrst = GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")
		totalfinanced = GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")
		 //Enter Trade in amt field with invalid data more than 100 characters
		SetValue_PBDataWindow(tblwindow,"#1","trade_in_amt",Generate_RandomNumber(10))
		//Get the Length of Entered value in Trade in amt field
		getValueLength = GetValue_PBDataWindow(tblwindow,"#1","trade_in_amt")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 9 
			 writeReportLog("Validation of Trade-In Amount field is Accepting only 9 digits","Passed","","")
		else
			 writeReportLog("Failed : Trade-In Amount field is Accepting more than 9 digits: "+getValueLength,"Failed", "" ,"")
		SetValue_PBDataWindow(tblwindow,"#1","trade_in_amt","100")
		actloanamt = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","purch_amt")), 4).Format()
		actdealercheck = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","dealer_check")), 4).Format()
		acttradeinamt = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","trade_in_amt")), 4).Format()
		actnetTradeinAmt = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cf_net_trade_in")), 4).Format()
		acttotaldwnpmt = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cf_total_down_payment")), 4).Format()
		actunpaidbal = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cf_unpaid_balance")), 4).Format()
		acttototherchrges = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cmpnt_amt")), 4).Format()
		actamtFinanced = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")), 4).Format()
		acttotalintrst = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")), 4).Format()
		acttotalfinanced = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")), 4).Format()
		expdealercheck = (Math.Round(Real.Parse(dealercheck), 4)-Math.Round(Real.Parse(acttradeinamt), 4)).Format()
		exptradeinamt = (Math.Round(Real.Parse(tradeinamt), 4)+Math.Round(Real.Parse(acttradeinamt), 4)).Format()
		expnetTradeinAmt = (Math.Round(Real.Parse(netTradeinAmt), 4)+Math.Round(Real.Parse(acttradeinamt), 4)).Format()
		exptotaldwnpmt = (Math.Round(Real.Parse(totaldwnpmt), 4)+Math.Round(Real.Parse(acttradeinamt), 4)).Format()
		expunpaidbal = (Math.Round(Real.Parse(actloanamt), 4)-Math.Round(Real.Parse(acttradeinamt), 4)).Format()
		expamtfinance = (Math.Round(Real.Parse(amtFinanced), 4)-Math.Round(Real.Parse(acttradeinamt), 4)).Format()
		exptotfinanced = (Math.Round(Real.Parse(actamtFinanced), 4)+Math.Round(Real.Parse(acttotalintrst), 4)).Format()
		 validateDataAndReport(actdealercheck,expdealercheck,"Validation of Dealer Check Amount in Account Tab Expected: "+expdealercheck+ " && Actual: "+actdealercheck)
		 validateDataAndReport(acttradeinamt,exptradeinamt,"Validation of Trade-In Amount in Account Tab Expected: "+exptradeinamt+ " && Actual: "+acttradeinamt)
		 validateDataAndReport(actnetTradeinAmt,expnetTradeinAmt,"Validation of Net Trade-In Amount in Account Tab Expected: "+expnetTradeinAmt+ " && Actual: "+actnetTradeinAmt)
		 validateDataAndReport(acttotaldwnpmt,exptotaldwnpmt,"Validation of Total Down Payment in Account Tab Expected: "+exptotaldwnpmt+ " && Actual: "+acttotaldwnpmt)
		 validateDataAndReport(actamtFinanced,expamtfinance,"Validation of Amount Financed in Account Tab Expected: "+expamtfinance+ " && Actual: "+actamtFinanced)
		 validateDataAndReport(actunpaidbal,expunpaidbal,"Validation of Unpaid Balance in Account Tab Expected: "+expunpaidbal+ " && Actual: "+actunpaidbal)
		 validateDataAndReport(acttotalfinanced,exptotfinanced,"Validation of Total Financed Amount in Account Tab Expected: "+exptotfinanced+ " && Actual: "+acttotalfinanced)
	//***************
	//Work Flow
	//***************
	//SetValue_PBDataWindow(tblwindow,"#1","trade_in_amt",tradeinamt)
	tradeinamt = Generate_RandomNumber_UserDefind("9","9")
	SetValue_PBDataWindow(tblwindow,"#1","trade_in_amt",tradeinamt)
	 sendKeys("<TAB>")
	getValueLength = getValue_In_PBDataWindow_DP("dw_acct","#1", "trade_in_amt")
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "trade_in_amt","bp_financedetails","tradeinamt",ID)
	 writeReportLog("Entered Trade-In Amount value: "+ tradeinamt +" in Account Tab(UI-"+"{getValueLength.Length()}"+",DB-9)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_PurchaseAmount_AccountTab","Failed", "","Y")
 
//*****************************************************************************************************************
//@methodName: Verification_of_TradeinDesc_AccountTab(tradeDesc)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the TradeIn Desc in Account window
//Ex:  Verification_of_TradeinDesc_AccountTab("Retailer")
//*****************************************************************************************************************
 Verification_of_TradeinDesc_AccountTab(String tradeDesc)
	String getValueLength
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_acct
	 if System.GetEnvVar("FV_Flag") == "Y"
		 //**************************
		//Field Validation
		//**************************
		//Enter Trade in Description field with invalid data more than 100 characters
		SetValue_PBDataWindow(tblwindow,"#1","trade_in_descr",random_AlphaNumeric_String(102))
		//Get the Length of Entered value in Trade in Description field
		getValueLength = GetValue_PBDataWindow(tblwindow,"#1", "trade_in_descr")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() ==100 
			 writeReportLog("Validation of Trade in Description field is Accepting only 100 characters: "+getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : Trade in Description field is Accepting More than 100 characters","Failed", "" ,"")
	//***************
	//Work Flow
	//***************
	SetValue_PBDataWindow(tblwindow,"#1","trade_in_descr",tradeDesc)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_TradeinDesc_AccountTab","Failed", "","Y")
 
//*****************************************************************************************************************
//@methodName: Verification_of_PurchaseAmount_AccountTab(loanAmt)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the Purchase amount in Account window
//Ex:  Verification_of_PurchaseAmount_AccountTab("12000")
//*****************************************************************************************************************
Verification_of_PurchaseAmount_AccountTab(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String loanamt, dealercheck, dwnpmt, totaldwnpmt, unpaidBal, tototherchrges, amtFinanced, totalintrst, totalfinanced, tradeinpayoff, netTradeinAmt, tradeinamt
	String getValueLength, purcamt
	String actloanamt, actdealercheck, actdwnpmt, acttotaldwnpmt, actunpaidbal, acttototherchrges, actamtFinanced, acttotalintrst, acttotalfinanced, expdealercheck, expdwnpmt, acttradeinpayoff, actnetTradeinAmt
	String exptotaldwnpmt, expunpaidbal, expamtfinance, exptotfinanced, exptradeinpayoff, expnetTradeinAmt
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_acct
	
	if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Before adding Purchase amount 
		loanamt = GetValue_PBDataWindow(tblwindow,"#1","purch_amt")
		dealercheck = GetValue_PBDataWindow(tblwindow,"#1","dealer_check")
		totaldwnpmt = GetValue_PBDataWindow(tblwindow,"#1","cf_total_down_payment")
		unpaidBal = GetValue_PBDataWindow(tblwindow,"#1","cf_unpaid_balance")
		tototherchrges = GetValue_PBDataWindow(tblwindow,"#1","cmpnt_amt")
		amtFinanced = GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")
		totalintrst = GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")
		totalfinanced = GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")
		//Enter Loan Amount field with invalid data more than 8 digits
		SetValue_PBDataWindow(tblwindow, "#1","purch_amt",Generate_RandomNumber(10))
		//Get the Length of Entered value in Loan Amount field
		getValueLength = GetValue_PBDataWindow(tblwindow,"#1","purch_amt")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 9 
			 writeReportLog("Validation of Purchase Amount field is Accepting only 9 digits","Passed","","")
		else
			 writeReportLog("Failed : Purchase Amount field is Accepting more than 9 digits: "+getValueLength,"Failed", "" ,"")
		purcamt = Math.Round(Real.Parse(loanamt) + 100, 4).Format()
		SetValue_PBDataWindow(tblwindow,"#1","purch_amt",purcamt)
		actloanamt = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","purch_amt")), 4).Format()
		actdealercheck = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","dealer_check")), 4).Format()
		actunpaidbal = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cf_unpaid_balance")), 4).Format()
		acttototherchrges = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cmpnt_amt")), 4).Format()
		actamtFinanced = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")), 4).Format()
		acttotalintrst = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")), 4).Format()
		acttotalfinanced = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")), 4).Format()
		expdealercheck = (Math.Round(Real.Parse(dealercheck), 4)-Math.Round(Real.Parse(loanamt),4)+Math.Round(Real.Parse(actloanamt), 4)).Format()
		expunpaidbal = (Math.Round(Real.Parse(actloanamt), 4)+Math.Round(Real.Parse(totaldwnpmt), 4)).Format()
		expamtfinance = (Math.Round(Real.Parse(actunpaidbal), 4)+Math.Round(Real.Parse(acttototherchrges), 4)).Format()
		exptotfinanced = (Math.Round(Real.Parse(actamtFinanced), 4)+Math.Round(Real.Parse(acttotalintrst), 4)).Format()
		 validateDataAndReport(expdealercheck,actdealercheck,"Validation of Dealer Check Amount in Account Tab Expected: "+expdealercheck)
		 validateDataAndReport(expunpaidbal,actunpaidbal,"Validation of Unpaid Balance Amount in Account Tab Expected: "+expunpaidbal+ " && Actual: "+actunpaidbal)
		 validateDataAndReport(expamtfinance,actamtFinanced,"Validation of Amount Financed in Account Tab Expected: "+expamtfinance+ " && Actual: "+actamtFinanced)
		 validateDataAndReport(exptotfinanced,acttotalfinanced,"Validation of Total Financed Amount in Account Tab Expected: "+exptotfinanced+ " && Actual: "+acttotalfinanced)
	//***************
	//Work Flow
	//***************
	//SetValue_PBDataWindow(tblwindow,"#1","purch_amt",loanamt)
	loanamt = Generate_RandomNumber_UserDefind("9","9")
	SetValue_PBDataWindow(tblwindow,"#1","purch_amt",loanamt)
	 sendKeys("<TAB>")
	getValueLength = getValue_In_PBDataWindow_DP("dw_acct","#1", "purch_amt")
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "purch_amt","bp_financedetails","loanamount",ID)
	 writeReportLog("Entered Loan Amount value: "+ loanamt +" in Account Tab(UI-"+"{getValueLength.Length()}"+",DB-9)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_PurchaseAmount_AccountTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Payment_AccountTab(surAmt)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the payment  in Account window
//Ex:  Verification_of_Payment_AccountTab("100")
//*****************************************************************************************************************
Verification_of_Payment_AccountTab(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String getValueLength
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_acct
	if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Enter payment  field with invalid data more than 8 digits
		SetValue_PBDataWindow(tblwindow, "#1","payment_",Generate_RandomNumber(10))
		//Get the Length of Entered value in payment  field
		getValueLength = GetValue_PBDataWindow(tblwindow,"#1","payment_")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 9 
			 writeReportLog("Validation of Payment  field is Accepting only 9 digits","Passed","","")
		else
			 writeReportLog("Failed : Payment  field is Accepting more than 9 digits: "+getValueLength,"Failed", "" ,"")
	//***************
	//Work Flow
	//***************
	//SetValue_PBDataWindow(tblwindow,"#1","payment_",payamt)
	String payamt = Generate_RandomNumber_UserDefind("9","9")
	SetValue_PBDataWindow(tblwindow,"#1","payment_",payamt)
	 sendKeys("<TAB>")
	getValueLength = getValue_In_PBDataWindow_DP("dw_acct","#1", "payment_")
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "payment_","bp_financedetails","payment",ID)
	 writeReportLog("Entered payment  Amount value: "+ payamt +" in Account Tab(UI-"+"{getValueLength.Length()}"+",DB-9)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Payment_AccountTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_DealerDiscount_AccountTab(discamt)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the dealer discount in Account window
//Ex:  Verification_of_DealerDiscount_AccountTab("750")
//*****************************************************************************************************************
Verification_of_DealerDiscount_AccountTab(String discamt)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String getValueLength, dealercheckbefaddingdisc, actual, expected
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_acct
	if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Get Dealer Check value
		//Enter Dealer Discount field with invalid data more than 8 digits
		SetValue_PBDataWindow(tblwindow,"#1","discount_amt",Generate_RandomNumber(10))
		//Get the Length of Entered value in Dealer Discount field
		getValueLength = GetValue_PBDataWindow(tblwindow,"#1","discount_amt")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 9 
			 writeReportLog("Validation of Dealer Discount field is Accepting only 9 digits","Passed","","")
		else
			 writeReportLog("Failed : Dealer Discount field is Accepting more than 9 digits: "+getValueLength,"Failed", "" ,"")
		SetValue_PBDataWindow(tblwindow,"#1","discount_amt","0")
		 sendKeys("<TAB>")
		dealercheckbefaddingdisc = GetValue_PBDataWindow(tblwindow,"#1","dealer_check")
		SetValue_PBDataWindow(tblwindow,"#1","discount_amt","100")
		 sendKeys("<TAB>")
		actual = Math.Round(Real.Parse(GetValue_PBDataWindow(tblwindow,"#1","dealer_check")), 4).Format()
		expected = Math.Round(Real.Parse(dealercheckbefaddingdisc) - 100, 4).Format()
		 validateDataAndReport(expected,actual,"Validation of Dealer Check Amount in Account Tab Expected: "+expected+ " && Actual: "+actual)
	//***************
	//Work Flow
	//***************
	SetValue_PBDataWindow(tblwindow,"#1","discount_amt",discamt)
	//Saving the Data
	 clickOnSaveButon()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_DealerDiscount_AccountTab","Failed", "","Y")

//***************************************************************************************************************************
//@Method: verify_Length_TextField(windowName,rowName,ColName,Value,ActualLength)
//@Author: Thirumal Reddy
//@Date 9 Aug 2018
//@Description: This function is to enter data into any text field, fetch the entered data from text box && compare the length of characters.
//Ex:  verify_Length_TextField("windowName,"RowNumber","ColName","ValueToBePassed","ActualLengthToBeCompared")
//***************************************************************************************************************************
verify_Length_TextField(AppObject windowName,String rowName,String ColName,String Value, String ActualLength = null)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 TypeText_PBDataWindow(windowName,rowName,ColName,Value)
	Integer iDirecLength = GetValue_PBDataWindow(windowName,rowName,ColName).Length()
	String DirecLength = iDirecLength.Format()
	if iDirecLength <= Integer.Parse(ActualLength) 
		 	 writeReportLog("length:{DirecLength} of the field is less than || equal to"+ActualLength,"Passed","","")
	 else 
		 	 writeReportLog("length:{DirecLength} of Directions field is not matching to"+ActualLength,"Failed",FailComments,"Y")

//***************************************************************************************************************************
//@Method: verify_HomeAddressFields(arraySize,DataWindow,addr_Data_arr)
//@Author: Thirumal Reddy
//@Date 9 Aug 2018
//@Description: This function is to validate the fields in Home Address section in Address field(Procesing Loan).
//Ex:  verify_HomeAddressFields("NoOfLoops,"DataWindow","Value")
//***************************************************************************************************************************
verify_HomeAddressFields(Integer arraySize,String DataWindow,String addr_Data_arr)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	List<String> arr = {"addr1","addr2","zipcode","phone1","phone2","phone3"}
	String val
	for (Integer value = 1; value<=arraySize; value++)
		val = arr[value]
		 Get_Value_TextBox_Compare("w_cust",DataWindow,"#1",val,arr[value])

//***************************************************************************************************************************
//@Method: Get_Value_TextBox_Compare(windowName, dataWindowName, rowNumber, colID,expecValue)
//@Author: Thirumal Reddy
//@Date 9 Aug 2018
//@Description: This function is to fetch the value from text field && compare with the actual value.
//Ex:  Get_Value_TextBox_Compare("WindowName,"dataWindowName","rowNumber","ColumnName","ExpectedValue")
//***************************************************************************************************************************
 String Get_Value_TextBox_Compare(String windowName,String dataWindowName,String rowNumber,String colID,String expecValue)
	String actualValue
	actualValue = getValueInPBDataWindow_DP(windowName, dataWindowName, rowNumber, colID)
	 validateDataAndReport(actualValue.ToUpper(),expecValue.ToUpper(),"Actual value:"+actualValue+ " is matching with the Expected value:"+expecValue)
	return actualValue

//*****************************************************************************************************************
//@methodName: Application_Status()
//@Author Thirumal Reddy
//@Date 8th Aug 2018
//@Description This will validate Application status window
//Ex:  Application_Status()
//*****************************************************************************************************************
Application_Status()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String expecEmployee, actualEmployee
	//**************************
	//Field Validation
	//**************************
	if System.GetEnvVar("FV_Flag") == "Y"
		//To Click on Approved radio button
		SetValue_In_PBDataWindow_DP("dw_step","#1","app_status","Approved")
		 verifyDate("compute_1")
		//To click on conditioned radio button
		SetValue_In_PBDataWindow_DP("dw_step","#1","app_status","Conditioned")
		 verifyDate("compute_1")
		//To click on Denied radio button
		SetValue_In_PBDataWindow_DP("dw_step","#1","app_status","Denied")
		 verifyDate("compute_2")
		//To click on cancelled radio button
		SetValue_In_PBDataWindow_DP("dw_step","#1","app_status","Cancelled")
		//***************
		 //Work Flow
		//***************
		//To click on In Process radio button
		SetValue_In_PBDataWindow_DP("dw_step","#1","app_status","In Process")
		//To click on Plus check box
		SetValue_In_PBDataWindow_DP("dw_step","#1","plus_loan_yn","ON")
		//Verifying Employee assigned field.
		 expecEmployee = "Help Desk"
		 actualEmployee = GetValue_In_PBDataWindow_DP("dw_step","#1","#11")
		  validateDataAndReport(expecEmployee,actualEmployee,"Actual Employee:"+actualEmployee+ "Expected Employee:"+expecEmployee+" in Employee Assigned field are matching")
		 //Validating decision is valid for 14 days from field.
		 //To get current date
		 String currDate = Date.Now().Format("MM/dd/yyyy")
		 String decisionDate = GetValue_In_PBDataWindow_DP("dw_step","#1","decision_start_dt")
		 validateDataAndReport(currDate,decisionDate,"Actual Date:"+decisionDate+ "Expected Date:"+currDate+" in decision valid for 14 days from field are matching")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Application_Status","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: verifyDate(colName)
//@Author Thirumal Reddy
//@Date 8th Aug 2018
//@Description This will fetch the date from DB && verifies with the expected date based on Column 
//Ex:  verifyDate("ColumnName from where date is to be fetched")
//*****************************************************************************************************************
verifyDate(String colName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	List<String> j, k
	String expecDate, actDate, actualDate
	String  value = get_Add_Date_Time_UserID_DB(date)
	j = value.Split("/")
	expecDate = j[1]
	 actDate = GetValue_In_PBDataWindow_DP("dw_step","#1",colName)
	 	k = actDate.Split("/")
	 	actualDate = k[1]
	 //Verify Date firom the fields
	  validateDataAndReport(expecDate,actualDate,"Actual Date:"+actualDate + " && Expected Date:"+expecDate+ "are matching" )

//***************************************************************************************************************************
//@Method: enter_ReferenceDetails(ObjectArray,dataArray,rowNum,winName)
//@Author: Thirumal Reddy
//@Date 9 Aug 2018
//@Description: This function is to enter the data in Reference Tab in F2 window
//Ex:  enter_ReferenceDetails("columnArray,"DataToEnterArray","rowNumer","Window")
//***************************************************************************************************************************
enter_ReferenceDetails(List<String> ObjectArray, List<String> dataArray,Integer rowNum,AppObject winName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject windowName = winName
	for (Integer Iterator = 1; Iterator<=dataArray.Count(); Iterator++)
		 TypeText_PBDataWindow(windowName,"#{rowNum}",ObjectArray[Iterator],dataArray[Iterator])
		 writeReportLog("Valid Reference data:"+dataArray[Iterator]+ "entered into:" +ObjectArray[Iterator]+ "text box field","Passed","","")

//***************************************************************************************************************************
//@Method: verify_State_CityByZip(windowName,Rownumber,ColNum,expecValue)
//@Author: Thirumal Reddy
//@Date 9 Aug 2018
//@Description: This function is to verify auto populated state, city fields after entering ZipCode
//Ex:  verify_State_CityByZip("windowName,"Rownumber","ColNum","expecState/City")
//***************************************************************************************************************************
verify_State_CityByZip(AppObject windowName,String Rownumber,String ColNum,String expecValue)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String stateCityName
	stateCityName = GetValue_PBDataWindow(windowName,Rownumber,ColNum).ToUpper()
	if stateCityName == expecValue 
		 writeReportLog("Actual State/City Name:"+expecValue+ "is Matching with Expected State/City name:"+stateCityName ,"Passed","","")
	else 
		 writeReportLog("Actual State/City Name:"+expecValue+ "is not Matching with Expected State/City name:"+stateCityName ,"Failed",FailComments,"Y")

//***************************************************************************************************************************
//@Method:  Validate_ErrorPopup_Title_Message_F2Window()
//@Author: Thirumal Reddy
//@Date 9 Aug 2018
//@Description: This function is to validate error pop up in F2 window
//Ex:  Validate_ErrorPopup_Title_Message_F2Window()
//***************************************************************************************************************************
Validate_ErrorPopup_Title_Message_F2Window()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String ErrorPopupTitle, ErrorPopupMessage
	if w_message.WaitWhileExists (10)
		//Get the Error Popup Title
		ErrorPopupTitle = w_message.GetAttr("Title")
		//Get the Error Popup Message
		ErrorPopupMessage = w_message.TextField[1].GetAttr("Text")
		 writeReportLog("Validation of Error Title: "+ ErrorPopupTitle +" with Popup Message: "+ErrorPopupMessage,"Passed","","")
		//Click OK Button
		w_message.OK.Click()
	//		else 
	//		ErrorPopupMessage = w_message.WinEditor("regexpwndtitle:=.*").GetAttr("Text")
	//		 writeReportLog("Validation of Error Title: "+ ErrorPopupTitle +" with Popup Message: "+ErrorPopupMessage,"Passed","","")
	//		//Click OK Button
	//		w_message.OK.Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Validate_ErrorPopup_Title_Message_F2Window","Failed", "","Y")

//***************************************************************************************************************************
//@Method:  Verification_of_ReferenceDetails()
//@Author: Thirumal Reddy
//@Date 16 Aug 2018
//@Description: This function is to verify the field validation of reference tab
//Ex:  Verification_of_ReferenceDetails()
//***************************************************************************************************************************
Verification_of_ReferenceDetails()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Click on New Option
	 clickNewButton()
	//Select on New Customer Reference
	AppObject winName = BranchPlus.w_chooseone.lb_list
	 selectValue_From_ChooseAnItem_Popup_ComponentTab("New Customer Reference")
	//Click on Save option
	 clickOnSaveButon()
	//Validating pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Validating First Name textbox
	winName = BranchPlus.CustomerF2Window.dw_list_reference
	 verify_Length_TextField(winName,"#1","first_name",random_AlphaNumeric_String(35),"30")
	//Validating Lastname text box
	 verify_Length_TextField(winName,"#1","last_name",random_AlphaNumeric_String(35),"30")
	//Validating Home Phone textbox
	// verify_Length_TextField(winName,"#1","phone1",Generate_RandomNumber(15),"10")
	//Validating Cell Phone text box
	// verify_Length_TextField(winName,"#1","phone2",Generate_RandomNumber(15),"10")
	//Validating Other Phone text box
	// verify_Length_TextField(winName,"#1","phone3",Generate_RandomNumber(15),"10")
	//Validating address text box
	// verify_Length_TextField(winName,"#1","addr1",random_AlphaNumeric_String(45),"40")
	//Validating State field
	// Get_Value_TextBox_Compare("w_cust","dw_list","#1","state",System.GetEnvVar("currentState"))
	//Validating Zip textbox
	// verify_Length_TextField(winName,"#1","zipcode",Generate_RandomNumber(15),"9")
	//Validating City textbox
	// verify_Length_TextField(winName,"#1","city",random_AlphaNumeric_String(35),"30")
	//Verifying Country
	 Get_Value_TextBox_Compare("w_cust","dw_list","#1","country","USA")
	//Click on Delete option
	 clickButton_Delete()
	//Click on Yes button in the Delete Reference pop up
	 clickButton_InWindow("w_message","Yes")
	//Click on New Option
	 clickNewButton()
	//Select on New Customer Reference
	AppObject windName = BranchPlus.w_chooseone.lb_list
	 selectValue_From_ChooseAnItem_Popup_ComponentTab("New Customer Reference")
	//Select Reference type
	winName =  BranchPlus.CustomerF2Window.dw_list_reference
	SetValue_PBDataWindow(winName,"#1","cust_ref_type","Son")
	//Click on Save option
	 clickOnSaveButon()
	//Validating pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Entering First name
	 TypeText_PBDataWindow(winName,"#1","first_name","John")
	//Click on Save option
	 clickOnSaveButon()
	//Validating pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Entering Last name
	 TypeText_PBDataWindow(winName,"#1","last_name","Smith")
	//Click on Delete option
	 clickButton_Delete()
	//Click on Yes button in the Delete Reference pop up
	 clickButton_InWindow("w_message","Yes")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ReferenceDetails","Failed", "","Y")

//***************************************************************************************************************************
//@Method:  verification_of_Reference1_Deatils(city,State)
//@Author: Thirumal Reddy
//@Date 16 Aug 2018
//@Description: This function is to verify the Reference1 details of reference tab
//Ex:  verification_of_Reference1_Deatils(city,State)
//***************************************************************************************************************************
verification_of_Reference1_Deatils(List<String> dataArr,List<String> objArray,String city,String State,String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject windowName = BranchPlus.CustomerF2Window.dw_list_reference
	 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","referenceType","branchplusqa.bp_reference",ID,"Reference_1_RefType",windowName,"#1","cust_ref_type")
	 enter_ReferenceDetails(objArray,dataArr,1,windowName)
	//Click on Save option
	 clickOnSaveButon()
	//Verifying City name based on Zip code
	 verify_State_CityByZip(windowName,"#1","city",city)
	//Verifying State name based on Zip code
	 verify_State_CityByZip(windowName,"#1","state",State)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: verification_of_Reference1_Deatils","Failed", "","Y")

//***************************************************************************************************************************
//@Method:  verification_of_Reference2_Deatils(city,State)
//@Author: Thirumal Reddy
//@Date 16 Aug 2018
//@Description: This function is to verify the Reference1 details of reference tab
//Ex:  verification_of_Reference2_Deatils(city,State)
//***************************************************************************************************************************
verification_of_Reference2_Deatils(List<String> dataArr2,List<String> objArray,String city,String state,String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject windowName = BranchPlus.CustomerF2Window.dw_list_reference
	 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","referenceType","branchplusqa.bp_reference",ID,"Reference_2_RefType",windowName,"#2","cust_ref_type")
	 enter_ReferenceDetails(objArray,dataArr2,2,windowName)
	//Click on Save option
	 clickOnSaveButon()
	//Verifying City name based on Zip code
	 verify_State_CityByZip(windowName,"#2","city",city)
	//Verifying State name based on Zip code
	 verify_State_CityByZip(windowName,"#2","state",state)
	//Click on Solicit checkbox to //no// in second reference row
	SetValue_PBDataWindow(windowName,"#2","valid_for_solicit_yn","OFF")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: verification_of_Reference2_Deatils","Failed", "","Y")

//***************************************************************************************************************************
//@Method:  verification_of_Reference3_Deatils(city,State)
//@Author: Thirumal Reddy
//@Date 16 Aug 2018
//@Description: This function is to verify the Reference1 details of reference tab
//Ex:  verification_of_Reference3_Deatils(city,State)
//***************************************************************************************************************************
verification_of_Reference3_Deatils(List<String> dataArr3,List<String> objArray,String city,String state,String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject windowName = BranchPlus.CustomerF2Window.dw_list_reference
	 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","referenceType","branchplusqa.bp_reference",ID,"Referencetab_3_RefType",windowName,"#3","cust_ref_type")
	 enter_ReferenceDetails(objArray,dataArr3,3,windowName)
	//Click on Save option
	 clickOnSaveButon()
	//Verifying City name based on Zip code
	 verify_State_CityByZip(windowName,"#3","city",city)
	//Verifying State name based on Zip code
	 verify_State_CityByZip(windowName,"#3","state",state)
	//Click on Valid To Collect checkbox to no in third reference row
	SetValue_PBDataWindow(windowName,"#3","valid_for_collect_yn","OFF")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: verification_of_Reference3_Deatils","Failed", "","Y")

//***************************************************************************************************************************
//@Method:  verification_of_Reference4_Deatils(city,State)
//@Author: Thirumal Reddy
//@Date 16 Aug 2018
//@Description: This function is to verify the Reference1 details of reference tab
//Ex:  verification_of_Reference4_Deatils(city,State)
//***************************************************************************************************************************
verification_of_Reference4_Deatils(List<String> dataArr4,List<String> objArray,String city,String state,String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject windowName = BranchPlus.CustomerF2Window.dw_list_reference
	 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","referenceType","branchplusqa.bp_reference",ID,"Referencetab_4_RefType",windowName,"#4","cust_ref_type")
	 enter_ReferenceDetails(objArray,dataArr4,4,windowName)
	//Click on Save option
	 clickOnSaveButon()
	//Verifying City name based on Zip code
	 verify_State_CityByZip(windowName,"#4","city",city)
	//Verifying State name based on Zip code
	 verify_State_CityByZip(windowName,"#4","state",state)
	//Click on Valid To Collect , Solict checkbox to No in fourth reference row
	SetValue_PBDataWindow(windowName,"#4","valid_for_collect_yn","OFF")
	SetValue_PBDataWindow(windowName,"#4","valid_for_solicit_yn","OFF")
	//Click on Save option
	 clickOnSaveButon()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: verification_of_Reference4_Deatils","Failed", "","Y")

//***************************************************************************************************************************
//@Method:  generate_Name(numLength,name)
//@Author: Thirumal Reddy
//@Date 28 Aug 2018
//@Description: This function is to generate the name || text randomly based on given length.
//Ex:  generate_Name(numLength,name)
//***************************************************************************************************************************
String generate_Name(Integer numLength,String sName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String generate_Name
	Integer Lenoftext
	Lenoftext = numLength-sName.Length()
	 	generate_Name = sName+" "+random_AlphaCharacter_String(Lenoftext-1)
	 //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: generate_Name","Failed", "","Y")
	return generate_Name
 
//*****************************************************************************************************************
//@methodName: Select_Individual_Column_Data_RandomValue(TableName,dbColumnName,updateTableName,ID,UpdateColName,tblWindowName,rowNum,ColumnName)
//@Author Thirumal Reddy
//@Date 27 Aug 2018
//@Description This is to Select the dropdown fields from the DB Table
//Ex: Result = Select_Individual_Column_Data_RandomValue("branchqa.b_dropdownvalues","Paytype","ApplicationWindowname","#1","#")
//*****************************************************************************************************************
Select_Individual_Column_Data_RandomValue_Other(String TableName,String dbColumnName,AppObject tblWindowName,String rowNum,String ColumnName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String Connection,SQL
	String ConnectionString
	String RecordAppObject, ActualValue
	Database db, db1, db2
	String ODBCDriverName = "MySQL ODBC 8.0 ANSI Driver"
	SQL ="SELECT "+dbColumnName+" FROM "+TableName+" where "+dbColumnName+" IS not NULL order by RAND() LIMIT 1"
	//define the connection string, specify database driver
	ConnectionString = "DRIVER={ODBCDriverName}; SERVER=s1-alm-1; DATABASE=branchqa;UID=admin;PASSWORD=admin; OPTION=3"
	//create an instance of the ADO connection && recordAppObject objects // commented in AT
	// AppObject Connection = CreateObject("ADODB.Connection")
	// AppObject RecordAppObject = CreateObject("ADODB.RecordAppObject")
	//Open the connection to the database
	db.Connect(ConnectionString)
	//Open the recordAppObject object executing the SQL statement && update records 
	db1.Connect("ADODB.Connection")
	db2.Connect("ADODB.RecordAppObject")
	//Select_Individual_Column_Data = RecordAppObject(ColumnName)
	Sleep (1)
	db2.Execute(dbColumnName)  
	String StoreValues    
	db.Fetch(StoreValues)
	if StoreValues!= ""    
		SetValue_PBDataWindow(tblWindowName,rowNum,ColumnName,StoreValues)
		 sendKeys("<TAB>")
		ActualValue = GetValue_PBDataWindow(tblWindowName,rowNum,ColumnName)
		// Update_ColumnValue_Into_DB(tblWindowName,TableName,rowNum,ColumnName,TableName_DB,ColumnName_DB,ID)
		Sleep (1)
		// validateDataAndReport(UCase(ActualValue),ToUpper(StoreValues),"Validation of "+dbColumnName+" dropdown value Expected :"+StoreValues+" Actual :" &ActualValue)
	else
		 writeReportLog("Unable to fetch the data from database","Failed","","Y")      
	db.Disconnect()
	//Error handling 
	 if GetErrorCount()>0  			
			 writeReportLog("Failed to Select_Individual_Column_Data_RandomValue","Failed", "" ,"")
Select_Individual_Column_Data_RandomValue(String TableName, String dbColumnName, String updateTableName, String ID, String UpdateColName, AppObject tblWindowName, String rowNum,String ColumnName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String Connection,SQL
	String ConnectionString
	String RecordAppObject, ActualValue
	Database db, db1, db2
	String ODBCDriverName = "MySQL ODBC 8.0 ANSI Driver"
	String StoreValues    
	SQL ="SELECT "+dbColumnName+" FROM "+TableName+" where "+dbColumnName+" IS not NULL order by RAND() LIMIT 1"
	//define the connection string, specify database driver
	ConnectionString = "DRIVER={ODBCDriverName}; SERVER=s1-alm-1; DATABASE=branchqa;UID=admin;PASSWORD=admin; OPTION=3"
	//create an instance of the ADO connection && recordAppObject objects // commented in AT
	// AppObject Connection = CreateObject("ADODB.Connection")
	// AppObject RecordAppObject = CreateObject("ADODB.RecordAppObject")
	//Open the connection to the database
	db.Connect(ConnectionString)
	//Open the recordAppObject object executing the SQL statement && update records 
	db1.Connect("ADODB.Connection")
	db2.Connect("ADODB.RecordAppObject")
	//Select_Individual_Column_Data = RecordAppObject(ColumnName)
	Sleep (1)
	db.Execute(dbColumnName)  
	db.Fetch(StoreValues)
	if StoreValues!= ""    
		SetValue_PBDataWindow(tblWindowName,rowNum,ColumnName,StoreValues)
		 sendKeys("<TAB>")
		ActualValue = GetValue_PBDataWindow(tblWindowName,rowNum,ColumnName)
		// Update_ColumnValue_Into_DB(tblWindowName,TableName,rowNum,ColumnName,TableName_DB,ColumnName_DB,ID)
		Sleep (1)
		// validateDataAndReport(UCase(ActualValue),ToUpper(StoreValues),"Validation of "+dbColumnName+" dropdown value Expected :"+StoreValues+" Actual :" &ActualValue)
	else
		 writeReportLog("Unable to fetch the data from database","Failed","","Y")      
	db.Disconnect()
	//Error handling 
	 if GetErrorCount()>0  			
			 writeReportLog("Failed to Select_Individual_Column_Data_RandomValue","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: enter_Promise_Activitydetails_CollectionTab(activity_type,Note)
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will enter the Promise Activity details in Collection Tab
//Ex:  enter_Promise_Activitydetails_CollectionTab(activity_type,Note)
//*****************************************************************************************************************
enter_Promise_Activitydetails_CollectionTab(String activity_type,String Note)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblPBDataWindow = BranchPlus.CustomerF2Window.dw_note
	//Select Activity Type
	SetValue_PBDataWindow(tblPBDataWindow,"#1","activity_type",activity_type)
	 enterActivityCode_UserID_CollectionTab()
	//To type text in Note Editor
	if activity_type == "Notes" || activity_type == "Instructions" 
		 TypeText_Note_CollectionWindow(Note)
	if activity_type == "Promise" 
		//Code to AppObject future date && time(promise date) for "Promise" Activity
		 get_Future_Date_CurrentTime_AMPM(Promise_FutureDate,Promise_FutureDate_Time,time_period)
		//To enter amount in promise Amount field
		//		prmsamt = Generate_RandomNumber_UserDefind("9","10")
		//		SetValue_PBDataWindow(tblwindow, "#1","promise_amt",prmsamt)
		if BranchPlus.CustomerF2Window.TextField[1].WaitWhileExists (10)
			//Input Reason
			Note = " "+Note
			BranchPlus.CustomerF2Window.TextField[1].Click()
			BranchPlus.CustomerF2Window.TextField[1].TypeKeys (Note)
	//Click on save button
	 clickOnSaveButon()
	//Get Current Date
	String Process_Date = getTodaysDate_mmddyyyy_format()
	//Validate the data for all activity types
	 validation_Collection_Activities_Promise(Process_Date,Note,Promise_FutureDate)
	//	Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/enter_Promise_Activitydetails_CollectionTab","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: validation_Collection_Activities_Promise(Process_Date,Note,Promise_FutureDate)
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will validation of Promise Activity details in Collection Tab
//Ex:  validation_Collection_Activities_Promise(Process_Date,Note,Promise_FutureDate)
//*****************************************************************************************************************
validation_Collection_Activities_Promise(String Process_Date,String Note,String Promise_FutureDate)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 validate_Activity_Date_CollectionPage(Process_Date)
	//to validate the Results Description during run time
	 validate_Notes_Results_CollectionPage()
		//to validate the Promise Date during run time
		 validate_Promise_Date_CollectionPage(Promise_FutureDate)
		//to validate the Promise Amount during run time
		 validate_Promise_Amount_CollectionPage("9999999999")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/validation_Collection_Activities_Promise","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: Verification_of_PromiseAmount_CollectionTab()
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will verify the Promise Amount in Collection Tab
//Ex:  Verification_of_PromiseAmount_CollectionTab()
//*****************************************************************************************************************
Verification_of_PromiseAmount_CollectionTab()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String getValueLength
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_note
	if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Enter Promise Amount
		//Invalid Promise Amount
		SetValue_PBDataWindow(tblwindow, "#1","promise_amt",Generate_RandomNumber(10))
		//Get the Length of Entered value in payment  field
		getValueLength = GetValue_PBDataWindow(tblwindow,"#1","promise_amt")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() ==10 
			 writeReportLog("Validation of Promise Amount field is Accepting only 10 digits","Passed","","")
		else
			 writeReportLog("Failed : Promise Amount field is Accepting more than 10 digits: "+getValueLength,"Failed", "" ,"")
	//Valid Promise Amount
	String prmsamt = Generate_RandomNumber_UserDefind("9","10")
	SetValue_PBDataWindow(tblwindow, "#1","promise_amt",prmsamt)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_PromiseAmount_CollectionTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_PromiseDate_CollectionTab()
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will verify the Promise Date in Collection Tab
//Ex:  Verification_of_PromiseDate_CollectionTab()
//*****************************************************************************************************************
Verification_of_PromiseDate_CollectionTab()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Click on Add Row button
		 ClickonAddRow_Button_F2Window()
		//Select bank draft checkbox
		AppObject tblwindow = BranchPlus.CustomerF2Window.dw_note
		//Select Activity Type
		SetValue_PBDataWindow(tblwindow,"#1","activity_type","Promise")
		//Enter Invalid date
		SetValue_PBDataWindow(tblwindow,"#1","promise_dt","10/02/1805")
		//Click on Save button
		 clickOnSaveButon()
		//Validate Date Validation error popup 
		 Validate_DateDailog_ErrorPopup_Title_Message_F2Window()	
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message_F2Window()
		SetValue_PBDataWindow(tblwindow,"#1","promise_dt",getTodaysDate_mmddyyyy_format())
		//Click on Save button
		 clickOnSaveButon()	
	 	//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message_F2Window()	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_PromiseDate_CollectionTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: enterActivitydetails_CollectionTab(activity_type,Note)
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will enter collection activity details in Collection Tab
//Ex:  enterActivitydetails_CollectionTab(activity_type,Note)
//*****************************************************************************************************************
enterActivitydetails_CollectionTab(String activity_type,String Note)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblPBDataWindow = BranchPlus.CustomerF2Window.dw_note
	//Select Activity Type
	Sleep (2)
	SetValue_PBDataWindow(tblPBDataWindow,"#1","activity_type",activity_type)
	//Select Activity Code && User ID
	 enterActivityCode_UserID_CollectionTab()
	//To type text in Note Editor
	Note = generate_Name(20,"Notes")
	 TypeText_Note_CollectionWindow(Note)
	//Click on Save button
	 clickOnSaveButon()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: enterActivitydetails_CollectionTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ActivityStatus_Checkbox_CollectionTab(value)
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will verify activity status checkbox in Collection Tab
//Ex:  Verification_of_ActivityStatus_Checkbox_CollectionTab(value)
//*****************************************************************************************************************
 Verification_of_ActivityStatus_Checkbox_CollectionTab(String value)
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_note
	if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Select bank draft checkbox
		SetValue_PBDataWindow(tblwindow,"#1","activity_status","OFF")
	//***************
	//Work Flow
	//***************
	//Unselect Bank Draft Checkbox
	SetValue_PBDataWindow(tblwindow,"#1","activity_status",value)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ActivityStatus_Checkbox_CollectionTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ActivityDate_CollectionTab()
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will verify activity date in Collection Tab
//Ex:  Verification_of_ActivityDate_CollectionTab()
//*****************************************************************************************************************
Verification_of_ActivityDate_CollectionTab()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_note
	String actdate
	if System.GetEnvVar("FV_Flag") == "Y"
		//**************************
		//Field Validation
		//**************************
		//Select bank draft checkbox
		actdate = GetValue_PBDataWindow(tblwindow,"#1","activity_dt")
		//Enter Invalid date
		SetValue_PBDataWindow(tblwindow,"#1","activity_dt","10/02/1805")
		//Click on Save button
		 clickOnSaveButon()
		//Validate Date Validation error popup 
		 Validate_DateDailog_ErrorPopup_Title_Message_F2Window()	
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message_F2Window()		
		//Enter Invalid Future date
		SetValue_PBDataWindow(tblwindow,"#1","activity_dt","10/02/2020")
		//Click on Save button
		 clickOnSaveButon()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message_F2Window()
	//***************
	//Work Flow
	//***************
	 	//Unselect Bank Draft Checkbox
	 	SetValue_PBDataWindow(tblwindow,"#1","activity_dt","00/00/0000")
	SetValue_PBDataWindow(tblwindow,"#1","activity_dt",getTodaysDate_mmddyyyy_format())
	//Click on Save button
	 clickOnSaveButon()
	//Validate Error Popup title message
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ActivityDate_CollectionTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Validate_DateDailog_ErrorPopup_Title_Message_F2Window()
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will validate Date Dialog error pop up
//Ex:  Validate_DateDailog_ErrorPopup_Title_Message_F2Window()
//*****************************************************************************************************************
Validate_DateDailog_ErrorPopup_Title_Message_F2Window()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String ErrorPopupTitle, ErrorPopupMessage
	if DateValidation.WaitWhileExists (10)
		//Get the Error Popup Title
		ErrorPopupTitle = DateValidation.GetAttr("Title")
		//Get the Error Popup Message
		ErrorPopupMessage = DateValidation.Txt_DateValidation.GetAttr("Title")
		 writeReportLog("Validation of Error Title: "+ ErrorPopupTitle +" with Popup Message: "+ErrorPopupMessage,"Passed","","")
		//Click OK Button
		DateValidation.OK.Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Validate_DateDailog_ErrorPopup_Title_Message_F2Window","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Notes_CollectionTab(note)
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will verify Notes field in Collection Tab
//Ex:  Verification_of_Notes_CollectionTab(note)
//*****************************************************************************************************************
Verification_of_Notes_CollectionTab(String note)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_note
	
	//	if System.GetEnvVar("FV_Flag") == "Y"
	//		//**************************
	//		//Field Validation
	//		//**************************
	//		//Enter Note field with invalid data more than 255 digits
	//		 TypeText_Note_CollectionWindow("Test")
	//		
	//		//Get the Length of Entered value in Note field
	//		String getValueLength = getValue_In_PBDataWindow_DP("dw_acct","#1","note")
	//		//Comparing the Length of accepting characters 
	//		if getValueLength.Length() <= 256 
	//			 writeReportLog("Validation of Note field is Accepting only 255 digits","Passed","","")
	//		else
	//			 writeReportLog("Failed : Note field is Accepting more than 255 digits: "+getValueLength,"Failed", "" ,"")
	//		 
	//	
	//***************
	//Work Flow
	//***************
	 	//enter Note
	SetValue_PBDataWindow(tblwindow,"#1","note",note)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Notes_CollectionTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: enterActivityCode_UserID_CollectionTab()
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will enter activity code && user ID in Collection Tab
//Ex:  enterActivityCode_UserID_CollectionTab()
//*****************************************************************************************************************
enterActivityCode_UserID_CollectionTab()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//select Activity Code
	String getdata, getuserid
	BranchPlus.CustomerF2Window.dw_note.WaitWhileExists(10)
	AppObject crdDecision = BranchPlus.CustomerF2Window.dw_note
	for(Integer i ; i<=10; i++)
		SetValue_PBDataWindow(crdDecision,"#1","#5","#{i}")
		getdata = BranchPlus.CustomerF2Window.dw_note.NotesTB.Row[1].ActivityCode.GetText()
		if getdata != "" 
			break
	   //select Assign userid
	BranchPlus.CustomerF2Window.dw_note.WaitWhileExists(10)
	for(Integer i ; i<=15; i++)
		SetValue_PBDataWindow(crdDecision,"#1","#11","#{i}")
		getuserid = BranchPlus.CustomerF2Window.dw_note.NotesTB.Row[1].ActivityCode.GetText()
		if getuserid != "" 
			break
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enterActivityCode_UserID_CollectionTab","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: select_CreditBureau_CreditCheckWindow_F2Window(valueToSelect)
//@Author Ranjitha
//@Date 5 Sep 2018
//@Description This will select the Credit Bureau option in Payment Tab
//Ex:  select_CreditBureau_CreditCheckWindow_F2Window(valueToSelect)
//*****************************************************************************************************************
select_CreditBureau_CreditCheckWindow_F2Window(String valueToSelect)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject crdtwndw = BranchPlus.CreditDecision.Creditcheck.tblCreditcheck
	 TypeText_PBDataWindow(crdtwndw,"#1","#21",valueToSelect)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to select_CreditBureau_CreditCheckWindow_F2Window","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: select_OutputType_CreditCheckWindow_F2Window(valueToSelect)
//@Author Ranjitha
//@Date 5 Sep 2018
//@Description This will select the Output Type option in Payment Tab
//Ex:  select_OutputType_CreditCheckWindow_F2Window(valueToSelect)
//*****************************************************************************************************************
select_OutputType_CreditCheckWindow_F2Window(String valueToSelect)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject crdtwndw = BranchPlus.CreditDecision.Creditcheck.tblCreditcheck
	 TypeText_PBDataWindow(crdtwndw,"#1","#4",valueToSelect)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to select_OutputType_CreditCheckWindow_F2Window","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: getValue_CreditCheckWindow_F2Window(ColName)
//@Author Ranjitha
//@Date 5 Sep 2018
//@Description This will get the value in Credit Check window in Payment Tab
//Ex:  getValue_CreditCheckWindow_F2Window(ColName)
//*****************************************************************************************************************
String getValue_CreditCheckWindow_F2Window(String ColName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String CellValue
	if BranchPlus.CreditDecision.Creditcheck.tblCreditcheck.WaitWhileExists (10)
		CellValue = BranchPlus.CreditDecision.Creditcheck.CollateralDetailsTB.Row[1].$ColName.GetText()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: getValue_CreditCheckWindow_F2Window","Failed", "","Y")
	return CellValue

//*****************************************************************************************************************
//@methodName: ClickButton_Credit()
//@Author Ranjitha
//@Date 5 Sep 2018
//@Description This will Click on Credit Check button in Payment Tab
//Ex:  ClickButton_Credit()
//*****************************************************************************************************************
ClickButton_Credit()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	BranchPlus.btnCredit.Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: ClickButton_Credit","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ToolBar_PaymentTab()
//@Author Ranjitha
//@Date 5 Sep 2018
//@Description This will verify the Tool Bar in Payment Tab
//Ex:  Verification_of_ToolBar_PaymentTab()
//*****************************************************************************************************************
Verification_of_ToolBar_PaymentTab()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Click on Process button
	 clickButton_Process()
	//Validate Error Pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Click on Waive Charge button
	 clickButton_Waive()
	//Validate Error Pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Click on New button
	 clickNewButton()
	String list = BranchPlus.w_chooseone.lb_list.GetAttr("all items")
	if (list.IndexOf("New Payment") > 0) 		
	else
		 writeReportLog("New Payment Option is not available in the list","Passed","","")
	//Clcik on Cancel button
	 clickButton_InWindow("w_chooseone","Cancel")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ToolBar_PaymentTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_LoanStatus_PaymentTab()
//@Author Ranjitha
//@Date 5 Sep 2018
//@Description This will verify the Loan Status in Payment Tab
//Ex:  Verification_of_LoanStatus_PaymentTab()
//*****************************************************************************************************************
Verification_of_LoanStatus_PaymentTab()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_list_reference
	String LoanStatus = "Loan not processed", actLoanStatus
	actLoanStatus = GetValue_PBDataWindow(tblwindow,"#2","cc_value")
	 validateDataAndReport(actLoanStatus,LoanStatus,"Validation of Loan Status in Payment Tab :"+actLoanStatus)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_LoanStatus_PaymentTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_OptedOut_CustomerTab()
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Opted Out field in Customer Tab
//Ex:  Verification_of_OptedOut_CustomerTab()
//*****************************************************************************************************************
Verification_of_OptedOut_CustomerTab()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Select Opted Out
	AppObject tblwndw = BranchPlus.CustomerF2Window.dw_cust
	SetValue_PBDataWindow(tblwndw,"#1","opted_out","Not Opted Out")
	//Select Allow Solicitation Radiobutton
	SetValue_PBDataWindow(tblwndw,"#1","allow_solicit_yn","Yes")
	SetValue_PBDataWindow(tblwndw,"#1","allow_solicit_yn","No")
	//Select Welcome  Radiobutton
	SetValue_PBDataWindow(tblwndw,"#1","welcome__yn","Yes")
	SetValue_PBDataWindow(tblwndw,"#1","welcome__yn","No")
	//Click on Save
	 clickOnSaveButon()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_CustomerEvaluation_CustomerTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_CustomerEvaluation_CustomerTab()
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Customer Evaluation in Customer Tab
//Ex:  Verification_of_CustomerEvaluation_CustomerTab()
//*****************************************************************************************************************
Verification_of_CustomerEvaluation_CustomerTab()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Case-1 Validation of Dis Allow Checkbox
	AppObject tblwndw = BranchPlus.CustomerF2Window.dw_cust
	SetValue_PBDataWindow(tblwndw,"#1","disallow_checks_yn","ON")
	 clickOnSaveButon()
	SetValue_PBDataWindow(tblwndw,"#1","disallow_checks_yn","OFF")
	//Case-2 Validation of Stability Home Radiobutton
	SetValue_PBDataWindow(tblwndw,"#1","stability_home","Poor")
	Sleep (1)
	SetValue_PBDataWindow(tblwndw,"#1","stability_home","Average")
	Sleep (1)
	SetValue_PBDataWindow(tblwndw,"#1","stability_home","Good")
	Sleep (1)
	//Case-3 Validation of Stability Work Radiobutton
	SetValue_PBDataWindow(tblwndw,"#1","stability_work","Poor")
	Sleep (1)
	SetValue_PBDataWindow(tblwndw,"#1","stability_work","Average")
	Sleep (1)
	SetValue_PBDataWindow(tblwndw,"#1","stability_work","Good")
	Sleep (1)
	//Case-4 Validation of Ability Radiobutton
	SetValue_PBDataWindow(tblwndw,"#1","ability","Poor")
	Sleep (1)
	SetValue_PBDataWindow(tblwndw,"#1","ability","Average")
	Sleep (1)
	SetValue_PBDataWindow(tblwndw,"#1","ability","Good")
	Sleep (1)
	//Case-4 Validation of Willingness Radiobutton
	SetValue_PBDataWindow(tblwndw,"#1","willingness","Poor")
	Sleep (1)
	SetValue_PBDataWindow(tblwndw,"#1","willingness","Average")
	Sleep (1)
	SetValue_PBDataWindow(tblwndw,"#1","willingness","Good")
	Sleep (1)
	//Case-4 Validation of Security Radiobutton
	SetValue_PBDataWindow(tblwndw,"#1","security","Poor")
	Sleep (1)
	SetValue_PBDataWindow(tblwndw,"#1","security","Average")
	Sleep (1)
	SetValue_PBDataWindow(tblwndw,"#1","security","Good")
	//Click Save button
	 clickOnSaveButon()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_CustomerEvaluation_CustomerTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Deceased_CustomerTab(valuetoSet)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Deceased in Customer Tab
//Ex:  Verification_of_Deceased_CustomerTab("No")
//*****************************************************************************************************************
Verification_of_Deceased_CustomerTab(String valuetoSet)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Select Deceased to Yes
	AppObject tblwndw = BranchPlus.CustomerF2Window.dw_cust
	SetValue_PBDataWindow(tblwndw,"#1","deceased_yn","Yes")
	 clickOnSaveButon()
	//Validate label in Customer tab
	AppObject tblwindow1 = BranchPlus.CustomerF2Window.dw_account_status_display
	String label = GetValue_PBDataWindow(tblwindow1,"#1","account_msg")
	if label == "Deceased - PRIMARY " 
		writeReportLog ("Deceased Radiobutton is AppObject to //Yes// && Label : "+label+" is displayed","Passed","","")
	//Select Deceased to No
	SetValue_PBDataWindow(tblwndw,"#1","deceased_yn",valuetoSet)
	//Clickon Save button
	 clickOnSaveButon()
	if BranchPlus.CustomerF2Window.dw_account_status_display.WaitWhileExists (10)
	else
		writeReportLog ("Deceased Radiobutton is AppObject to //No// && Label is disappeared","Passed","","")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Deceased_CustomerTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_HometownState_CustomerTab()
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Hometown State in Customer Tab
//Ex:  Verification_of_HometownState_CustomerTab()
//*****************************************************************************************************************
Verification_of_HometownState_CustomerTab()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Navigate to Address tab
	 navigateToTab("Address")
	String state = BranchPlus.CustomerF2Window.dw_loc.DWLocTB.Row[1].State.GetText()
	//Navigate to Customer tab
	 navigateToTab("Customer")
	AppObject tblPBDataWindow= BranchPlus.CustomerF2Window.dw_cust
	BranchPlus.CustomerF2Window.dw_cust.CustomerTB.Row[1].HomeTownState.Click()
	 TypeText_PBDataWindow(tblPBDataWindow,"#1","hometown_state",state)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_HometownState_CustomerTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_HometownCity_CustomerTab(city)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Hometown City in Customer Tab
//Ex:  Verification_of_HometownCity_CustomerTab(city)
//*****************************************************************************************************************
Verification_of_HometownCity_CustomerTab(String city)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblPBDataWindow = BranchPlus.CustomerF2Window.dw_cust
	BranchPlus.CustomerF2Window.dw_cust.CustomerTB.Row[1].HomeTownCity.Click()
	 TypeText_PBDataWindow(tblPBDataWindow,"#1","hometown_city",city)
	 clickOnSaveButon()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_HometownCity_CustomerTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_LengthinAreaMnths_CustomerTab(ID)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Length in Area Mnths in Customer Tab
//Ex:  Verification_of_LengthinAreaMnths_CustomerTab(ID)
//*****************************************************************************************************************
Verification_of_LengthinAreaMnths_CustomerTab(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String getValueLength
	String mnths = Generate_RandomNumber_UserDefind("1","3")
	AppObject tblPBDataWindow = BranchPlus.CustomerF2Window.dw_cust
	BranchPlus.CustomerF2Window.dw_cust.CustomerTB.Row[1].LengthInAreaMOS.Click()
	 TypeText_PBDataWindow(tblPBDataWindow,"#1","length_in_area_mos",mnths)
	 sendKeys("<TAB>")
	getValueLength = getValue_In_PBDataWindow_DP("dw_cust","#1", "length_in_area_mos")
	//Updated Length in Area Months random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_cust", "#1", "length_in_area_mos","bp_loantype_dealer_primaryapplicant","lengthinmnths",ID)
	 writeReportLog("Entered Length in Area Mnths: "+ mnths +" in Customer Tab (UI-"+"{getValueLength.Length()}"+",DB-3)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_LengthinAreaMnths_CustomerTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_LengthinAreayears_CustomerTab(ID)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Length in Area Yrs in Customer Tab
//Ex:  Verification_of_LengthinAreayears_CustomerTab(ID)
//*****************************************************************************************************************
Verification_of_LengthinAreayears_CustomerTab(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String getValueLength
	String yrs = Generate_RandomNumber_UserDefind("1","3")
	AppObject tblPBDataWindow = BranchPlus.CustomerF2Window.dw_cust
	BranchPlus.CustomerF2Window.dw_cust.CustomerTB.Row[1].LengthInAreaYRS.Click()
	 TypeText_PBDataWindow(tblPBDataWindow,"#1","length_in_area_yrs",yrs)
	 sendKeys("<TAB>")
	getValueLength =getValue_In_PBDataWindow_DP("dw_cust","#1", "length_in_area_yrs")
	//Updated Length in Area Years random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_cust", "#1", "length_in_area_yrs","bp_loantype_dealer_primaryapplicant","lengthinyrs",ID)
	 writeReportLog("Entered Length in Area Yrs: "+ yrs +" in Customer Tab (UI-"+"{getValueLength.Length()}"+",DB-3)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_LengthinAreayears_CustomerTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_USResident_CustomerTab(valuetoSet)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the US Resident in Customer Tab
//Ex:  Verification_of_USResident_CustomerTab(valuetoSet)
//*****************************************************************************************************************
Verification_of_USResident_CustomerTab(String valuetoSet)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Select US Resident
	AppObject tblwndw = BranchPlus.CustomerF2Window.dw_cust
	SetValue_PBDataWindow(tblwndw,"#1","us_resident_yn","No")
	 clickOnSaveButon()
	Sleep (2)
	SetValue_PBDataWindow(tblwndw,"#1","us_resident_yn",valuetoSet)
	 clickOnSaveButon()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_USResident_CustomerTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Dependents_CustomerTab(ID)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Dependents in Customer Tab
//Ex:  Verification_of_Dependents_CustomerTab(ID)
//*****************************************************************************************************************
Verification_of_Dependents_CustomerTab(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String dependents = Generate_RandomNumber_UserDefind("9","2")
	AppObject tblPBDataWindow = BranchPlus.CustomerF2Window.dw_cust
	BranchPlus.CustomerF2Window.dw_cust.CustomerTB.Row[1].NumOfDep.Click()
	 TypeText_PBDataWindow(tblPBDataWindow,"#1","nbr_of_dep",dependents)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_cust","#1", "nbr_of_dep")
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_cust", "#1", "nbr_of_dep","bp_loantype_dealer_primaryapplicant","dependents",ID)
	 writeReportLog("Entered Dependents: "+ dependents +" in Customer Tab (UI-"+"{getValueLength.Length()}"+",DB-2)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Dependents_CustomerTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_CreditScore_CustomerTab(ID)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Credit Score in Customer Tab
//Ex:  Verification_of_CreditScore_CustomerTab(ID)
//*****************************************************************************************************************
Verification_of_CreditScore_CustomerTab(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String creditscore = Generate_RandomNumber_UserDefind("9","3")
	AppObject tblPBDataWindow = BranchPlus.CustomerF2Window.dw_cust
	BranchPlus.CustomerF2Window.dw_cust.CustomerTB.Row[1].CreditScore.Click()
	
	 TypeText_PBDataWindow(tblPBDataWindow,"#1","credit_score",creditscore)
	 sendKeys("<TAB>")
	String getValueLength = getValue_In_PBDataWindow_DP("dw_cust","#1", "credit_score")
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_cust", "#1", "credit_score","bp_loantype_dealer_primaryapplicant","creditscore",ID)
	 writeReportLog("Entered Credit Score value: "+ creditscore +" in Customer Tab (UI-"+"{getValueLength.Length()}"+",DB-3)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_CreditScore_CustomerTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ReviewDate_CustomerTab()
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Review Date in Customer Tab
//Ex:  Verification_of_ReviewDate_CustomerTab()
//*****************************************************************************************************************
Verification_of_ReviewDate_CustomerTab()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String review_dt =  get_Review_Date_CustomerTab_DB()
	String getreviewdate_customer, getreviewdate
	List <String> getreviewdate_Split
	AppObject tblPBDataWindow = BranchPlus.CustomerF2Window.dw_cust
	BranchPlus.CustomerF2Window.dw_cust.CustomerTB.Row[1].next_review_dt.Click()
	getreviewdate_customer = getValueInPBDataWindow_DP("w_cust","dw_cust","#1","next_review_dt")
	getreviewdate_Split = getreviewdate_customer.Split(" ")
	getreviewdate = getreviewdate_Split[1]
	getreviewdate = Date.Parse("MM/dd/yyyy", getreviewdate).Format ("MM/dd/yyyy")
	 validateDataAndReport(getreviewdate,review_dt,"Validation of Review Date in Customer Tab Expected: "+review_dt+" && Actual :"+getreviewdate)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to Verification_of_PreferredName_CustomerTab","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: Verification_of_PreferredName_CustomerTab(ID)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Preferred Name in Customer Tab
//Ex:  Verification_of_PreferredName_CustomerTab(ID)
//*****************************************************************************************************************
Verification_of_PreferredName_CustomerTab(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblPBDataWindow = BranchPlus.CustomerF2Window.dw_cust
	String getValueLength
	String prfrdName = generate_Name(30,"PreferredName")
	 TypeText_PBDataWindow(tblPBDataWindow,"#1","preferred_name",prfrdName)
	 sendKeys("<TAB>")
	BranchPlus.CustomerF2Window.dw_cust.CustomerTB.Row[1].preferred_name.Click()
	getValueLength = getValueInPBDataWindow_DP("w_cust","dw_cust","#1","preferred_name")
	//Updated preferred name random data in DB
	 Update_ColumnValue_Into_DB("w_cust","dw_cust","#1","preferred_name","bp_loantype_dealer_primaryapplicant","preferredname",ID)
	 writeReportLog("Entered Preferred Name: "+ prfrdName +" in Customer Tab (UI-"+"{getValueLength.Length()}"+",DB-30)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to Verification_of_PreferredName_CustomerTab","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: get_Review_Date_CustomerTab_DB()
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will fetch the Review Date in Customer Tab
//Ex:  get_Review_Date_CustomerTab_DB()
//*****************************************************************************************************************
String get_Review_Date_CustomerTab_DB()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String sGet_Review_Date_CustomerTab_DB, Cust_ID, Entry_Date_DB_Customer, Entry_Date_DB_Yr, sReviewDate
	List<String> Entry_Date_DB_Split
	Date dtEntry_Date_DB_Yr, dtReviewEntry_Date_DB
	BranchPlus.CustomerF2Window.dw_cust.CustomerTB.Row[1].compute_3.Click()
	Cust_ID = BranchPlus.CustomerF2Window.dw_cust.CustomerTB.Row[1].compute_3.GetText()
	//Get Entry Date in Customer Tab
	Entry_Date_DB_Customer = runSQLQuery("SELECT entry_dt FROM support.bp_customer_tbl where cust_id=//"+ Cust_ID +"//","entry_dt")
	// 	Entry_Date_DB_Split = Entry_Date_DB_Customer.Split(" ")
	// Entry_Date_DB_Yr = Entry_Date_DB_Split[2]
	dtEntry_Date_DB_Yr = Date.Parse("MM/dd/yyyy", Entry_Date_DB_Customer)
	dtReviewEntry_Date_DB = dtEntry_Date_DB_Yr.Add (365)  //dateadd ("yyyy","1",Entry_Date_DB_Yr)
	sReviewDate = dtReviewEntry_Date_DB.Format ("MM/dd/yyyy")
	if GetErrorCount()>0  			
		 writeReportLog("Failed to get_Review_Date_CustomerTab_DB","Failed", "" ,"")
	return sReviewDate

//*****************************************************************************************************************
//@methodName: select_Prefix_CustomerTab()
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will select the Prefix in Customer Tab
//Ex:  select_Prefix_CustomerTab()
//*****************************************************************************************************************
select_Prefix_CustomerTab()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblwndw = BranchPlus.CustomerF2Window.dw_cust
	String getprefix
	for (Integer i = 1; i<=5; i++)
		//tblwndw.SelectCell "#1","#7"
		SetValue_PBDataWindow(tblwndw,"#1","#7","#{i}")
		getprefix = BranchPlus.CustomerF2Window.dw_cust.CustomerTB.Row[1].Prefix.GetText() // GetCellData("#1","#7")   verify lokesh
		if getprefix != "" 
			break
	 //Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to select_Prefix_CustomerTab","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: Verification_of_CustomerDetails_CustomerTab()
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Customer Details in Customer Tab
//Ex:  Verification_of_CustomerDetails_CustomerTab()
//*****************************************************************************************************************
Verification_of_CustomerDetails_CustomerTab()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String expPriLang = "English", fn, ln,mn,ssn,dl,dob,priLang
	AppObject tblwndw = BranchPlus.CustomerF2Window.dw_cust
	BranchPlus.CustomerF2Window.dw_cust.CustomerDetailsTB.Row[1].FirstName.Click()
	fn= getValueInPBDataWindow_DP("w_cust","dw_cust","#1","first_name").ToUpper()
	BranchPlus.CustomerF2Window.dw_cust.CustomerDetailsTB.Row[1].LastName.Click()
	ln= getValueInPBDataWindow_DP("w_cust","dw_cust","#1","last_name").ToUpper()
	BranchPlus.CustomerF2Window.dw_cust.CustomerDetailsTB.Row[1].MiddleName.Click()
	mn= getValueInPBDataWindow_DP("w_cust","dw_cust","#1","middle_name").ToUpper()
	BranchPlus.CustomerF2Window.dw_cust.CustomerDetailsTB.Row[1].SSN.Click()
	ssn= getValueInPBDataWindow_DP("w_cust","dw_cust","#1","ssn")
	BranchPlus.CustomerF2Window.dw_cust.CustomerDetailsTB.Row[1].DriverLicense.Click()
	dl= getValueInPBDataWindow_DP("w_cust","dw_cust","#1","driverlic")
	BranchPlus.CustomerF2Window.dw_cust.CustomerDetailsTB.Row[1].DOB.Click()
	dob= getValueInPBDataWindow_DP("w_cust","dw_cust","#1","dob_dt")
	dob = Date.Parse("MM/dd/yyyy", dob).Format("MM/dd/yyyy")
	BranchPlus.CustomerF2Window.dw_cust.CustomerDetailsTB.Row[1].PrimaryLang.Click()
	priLang= getValueInPBDataWindow_DP("w_cust","dw_cust","#1","primary_lang").ToUpper()
	 validateDataAndReport(fn,System.GetEnvVar("firstName"),"Validation of First Name Expected :" +System.GetEnvVar("firstName")+" && Actual :"+fn)
	 validateDataAndReport(ln,System.GetEnvVar("lastName"),"Validation of Last Name Expected :" +System.GetEnvVar("lastName")+" && Actual :"+ln)
	 validateDataAndReport(mn,System.GetEnvVar("middleName"),"Validation of Middle Name Expected :" +System.GetEnvVar("middleName")+" && Actual :"+mn)
	 validateDataAndReport(ssn,System.GetEnvVar("SSN"),"Validation of SSN Expected :" +System.GetEnvVar("SSN")+" && Actual :"+ssn)
	 validateDataAndReport(dob,System.GetEnvVar("DOB"),"Validation of DOB Expected :" +System.GetEnvVar("DOB")+" && Actual :"+dob)
	 validateDataAndReport(dl,System.GetEnvVar("DL"),"Validation of DL Expected :" +System.GetEnvVar("DL")+" && Actual :"+dl)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_CustomerDetails_CustomerTab","Failed", "","Y")

//*****************************************************************************************************************
//@methodName: validate_Email_Field(ID)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will validate the Email ID in Customer Tab
//Ex:  validate_Email_Field(ID)
//*****************************************************************************************************************
validate_Email_Field(String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String maxemail, getValueLength, email
	if System.GetEnvVar("FV_Flag") == "Y"
		//*******************************
		//Field Validation - Email Field
		//*******************************
		//Case#01 : Save Application By Entering Invalid format Email Address
		//AppObject Invalid Email format
		AppObject tblPBDataWindow = BranchPlus.CustomerF2Window.dw_cust
		 TypeText_PBDataWindow(tblPBDataWindow,"#1","email","test@")
		//Save New Application
		 clickOnSaveButon()
		//Verify email alert
		 Validate_ErrorPopup_Title_Message_F2Window()
		//Clear Values in Field
		 clear_Field_textBox_F2Window("dw_cust","email","#1")
		//--------------------------------------------------------------------------------
		//Case#02 : Save Application By Entering Special Characters in Email Address
		//AppObject Special Characters in Email Field
		 TypeText_PBDataWindow(tblPBDataWindow,"#1","email", "test$#&@")
		//Save New Application
		 clickOnSaveButon()
		//Verify email alert
		 Validate_ErrorPopup_Title_Message_F2Window()
		//Clear Values in Field
		 clear_Field_textBox_F2Window("dw_cust","email","#1")
		//------------------------------------------------------------------------------------
		//Case#03 : Save Application By Entering characters more than 250 in Email Address
		//AppObject Maximum Characters in email Field && Validate
		maxemail = random_AlphaCharacter_String(251)
		TypeText_PBDataWindow(tblPBDataWindow,"#1","email",maxemail)
		//Get the Length of Entered value in Dealer Discount field
		getValueLength = GetValue_PBDataWindow(tblPBDataWindow,"#1","email")
		//Comparing the Length of accepting characters 
		if getValueLength.Length() == 0
			 writeReportLog("Validate Email Maximum Length : "+maxemail,"Passed","","")	
		//Clear Values in Field
		 clear_Field_textBox_F2Window("dw_cust","email","#1")
		//-------------------------------------------------------------------------------------
		//*************************
		//Work Flow - Email Field
		//**************************
		email = "Email"+random_AlphaCharacter_String(55)+"@sf.com"
		 TypeText_PBDataWindow(tblPBDataWindow,"#1","email",email)
		 sendKeys("<TAB>")
		//get length of email id
		getValueLength= GetValue_PBDataWindow(tblPBDataWindow,"#1","email")
		   //Updated unique email random data in DB
		 Update_ColumnValue_Into_DB("w_cust", "dw_cust", "#1", "email","branchplusqa.bp_loantype_dealer_primaryapplicant","email",ID)
		 writeReportLog("Entered email ID: "+ getValueLength +"  in Customer Tab (UI-"+"{getValueLength.Length()}"+",DB-250)","Passed",FailComments,"")
		//Error handling 
		if GetErrorCount()>0  			
		 writeReportLog("Failed to validate_Email_Field","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: clear_Field_textBox_F2Window(windowName,column_Name,rowNum)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will clear the Text field
//Ex:  clear_Field_textBox_F2Window("dw_cust","email","#1")
//*****************************************************************************************************************
clear_Field_textBox_F2Window(String windowName,String column_Name,String sRowNum)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Object for Data Window
	Integer rowNum = Integer.Parse(sRowNum)
	AppObject tblPBDataWindow = BranchPlus.CustomerF2Window.$windowName
	BranchPlus.CustomerF2Window.dw_cust.CustomerDetailsTB.Row[rowNum].$column_Name.SetFocus()
	//Click Cell
	BranchPlus.CustomerF2Window.dw_cust.CustomerDetailsTB.Row[rowNum].$column_Name.Click()
	//AppObject Value
	BranchPlus.CustomerF2Window.dw_cust.CustomerDetailsTB.Row[rowNum].$column_Name.SetText("")
	
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed to clear_Field_textBox_F2Window"+column_Name,"Failed", "" ,"")

//*************************************************************************************************************************************************
//@methodName: insurance_Tab_FieldValidate(windowName,colNum,Value,comparisonVal)
//@Author: Thirumal Reddy
//@Date 09 August 2018
//@Description for field level validation in Insurance Tab fields
//Ex:  insurance_Tab_FieldValidate(windowName,colNum,Value,comparisonVal)
//***************************************************************************************************************************************************
insurance_Tab_FieldValidate(AppObject windowName,List<String> colNum,List<String> Value,List<String> comparisonVal)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Integer Iterator = 0
	for (Integer Iterator =1; Iterator<= Value.Count(); Iterator++)
		 verify_Length_TextField(windowName,"#1",colNum[Iterator],Value[Iterator],comparisonVal[Iterator])
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed insurance_Tab_FieldValidate","Failed", "" ,"")

//*************************************************************************************************************************************************
//@methodName: enter_ValidData_InsuranceTab_Fields(nameOfWindow,ColName,Value,DBCol,ID)
//@Author: Thirumal Reddy
//@Date 09 August 2018
//@Description to enter valid  data into Insurance tab fields, update to DB
//Ex:  enter_ValidData_InsuranceTab_Fields(nameOfWindow,ColName,Value,DBCol,ID)
//***************************************************************************************************************************************************
enter_ValidData_InsuranceTab_Fields(AppObject nameOfWindow,List<String> ColName,List<String> Value,String DBCol,String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String val
	for (Integer Iterator =1; Iterator<= ColName.Count(); Iterator++)
		 TypeText_PBDataWindow(nameOfWindow,"#1",ColName[Iterator],Value[Iterator])
		val = ColName[Iterator]
		if val == "zipcode" || val=="city" 
		else 
			 Update_ColumnValue_Into_DB("w_cust","dw_insurance","#1", ColName[Iterator],"branchplusqa.bp_insurance",DBCol[Iterator],ID)
			//  writeReportLog("Entered firstname value: "+ firstName +" in insurance window (UI-"+"{getValueLength.Length()}"+",DB-30)","Passed","","")
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed enter_ValidData_InsuranceTab_Fields","Failed", "" ,"")

//***************************************************************************************************************************
//@Method: verify_Component_Tab(pfs_gap_Chargeamount,dealer_com_PFS,repo_com_pfs,branch_com_pfs,other_fee,VSC_36_Months_chrgAmount,surcharge_VSC_fdw,dealer_com_vsc,repo_com_vsc,branch_com_vsc)
//@Author: Thirumal Reddy
//@Date 04 Sep 2018
//@Description: This function is to verify && enter the data in component tab.
//Ex:  verify_Component_Tab(pfs_gap_Chargeamount,dealer_com_PFS,repo_com_pfs,branch_com_pfs,other_fee,VSC_36_Months_chrgAmount,surcharge_VSC_fdw,dealer_com_vsc,repo_com_vsc,branch_com_vsc)
//***************************************************************************************************************************
verify_Component_Tab(String pfs_gap_Chargeamount,String dealer_com_PFS,String repo_com_pfs,String branch_com_pfs,String other_fee,String VSC_36_Months_chrgAmount,String surcharge_VSC_fdw,String dealer_com_vsc,String repo_com_vsc,String branch_com_vsc)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_component
	String descr,valAmount,delCom,repoCom,branchCom,valOtherFee ,surCharge
	//get the row count
	Integer rowCount = getRowCount_PbDataWindow("w_cust","dw_component")
	for (Integer Iterator= 1; Iterator<=rowCount; Iterator++)
		//get the description value
		descr = GetValue_PBDataWindow(tblwindow,"#{Iterator}","descr")
		//Getting expected value from database && verifying with the value in the application based on description value
		switch (descr)
			case "PFS GAP"
				valAmount = GetValue_PBDataWindow(tblwindow,"#{Iterator}","charge_amt")
				delCom = GetValue_PBDataWindow(tblwindow,"#{Iterator}","dealer_comm")
				repoCom = GetValue_PBDataWindow(tblwindow,"#{Iterator}","rep_comm")
				branchCom =  GetValue_PBDataWindow(tblwindow,"#{Iterator}","branch_comm")
				//Validating actual with expected
				if valAmount ==pfs_gap_Chargeamount  && delCom==dealer_com_PFS && repoCom ==repo_com_pfs && branchCom==branch_com_pfs 
					 writeReportLog("Actual values:"+valAmount+delCom+repoCom+branchCom +"are matching with expected values:"+pfs_gap_Chargeamount + dealer_com_PFS + repo_com_pfs +branch_com_pfs,"Passed","","Y")
			case "Other Fee"
				valOtherFee = GetValue_PBDataWindow(tblwindow,"#{Iterator}","charge_amt")
				//Validating actual with expected
				if valOtherFee==other_fee 
					 writeReportLog("Actual value:"+valOtherFee +" is matching with expected value:"+other_fee,"Passed","","Y")
			case "Service Point VSC 36 Months"
				valAmount = GetValue_PBDataWindow(tblwindow,"#{Iterator}","charge_amt")
				delCom = GetValue_PBDataWindow(tblwindow,"#{Iterator}","dealer_comm")
				repoCom = GetValue_PBDataWindow(tblwindow,"#{Iterator}","rep_comm")
				branchCom =  GetValue_PBDataWindow(tblwindow,"#{Iterator}","branch_comm")
				surCharge =  GetValue_PBDataWindow(tblwindow,"#{Iterator}","surcharge_amt")
				//Validating actual with expected
				if valAmount ==VSC_36_Months_chrgAmount && surCharge == surcharge_VSC_fdw && delCom==dealer_com_vsc && repoCom ==repo_com_vsc && branchCom==branch_com_vsc 
					 writeReportLog("Actual values:"+valAmount +surCharge +delCom +repoCom +branchCom +" are matching with expected values:"+VSC_36_Months_chrgAmount +surcharge_VSC_fdw +dealer_com_vsc +repo_com_vsc +branch_com_vsc,"Passed","","Y")
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed verify_Component_Tab","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: previousEmp_EmploymentTab()
//@Author Thirumal Reddy
//@Date 03 Sep 2018
//@Description This is to validate previous employment section in Employment Tab - loan Processing
//Ex:  previousEmp_EmploymentTab()
//*****************************************************************************************************************
previousEmp_EmploymentTab()
	String previous_Emp_Name, prevemp_position,prevemp_addr, prevemp_phone, prevemp_ext, prevemp_wrkyears, prevemp_wrkmnths
	previous_Emp_Name = generate_Name(40,"previousEmpName")
	prevemp_position = generate_Name(40,"PrevEmpPosition")
	prevemp_addr = generate_Name(40,"PrevEmpPosition")
	prevemp_phone = Generate_RandomNumber(10).Trim()
	prevemp_ext = Generate_RandomNumber(4).Trim()
	prevemp_wrkyears = Generate_RandomNumber(3).Trim()
	prevemp_wrkmnths = Generate_RandomNumber(3).Trim()
	AppObject prevWindow = BranchPlus.CustomerF2Window.dw_prev
	//Validating employer field
	 verify_Length_TextField(prevWindow,"#1","emplr_name",random_AlphaNumeric_String(45),"40")
	//Enter data in Employer field
	 TypeText_PBDataWindow(prevWindow,"#1","emplr_name",previous_Emp_Name)
	//Enter employer position
	 TypeText_PBDataWindow(prevWindow,"#1","position",prevemp_position)
	//Enter Previous employer address
	 TypeText_PBDataWindow(prevWindow,"#1","addr1",prevemp_addr)
	//Enter previous employer phone
	 TypeText_PBDataWindow(prevWindow,"#1","phone1",prevemp_phone)
	//Enter previous employer Extension
	 TypeText_PBDataWindow(prevWindow,"#1","ext1",prevemp_ext)
	//Enter work years
	 TypeText_PBDataWindow(prevWindow,"#1","work_years",prevemp_wrkyears)
	//Enter work months
	 TypeText_PBDataWindow(prevWindow,"#1","work_months",prevemp_wrkmnths)
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed previousEmp_EmploymentTab","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: enterdataInField_UpdateToDB(winName,rowNumber,ColArray,valArray,ID,DB_ColArray)
//@Author Thirumal Reddy
//@Date 03 Sep 2018
//@Description This is to enter the data in the text box && update the entered value to the DB
//Ex:  enterdataInField_UpdateToDB(winName,rowNumber,ColArray,valArray,ID,DB_ColArray)
//*****************************************************************************************************************
enterdataInField_UpdateToDB(String winName,String dataWindowName,Integer rowNumber,List<String> ColArray,List<String> valArray,String ID,List<String> DB_ColArray,String dbTableName)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String actualVal, valuetoDB
	AppObject tblwindowname =  BranchPlus.$winName.$dataWindowName
	for (Integer Iterator =1; Iterator<=ColArray.Count();Iterator++) 
		 TypeText_PBDataWindow(tblwindowname,"#{rowNumber}",ColArray[Iterator],valArray[Iterator])
		 sendKeys("<TAB>")
		actualVal =  GetValue_PBDataWindow(tblwindowname,"#{rowNumber}",ColArray[Iterator])
		 validateDataAndReport(actualVal,valArray[Iterator],"Actual value :"+actualVal+ "is matching with expected value:"+valArray[Iterator])
		valuetoDB = DB_ColArray[Iterator]
		 Update_ColumnValue_Into_DB(winName,dataWindowName,"#{rowNumber}", ColArray[Iterator],dbTableName,valuetoDB,ID)
		//  writeReportLog("Entered value: "+ firstName +" in insurance window (UI-"+"{getValueLength.Length()}"+",DB-30)","Passed","","")
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed enterdataInField_UpdateToDB","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: MonthlySal_Calculate_onPayType(value,rowNumber,ID)
//@Author Thirumal Reddy
//@Date 03 Sep 2018
//@Description This is for verification of Monthly salary based on PayType.
//Ex:  MonthlySal_Calculate_onPayType(value,rowNumber,ID)
//*****************************************************************************************************************
MonthlySal_Calculate_onPayType(List<String> value,Integer rowNumber,String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject windowname = BranchPlus.CustomerF2Window.dw_emplmt
	//genarating random salary
	Real actSalary, expSalary
	Integer Iterator, iexpSalary
	String payType, sal, salary
	sal=Generate_RandomNumber_UserDefind("9","8")
	salary=sal.Substring(1,6)+"."+sal.Substring(7,8)
	TypeText_PBDataWindow(windowname,"#{rowNumber}","gross_salary",salary)
	for ( Iterator =1; Iterator<= value.Count(); Iterator++)
		 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","employment_paysource","branchplusqa.bp_employment",ID,"primaryemp_paysource",windowname,"#{rowNumber}","salary_source")
		 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","employment_payday","branchplusqa.bp_employment",ID,"primaryemp_payday",windowname,"#{rowNumber}","payday")
		SetValue_PBDataWindow(windowname,"#{rowNumber}","#12",value[Iterator])
		payType = GetValue_PBDataWindow(windowname,"#1","salary_period_type")
		actSalary = Real.Parse(GetValue_PBDataWindow(windowname,"#1","compute_3"))
		if payType == "Biweekly" 
			iexpSalary = (Integer.Parse(salary)*26)/12
			expSalary = Math.Round(Real.Parse(iexpSalary.Format()), 2)
			//expSalary = "$" + expSalary
			 validateDataAndReport(expSalary,actSalary,"Net monthly income when paytype is Biweekly for salary $" + salary + " is " + actSalary.Format())
		else if payType == "Month" 
			iexpSalary = Integer.Parse(salary)
			expSalary = Math.Round(Real.Parse(iexpSalary.Format()), 2)
			//expSalary = "$" + expSalary
			 validateDataAndReport(expSalary,actSalary,"Net monthly income when paytype is Month for salary $" + salary + " is " + actSalary.Format())
		else if payType == "Week" 
			iexpSalary = (Integer.Parse(salary)*52)/12
			expSalary = Math.Round(Real.Parse(iexpSalary.Format()), 2)
			//expSalary = "$" + expSalary
			 validateDataAndReport(expSalary,actSalary,"Net monthly income when paytype is Week for salary $" + salary + " is " + actSalary .Format())
		else if payType == "Year" 
			iexpSalary = Integer.Parse(salary)/12
			expSalary = Math.Round(Real.Parse(iexpSalary.Format()), 2)
			//expSalary = "$" + expSalary
			 validateDataAndReport(expSalary,actSalary,"Net monthly income when paytype is Year for salary $" + salary + " is " + actSalary.Format()) 
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed MonthlySal_Calculate_onPayType","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: MonthlySal_Calculate_onPayType(value,rowNumber,ID)
//@Author Thirumal Reddy
//@Date 05 Sep 2018
//@Description This is for verification of Monthly salary based on PayType.
//Ex:  MonthlySal_Calculate_onPayType(value,rowNumber,ID)
//*****************************************************************************************************************
budget_Tab_Validation(List<String> dataArr,String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//To get the row count
	Integer itr = 0, Iterator
	Integer rowCount = getRowCount_PbDataWindow("w_cust","dw_budget")
	String max_Amount = Generate_RandomNumber_UserDefind("9","6")+".00"
	AppObject budgetWindow = BranchPlus.CustomerF2Window.dw_budget
	List<String> DBColArr = {"primary_job_monthlyincome","second_job_monthlyincome","mortgage_mnthly_paymnt","autos_mnthly_paymnt","pfsc_mnthly_paymnt","rent_mnthly_paymnt"}
	for (Iterator= 1; Iterator<=rowCount; Iterator++)
		itr =Iterator-1 // need to check
		if Iterator<=2 
			 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#{Iterator}", "budget_type","INCOME")
			 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#{Iterator}", "description",dataArr[itr])
			 SetValue_PBDataWindow(budgetWindow,"#{Iterator}","monthly_income",max_Amount)
			 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#{Iterator}", "monthly_income",max_Amount)
			 Update_ColumnValue_Into_DB("w_cust", "dw_budget","#{Iterator}", "monthly_income","branchplusqa.bp_budget",DBColArr[itr],ID)
		else
			 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#{Iterator}", "budget_type","DEBT")
			//	 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#{Iterator}", "description",dataArr[itr])
			 SetValue_PBDataWindow(budgetWindow,"#{Iterator}","monthly_payment",max_Amount)
			 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#{Iterator}", "monthly_payment",max_Amount)
			 Update_ColumnValue_Into_DB("w_cust", "dw_budget","#{Iterator}", "monthly_payment","branchplusqa.bp_budget",DBColArr[itr],ID)
	//		 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#{Iterator}", "budget_type","DEBT")
	//		value = getValueInPBDataWindow_DP("w_cust", "dw_budget", "#{Iterator}", "description")
	//		SetValue_PBDataWindow(budgetWindow,"#{Iterator}","monthly_payment",max_Amount)
	//		if IndexOf(dataArr,value) 
	//			 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#{Iterator}", "monthly_payment",max_Amount)
	//		     Update_ColumnValue_Into_DB("w_cust", "dw_budget","#{Iterator}", "monthly_payment","branchplusqa.bp_budget",DBColArr[itr],ID)
	//		
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed budget_Tab_Validation","Failed", "" ,"")

//*****************************************************************************************************************
//@methodName: VerificationofAccountandBudgetTab_toProcessLoan(gapchargeamount,otherfee,chargeamount,dealercomm,repocomm,suramount,ID)
//@Author Ranjitha N
//@Date 10 Sep 2018
//@Description This is for verification of Account tab && Budget tab to Process the loan
//Ex:  VerificationofAccountandBudgetTab_toProcessLoan(gapchargeamount,otherfee,chargeamount,dealercomm,repocomm,suramount,ID)
//*****************************************************************************************************************
VerificationofAccountandBudgetTab_toProcessLoan(String gapchargeamount,String otherfee,String chargeamount,String dealercomm,String repocomm,String surAmt,String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Navigate to Component Tab
	 navigateToTab("Component")
	//Update the Finance Details
	AppObject tblwndw = BranchPlus.CustomerF2Window.dw_component
	SetValue_PBDataWindow(tblwndw,"#1","charge_amt",gapchargeamount)
	SetValue_PBDataWindow(tblwndw,"#2","charge_amt",otherfee)
	SetValue_PBDataWindow(tblwndw,"#3","charge_amt",chargeamount)
	SetValue_PBDataWindow(tblwndw,"#1","dealer_comm",dealercomm)
	SetValue_PBDataWindow(tblwndw,"#1","rep_comm",repocomm)
	SetValue_PBDataWindow(tblwndw,"#3","dealer_comm",dealercomm)
	SetValue_PBDataWindow(tblwndw,"#3","surcharge_amt",surAmt)
	SetValue_PBDataWindow(tblwndw,"#3","rep_comm",repocomm)
	//Click on Save button
	 clickOnSaveButon()
	//Navigate to Component Tab
	 navigateToTab("Account")
	//Click on Process Button
	 clickButton_Process()
	//Handle Validation error pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Update the Loan terms
	AppObject tblwindow = BranchPlus.CustomerF2Window.dw_acct
	SetValue_PBDataWindow(tblwindow,"#1","nbr_of_months","72")
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "nbr_of_months","bp_financedetails","loanterm",ID)
	//Click on Save button
	 clickOnSaveButon()
	//Click on Process Button
	 clickButton_Process()
	//Handle Validation error pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Update the Purchase Amount && DownPayment Amount
	SetValue_PBDataWindow(tblwindow,"#1","purch_amt","25000")
	SetValue_PBDataWindow(tblwindow,"#1","down_pmt","3000")
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "purch_amt","bp_financedetails","loanamount",ID)
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "down_pmt","bp_financedetails","downpayment",ID)
	//Click on Save button
	 clickOnSaveButon()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: VerificationofAccountandBudgetTab_toProcessLoan","Failed", "","Y")

//***************************************************************************************************************************
//@Method: sawsTab_Field_Validation_ValidData(value)
//@Author: Thirumal Reddy
//@Date 21 Aug 2018
//@Description: This function is to the fields in SAWS Tab && to enter valid data into the fields && verify.
//Ex:  sawsTab_Field_Validation_ValidData(value)
//***************************************************************************************************************************
sawsTab_Field_Validation_ValidData(String value)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject srch_Window = BranchPlus.CustomerSearchWindow.dw_search
	Integer valItr = 0 ,Iterator
	//*******************************
	//Field Validations
	//*******************************
	 saws_NegativeValidation()
	AppObject windowName = BranchPlus.CustomerF2Window.dw_saws
	for (Iterator = 1; Iterator<=6; Iterator++)
		%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
		valItr = Iterator-1
		 SelectCell_PBDataWindow(windowName,"#{Iterator}","descr")
		SetValue_PBDataWindow(srch_Window,"#1","reason_expand",random_AlphaNumeric_String(5005))
		  clickButton_InWindow("w_search","Ok")
		 clickOnSaveButon()
		 verify_Length_TextField(windowName,"#{Iterator}","notes","5000")
	//*******************************
	//Work Flow
	//*******************************
	 SelectCell_PBDataWindow(windowName,"#{Iterator}","descr")
	SetValue_PBDataWindow(srch_Window,"#1","reason_expand",value[valItr])
	  clickButton_InWindow("w_search","Ok")
	 clickOnSaveButon()
	 Get_Value_TextBox_Compare("w_cust","dw_saws","#{Iterator}","notes",value[valItr])
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed  sawsTab_Field_Validation_ValidData","Failed", "" ,"")


//***************************************************************************************************************************
//@Method: saws_NegativeValidation()
//@Author: Thirumal Reddy
//@Date 21 Aug 2018
//@Description: This function is to perform negative validation in SAWS Tab.
//Ex:  saws_NegativeValidation()
//***************************************************************************************************************************
saws_NegativeValidation()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String value
	//Click on Transportation Explanation link
	AppObject windowName = BranchPlus.CustomerF2Window.dw_saws
	 SelectCell_PBDataWindow(windowName,"#1","descr")
	//Click on cancel button
	  clickButton_InWindow("w_search","Cancel")
	//Click on Transportation Explanation link
	 SelectCell_PBDataWindow(windowName,"#1","descr")
	//Click on Ok button
	  clickButton_InWindow("w_search","Ok")
	//Click on Save option
	 clickOnSaveButon()
	//Get the value in the first link && verify whether notes is null
	value = getValueInPBDataWindow_DP("w_cust","dw_saws","#1","notes")
	if value=="" 
		 writeReportLog("if any notes is saved with empty message,No data is displayed on the Saws Tab ","Passed",FailComments,"N")
	else 
		%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
		 writeReportLog("if any notes is saved with empty message,still data is displayed on the Saws Tab ","Failed",FailComments,"Y")
	//Click on Transportation Explanation link
	 SelectCell_PBDataWindow(windowName,"#1","descr")
	//Enter random alphanumeric characters
	AppObject srch_Window = BranchPlus.CustomerSearchWindow.dw_search
	SetValue_PBDataWindow(srch_Window,"#1","reason_expand",random_AlphaNumeric_String(50))
	//Click on Ok button
	  clickButton_InWindow("w_search","Ok")
	//Navigate to reference tab
	 navigateToTab("Reference")
	//Click on Yes button in Tab Page selection changing pop up
	  clickButton_InWindow("w_message","Yes")
	//Navigate to Saws Tab
	 navigateToTab("SAWS")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed saws_NegativeValidation","Failed", "" ,"")

//***************************************************************************************************************************
//@Method: Validate_Budget_LineItem()
//@Author: Thirumal Reddy
//@Date 21 Aug 2018
//@Description: This function is to perform validations in budget Tab by adding line items.
//Ex:  Validate_Budget_LineItem()
//***************************************************************************************************************************
 Validate_Budget_LineItem()
	// variables
	String max_Amount
	Integer rowCoun
	AppObject budgetWindow = BranchPlus.CustomerF2Window.dw_budget
	//Select budget type drop down
	rowCoun = getRowCount_PbDataWindow("w_cust","dw_budget")
	max_Amount = Generate_RandomNumber_UserDefind("9","6")+".00"
	//Select budget type income in the drop down
	SetValue_PBDataWindow(budgetWindow,"#{rowCoun}","budget_type","INCOME")
	//Entering budget description
	 TypeText_PBDataWindow(budgetWindow,"#{rowCoun}","description","INCOME")
	//Entering monthly income
	SetValue_PBDataWindow(budgetWindow,"#{rowCoun}","monthly_income",max_Amount)
	//Comparing the values
	 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#{rowCoun}", "monthly_income",max_Amount)
	//Click on Add row option
	 ClickonAddRow_Button_F2Window()
	rowCoun = getRowCount_PbDataWindow("w_cust","dw_budget")
	max_Amount = Generate_RandomNumber_UserDefind("9","6")+".00"
	//Select budget type Debt in the drop down
	SetValue_PBDataWindow(budgetWindow,"#{rowCoun}","budget_type","DEBT")
	//Entering monthly income
	 TypeText_PBDataWindow(budgetWindow,"#{rowCoun}","description","DEBT")
	//Entering monthly payment
	SetValue_PBDataWindow(budgetWindow,"#{rowCoun}","monthly_payment",max_Amount)
	//Comparing the values
	 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#{rowCoun}", "monthly_payment",max_Amount)
	//Click on delete option
	 clickButton_Delete()
	//Click on yes button in delete budget window
	 clickButton_InWindow("w_message","Yes")
	//Click on delete option
	 clickButton_Delete()
	//Click on yes button in delete budget window
	 clickButton_InWindow("w_message","Yes")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function:Validate_Budget_LineItem ","Failed", "","Y")
 
//***************************************************************************************************************************
//@Method: Negative_Validation_Insurance_Tab()
//@Author: Thirumal Reddy
//@Date 21 Aug 2018
//@Description: This function is to perform negative validation in Insurance Tab.
//Ex:  Negative_Validation_Insurance_Tab(company_Name,policy_Number)
//***************************************************************************************************************************
Negative_Validation_Insurance_Tab(String company_Name,String policy_Number)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Click on New Option
	 clickNewButton()
	AppObject winName = BranchPlus.w_chooseone.lb_list
	 selectValue_From_ChooseAnItem_Popup_ComponentTab("New Insurance")
	//Click on save option
	 clickOnSaveButon()
	//Validating pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Entering Company name
	AppObject insuranceWindow = BranchPlus.CustomerF2Window.dw_insurance
	SetValue_PBDataWindow(insuranceWindow,"#1","company_name",company_Name)
	//Click on save option
	 clickOnSaveButon()
	//Validating pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Entering policy number
	SetValue_PBDataWindow(insuranceWindow,"#1","policy_nbr",policy_Number)
	//Click on save option
	 clickOnSaveButon()
	//Validating pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Entering Start date
	//AppObject insuranceWindow = BranchPlus.CustomerF2Window.dw_insurance
	// TypeText_PBDataWindow(insuranceWindow,"#1","start_dt","08/08/1800")
	//Click on save option
	// clickOnSaveButon()
	//Validating pop up
	// Validate_DateDailog_ErrorPopup_Title_Message_F2Window()
	//Entering Start date
	SetValue_PBDataWindow(insuranceWindow,"#1","start_dt","")
	 TypeText_PBDataWindow(insuranceWindow,"#1","start_dt","08/08/2020")
	//Click on save option
	 clickOnSaveButon()
	//Validating pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Entering Date
	// TypeText_PBDataWindow(insuranceWindow,"#1","end_dt","08/08/1800")
	//Click on save option
	// clickOnSaveButon()
	//Validating pop up
	// Validate_DateDailog_ErrorPopup_Title_Message_F2Window()
	//Click on Delete option
	 clickButton_Delete()
	//Click on yes button in Delete Insurance pop up
	 clickButton_InWindow("w_message","Yes")
	//Click on Add row option
	 ClickonAddRow_Button_F2Window()
	//Click on Add row option
	 ClickonAddRow_Button_F2Window()
	//Click on Delete option
	 clickButton_Delete()
	//Click on yes button in Delete Insurance pop up
	 clickButton_InWindow("w_message","Yes")
	//Error Handling
	if GetErrorCount()>0 
		%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
		 writeReportLog("Failed Step/Function:Validate_Budget_LineItem ","Failed", "","Y")

//***************************************************************************************************************************
//@Method: Agent_AddressDetails_InsuranceWindow()
//@Author: Thirumal Reddy
//@Date 21 Aug 2018
//@Description: This function is to add agent address details in Insurance Tab.
//Ex:  Agent_AddressDetails_InsuranceWindow(currentState)
//***************************************************************************************************************************
Agent_AddressDetails_InsuranceWindow(String currentState)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String Agent_address_1, Agent_address_2, Agent_address_3, Agent_zip_code, Agent_City, State
	String Agent_phone, Agent_fax, Agent_extension
	
	Agent_address_1 = generate_Name(40,"Address1").ToUpper()
	Agent_address_2 =  generate_Name(40,"Address2").ToUpper()
	Agent_address_3 = generate_Name(40,"Address3").ToUpper()
	Agent_zip_code = Read_Individual_Column_Data("branchplusqa.bp_insurance","zipCode",currentState)
	Agent_City = Read_Individual_Column_Data("branchplusqa.bp_insurance","city",currentState)
	State = Read_Individual_Column_Data("branchplusqa.bp_insurance","state",currentState)
	Agent_phone = Generate_RandomNumber(10)
	Agent_fax =  Generate_RandomNumber(10)
	Agent_extension =Generate_RandomNumber(5)
	//Entering valid Agent address1
	 BranchPlus.CustomerF2Window.dw_insurance.InsuranceAgentDetailsTB.Row[1].Agent_address_1.Click()
	 BranchPlus.CustomerF2Window.dw_insurance.InsuranceAgentDetailsTB.Row[1].Agent_address_1.TypeKeys(Agent_address_1)
	//Entering valid Agent address2
	 BranchPlus.CustomerF2Window.dw_insurance.InsuranceAgentDetailsTB.Row[1].Agent_address_2.Click()
	 BranchPlus.CustomerF2Window.dw_insurance.InsuranceAgentDetailsTB.Row[1].Agent_address_2.TypeKeys(Agent_address_1)
	//Entering valid Agent address3
	 BranchPlus.CustomerF2Window.dw_insurance.InsuranceAgentDetailsTB.Row[1].Agent_address_3.Click()
	 BranchPlus.CustomerF2Window.dw_insurance.InsuranceAgentDetailsTB.Row[1].Agent_address_3.TypeKeys(Agent_address_1)
	//Entering valid Agent zip code
	 BranchPlus.CustomerF2Window.dw_insurance.InsuranceAgentDetailsTB.Row[1].Agent_zip_code.Click()
	 BranchPlus.CustomerF2Window.dw_insurance.InsuranceAgentDetailsTB.Row[1].Agent_zip_code.TypeKeys(Agent_address_1)
	//Entering valid Agent phone
	 BranchPlus.CustomerF2Window.dw_insurance.InsuranceAgentDetailsTB.Row[1].Agent_phone.Click()
	 BranchPlus.CustomerF2Window.dw_insurance.InsuranceAgentDetailsTB.Row[1].Agent_phone.TypeKeys(Agent_address_1)
	//extension
	 BranchPlus.CustomerF2Window.dw_insurance.InsuranceAgentDetailsTB.Row[1].Agent_extension.Click()
	 BranchPlus.CustomerF2Window.dw_insurance.InsuranceAgentDetailsTB.Row[1].Agent_extension.TypeKeys(Agent_address_1)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function:Agent_AddressDetails_InsuranceWindow ","Failed", "","Y")
	
//*****************************************************************************************
//@methodName : Validate_MotorCycleLoan_RelevantImage_CreditDecisionWindow()
//@Author     : Thirumal Reddy
//@Date       : 17 Sep 2018
//@Description: This will Validate MotorCycle Loan Relevant Image in Credit Decision Window
//Ex: Validate_MotorCycleLoan_RelevantImage_CreditDecisionWindow()
//*****************************************************************************************
Validate_MotorCycleLoan_RelevantImage_CreditDecisionWindow()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Validate MotorCycle Relevant Image
	if BranchPlus.MotorCycleImg.WaitWhileExists(10) 
		 writeReportLog("Validation of Credit Decision Relevant Image","Passed","","")
	else
		 writeReportLog("Failed Credit Decision MotorCycle Image","Failed", "" ,"Y")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed Step/Function: Validate_MotorCycleLoan_RelevantImage_CreditDecisionWindow","Failed", "" ,"")

//*****************************************************************************************
//@methodName : Validate_DirectLoan_RelevantImage_CreditDecisionWindow()
//@Author     : Thirumal Reddy
//@Date       : 17 Sep 2018
//@Description: This will Validate Direct Loan Relevant Image in Credit Decision Window
//Ex: Validate_DirectLoan_RelevantImage_CreditDecisionWindow()
//*****************************************************************************************
Validate_DirectLoan_RelevantImage_CreditDecisionWindow()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Validate MotorCycle Relevant Image
	if BranchPlus.DirectLoanObject.WaitWhileExists(10) 
		 writeReportLog("Validation of Credit Decision Relevant Image","Passed","","")
	else
		 writeReportLog("Failed Credit Decision DirectLoan Image","Failed", "" ,"Y")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed Step/Function: Validate_DirectLoan_RelevantImage_CreditDecisionWindow","Failed", "" ,"")

//************************************************************************************************************************************
//@methodName: verificationOf_PrimaryEmployerName(WindowName,EmployerType,EmployerName,ID)
//@Author Thirumal Reddy
//@Date 29 Sep 2018
//@Description This is to enter the data in the Employer name field, verify && update the entered value to Automation DB
//Ex:  verificationOf_PrimaryEmployerName("F2","PrimaryEmployer","John",ID)
//************************************************************************************************************************************
verificationOf_PrimaryEmployerName(String WindowName,String EmployerType,String EmployerName,String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblwindowname =  BranchPlus.CreditDecision.tbldwStep
	String actualEmployerName
	//Checking the employer type && fetching the row number
	String RowNumber = getRowNumber_BasedOn_EmployerType_EmploymentWindow("PrimaryEmployer")
	//Entering the employer name
	 enter_EmployerName(WindowName,EmployerType,EmployerName)
	 sendKeys("<TAB>")
	//Fetching actual employer name displayed
	actualEmployerName =  get_EmployerName(WindowName,EmployerType)
	//Validating actual employer name displayed  with the expected employer name
	 validateDataAndReport(actualEmployerName,EmployerName,"Validation of primary employer name field")
	//Updating the employer name to the Automation DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step","{RowNumber}", "emplr_name"," branchplusqa.bp_directloan_primaryemployer","primaryemployername",ID)
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed verificationOf_PrimaryEmployerName","Failed", "" ,"")

//************************************************************************************************************************************
//@methodName: verificationOf_PrimaryEmployerShift(WindowName,EmployerType,EmployerShift,ID)
//@Author Thirumal Reddy
//@Date 29 Sep 2018
//@Description This is to enter the data in the Employer Shift field, verify && update the entered value to Automation DB
//Ex:  verificationOf_PrimaryEmployerShift("F2","PrimaryEmployer","Shift",ID)
//************************************************************************************************************************************
verificationOf_PrimaryEmployerShift(String WindowName,String EmployerType,String EmployerShift,String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Checking the employer type && fetching the row number
	String actualEmployerShift
	String RowNumber = getRowNumber_BasedOn_EmployerType_EmploymentWindow(EmployerType)
	//Entering Employer Shift
	 enter_EmployerShift(WindowName,EmployerType,EmployerShift)
	 sendKeys("<TAB>")
	//Fetching actual employer Shift displayed
	actualEmployerShift =  get_EmployerShift(WindowName,EmployerType)
	//Validating actual employer Shift with the expected employer Shift
	 validateDataAndReport(actualEmployerShift,EmployerShift,"Validation of primary employer shift field")
	//Writing employer Shift to the Automation DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step",RowNumber, "shift"," branchplusqa.bp_directloan_primaryemployer","primaryemployershift",ID)
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed verificationOf_PrimaryEmployerShift","Failed", "" ,"")

//************************************************************************************************************************************
//@methodName: verificationOf_PrimaryEmployerSupervisor(WindowName,EmployerType,EmployerSupervisor,ID)
//@Author Thirumal Reddy
//@Date 29 Sep 2018
//@Description This is to enter the data in the Employer supervisor field, verify && update the entered value to Automation DB
//Ex:  verificationOf_PrimaryEmployerSupervisor("F2","PrimaryEmployer","Supervisor",ID)
//************************************************************************************************************************************
verificationOf_PrimaryEmployerSupervisor(String WindowName,String EmployerType,String EmployerSupervisor,String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String actualEmployerSupervisor
	//Checking the employer type && fetching the row number
	String RowNumber = getRowNumber_BasedOn_EmployerType_EmploymentWindow(EmployerType)
	//Entering Employer Supervisor
	 enter_EmployerSupervisor(WindowName,EmployerType,EmployerSupervisor)
	 sendKeys("<TAB>")
	//Fetching actual employer Supervisor displayed
	actualEmployerSupervisor = get_EmployerSupervisor(WindowName,EmployerType)
	//Validating actual employer Supervisor with the expected employer Supervisor
	 validateDataAndReport(actualEmployerSupervisor,EmployerSupervisor,"Validation of primary employer supervisor field")
	//Writing employer Supervisor to the Automation DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step",RowNumber, "sup"," branchplusqa.bp_directloan_primaryemployer","primaryemployerSupervisor",ID)
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed verificationOf_PrimaryEmployerSupervisor","Failed", "" ,"")

//***********************************************************************************************************************************
//@Method: budgetTab_DeleteRows_AppObjectData()
//@Author Thirumal Reddy
//@Date 11 Oct 2018
//@Description This function is to delete the rows in budget tab && add rows AppObject data in budget tab in F2 window for refinancing current customer
//Ex:  budgetTab_DeleteRows_AppObjectData()
//************************************************************************************************************************************
budgetTab_DeleteRows_AppObjectData()
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	String income1Desc, income2Desc, debt1, debt2, debt3, debt4
	Integer rowCount, Iterator, itr = 0
	 List<String> descArr 
	 income1Desc = "Gross Monthly Pay Primary Job"
	 income2Desc = "Gross Monthly Pay 2nd Job"
	 debt1 = "Mortgage"
	 debt2 = "Rent"
	 debt3 = "Autos"
	 debt4 = "Proposed PFSC Payment"
	 descArr = {income1Desc,income2Desc,debt1,debt2,debt3,debt4}
	//Fetching row count
	rowCount = getRowCount_PbDataWindow("w_cust","dw_budget")
	for (Iterator= 1; Iterator<=rowCount; Iterator++)
		%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
		//Click on delete option
		 clickButton_Delete()
		//Click on yes button in delete budget window
		 clickButton_InWindow("w_message","Yes")
	for (Iterator = 1; Iterator<= 6; Iterator++)
		%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
		itr = Iterator-1
		 clickButton_AddRow()
		if Iterator<=2 
			SetValueInPBDataWindow_DP("w_cust","dw_budget","#{Iterator}","budget_type","INCOME")
			SetValueInPBDataWindow_DP("w_cust","dw_budget","#{Iterator}","description",descArr[itr])
		else 
			SetValueInPBDataWindow_DP("w_cust","dw_budget","#{Iterator}","budget_type","DEBT")
			SetValueInPBDataWindow_DP("w_cust","dw_budget","#{Iterator}","description",descArr[itr])

//************************************************************************************************************************************
//@methodName: verificationOf_PrimaryEmployerWorkYears(WindowName,EmployerType,EmployerWorkYears,ID)
//@Author Thirumal Reddy
//@Date 29 Sep 2018
//@Description This is to enter the data in the Employer work years field, verify && update the entered value to Automation DB
//Ex:  verificationOf_PrimaryEmployerWorkYears("F2","PrimaryEmployer","2",ID)
//************************************************************************************************************************************
verificationOf_PrimaryEmployerWorkYears(String WindowName,String EmployerType,String EmployerWorkYears,String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Checking the employer type && fetching the row number
	String actualEmployerWorkYears
	String RowNumber = getRowNumber_BasedOn_EmployerType_EmploymentWindow(EmployerType)
	//Entering Employer Work Years
	 enter_EmployerWorkYears(WindowName,EmployerType,EmployerWorkYears)
	 sendKeys("<TAB>")
	//Fetching actual employer Work Years displayed
	actualEmployerWorkYears =  get_EmployerWorkYears(WindowName,EmployerType)
	//Validating actual employer Work Years with the expected employer Work Years
	 validateDataAndReport(actualEmployerWorkYears,EmployerWorkYears,"Validation of primary employer Work Years field")
	//Writing employer Work Years to the Automation DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", RowNumber, "work_yrs"," branchplusqa.bp_directloan_primaryemployer","primaryemployerworkyrs",ID)
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed verificationOf_PrimaryEmployerWorkYears","Failed", "" ,"")

//*****************************************************************************************
//@methodName : validationOf_MonthlySalary_BasedOnPayType(WindowName,Employer,ID)
//@Author     : Thirumal Reddy
//@Date       : 28 Sep 2018 (Modified)
//@Description: This is to validate monthly salary based on paytype in F2 && F7 window
//Ex: validationOf_MonthlySalary_BasedOnPayType("F2","PrimaryEmployer",784)
//***************************************************************************************** 
validationOf_MonthlySalary_BasedOnPayType(String WindowName,String Employer,String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Placing all the pay types to an array
	List<String> PayTypeDropDownValue
	//genarating random salary
	Real actSalary, expSalary
	Integer Iterator, iexpSalary
	String payType, sal, salary, actualSalary
	
	PayTypeDropDownValue = {"Month","Week","Year","Biweekly"}
	//genarating random salary amount
	sal=Generate_RandomNumber_UserDefind("9","8")
	salary=sal.Substring(1,6)+"."+sal.Substring(7,8)
	//Entering the salary
	enter_EmployeeSalary(WindowName,Employer,salary)
	//Iterating by reading the pay type values from array
	for (Integer Iterator =1; Iterator <= PayTypeDropDownValue.Count(); Iterator++)
		//Selecting value in pay source drop down randomly && updating the selected value to Automation DB
		 selectingPaySource_DropDown_RandomValue(WindowName,Employer,ID)
		//Tab out
		 sendKeys("<TAB>")
		//Selecting value in pay day drop down randomly && updating the selected value to Automation DB
		 selectingPayDay_DropDown_RandomValue(WindowName,Employer,ID)
		//Selecting value in paytype drop down based on the iteration value
		 selectingPayType_DropDown(WindowName,Employer,PayTypeDropDownValue[Iterator])
		//Getting the selected value from pay type drop down
		payType = get_SelectedPayType(WindowName,Employer)
		//Tab out
		 sendKeys("<TAB>")
		//Getting the Actual net employee salary displayed
		actualSalary = get_EmployeeActualSalary(WindowName,Employer)
		//calculating && verifying the salry displayed based on pay type
		 verifyingSalary_BasedOnPayType(payType,salary,actualSalary)
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed validationOf_MonthlySalary_BasedOnPayType","Failed", "" ,"")

//********************************************************************************************************************************
//@methodName : selectingPaySource_DropDown_RandomValue(window,EmployerType,ID)
//@Author     : Thirumal Reddy
//@Date       : 28 Sep 2018 (Modified)
//@Description: This is to select the value in pay source drop down in F2 && F7 window randomly && updating to Automation DB
//Ex: selectingPaySource_DropDown_RandomValue("F2","PrimaryEmployer",ID)
//********************************************************************************************************************************
selectingPaySource_DropDown_RandomValue(String window,String EmployerType,String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//checking the employer type
	String RowNumber
	AppObject tblWindowName =  BranchPlus.CustomerF2Window.dw_emplmt
	if window == "F7" 
		AppObject tblWindowName =  BranchPlus.CreditDecision.tbldwStep
		//Checking the employer type && fetching the row number
		RowNumber = getRowNumber_BasedOn_EmployerType_EmploymentWindow(EmployerType)
		//Selecting value in pay source drop down randomly && updating the selected value to Automation DB in Primary employer section
		 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","employment_paysource","branchplusqa.bp_employment",ID,"primaryemp_paysource",tblWindowName,RowNumber,"salary_source")
	else if window == "F2" 
		//Checking the employer type && fetching the row number
		RowNumber = getRowNumber_BasedOn_EmployerType_EmploymentWindow(EmployerType)
		//Selecting value in pay source drop down randomly && updating the selected value to Automation DB in Primary employer section
		 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","employment_paysource","branchplusqa.bp_employment",ID,"primaryemp_paysource",tblWindowName,RowNumber,"salary_source")
	else 
		 writeReportLog("Window specified is not avaliable","Failed",FailComments,"Y")
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed selectingPaySource_DropDown_RandomValue","Failed", "" ,"")

//*****************************************************************************************
//@methodName : selectingPayDay_DropDown_RandomValue(window,Employer,ID)
//@Author     : Thirumal Reddy
//@Date       : 28 Sep 2018 (Modified)
//@Description: This is to select the value in pay day drop down in F2 && F7 window randomly && updating to Automation DB
//Ex: selectingPayDay_DropDown_RandomValue("F2","PrimaryEmployer",ID)
//*****************************************************************************************
selectingPayDay_DropDown_RandomValue(String window,String EmployerType,String ID)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblWindowName =  BranchPlus.CreditDecision.tbldwStep
	AppObject tblWindowName1 =  BranchPlus.CustomerF2Window.dw_emplmt
	String RowNumber
	if window == "F7" 
		//Checking the employer type && fetching the row number
		RowNumber = getRowNumber_BasedOn_EmployerType_EmploymentWindow(EmployerType)
		//Selecting value in pay source drop down randomly && updating the selected value to Automation DB in Primary employer section
		 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","employment_payday","branchplusqa.bp_employment",ID,"primaryemp_payday",tblWindowName,RowNumber,"payday")
	else if window == "F2" 
		//Checking the employer type && fetching the row number
		RowNumber = getRowNumber_BasedOn_EmployerType_EmploymentWindow(EmployerType)
		//Selecting value in pay source drop down randomly && updating the selected value to Automation DB in Primary employer section
		 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","employment_payday","branchplusqa.bp_employment",ID,"primaryemp_payday",tblWindowName,RowNumber,"payday")
	else 
		 writeReportLog("Window specified is not avaliable","Failed",FailComments,"Y")
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed selectingPayDay_DropDown_RandomValue","Failed", "" ,"")
	

//********************************************************************************************************
//@methodName: MLAVerification_Credit_DecisionWindow_RefinanceCurrentCustomer(ApplicantType)
//@Author Ranjitha
//@Date 12 June 2018
//@Modified by Thirumal Reddy
//@MOdified Date 1st OCT 2019
//@Description This is will verify the mla staus in Credit Decision window for primary && coapplicant
//Ex:  MLAVerification_Credit_DecisionWindow_RefinanceCurrentCustomer(ApplicantType)
//********************************************************************************************************
MLAVerification_Credit_DecisionWindow_RefinanceCurrentCustomer(String ApplicantType)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	AppObject tblPBDataWindow = BranchPlus.CreditDecision.dw_coapp
	AppObject tblPBDataWindow1 = BranchPlus.CreditDecision.tbldwStep
	Boolean mlaVerificationWindow = false
	//Checking whether Coaaplicant window exist && applicant type is Primary applicant
	Sleep(3)
	if ApplicantType == "CoApplicant" 
		//Clicking on verify MLA status button for Co applicant
		BranchPlus.btn_VerifyMLAStatus_CreditDecision_Win10.Click()
	//Checking whether Primaryaplicant window exist && applicant type is Coapplicant
	else if ApplicantType == "PrimaryApplicant" 
		//Clicking on verify MLA status button for Primary Applicant
		BranchPlus.btn_VerifyMLAStatus_CreditDecision_Win10.SetFocus()
		//BranchPlus.InsightObject("btn_VerifyMLAStatus_CreditDecision").Click()
		//BranchPlus.InsightObject("btn_VerifyMLAStatus_CreditDecision").Click()
		//PbWindow("ResaleOfRepo_Header_Signature").InsightObject("btn_VerifyMLAStatus").Click()
		BranchPlus.btn_VerifyMLAStatus_CreditDecision_Win10.Click()
	else 
		 writeReportLog("Applicant Type is not present in the window","Failed",FailComments,"Y")
	Sleep(2)
	mlaVerificationWindow = BranchPlus.CreditDecision.verifyMLAPopUp.GetReport.WaitWhileExists (40)
	//Verifying whether MLA verification Window is displayed
	String MlaCoveredstatus
	if mlaVerificationWindow 
		//Click on //GetReport// button
		BranchPlus.CreditDecision.verifyMLAPopUp.GetReport.Click()
		Sleep (10)
		 //click on Close button
		BranchPlus.CreditDecision.verifyMLAPopUp.CreditReport.Close.Click()
		 Sleep (5)
		//Verify MLA Covered checkbox		
		MlaCoveredstatus = GetValue_PBDataWindow(tblPBDataWindow,"#1","mla_value")	
	//Verifying the MLA status is yes || no
		if MlaCoveredstatus == "No" 
			 writeReportLog("MLA Covered autopopulated to //No//","Passed",FailComments,"YES")				
		else
			 writeReportLog("MLA Covered autopopulated to //Yes//","Failed",FailComments,"")				
	else
		 writeReportLog("MLA Lending Verification window not displayed","Failed",FailComments,"")			
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in MLAVerification_Credit_DecisionWindow_RefinanceCurrentCustomer","Failed", "" ,"")

//********************************************************************************************************
//@methodName: enter_Primary_Employer_Details_CreditDecisionWindow_RefinanceCurrentCustomer(emplrName,position,dept,shift,supervisor,workyrs,workmos,salSource,payday,salPeriodType,grossSal)
//@Author Thirumal Reddy
//@Date 12 Oct 2018
//@Description This is will enter the Primary Employer details in Credit Decision window
//Ex:  enter_Primary_Employer_Details_CreditDecisionWindow_RefinanceCurrentCustomer("Security Finance","Tester","Testing","Day","John Edwards","2","5","Full-time Job","Every Other Monday","Biweekly","3000")
//********************************************************************************************************
enter_Primary_Employer_Details_CreditDecisionWindow_RefinanceCurrentCustomer(String emplrName,String position,String dept,String shift,String supervisor,String workyrs,String workmos,String salSource,String payday,String salPeriodType,String grossSal)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Sleep(3)
	if BranchPlus.CreditDecision.tbldwStep.WaitWhileExists(5) 
		AppObject crdtDecisionwindow = BranchPlus.CreditDecision.tbldwStep
		Sleep(3)
		//Enter Employer Details
		 TypeText_PBDataWindow(crdtDecisionwindow,"#1","emplr_name",emplrName)
		 TypeText_PBDataWindow(crdtDecisionwindow,"#1","position",position)
		 TypeText_PBDataWindow(crdtDecisionwindow,"#1","dept",dept)
		 TypeText_PBDataWindow(crdtDecisionwindow,"#1","shift",shift)
		 TypeText_PBDataWindow(crdtDecisionwindow,"#1","sup",supervisor)
		SetValue_PBDataWindow(crdtDecisionwindow,"#1","work_yrs",workyrs)
		SetValue_PBDataWindow(crdtDecisionwindow,"#1","work_mos",workmos)
		SetValue_PBDataWindow(crdtDecisionwindow,"#1","salary_source",salSource)
		SetValue_PBDataWindow(crdtDecisionwindow,"#1","payday",payday)
		SetValue_PBDataWindow(crdtDecisionwindow,"#1","salary_period_type",salPeriodType)
		SetValue_PBDataWindow(crdtDecisionwindow,"#1","gross_salary",grossSal)
		Sleep(3)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in enter_Primary_Employer_Details_CreditDecisionWindow_RefinanceCurrentCustomer","Failed", "" ,"")

//********************************************************************************************************
//@methodName: enter_DirectLoan_FinanceDetails_CreditDecisionWindow_RefinanceCurrentCustomer(purchaseAmt,terms,intRate)
//@Author Thirumal Reddy
//@Date 12 Oct 2018
//@Description This is will enter the Direct loan finance details in credit decision window
//Ex:  enter_DirectLoan_FinanceDetails_CreditDecisionWindow_RefinanceCurrentCustomer("3000","60","0.16")
//*************************************************************************************************************
enter_DirectLoan_FinanceDetails_CreditDecisionWindow_RefinanceCurrentCustomer(String purchaseAmt,String terms,String intRate)
	%FuncInfo[Desc="This function is to generate the name || text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if BranchPlus.CreditDecision.tbldwStep.WaitWhileExists(5) 
		AppObject tblPBWindow = BranchPlus.CreditDecision.tbldwStep
		//Enter Finance Details
		SetValue_PBDataWindow(tblPBWindow,"#1","purch_amt",purchaseAmt)
		SetValue_PBDataWindow(tblPBWindow,"#1","nbr_of_months",terms)
		SetValue_PBDataWindow(tblPBWindow,"#1","cust_rate",intRate)		
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/enter_DirectLoan_FinanceDetails_CreditDecisionWindow_RefinanceCurrentCustomer","Failed", "" ,"")

//***************************************************************************************************************************
//******************************************************************************************************************
//EX:  Get_Data_DB("Select * from CUSTOMER_TBL where SSN=253981024", "LAST_NAME")
//******************************************************************************************************************
String runSQLQuery(String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Variable declaration
	String conn, rs
	Print ("Query",query)
	Database db
	 LogSuccessMessage("Test Data Get Query",query)
	//Object declaration
	// AppObject conn= createobject("adodb.connection")
	// AppObject rs = createobject("adodb.recordAppObject")
	//Connection string
	conn =  "Dsn=branch;Uid=support;Pwd=sql;"
	db.Connect(conn)
	 //Running the SQL Query
	// rs.open query, conn
	// runSQLQuery = rs.Fields(requiredFieldName)
	db.Execute(query)
	db.Fetch (requiredFieldName) // need to understand
	db.Disconnect()
	if GetErrorCount()>0  			
		 writeReportLog("Failed to runSQLQuery","Failed", "" ,"")
	return requiredFieldName

String getApplicationNameFromDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGetApplicationNameFromDB, branchType, applicationName
	branchType = runSQLQuery("select branch_type from BRANCH_AppObjectUP_TBL;","branch_type")
	if branchType == "BRANCH" 
		applicationName = "Branch"
	else if branchType == "PFS" 
		applicationName = "BranchPlus"
	sGetApplicationNameFromDB = applicationName
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getApplicationNameFromDB","Failed", "" ,"")
	return sGetApplicationNameFromDB

String getCurrentStateName_From_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGetCurrentStateName_From_DB = runSQLQuery("select BRANCH_AppObjectUP_STATE from BRANCH_AppObjectUP_TBL;","BRANCH_AppObjectUP_STATE")
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getCurrentStateName_From_DB","Failed", "" ,"")
	return sGetCurrentStateName_From_DB
//**********************************************************************************************************************************************************
//@methodName: getAppVersionNumber_From_DB()
//@Description: This will get the Application Version from the DB
//@Author: Hemanth
//Ex:  getAppVersionNumber_From_DB()
//*******************************************************************************************************************************************************
String getAppVersionNumber_From_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGetAppVersionNumber_From_DB = runSQLQuery("select VERSION from bp_branch_AppObjectup_tbl;","VERSION")
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getAppVersionNumber_From_DB","Failed", "" ,"")
	return sGetAppVersionNumber_From_DB
//**********************************************************************************************************************************************************
//@methodName: getBuildNumber_From_DB()
//@Description: This will fetch the Build Number from the DB which is used for Reporting
//@Author: Hemanth
//Ex:  getBuildNumber_From_DB()
//*******************************************************************************************************************************************************
String getBuildNumber_From_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGetBuildNumber_From_DB = runSQLQuery("select build_nbr from bp_branch_AppObjectup_tbl;","build_nbr")
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getBuildNumber_From_DB","Failed", "" ,"")
	return sGetBuildNumber_From_DB
//**********************************************************************************************************************************************************
//@methodName: getBranchID_From_DB()
//@Description: This will fetch the Branch ID from the DB which is used for Reporting
//@Author: Karthik
//Ex:  getBranchID_From_DB()
//*******************************************************************************************************************************************************
String getBranchID_From_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGetBranchID_From_DB = runSQLQuery("select * from bp_branch_AppObjectup_tbl;","branch_id")
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getBuildNumber_From_DB","Failed", "" ,"")
	return sGetBranchID_From_DB
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															
String runUpdateSQLQuery(String query)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Variable declaration
	String conn, rs, requiredFieldName
	Print ("Query",query)
	Database db
	 LogSuccessMessage("Test Data Get Query",query)
	//Object declaration
	// AppObject conn= createobject("adodb.connection")
	// AppObject rs = createobject("adodb.recordAppObject")
	//Connection string
	conn =  "Dsn=branch;Uid=support;Pwd=sql;"
	db.Connect(conn)
	 //Running the SQL Query
	// rs.open query, conn
	// runSQLQuery = rs.Fields(requiredFieldName)
	db.Execute(query)
	db.Fetch (requiredFieldName)
	db.Disconnect()
	if GetErrorCount()>0  			
		 writeReportLog("Failed to runSQLQuery","Failed", "" ,"")
	return requiredFieldName

//***************************************************************************************************************************
//@Method: get_LoanNumber_From_DB()
//@Author: Sumithra
//@Date 9th july 2018
//@Description: This function is to get loan number from DB
//Ex:  get_LoanNumber_From_DB("ACTIVE","55")
//***************************************************************************************************************************
String get_LoanNumber_From_DB(String AccountStatus,String AccountType_Code)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	String query = "Select * from support.bp_account_tbl where acct_status =//" + AccountStatus + "// && acct_type=//" + AccountType_Code + "// order by rand()"     
	 //String query = "Select * from support.bp_account_tbl where acct_status =//" + AccountStatus + "// && acct_type=//" + AccountType_Code + "// order by loan_nbr desc"     
	//run query to fetch loan number
	String  loanNumber = runSQLQuery_WithWarning_WithoutExit(query, "loan_nbr")
	 //if Loan are not available 
	if loanNumber == "0" 
		 writeReportLog("<b> <font color=//orange//> No Loans found for Account type: " + AccountType_Code + "</font> </b>" ,"Passed",FailComments,"")
	   if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_From_DB","Failed", "","")
	return loanNumber
//***************************************************************************************************************************
//@Method: UpdateComponentDescription_ComponentTab(refId)
//@Author: Sumithra
//@Date 4 july 2018
//@Description: This function is to update component description value
//Ex:  UpdateComponentDescription_ComponentTab(refId)
//***************************************************************************************************************************
UpdateComponentDescription_ComponentTab(String refId)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String Query1 = "Update bp_account_component_tbl AppObject descr=//PFS GAP// where descr=//Dealer GAP// && acct_id =" + refId 
	String Query2 = "Update bp_account_component_tbl AppObject opt=//GAP// where descr=//PFS GAP// && acct_id = " + refId
	runUpdateSQLQuery(Query1)
	runUpdateSQLQuery(Query2)
	if GetErrorCount()>0  			
		 writeReportLog("Failed to UpdateComponentDescription_ComponentTab","Failed", "" ,"")

//******************************************************************************************************************************************************
//@MethodName: get_LastChg_Date_CollateralTab_DB()
//@Author Chandra
//@Date 06 July 2018
//@Description This is get Last change Date,Time,UserID from DB in Collateral Tab
//Ex  get_LastChg_Date_CollateralTab_DB("last_chg_dt")
//******************************************************************************************************************************************************
String get_LastChg_Date_CollateralTab_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String VIN_Number, LastChange_Date_DB, GetDateTimeUserID, sGet_LastChg_Date_CollateralTab_DB
	if BranchPlus.CustomerF2Window.dw_list_reference.WaitWhileExists(10) 
		VIN_Number = BranchPlus.CustomerF2Window.dw_list_reference.ReferenceDetailsTB.Row[1].Vin.GetText()
		//Get && return Lastchange Date in Collateral Tab
		LastChange_Date_DB = runSQLQuery("SELECT vin,last_chg_dt FROM support.bp_account_collateral_tbl where vin=//"+ VIN_Number +"// ORDER BY last_chg_dt DESC","last_chg_dt")		
		sGet_LastChg_Date_CollateralTab_DB = LastChange_Date_DB
		GetDateTimeUserID = get_Add_Date_Time_UserID_DB(sGet_LastChg_Date_CollateralTab_DB)
		sGet_LastChg_Date_CollateralTab_DB = GetDateTimeUserID
	if GetErrorCount()>0  			
		 writeReportLog("Failed to get_LastChg_Date_CollateralTab_DB","Failed", "" ,"")
	return sGet_LastChg_Date_CollateralTab_DB
//******************************************************************************************************************************************************
//@MethodName: get_Repo_LastChg_Redeemed_Date_AccountTab_DB()
//@Author Chandra
//@Date 06 July 2018
//@Description This is get Repo, Last change && Redeemed Date,Time,UserID from DB in Account Tab
//Ex  get_Repo_LastChg_Redeemed_Date_AccountTab_DB("repo_dt","last_chg_dt","redeemed_dt")
//******************************************************************************************************************************************************
String get_Repo_LastChg_Redeemed_Date_AccountTab_DB(String RepoDate,String LastChangeDate,String RedeemedDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String Account_ID, Repo_Date_DB, LastChange_Date_DB, Redeemed_Date_DB, sGet_Repo_LastChg_Redeemed_Date_AccountTab_DB, GetDateTimeUserID
	if BranchPlus.CustomerF2Window.dw_acct.WaitWhileExists(10) 
		Account_ID = BranchPlus.CustomerF2Window.dw_acct.AccountStatusTB.Row[1].AccountID.GetText()
	//Get && return Repo, Lastchange, Redeemed Date in Account Tab
	if RepoDate == "repo_dt" 
		Repo_Date_DB = runSQLQuery("SELECT repo_dt FROM support.bp_account_tbl where acct_id=//"+ Account_ID +"// ORDER BY repo_dt DESC","repo_dt")
		sGet_Repo_LastChg_Redeemed_Date_AccountTab_DB = Repo_Date_DB
	else if LastChangeDate == "last_chg_dt" 
		LastChange_Date_DB = runSQLQuery("SELECT last_chg_dt FROM support.bp_account_tbl where acct_id=//"+ Account_ID +"// ORDER BY last_chg_dt DESC","last_chg_dt")		
		sGet_Repo_LastChg_Redeemed_Date_AccountTab_DB = LastChange_Date_DB
	else if RedeemedDate == "redeemed_dt" 
		Redeemed_Date_DB = runSQLQuery("SELECT redeemed_dt FROM support.bp_account_tbl where acct_id=//"+ Account_ID +"// ORDER BY redeemed_dt DESC","redeemed_dt")		
		sGet_Repo_LastChg_Redeemed_Date_AccountTab_DB = Redeemed_Date_DB
	GetDateTimeUserID = get_Add_Date_Time_UserID_DB(sGet_Repo_LastChg_Redeemed_Date_AccountTab_DB)
	sGet_Repo_LastChg_Redeemed_Date_AccountTab_DB = GetDateTimeUserID
	if GetErrorCount()>0  			
		 writeReportLog("Failed to get_Repo_LastChg_Redeemed_Date_AccountTab_DB","Failed", "" ,"")
	return sGet_Repo_LastChg_Redeemed_Date_AccountTab_DB
//******************************************************************************************************************************************************
//@MethodName: get_AcctNum_From_DB_To_Add_CPI()
//@Author Sumithra
//@Date 13 July 2018
//@Description This is to get account number from DB to add CPI
//Ex  get_AcctNum_From_DB_To_Add_CPI()
//******************************************************************************************************************************************************
String get_AcctNum_From_DB_To_Add_CPI()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query to run 
	String sGet_AcctNum_From_DB_To_Add_CPI
	String query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "CPI_SQLQuery.txt")
	//run query to fetch loan number
	 sGet_AcctNum_From_DB_To_Add_CPI = runSQLQuery(query, "loan_nbr")
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_AcctNum_From_DB_To_Add_CPI","Failed", "","")
	return sGet_AcctNum_From_DB_To_Add_CPI
//***************************************************************************************************************************
//@Method: get_Account_Id_From_DB(AccountStatus,AccountType_Code)
//@Author: Sumithra
//@Date 13th July 2018
//@Description: This function is to get account id from DB
//Ex:  get_Account_Id_From_DB(AccountStatus,AccountType_Code)
//***************************************************************************************************************************
String get_Account_Id_From_DB(String AccountStatus,String AccountType_Code)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	 String query = "Select * from support.bp_account_tbl where acct_status =" + "//" + AccountStatus + "//" + " && acct_type=" + AccountType_Code      
	//run query to fetch account id
	 //get_Account_Id_From_DB = runSQLQuery(query, "acct_id")
	 String sGet_Account_Id_From_DB = runSQLQuery_WithWarning_WithoutExit(query,"acct_id")
	 //Error Handling
	 if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_Account_Id_From_DB","Failed", "","")
	return sGet_Account_Id_From_DB
 //*************************************************************************************************************************************************
//@Method: get_LoanNumber_Payments_From_DB()
//@Author Chandra
//@Date 10th July 2018
//@Description This function is to get loan number from DB intrest amount is > 100 in Payments table
//@Return field value which is required
//Ex:  get_LoanNumber_Payments_From_DB("Active,"55","100")
//*************************************************************************************************************************************************
String get_LoanNumber_Payments_From_DB(String AccountStatus,String AccountTypeCode,String InterestAmount)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	 String query = "Select * from support.bp_account_tbl where acct_status =//" + AccountStatus + "//" + " && acct_type=//" + AccountTypeCode + "// && int_amt>//" + InterestAmount + "// Order By RAND()"       
	//run query to fetch loan number
	String  sGet_LoanNumber_Payments_From_DB = runSQLQuery(query,"loan_nbr")
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_Payments_From_DB","Failed", "","")
	return sGet_LoanNumber_Payments_From_DB
//*****************************************************************************************************************
//@methodName: Read_Individual_Column_Data(Sql,ColumnName)
//@Author Jeevan
//@Date 08 Aug 2018
//@Description This is to read individual column data from the DB Table
//Ex: Result = Read_Individual_Column_Data("bp_loantype_dealer_primaryapplicant,"LastName","SC")
//*****************************************************************************************************************
String Read_Individual_Column_Data(String TableName,String ColumnName,String StateID)
	String Connection, Sql
	String ConnectionString
	String SQLDriverName = "MySQL ODBC 8.0 ANSI Driver"
	Database db
	Sql = "Select * from "+TableName+" where UsedData != //Y// && StateID =//"+StateID+"//"
	//define the connection string, specify database driver
	ConnectionString = "DRIVER={SQLDriverName}; SERVER=s1-alm-1; DATABASE=branchplusqa;UID=admin;PASSWORD=admin; OPTION=3"
	//create an instance of the ADO connection && recordAppObject objects
	// AppObject Connection = CreateObject("ADODB.Connection")
	// AppObject RecordAppObject = CreateObject("ADODB.RecordAppObject")
	db.Connect(ConnectionString)
	//Open the connection to the database
	// Connection.Open ConnString
	//Open the recordAppObject object executing the SQL statement && update records 
	db.Execute(Sql)
	db.Fetch (ColumnName)
	// RecordAppObject.Open SQL,Connection
	// Read_Individual_Column_Data = RecordAppObject(ColumnName)
	//RecordAppObject.Close
	db.Disconnect()
	return ColumnName
//*****************************************************************************************************************
//@methodName: Update_Individual_Column_Data(TableName,ColumnName,Value,ID)
//@Author Jeevan
//@Date 08 Aug 2018
//@Description This is to Update individual column data to the DB Table
//Ex:  Update_Individual_Column_Data("createautomobileloan_individual","LastName","Jennie")
//*****************************************************************************************************************
Update_Individual_Column_Data(String TableName,String ColumnName,String Value,String ID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String Connection, SQL
	String ConnectionString
	String SQLDriverName = "MySQL ODBC 8.0 ANSI Driver"
	Database db
	SQL ="UPDATE "+TableName+" AppObject "+ColumnName+" = //"+Value+"// Where ID="+ID
	//define the connection string, specify database driver
	ConnectionString = "DRIVER={SQLDriverName}; SERVER=s1-alm-1; DATABASE=branchplusqa;UID=admin;PASSWORD=admin; OPTION=3"
	//create an instance of the ADO connection && recordAppObject objects
	db.Connect(ConnectionString)
	
	// AppObject Connection = CreateObject("ADODB.Connection")
	// AppObject RecordAppObject = CreateObject("ADODB.RecordAppObject")
	db.Execute(SQL)
	//Open the recordAppObject object executing the SQL statement && update records 
	// RecordAppObject.Open SQL,Connection
	//RecordAppObject.Close
	db.Disconnect()
//***********************************************GENERIC Function************************************************************************
//@methodName: getvalue_From_AppDB()
//@Author: Karthik
//@Date 27 Nov 2018
//@Description This will get teh Column Value for the Specified Column Name from Table Name Specified
//Ex:  getvalue_From_AppDB("bp_Branch_AppObjectUP_TBL","last_daily_closing")
//***********************************************************************************************************************
String getvalue_From_AppDB(String tableName,String columnName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Query to fetch the Bank Id based on Employee ID
	String query = "Select * from " + tableName
	String sGetvalue_From_AppDB = runSQLQuery(query, columnName)
	//Error handing
	 if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/getvalue_From_DBTable","Failed", "" ,"")
	return sGetvalue_From_AppDB

String runSQLQuery_WithWarning(String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Variable declaration
	String conn, rs, sValue, sRunSQLQuery_WithWarning = ""
	Database db
	 LogSuccessMessage("Test Data Get Query",query)
	//Object declaration
	// AppObject conn= createobject("adodb.connection")
	// AppObject rs = createobject("adodb.recordAppObject")
	//Connection string
	conn =  "Dsn=branch;Uid=support;Pwd=sql;"
	db.Connect(conn)
	
	//Executing the Query
	// rs.open query, conn    
	db.Execute (query)
	db.Fetch( sValue)
	//Validating for Query No Results
	if sValue == ""
		 writeReportLog("Looks Like Query >> " + query +  " did not found any record","Warning", "","")		 
		// //Exit Test && Update Summary Report
		//  exitTestAndUpdateSummaryReport()
	else
		//Fetching the required Field Value
		db.Fetch(requiredFieldName)
		sRunSQLQuery_WithWarning = requiredFieldName
	db.Disconnect() 
	//if Query Does not Return Any Result
	if GetErrorCount()>0 
		 writeReportLog("DB column Name " + requiredFieldName + " which you are looking is not available in the query Result; Query : " + query ,"Warning", "","")		
	return requiredFieldName
//**********************************************************************************************
//@methodName: get_LoanNumber_FromAppDB(AccountStatus, AccountTypeCode, UI_Del_Status)
//@Description: This is to get the Loan Number from App DB based on Account status, Account Type Code && Delinquency Status.
//@Author: Chandra
//@Date 26 Feb 2019
//@Returning the Loan Number
//Ex:  get_LoanNumber_FromAppDB("ACTIVE", "55", "Current")
//*********************************************************************************************** 
String get_LoanNumber_FromAppDB(String AccountStatus,String AccountTypeCode,String UI_Del_Status)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGet_LoanNumber_FromAppDB, query, loanNumber
	//Get ID Based on Delinquency Status && Contractual status
	 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	//query to run
	if UI_Del_Status == ">90" 
		//		String query = "Select * from support.bp_account_tbl where acct_status = //" + AccountStatus + "//" + " && acct_type= //" + AccountTypeCode + "// && del_status = //"+ delinqStatus  +"// && contractual_status > //"+ contractual_status  +"// order by rand()"
		query = "Select * from support.bp_account_tbl where acct_id Not in (select acct_id from bp_account_collateral_tbl where repo_assigned_yn = //N//) && acct_status = //" + AccountStatus + "//" + " && acct_type= //" + AccountTypeCode + "// && del_status = //"+ delinqStatus  +"// && contractual_status > //"+ contractual_status  +"// order by rand()"
	else
		//		String query = "Select * from support.bp_account_tbl where acct_status = //" + AccountStatus + "//" + " && acct_type= //" + AccountTypeCode + "// && del_status = //"+ delinqStatus  +"// && contractual_status = //"+ contractual_status  +"// order by rand()"
		query = "Select * from support.bp_account_tbl where acct_id Not in (select acct_id from bp_account_collateral_tbl where repo_assigned_yn = //N//) && acct_status = //" + AccountStatus + "//" + " && acct_type= //" + AccountTypeCode + "// && del_status = //"+ delinqStatus  +"// && contractual_status = //"+ contractual_status  +"// order by rand()"
	//Fetching the loan number from DB
	loanNumber = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	//if Loan are not available 
	if loanNumber == "0" 
		 writeReportLog("<b> <font color=//orange//> No Loans found for Account Type Code: " + AccountTypeCode + " && Delinquency Status: " + UI_Del_Status + "</font> </b>" ,"Passed",FailComments,"")
	sGet_LoanNumber_FromAppDB = loanNumber
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_FromAppDB","Failed", "","")
	return sGet_LoanNumber_FromAppDB
//**********************************************************************************************
//@methodName: get_ID_BasedOn_DelinqStatus_And_ContractualStatus(ByVal UI_Del_Status, ByRef delinquencyStatus, ByRef contractual_status)
//@Description: This is to get the ID based on Delinquency Status (Current, Potential, 30,60,90,>90).
//@Author: Chandra
//@Date 26 Feb 2019
//@Returning the delinquencyStatus && contractual_status
//Ex:  get_ID_BasedOn_DelinqStatus_And_ContractualStatus("Current", "", "0")
//*********************************************************************************************** 
get_ID_BasedOn_DelinqStatus_And_ContractualStatus(String UI_Del_Status,out String ByRef_delinquencyStatus,out String ByRef_contractual_status)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	// Variables
	String delinquencyStatus, contractual_status
	if UI_Del_Status.ToUpper() == "CURRENT"
		delinquencyStatus = "" 
		contractual_status =  "0"
	else if UI_Del_Status.ToUpper() == "POTENTIAL"
		delinquencyStatus = "P" 
		contractual_status =  "0"
	else if UI_Del_Status == "30" 
		delinquencyStatus = "" 
		contractual_status =  "1"
	else if UI_Del_Status == "60" 
		delinquencyStatus = "" 
		contractual_status =  "2"
	else if UI_Del_Status == "90" 
		delinquencyStatus = "" 
		contractual_status =  "3"
	else if UI_Del_Status == ">90" 
		delinquencyStatus = "" 
		contractual_status =  "4"
	else
		 writeReportLog("Wrong arrguments passed: "+ UI_Del_Status +" in get_ID_BasedOn_DelinqStatus_And_ContractualStatus","Failed", "","")
	ByRef_delinquencyStatus = delinquencyStatus
	ByRef_contractual_status = contractual_status
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_ID_BasedOn_DelinqStatus_And_ContractualStatus","Failed", "","")

//*********************************************************************************************
//@methodName: get_BranchPlus_CityName_FromDB()
//@Author Chandra
//@Date 25 Feb 2019
//@Description This is get the Branch Plus City Name from App DB (bp_location_tbl)
//@Returing the Branch Plus City Name
//Ex  get_BranchPlus_CityName_FromDB()
//*********************************************************************************************
String get_BranchPlus_CityName_FromDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Get value from DB Query
	String branchCityName = getvalue_From_AppDB("bp_location_tbl where loc_type = //BRANCH// && loc_class=//MAILING//", "city").ToUpper()
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_BranchPlus_CityName_FromDB","Failed", "","")
	return branchCityName

//*********************************************************************************************
//@methodName: get_Null_Columns_In_ReceiptNotificationTbl_FromDB(columName,requiredFiledName)
//@Author Chandra
//@Date 25 Feb 2019
//@Description This is get the Field Values where Column value is //NULL// based on File name(file_path, file_name) in Receipt_notification_tbl from DB
//@Returing the cell value of specified column
//Ex  get_Null_Columns_In_ReceiptNotificationTbl_FromDB("file_path","file_path")
//*********************************************************************************************
String get_Null_Columns_In_ReceiptNotificationTbl_FromDB(String columName,String requiredFiledName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String requiredValue = ""
	//Get Null value from receipt notification table from DB 
	requiredValue = runSQLQuery_WithWarning_WithoutExit("select * from receipt_notification_tbl where "+ columName +" IS NULL order by entry_dt desc",requiredFiledName)
	if requiredValue == "0" 
		 writeReportLog("//"+ requiredFiledName +"// value is not availble in //receipt_notification_tbl// DB, Please Run Nightly Job","Failed", "","")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_Null_Columns_In_ReceiptNotificationTbl_FromDB","Failed", "","")
	return requiredValue

//*********************************************************************************************
//@methodName: get_Data_In_ReceiptNotificationTbl_FromDB(accountID,requiredFiledName)
//@Author Chandra
//@Date 25 Feb 2019
//@Description This will get the for the specified reportID from Receipt_notification_tbl
//@returns retuns the cell value based for the field name specified
//Ex  get_Data_In_ReceiptNotificationTbl_FromDB("76578746710","file_path")
//*********************************************************************************************
String get_Data_In_ReceiptNotificationTbl_FromDB(String reportID,String requiredFiledName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String required_Value = ""
	//Get Null value from receipt notification table from DB 
	required_Value = runSQLQuery_WithWarning_WithoutExit("select * from receipt_notification_tbl where rpt_id = //"+ reportID +"// order by entry_dt desc",requiredFiledName)
	if required_Value == "0" 
		 writeReportLog("//"+ requiredFiledName +"// value is not availble in //receipt_notification_tbl// DB, Please Run Nightly Job","Failed", "","")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_Data_In_ReceiptNotificationTbl_FromDB","Failed", "","")
	return required_Value

//****************************** GENERIC FUNCTION ***********************************************
//@methodName: runSQLQuery_WithWarning_WithoutExit(query, requiredFieldName)
//@Author Chandra
//@Date 03 Jan 2018
//@Description This is to run sql query && get value with warning status, where values are not available with exit the test
//Ex:// runSQLQuery_WithWarning_WithoutExit(query, requiredFieldName)
//*********************************************************************************************
String runSQLQuery_WithWarning_WithoutExit(String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Variable declaration
	String conn, sValue, sRunSQLQuery_WithWarning_WithoutExit
	Database db
	 LogSuccessMessage("Test Data Get Query",query)
	//Object declaration
	// AppObject conn= createobject("adodb.connection")
	// AppObject rs = createobject("adodb.recordAppObject")
	//Connection string
	// conn.Open =  "Dsn=branch;Uid=support;Pwd=sql;"
	db.Connect(conn)
	//Executing the Query
	db.Execute (query)
	db.Fetch (sValue)
	// rs.open query, conn     
	//Validating for Query No Results
	if sValue == "" 
		sRunSQLQuery_WithWarning_WithoutExit = "0"
	else
		//Fetching the required Field Value
		db.Fetch (requiredFieldName) // need to verify at all places lokesh
		sRunSQLQuery_WithWarning_WithoutExit = requiredFieldName
	db.Disconnect()
	//if Query Does not Return Any Result
	if GetErrorCount()>0 
		 writeReportLog("DB column Name " + requiredFieldName + " which you are looking is not available in the query Result; Query : " + query ,"Warning", "","")		
	return sRunSQLQuery_WithWarning_WithoutExit
//**********************************************************************************************
//@methodName: get_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB(query_Path, AccountStatus, AccountTypeCode, DelinquencyStatus)
//@Description: This is to get the Loan Number from App DB based on Account status, Account Type Code && Delinquency Status.
//@Author: Chandra
//@Date 21 Mar 2019
//@Returning the Loan Number
//Ex:  get_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB(query_Path,"ACTIVE", "55", "Current")
//***********************************************************************************************
String get_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB(String query_Path,String AccountStatus,String AccountTypeCode,String DelinquencyStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGet_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB, DueTodayAmt, loanNumber,query
	//Get Last Year Date from Current system Date
	Date dtCurrentDate = Date.Parse("MM/dd/yyyy", date)
	Date dtLastYearDate = dtCurrentDate.Add (-365)  //dateadd ("yyyy","1",Entry_Date_DB_Yr)
	
	String ContractFromDate = dtLastYearDate.Format("MM/dd/yyyy")
	Boolean found = false
	for (Integer itr =1; itr <= 100; itr++)
		//get the Loan Number from DB
		loanNumber = get_LoanNumber_FromAppDB(AccountStatus, AccountTypeCode, DelinquencyStatus)
		//get the Loan Number from DB
		//loanNumber = get_LoanNumber_FromDB_BasedOn_ContractDate(AccountStatus,AccountTypeCode,DelinquencyStatus,ContractFromDate,Date)
		//Get Entire File Content from text file
		query = get_Entire_File_Content(query_Path)
		//Replaceing the LoanNumber
		query = query.Replace("@LoanNumber",loanNumber)
		//Get the Due To Day Amount from DB
		DueTodayAmt = runSQLQuery(query, "Amount Due Today")
		//Comparing the Due Today Amount is 
		if Math.Round(Real.Parse(DueTodayAmt), 4) <= Math.Round(0 , 4)
			found = true
			sGet_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB = loanNumber
			break
	if found == false 
		 writeReportLog("Current Accounts which you are looking is not available in the DB && for Account Type: "+AccountTypeCode+" && Delinquency Status: "+DelinquencyStatus+"","Failed", "","")		
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB","Failed", "" ,"")
	return sGet_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB
//*********************************************************************************************
//@methodName: get_BranchMailingAddress_FromDB()
//@Author Chandra
//@Date 25 Feb 2019
//@Description This is get the Branch Address Name from App DB
//@Returing the Branch Address
//Ex  get_BranchMailingAddress_FromDB()
//*********************************************************************************************
String get_BranchMailingAddress_FromDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Get Branch Name form DB 
	String sGet_BranchMailingAddress_FromDB = getvalue_From_AppDB("bp_location_tbl where loc_type = //BRANCH// && loc_class=//MAILING//","addr1")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_BranchMailingAddress_FromDB","Failed", "","")
	return sGet_BranchMailingAddress_FromDB
//*********************************************************************************************
//@methodName: get_BranchName_FromDB()()
//@Author Chandra
//@Date 25 Feb 2019
//@Description This is get the Branch Name from App DB
//@Returing the Branch Name
//Ex  get_BranchName_FromDB()()
//*********************************************************************************************
String get_BranchName_FromDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Get Branch Name form DB 
	 String sGget_BranchName_FromDB = getvalue_From_AppDB("bp_branch_AppObjectup_tbl","branch_name")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_BranchName_FromDB","Failed", "","")
	return sGget_BranchName_FromDB
	

//*********************************************************************************************
//@methodName: verify_ReportDocumentTbl_FromDB_AfterRunNightlyJob(reportID,requiredFiledName)
//@Author Chandra
//@Date 07 Mar 2019
//@Description This is get the Field Values based on reportID, filepath is Not NULL && Document is NULLin bp_report_document_tbl from DB
//@Returing the return the cell value of fieldName specified
//Ex  verify_ReportDocumentTbl_FromDB_AfterRunNightlyJob("159000023584"","filepath")
//*********************************************************************************************
String verify_ReportDocumentTbl_FromDB_AfterRunNightlyJob(String reportID,String requiredFiledName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String requiredFieldValue
	//Get Null value from receipt notification table from DB 
	//requiredFieldValue = runSQLQuery_WithWarning_WithoutExit("select * from bp_document_tbl where document_id = (select document_id from bp_document_record_affil_tbl where record_id = //"+ reportID + "//) && filepath is not NULL && Document is NULL",requiredFiledName)
	requiredFieldValue == runSQLQuery_WithWarning_WithoutExit("select * from bp_document_tbl where document_id = (select document_id from bp_document_record_affil_tbl where record_id = //"+ reportID + "//) && filepath is not NULL",requiredFiledName)
	if requiredFieldValue == "0" 
		 writeReportLog("//"+ requiredFiledName +"// value is not availble in //bp_document_tbl// DB, Please Run Nightly Job","Failed", "","")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in verify_ReportDocumentTbl_FromDB_AfterRunNightlyJob","Failed", "","")
	return requiredFieldValue

//*********************************************************************************************
//@methodName: get_BranchID_FromDB()
//@Author Chandra
//@Date 25 Feb 2019
//@Description This is get the Branch ID from App DB
//@Returing the Branch ID
//Ex  get_BranchID_FromDB()
//*********************************************************************************************
String get_BranchID_FromDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Get value from DB Query
	String sGet_BranchID_FromDB = getvalue_From_AppDB("bp_branch_AppObjectup_tbl", "branch_id")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_BranchID_FromDB","Failed", "","")
	return sGet_BranchID_FromDB

//*********************************************************************************************
//@methodName: verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob(reportID,requiredFiledName)
//@Author Chandra
//@Date 07 Mar 2019
//@Description This is get the Field Values based on reportID, filepath is NULL && Document is Not NULLin bp_report_document_tbl from DB
//@Returing the return the cell value of fieldName specified
//Ex  verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob("159000023584"","filepath")
//*********************************************************************************************
String verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob(String reportID,String requiredFiledName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	Integer appVersionWithoutDot
	String requiredValue, sVerify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob
	//Fetching App Version
	appVersionWithoutDot = Integer.Parse( System.GetEnvVar("appVersion").Replace(".","").Trim())
	//########
	//Release Specified Handling - Handled for the Changes Made in 9.6 Release
	//########
	if appVersionWithoutDot >= 960 
		//Get Null value from receipt notification table from DB 
		//requiredValue = runSQLQuery("select * from bp_document_tbl where document_id = (select document_id from bp_document_record_affil_tbl where record_id = //"+ reportID + "//) && filepath is NULL && Document is Not NULL",requiredFiledName)
		   // requiredValue = runSQLQuery("select * from bp_document_tbl where document_id = (select document_id from bp_document_record_affil_tbl where document_id = //"+ reportID + "//) && filepath is NULL",requiredFiledName)
		requiredValue = runSQLQuery("select * from bp_document_tbl where document_id = (select document_id from bp_document_record_affil_tbl where record_id = //"+ reportID + "//) && filepath is NULL" ,requiredFiledName)	   
	else
		//Get Null value from receipt notification table from DB 
		requiredValue = runSQLQuery("select * from bp_report_document_tbl where rpt_id = //"+ reportID +"// && filename is NULL && Document is Not NULL order by entry_dt desc",requiredFiledName)
	sVerify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob = requiredValue
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob","Failed", "","")
	return sVerify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob

//*********************************************************************************************
//@methodName: get_valueFrom_FeatureTable()
//@Author Karthik
//@Date 8 May 2019
//@Description This is get the value column specified from the Feature  table for the feature name specified
//Ex  get_valueFrom_FeatureTable("CENTRALIZED MAILING","feature_yn")
//*********************************************************************************************
String get_valueFrom_FeatureTable(String featureName,String columnName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Get Branch Name form DB 
	 String sGget_valueFrom_FeatureTable =  runSQLQuery("select * from bp_feature_tbl where feature = //" + featureName + "//", columnName)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_valueFrom_FeatureTable","Failed", "","")
	return sGget_valueFrom_FeatureTable
//*********************************************************************************************
//@methodName:  enableOrDisableFeatureInDB()
//@Author Karthik
//@Date 25 Feb 2019
//@Description This will enable/disable the Feature in App DB i.e.,  updating the feature_yn to "Y"  || "N" in bp_Feature_tbl
//             based on Input/Parameter
//Ex  enableOrDisableFeatureInDB("CENTRALIZED MAILING","Enable")
//Ex  enableOrDisableFeatureInDB("CENTRALIZED MAILING","Disable")
//*********************************************************************************************
enableOrDisableFeatureInDB(String featureName,String statustoSet)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String featureYn, featureQuery
	if statustoSet.ToUpper() == "ENABLE" || statustoSet.ToUpper() == "Y" 
		featureYn = "Y"
	else if statustoSet.ToUpper() == "DISABLE" || statustoSet.ToUpper() == "N" 
		featureYn = "N"
	else
		 writeReportLog("Please Pass Proper Input to enableOrDisableFeatureInDB","Failed","Either Y || N","")
	//Run update Query
	featureQuery =  "update bp_feature_tbl AppObject feature_yn = //"+ featureYn + "// where feature = //" + featureName + "//"
	 LogSuccessMessage("Query>>" +  featureQuery,"")
	 	runUpdateSQLQuery(featureQuery)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in enableFeatureInDB","Failed", "","")

//*******************************************************************************************************
//@Author Karthik
//@MethodName getLoanNumberBasedOnCriteriaSpecified
//@Description this method will return the Loan Number based on the Affiliation type, account type, account Status && account Class
//NOTE: for this function if you pass Empty("") || null || "ANY" it will ignore that condition 
//(for Example, if we pass accountType as null || "ANY" then this function will get loans for all types)
//Examples
//msgbox getLoanNumberBasedOnCriteriaSpecified("PRIMARY","AUTO","ACTIVE","NEW_LOAN")
//msgbox getLoanNumberBasedOnCriteriaSpecified("JOINT","AUTO","ACTIVE","NEW_LOAN")
//for Reference
//actStatus Codes/Values = //ACTIVE//,//APPROVED//,//CANCELLD//,//CHRG_OFF//,//CHRGBANK//,//CHRGSKIP//,//PAID_OUT//,//REDEEMED//,//REPO//,//REPOSOLD//,//REVERSED//,//SKIP//,//SOLDIER//
//acctClass Codes/Value = //NEW_LOAN//,//FMR_BRWR//,//BR_INT//
//***********************************************************************************************************
String getLoanNumberBasedOnCriteriaSpecified(String affiType,String accountType,String acctStatus,String acctClass)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String baseQuery
	//Constructing the base Query
	if affiType.ToUpper () == "PRIMARY" 
		baseQuery =  "select * from bp_account_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) && affil_type = //PRIMARY//)"
	else if affiType.ToUpper () == "COSIGN" || affiType.ToUpper () == "JOINT" 	
		   baseQuery = "Select * from bp_account_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) && affil_type = //" + affiType.ToUpper ()+ "//)"
	//Constructing based on Account Type
	if accountType.ToUpper () == "MOTOR" ||  accountType == "56" 
		baseQuery = baseQuery + " && int_type = //INT_BRNG// && acct_type = //56//"
	else if accountType.ToUpper () == "AUTO" ||  accountType == "55" 
		baseQuery = baseQuery + " && int_type = //INT_BRNG// && acct_type = //55//"
	else if accountType.ToUpper () == "DIRECT" ||  accountType == "31" 
		baseQuery = baseQuery + " && int_type = //INT_BRNG// && acct_type = //31//"
	else//if accountType.ToUpper () == "ANY" || Trim(accountType) = "" || IsNull(accountType) 
		 	baseQuery = baseQuery + " && int_type = //INT_BRNG//"
	//Constructing based on Account Status
	if !(acctStatus.ToUpper() == "ANY" || acctStatus.Trim() == "" || acctStatus.IsNull()) 
		baseQuery = baseQuery + " && acct_status = //" + acctStatus + "//"
	//Constructing based on Account Status
	if !(acctClass.ToUpper() == "ANY" || acctClass.Trim() == "" || acctClass.IsNull()) 
		baseQuery = baseQuery + " && acct_class = //" + acctClass + "//"
	//Appending the Order by
	baseQuery = baseQuery + " order by rand()"
	//Logging the Query Generated in UFT Report
	  LogSuccessMessage("Query Generated in getLoanNumberBasedOnCriteriaSelected",baseQuery)
	//Running the SQL Query && returning the value
	String sGetLoanNumberBasedOnCriteriaSpecified = runSQLQuery_WithWarning_WithoutExit(baseQuery,"loan_nbr")
	return sGetLoanNumberBasedOnCriteriaSpecified
//*************************************************************************************
//@MethodName getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl
//@Description this function will get the value from the ReportDocumentTable for the latest document which got printed
//@Author Karthik
//@Param colName --> Table ColumnName 
//@Return value Of the specified column name
//Ex: msgbox getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl("entry_dt")
//****************************************************************************************
String getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl(String colName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//	getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl = runSQLQuery("select * from bp_report_document_tbl order by entry_dt desc",colName)
	//	########
	//Release Specified Handling - Handled for the Changes Made in 9.6 Release
	//########
	String sGetDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl
	if Integer.Parse(System.GetEnvVar("appVersion").Replace(".", "").Trim()) >= 960 
		sGetDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl = runSQLQuery("select * from bp_document_tbl order by entry_dt desc",colName)
	else
		sGetDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl = runSQLQuery("select * from bp_report_document_tbl order by entry_dt desc",colName)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl","Failed", "" ,"")
	return sGetDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl
//***********************************************************************************************************************
//@methodName: get_CustomerDetails_Based_On_AccountID_And_AffilType_FromDB(accountID,affilType,requiredFileds)
//@Author: Chandra
//@Date 23 May 2018
//@Description This will get the Customer Details based on Account ID && Affiliation Type from DB
//@Returing the Customer Details
//Ex:  get_CustomerDetails_Based_On_AccountID_And_AffilType_FromDB("137700013584"","Primary","first_name:last_name:middle_name:credit_score)
//***********************************************************************************************************************
String get_CustomerDetails_Based_On_AccountID_And_AffilType_FromDB(String accountID,String affilType,String requiredFileds)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String lsAccID_AffliationType
	//Query
	String query = "Select * from bp_account_customer_affil_tbl inner join bp_customer_tbl where bp_customer_tbl.cust_id = bp_account_customer_affil_tbl.cust_id && acct_id = //" + accountID + "// && affil_type = //" + affilType + "//"
	   //Executing the Query Generated
	lsAccID_AffliationType = runSQLQuery_FetchMultipleValues(query, requiredFileds)
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_CustomerDetails_Based_On_AccountID_AffilType_FromDB","Failed", "" ,"")
	return lsAccID_AffliationType
//************************************************************************************************************************************************************
//@methodName : get_CustomerDetails_BasedOn_LoanNum_And_AffilType_FromDB(loanNum, affilType, requiredFileds)
//@Author : Chandra
//@Date 24 May 2018
//@Description This function will Get the customer details based on Loan number && Affiliation type from App DB
//@Returing the Customer Details
//Ex:  get_CustomerDetails_BasedOn_LoanNum_And_AffilType_FromDB("137700137124", "Primary", "first_name:last_name:middle_name:credit_score")
//************************************************************************************************************************************************************ 
String get_CustomerDetails_BasedOn_LoanNum_And_AffilType_FromDB(String loanNum,String affilType,String requiredFileds)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String lsLoan_AffType
	//Query
	String query = "Select * from bp_customer_tbl where cust_id in (select cust_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_tbl where loan_nbr = //" + loanNum + "//) && affil_type = //" + affilType + "//)"
	   //Executing the Query Generated
	lsLoan_AffType = runSQLQuery_FetchMultipleValues(query, requiredFileds)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/get_CustomerDetails_BasedOn_LoanNum_And_AffilType_FromDB","Failed", "" ,"")
	return lsLoan_AffType
//***************************************************************************************************************************
//@Method: get_SumOfCharges_BasedOn_WaivedOff_FromDB(lonNum,chgType,waiveOffYN)
//@Author: Sumithra
//@Date 10th may 2019
//@Description: This function is to get Sum of charges based on waive off Y || N
//Ex:  get_SumOfCharges_BasedOn_WaivedOff_FromDB("9652","COLL_EXP","N")
//***************************************************************************************************************************
String get_SumOfCharges_BasedOn_WaivedOff_FromDB(String lonNum,String chgType,String waiveOffYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	String sGet_SumOfCharges_BasedOn_WaivedOff_FromDB
	 String query = "Select sum(charge_amt) from bp_account_charge_tbl where acct_id in (select acct_id from bp_account_tbl where loan_nbr =//"+ lonNum +"//) && charge_type in (//"+chgType+"//) && waived_yn =//"+waiveOffYN+"//"     
	//run query to fetch loan number
	 String sResult = runSQLQuery_WithWarning_WithoutExit(query, "sum(bp_account_charge_tbl.charge_amt)")
	 if sResult != "" 
		 	sGet_SumOfCharges_BasedOn_WaivedOff_FromDB = sResult
	else
		 	sGet_SumOfCharges_BasedOn_WaivedOff_FromDB = "0"
	 if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_SumOfCharges_BasedOn_WaivedOff_FromDB","Failed", "","")
	return sGet_SumOfCharges_BasedOn_WaivedOff_FromDB
//******************************************************************************************************************************************
//@Method getChargeDetails_BasedOnLoanCreationDate_FromAppDB
//@Author Karthik
//@Description this method will retuns the values(Can Return Multiple Values) from the Charge Calculation Table based on the Parameters Passed
//@Param
//	stateID --> pass the State ID
//	loanCreationDate --> Specify the Loan Creation Data so that it can identify the Correct Data required
//	accountType --> Pass the accoutn type 31, 55,56
// 	 opt --> Pass the Value "LATE_CHG" || "NSF_CHRG" based on the value required for you
//	requiredFieldValues --> specify the DB Column names. if multiple values are required then specify using the seperator ":"
 //msgbox 	("SC","5/7/2019","31","LATE_CHG","min_amt:max_amt") --> Direct Loan
 //msgbox getChargeDetails_BasedOnLoanCreationDate_FromAppDB("SC","5/7/2019","55","NSF_CHRG","min_amt:max_amt") --> Auto Loan
 //***************************************************************************************************************************************
 String getChargeDetails_BasedOnLoanCreationDate_FromAppDB(String stateID,String loanCreationDate,String accountType,String opt,String requiredFieldValues)
	String cnvtDate, sqlGenerated, sGetChargeDetails_BasedOnLoanCreationDate_FromAppDB
	 	cnvtDate = formatDateWithSpecifiedDelimeter(loanCreationDate,"YYYYMMDD","-")
	 	sqlGenerated = "select * from bp_charge_calc_tbl where state = //" + stateID + "// && start_dt <= //" + cnvtDate + "// && end_Dt >= //" + cnvtDate + "// && acct_type = //"+ accountType + "// && opt = //"+ opt + "//"
	 	//Run SQL Query && return values
	 	sGetChargeDetails_BasedOnLoanCreationDate_FromAppDB = runSQLQuery_FetchMultipleValues(sqlGenerated,requiredFieldValues)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in method getChargeDetails_BasedOnLoanCreationDate_FromAppDB","Failed", "","")
	 return sGetChargeDetails_BasedOnLoanCreationDate_FromAppDB
//*******************************************************************************************************
//@Author Chandra
//@MethodName get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB
//@Date 07 Aug 2019
//@Description this method will return the Loan Number based on the Affiliation type, account type, account Status && account Class where Cease is not marked 
//NOTE: for this function if you pass Empty("") || null || "ANY" it will ignore that condition 
//(for Example, if we pass accountType as null || "ANY" then this function will get loans for all types)
//Examples
//msgbox get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB("PRIMARY","AUTO","ACTIVE","NEW_LOAN")
//msgbox get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB("JOINT","AUTO","ACTIVE","NEW_LOAN")
//for Reference
//actStatus Codes/Values = //ACTIVE//,//APPROVED//,//CANCELLD//,//CHRG_OFF//,//CHRGBANK//,//CHRGSKIP//,//PAID_OUT//,//REDEEMED//,//REPO//,//REPOSOLD//,//REVERSED//,//SKIP//,//SOLDIER//
//acctClass Codes/Value = //NEW_LOAN//,//FMR_BRWR//,//BR_INT//
//***********************************************************************************************************
String get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB(String affiType,String accountType,String acctStatus,String acctClass)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String baseQuery
	//Constructing the base Query
	if affiType.ToUpper () == "PRIMARY" 
		baseQuery =  "select * from bp_account_tbl where acct_id Not in (select acct_id from bp_do_not_contact_tbl) && acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) && affil_type = //PRIMARY//)"
	else if affiType.ToUpper () == "COSIGN" || affiType.ToUpper ()== "JOINT" 	
	   baseQuery = "Select * from bp_account_tbl where acct_id Not in (select acct_id from bp_do_not_contact_tbl) && acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) && affil_type = //" + affiType.ToUpper ()+ "//)"
	//Constructing based on Account Type
	if accountType.ToUpper () == "MOTOR" ||  accountType == "56" 
		baseQuery = baseQuery + " && int_type = //INT_BRNG// && acct_type = //56//"
	else if accountType.ToUpper () =="AUTO" ||  accountType == "55" 
		baseQuery = baseQuery + " && int_type = //INT_BRNG// && acct_type = //55//"
	else if accountType.ToUpper () == "DIRECT" ||  accountType == "31" 
		baseQuery = baseQuery + " && int_type = //INT_BRNG// && acct_type = //31//"
	else//if accountType.ToUpper () == "ANY" || Trim(accountType) == "" || IsNull(accountType) 
	 	baseQuery = baseQuery + " && int_type = //INT_BRNG//"
	//Constructing based on Account Status
	if acctStatus.ToUpper() !="ANY" || acctStatus.Trim() == "" || acctStatus.IsNull() 
		baseQuery = baseQuery + " && acct_status = //" + acctStatus + "//"
	//Constructing based on Account Status
	if acctClass.ToUpper() != "ANY" || acctClass.Trim() == "" || acctClass.IsNull()
		baseQuery = baseQuery + " && acct_class = //" + acctClass + "//"
	//Appending the Order by
	baseQuery = baseQuery + " order by rand()"
	//Logging the Query Generated in UFT Report
	  LogSuccessMessage("Query Generated in get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB",baseQuery)
	//Running the SQL Query && returning the value
	String sGet_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB = runSQLQuery_FetchMultipleValues(baseQuery,"loan_nbr")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB","Failed", "" ,"")
	return sGet_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB
//**************************************************************************
//@methodName getTotalAmtPaidToOthersOnYourBehalf_FromAppDB
//@Author Karthik
//@Description this method will be get the Amount Paid to Others on Your Behalf from bank Detail Tbl 
//@Return the Sum of Amount Paid to Others
//EX: msgbox getTotalAmtPaidToOthersOnYourBehalf_FromAppDB("087400009192")
//*************************************************************************
String getTotalAmtPaidToOthersOnYourBehalf_FromAppDB(String lnNbr)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGetTotalAmtPaidToOthersOnYourBehalf_FromAppDB, sqlQuery
	sqlQuery = "Select isnull(sum(amt), 0) from bp_bank_detail_tbl where trans_id in (select trans_id from bp_account_tbl where loan_nbr = //" + lnNbr + "//) && check_type != //CUSTOMER//"
	//UFT Logger
	 LogSuccessMessage("Query", sqlQuery)
	sGetTotalAmtPaidToOthersOnYourBehalf_FromAppDB = runSQLQuery(sqlQuery,"sum(bp_bank_detail_tbl.amt)")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in getTotalAmtPaidToOthersOnYourBehalf_FromAppDB","Failed", "" ,"")
	return sGetTotalAmtPaidToOthersOnYourBehalf_FromAppDB
//*************************************************************************************************************************************************
//@Method: get_TCIFundedLoanNumber_FromDB(accountStatus)
//@Author: GG
//@Date: 7 Mar 2019
//@Description This function is to TCI Funded Loan Number from App DB based on Account Status
//Ex: get_TCIFundedLoanNumber_FromDB("ACTIVE")
//*************************************************************************************************************************************************
String get_TCIFundedLoanNumber_FromDB(String accountStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//To fetch the TCI Funded Loans from DB
	String query = "Select * from bp_account_tbl where funded_deal_source != //// && acct_status = //" + accountStatus + "// order by rand();"
	//To run the query to get required value 
	String sGet_TCIFundedLoanNumber_FromDB = runSQLQuery(query,"loan_nbr")
	//Error handling
	if GetErrorCount()>0
		 writeReportLog("Failed in get_TCIFundedLoanNumber_FromDB","Failed", "","")
	 return sGet_TCIFundedLoanNumber_FromDB

//10 APR 2019
toSetDate_EmployeeDeliquencyTracker(String todayDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//to set the date
	 SetValueInPBDataWindow_DP("w_search","dw_search","#1","start_date",todayDate)
	//To click on OK Button
	 clickButtonInPBWindow("Employee Delinquency Tracker","Ok")
	Sleep (10)
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: toSetDate_EmployeeDeliquencyTracker","Failed", "" ,"")

//**********************************************************************************************
//@methodName: get_LoanNumber_BasedOnOrderBy_FromAppDB(AccountStatus, AccountTypeCode, UI_Del_Status, orderBy)
//@Description: This is to get the Loan Number from App DB based on Account status, Account Type Code && Delinquency Status order by rand()/ procd_dt desc.
//@Author: Chandra
//modified by: Sumithra -  the function with/without account type
//@Date 06 Sep 2019
//@Returning the Loan Number
//Ex:  get_LoanNumber_BasedOnOrderBy_FromAppDB("ACTIVE", "55", "Current", "rand")
  	// get_LoanNumber_BasedOnOrderBy_FromAppDB("ACTIVE", "", "Current", "rand")
//*********************************************************************************************** 
String get_LoanNumber_BasedOnOrderBy_FromAppDB(String AccountStatus,String AccountTypeCode,String UI_Del_Status,String orderBy)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	// Variables
	String query , loanNumber, AccountType_Code
	//Get ID Based on Delinquency Status && Contractual status
	 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	//SHP -  Append account type if it is not empty
	if AccountTypeCode != "" 
		 		 AccountType_Code = "and acct_type=//" + AccountTypeCode +"//"
	//query to run
	if UI_Del_Status == ">90" 
		query = "Select * from support.bp_account_tbl where acct_status = //" + AccountStatus + "//" + AccountType_Code +" && del_status = //"+ delinqStatus  +"// && contractual_status > //"+ contractual_status  +"// order by"
	else
		query = "Select * from support.bp_account_tbl where acct_status = //" + AccountStatus + "//" + AccountType_Code + " && del_status = //"+ delinqStatus  +"// && contractual_status = //"+ contractual_status  +"// order by"
	//Constructing the Expected Query (Adding Order by Rand()/ procd_dt)
	if orderBy.ToUpper() == "RAND" 
		query = query + " rand()"
	else
		query = query + " procd_dt desc"
	//Fetching the loan number from DB
	loanNumber = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	//if Loan are not available 
	if loanNumber == "0" 
		 writeReportLog("<b> <font color=//orange//> No Loans found for Account Type Code: " + AccountType_Code + " && Delinquency Status: " + UI_Del_Status + "</font> </b>" ,"Passed",FailComments,"")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_BasedOnOrderBy_FromAppDB","Failed", "","")
	return loanNumber
//*****************************************************************************************************************************************
//@methodName: getRepossessionDetailsYTD_FromDB(yearValue,monthValue,byref reposedYTB,byref redeemedYTB,byref soldYTB,byref lossYTB)
//@Description: This function is to get Repossession details from DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  getRepossessionDetailsYTD_FromDB("2019","6",reposedYTB,redeemedYTB,soldYTB,lossYTB)
//*****************************************************************************************************************************************
getRepossessionDetailsYTD_FromDB(Integer yearValue,Integer monthValue, out Integer ByRef_reposedYTB, out Integer ByRef_redeemedYTB, out Integer ByRef_soldYTB,out Integer ByRef_lossYTB)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	Integer itr
	String today_Date, redeemed, Sold,  loss, reposed, endDateOfMonth
	ByRef_reposedYTB = 0
	ByRef_redeemedYTB = 0
		ByRef_soldYTB = 0
	ByRef_lossYTB = 0
	for ( itr =1; itr <= monthValue; itr++)
		if itr == monthValue 
			today_Date =date
			reposed  = get_DataInStaticsReport_FromDB(today_Date,"repos_nbr_additions")
			ByRef_reposedYTB = ByRef_reposedYTB + Integer.Parse(reposed)
			redeemed  = get_DataInStaticsReport_FromDB(today_Date,"repos_nbr_redeemed")
			 	ByRef_redeemedYTB = ByRef_redeemedYTB +Integer.Parse(+ redeemed)
			Sold  = get_DataInStaticsReport_FromDB(today_Date,"repos_nbr_sold")
			 	ByRef_soldYTB = ByRef_soldYTB + Integer.Parse(Sold)
			loss  = get_DataInStaticsReport_FromDB(today_Date,"bnkrpt_nbr_cnsdr_for_loss")
			 ByRef_lossYTB = ByRef_lossYTB + Integer.Parse(loss)
		else
			endDateOfMonth = formatDateWithSpecifiedDelimeter(DateSerial(yearValue, 1 + itr, 0),"MMDDYYYY","-")		
			reposed  = get_DataInStaticsReport_FromDB(endDateOfMonth,"repos_nbr_additions")
			ByRef_reposedYTB = ByRef_reposedYTB + Integer.Parse(reposed)
			redeemed  = get_DataInStaticsReport_FromDB(endDateOfMonth,"repos_nbr_redeemed")
			 	ByRef_redeemedYTB = ByRef_redeemedYTB +Integer.Parse(+ redeemed)
			Sold  = get_DataInStaticsReport_FromDB(endDateOfMonth,"repos_nbr_sold")
			 	ByRef_soldYTB = ByRef_soldYTB + Integer.Parse(Sold)
			loss  = get_DataInStaticsReport_FromDB(endDateOfMonth,"bnkrpt_nbr_cnsdr_for_loss")
			 ByRef_lossYTB = ByRef_lossYTB + Integer.Parse(loss)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/getRepossessionDetailsYTD_FromDB","Failed", "" ,"")

//*****************************************************************************************************************************************
//@methodName: get_DataInStaticsReport_FromDB(recordDate,columnName)
//@Description: This function is to get Stats details from DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  get_DataInStaticsReport_FromDB("2019/06/23","nbr_accts")
//*****************************************************************************************************************************************
String get_DataInStaticsReport_FromDB(String recordDate,String columnName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	String sGet_DataInStaticsReport_FromDB, dtrecordDate
	 dtrecordDate = formatDateWithSpecifiedDelimeter(recordDate,"YYYYMMDD","-")
	 String query = "Select sum("+columnName+") from bp_branch_ops_summ_tbl where record_dt = //"+dtrecordDate+"// && acct_type in (//55//,//56//,//31//) && date_type=//DAILY// && data_type  = //ACTUAL//"     
	//run query to fetch loan number
	  Print ("Query to get Data In Statics Report From DB ",query)
	 String sResult = runSQLQuery_WithWarning_WithoutExit(query,"sum(bp_branch_ops_summ_tbl."+columnName+")")
	 if sResult != "" 
		 	sGet_DataInStaticsReport_FromDB = sResult
	 else
		 	sGet_DataInStaticsReport_FromDB = "0"
	 if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_DataInStaticsReport_FromDB","Failed", "","")
	return sGet_DataInStaticsReport_FromDB

//*****************************************************************************************************************************************
//@methodName:get_LoanNumberCount_InWeeklyLonProgressReport_FromDB(startProcessDate,EndProcessDate,AutoActType,MotorActType,DirectActType)
//@Description: This function is to get weekly loan progress details from DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  get_LoanNumberCount_InWeeklyLonProgressReport_FromDB("2019-07-01","2019-07-31","55","","")
//*****************************************************************************************************************************************
String get_LoanNumberCount_InWeeklyLonProgressReport_FromDB(String startProcessDate,String EndProcessDate,String AutoActType,String MotorActType,String DirectActType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sStartProcessDate, sEndProcessDate, sGet_LoanNumberCount_InWeeklyLonProgressReport_FromDB, sResult
	//query to run
	 sStartProcessDate = formatDateWithSpecifiedDelimeter(startProcessDate,"YYYYMMDD","-")
	 sEndProcessDate = formatDateWithSpecifiedDelimeter(EndProcessDate,"YYYYMMDD","-")
	// String query = "Select sum("+columnName+") from bp_account_summary_tbl where record_dt >= //"+recordDate1+"// && record_dt <= //"+recordDate2+"// && acct_type in (//"+AutoActType+"//,//"+MotorActType+"//,//"+DirectActType+"//)"     
	 String query = "Select count(loan_nbr) from bp_account_tbl where procd_dt >= //"+startProcessDate+"// && procd_dt < //"+EndProcessDate+"// && acct_type in (//"+AutoActType+"//,//"+MotorActType+"//,//"+DirectActType+"//) && loan_nbr not in (select loan_nbr from bp_account_tbl where acct_status = //REVERSED// && procd_dt >= //"+sStartProcessDate+"// && procd_dt < //"+sEndProcessDate+"// && datePart(yy, paid_out_dt) = datePart(yy, procd_dt) && datePart(mm, paid_out_dt) = datePart(mm, procd_dt))"
	Print ("Query to get LoanNumberCount In WeeklyLon ProgressReport From DB ",query)
	//run query to fetch loan number
	 sResult = runSQLQuery_WithWarning_WithoutExit(query,"count(bp_account_tbl.loan_nbr)")
	 if sResult != "" 
		 	sGet_LoanNumberCount_InWeeklyLonProgressReport_FromDB = sResult
	 else
		 	sGet_LoanNumberCount_InWeeklyLonProgressReport_FromDB = "0"
	 if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumberCount_InWeeklyLonProgressReport_FromDB","Failed", "","")
	return sGet_LoanNumberCount_InWeeklyLonProgressReport_FromDB

//*****************************************************************************************************************************************
//@methodName: get_TotalAcctsCount_From_StatsReport_FromDB(todaysDate,AutoActType,MotorActType,DirectActType)
//@Description: This function is to get total accounts count from stats report in DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  get_TotalAcctsCount_From_StatsReport_FromDB("2019-07-01","55","56","31")
//*****************************************************************************************************************************************
String get_TotalAcctsCount_From_StatsReport_FromDB(String todaysDate,String AutoActType,String MotorActType,String DirectActType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sTodaysDate, sResult, sGet_TotalAcctsCount_From_StatsReport_FromDB
	sTodaysDate =formatDateWithSpecifiedDelimeter(todaysDate,"yyyymmdd","-") 
	//query to run
	String query = "Select sum(nbr_accts) from bp_account_summary_tbl where record_dt >= //"+todaysDate+"// && record_dt <= //"+sTodaysDate+"// && acct_type in (//"+AutoActType+"//,//"+MotorActType+"//,//"+DirectActType+"//)"     
	 sResult = runSQLQuery_WithWarning_WithoutExit(query, "sum(bp_account_summary_tbl.nbr_accts)")
	 if sResult != "" 
		 	sGet_TotalAcctsCount_From_StatsReport_FromDB = sResult
	 else
		 	sGet_TotalAcctsCount_From_StatsReport_FromDB = "0"
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_TotalAcctsCount_From_StatsReport_FromDB","Failed", "","")
	return sGet_TotalAcctsCount_From_StatsReport_FromDB

//*****************************************************************************************************************************************
//@methodName: getLoanNumbersCount_InCollection_Report_FromDB(DelStatus,StartLetter,EndLetter,PromiseStartDate,PromiseEndDate)
//@Description: This function is to get Loan numbers count from collection report from DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  getLoanNumbersCount_InCollection_Report_FromDB("30","a","z","","")
//*****************************************************************************************************************************************
String getLoanNumbersCount_InCollection_Report_FromDB(String DelStatus,String StartLetter,String EndLetter,String PromiseStartDate,String PromiseEndDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String contractual_status, query
	//query to run
	if DelStatus.ToUpper() == "CURRENT"
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (0) && a.acct_id in (select a.acct_id from bp_account_tbl a where a.del_status = //C// && a.contractual_status = 0) && a.acct_id not in (select a.acct_id from bp_account_tbl a where a.del_status = //P// && a.contractual_status = 0)"
	else if DelStatus.ToUpper() == "POTENTIAL" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (0) && a.acct_id not in (select a.acct_id from bp_account_tbl a where a.del_status = //C// && a.contractual_status = 0) && a.acct_id in (select a.acct_id from bp_account_tbl a where a.del_status = //P// && a.contractual_status = 0)"
	else if DelStatus == "30" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (1)"
	else if DelStatus == "60" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (2)"
	else if DelStatus == "90"  
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (3)"
	else if DelStatus == ">90" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=999"
	else if DelStatus == "30+" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=1 && isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else if DelStatus == "60+"  
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=2 && isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else if DelStatus == "90+" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=3 && isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else
		 writeReportLog("Wrong arrguments passed: "+ DelStatus +" in getLoanNumbersCount_InCollection_Report_FromDB","Failed", "","")
	
	String PromiseQuery, sResult, sGetLoanNumbersCount_InCollection_Report_FromDB
	if PromiseStartDate != "" && PromiseEndDate != "" 
		PromiseStartDate = formatDateWithSpecifiedDelimeter(PromiseStartDate,"YYYYMMDD","-")
		PromiseEndDate = formatDateWithSpecifiedDelimeter(PromiseEndDate,"YYYYMMDD","-")
		PromiseQuery = "and a.acct_id in (select c.acct_id from bp_account_activity_tbl c where c.promise_dt >=//"+PromiseStartDate+" 12:00 AM// && c.promise_dt <= //"+PromiseEndDate+" 11:59 PM// && c.promise_dt is not null && c.activity_type = //PROMISE// && c.activity_status = //ACTIVE//)"
	if PromiseStartDate != "" && PromiseEndDate != "" 
		query = "Select count(loan_nbr) from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) && (acf.acct_id = a.acct_id) && (TrimLeft(c.last_name) between //"+StartLetter+"// && //"+EndLetter+"//||replicate (//Z//,30)) && acF.affil_type = //PRIMARY// &&  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// && c.acct_code1  not in (//BANKRUPT// )) && a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_yn   = //Y//) "+contractual_status + PromiseQuery
	else
		query = "Select count(loan_nbr) from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) && (acf.acct_id = a.acct_id) && (TrimLeft(c.last_name) between //"+StartLetter+"// && //"+EndLetter+"//||replicate (//Z//,30)) && acF.affil_type = //PRIMARY// &&  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// && c.acct_code1  not in (//BANKRUPT// )) && a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_yn   = //Y//) "+contractual_status
	 Print ("Query to get Data In Collection Report From DB ",query)
	//run query to fetch loan number
	 sResult = runSQLQuery_WithWarning_WithoutExit(query,"count(a.loan_nbr)")
	if sResult != "" 
		 	sGetLoanNumbersCount_InCollection_Report_FromDB = sResult
	else
	 	sGetLoanNumbersCount_InCollection_Report_FromDB = "0"
	if GetErrorCount()>0 
		 writeReportLog("Failed : getLoanNumbersCount_InCollection_Report_FromDB ","Failed", "","")
	return sGetLoanNumbersCount_InCollection_Report_FromDB

//*****************************************************************************************************************************************
//@methodName: getLoanNumber_InCollection_Report_FromDB(DelStatus,StartLetter,EndLetter)
//@Description: This function is to get Loan number from collection report from DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  getLoanNumber_InCollection_Report_FromDB("30","a","z")
//*****************************************************************************************************************************************
String getLoanNumber_InCollection_Report_FromDB(String DelStatus,String StartLetter,String EndLetter)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String contractual_status, query
	String PromiseQuery, sResult, sGetLoanNumber_InCollection_Report_FromDB
	
	//query to run
	if DelStatus.ToUpper() == "CURRENT"
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (0) && a.acct_id in (select a.acct_id from bp_account_tbl a where a.del_status = //C// && a.contractual_status = 0) && a.acct_id not in (select a.acct_id from bp_account_tbl a where a.del_status = //P// && a.contractual_status = 0)"
	else if DelStatus.ToUpper() == "POTENTIAL" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (0) && a.acct_id not in (select a.acct_id from bp_account_tbl a where a.del_status = //C// && a.contractual_status = 0) && a.acct_id in (select a.acct_id from bp_account_tbl a where a.del_status = //P// && a.contractual_status = 0)"
	else if DelStatus == "30" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (1)"
	else if DelStatus == "60" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (2)"
	else if DelStatus == "90"  
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (3)"
	else if DelStatus == ">90" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=999"
	else if DelStatus == "30+" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=1 && isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else if DelStatus == "60+"  
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=2 && isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else if DelStatus == "90+" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=3 && isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else
		 writeReportLog("Wrong arrguments passed: "+ DelStatus +" in getLoanNumbersCount_InCollection_Report_FromDB","Failed", "","")
	PromiseQuery = "and a.acct_id in (select c.acct_id from bp_account_activity_tbl c where c.activity_type = //PROMISE// && c.activity_status = //COMPLETE//) order by rand()"
	query = "Select loan_nbr from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) && (acf.acct_id = a.acct_id) && (TrimLeft(c.last_name) between //"+StartLetter+"// && //"+EndLetter+"//||replicate (//Z//,30)) && acF.affil_type = //PRIMARY// &&  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// && c.acct_code1  not in (//BANKRUPT// )) && a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_yn   = //Y//) "+contractual_status + PromiseQuery
	//run query to fetch loan number
	 sResult = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	if sResult != "" 
		 	sGetLoanNumber_InCollection_Report_FromDB = sResult
	else
		 	sGetLoanNumber_InCollection_Report_FromDB = "0"
	if GetErrorCount()>0 
		 writeReportLog("Failed : getLoanNumber_InCollection_Report_FromDB ","Failed", "","")
	return sGetLoanNumber_InCollection_Report_FromDB

//***************************************************************************************************************************
//@Method: get_LoanNumber_FromDB_BasedOn_ContractDate(AccountStatus,AccountTypeCode,UI_Del_Status,ContractFromDate,ContractToDate)
//@Author: Sumithra
//@Date 21 march 2018
//@Description: This function will get the loan from DB based on contract From date && To date
//Ex:  get_LoanNumber_FromDB_BasedOn_ContractDate("Active","55","30","2018-12-01",null)
//***************************************************************************************************************************
String get_LoanNumber_FromDB_BasedOn_ContractDate(String AccountStatus,String AccountTypeCode,String UI_Del_Status,String ContractFromDate,String ContractToDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	// variables
	String sContractFromDate, contract_FromDate, sContractToDate, Contract_ToDate,query, sqlQuery
	if AccountStatus.ToUpper() == "ACTIVE" 
		 //Get ID Based on Delinquency Status && Contractual status
		  get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
		 if ContractFromDate != ""  
			sContractFromDate = formatDateWithSpecifiedDelimeter(ContractFromDate,"YYYYMMDD","-")
			contract_FromDate = "and funding_dt >= //"+ContractFromDate+"// "
		 if ContractToDate != "" 
			 		 sContractToDate = formatDateWithSpecifiedDelimeter(ContractToDate,"YYYYMMDD","-")
			 		 Contract_ToDate = "and funding_dt < //"+ContractToDate+"//"
		//query to run 
		 //Query
		 //query = "acct_status =//" + AccountStatus + "//" + " && acct_type=//" + AccountTypeCode +"// && del_status = //"+ delinqStatus  +"// && contractual_status = //"+ contractual_status  +"// " + contract_FromDate & contract_ToDate + "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by loan_nbr desc"
		 		query = "acct_status =//" + AccountStatus + "//" + " && acct_type=//" + AccountTypeCode +"// && del_status = //"+ UI_Del_Status  +"// && contractual_status = //"+ contractual_status  +"// " + contract_FromDate + Contract_ToDate + "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by rand()"
	 else
		 		 query = "acct_status =//" + AccountStatus + "//" + " && acct_type=//" + AccountTypeCode +"//" + contract_FromDate + Contract_ToDate + "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by loan_nbr desc"	
		//Query
	 	//query = "acct_status =//" + AccountStatus + "//" + " && acct_type=//" + AccountTypeCode +"// && del_status = //"+ delinqStatus  +"// && contractual_status = //"+ contractual_status  +"// " + contract_FromDate & contract_ToDate + "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by loan_nbr desc"
	 if System.GetEnvVar("currentState") == "OH" 
			sqlQuery = "Select * from support.bp_account_tbl where acct_id not in (select distinct(acct_id) from bp_account_charge_tbl where charge_type = //COLL_EXP//) && " + query
	else
		sqlQuery = "Select * from support.bp_account_tbl where " + query
	//UFT Logger
	 LogSuccessMessage("get_LoanNumber_FromDB_BasedOn_ContractDate", sqlQuery)
	//run query to fetch loan number
	// get_LoanNumber_FromDB_BasedOn_ContractDate = runSQLQuery(sqlQuery, "loan_nbr")
	String sGet_LoanNumber_FromDB_BasedOn_ContractDate = runSQLQuery_WithWarning_WithoutExit(sqlQuery, "loan_nbr")
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_FromDB_BasedOn_ContractDate","Failed", "","")
	return sGet_LoanNumber_FromDB_BasedOn_ContractDate

//**********************************************************************************************
//@methodName: get_LoanNumber_BasedOnDealerType_FromAppDB(AccountStatus, AccountTypeCode, UI_Del_Status, orderBy)
//@Description: This is to get the Loan Number from App DB based on Account status, Account Type Code, Dealer Type(Holdback TYpe) && Delinquency Status.
//@Author: Chandra
//@Date 26 Feb 2019
//@Returning the Loan Number
//Ex:  get_LoanNumber_BasedOnDealerType_FromAppDB("ACTIVE", "55", "DISCOUNT", "Current", "RAND")
//     get_LoanNumber_BasedOnDealerType_FromAppDB("ACTIVE", "55", "RESERVE", "Current", "RAND")
//*********************************************************************************************** 
String get_LoanNumber_BasedOnDealerType_FromAppDB(String AccountStatus,String AccountTypeCode,String DealerType,String UI_Del_Status,String orderBy)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query, loanNumber
	//Get ID Based on Delinquency Status && Contractual status
	 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	//query to run
	if UI_Del_Status == ">90" 
		query = "Select * from support.bp_account_tbl where dealer_id in (select dealer_id from bp_dealer_tbl where holdback_type = //" + DealerType + "//) && acct_status = //" + AccountStatus + "//" + " && acct_type= //" + AccountTypeCode + "// && del_status = //"+ delinqStatus  +"// && contractual_status > //"+ contractual_status  +"// order by rand()"
	else
		query = "Select * from support.bp_account_tbl where dealer_id in (select dealer_id from bp_dealer_tbl where holdback_type = //" + DealerType + "//) && acct_status = //" + AccountStatus + "//" + " && acct_type= //" + AccountTypeCode + "// && del_status = //"+ delinqStatus  +"// && contractual_status = //"+ contractual_status  +"// order by rand()"
	//Constructing the Expected Query (Adding Order by Rand()/ procd_dt)
	if orderBy.ToUpper() == "RAND" 
		query = query + " rand()"
	else
		query = query + " procd_dt desc"
	//Fetching the loan number from DB
	loanNumber = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	//if Loan are not available 
	if loanNumber == "0" 
		 writeReportLog("<b> <font color=//orange//> No Loans found for Account Type Code: " + AccountTypeCode + " && Delinquency Status: " + UI_Del_Status + " && holdback_type = //" + DealerType + "//</font> </b>" ,"Passed",FailComments,"")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_BasedOnDealerType_FromAppDB","Failed", "","")
	return loanNumber
//*****************************************************************************************************************************************
//@methodName: getData_In_AccountTable_FromDB(loanNumber,fieldName)
//@Description: This function is to get data from Account table in DB
//@Author: Sumithra
//@Date 01 Aug 2019
//Ex:  getData_In_AccountTable_FromDB("08740008226","acct_status")
//***************************************************************************************************************************************** 
String getData_In_AccountTable_FromDB(String loanNumber,String fieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGetData_In_AccountTable_FromDB
	String fieldID = getFieldID_AccountTab(fieldName)
	//query	
	String query = "Select * from bp_account_tbl where loan_nbr =//"+loanNumber+"//"
	   //Executing the Query Generated
	sGetData_In_AccountTable_FromDB = runSQLQuery_WithWarning_WithoutExit(query,fieldID)
	 //error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/getData_In_AccountTable_FromDB","Failed", "","")
	return sGetData_In_AccountTable_FromDB
//*****************************************************************************************************************************************
//@methodName: verify_LoanNumExists_InCollection_Report_FromDB(loanNumber)
//@Description: This function is to verify if the loan exists in the Collection report from DB
//@Author: Sumithra
//@Date 01 Aug 2019
//Ex:  verify_LoanNumExists_InCollection_Report_FromDB("087400009897")
//*****************************************************************************************************************************************
verify_LoanNumExists_InCollection_Report_FromDB(String loanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query, sVerify_LoanNumExists_InCollection_Report_FromDB
	//	String query = "Select loan_nbr from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) && (acf.acct_id = a.acct_id) && acF.affil_type = //PRIMARY// &&  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// && c.acct_code1  not in (//BANKRUPT// )) && a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_yn   = //Y//) && loan_nbr = //"+loanNumber+"//"
	if System.GetEnvVar("appVersion").Replace(".", "").Trim() <= "970" 
		query = "Select loan_nbr from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) && (acf.acct_id = a.acct_id) && acF.affil_type = //PRIMARY// &&  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// && c.acct_code1  not in (//BANKRUPT// )) && a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_yn   = //Y//) && loan_nbr = //"+loanNumber+"//"
	else
		query = "Select loan_nbr from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) && (acf.acct_id = a.acct_id) && acF.affil_type = //PRIMARY// &&  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// && c.acct_code1  not in (//BANKRUPT// )) && a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_status   = //PENDING//) && loan_nbr = //"+loanNumber+"//"
	   //Executing the Query Generated
	sVerify_LoanNumExists_InCollection_Report_FromDB = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	if sVerify_LoanNumExists_InCollection_Report_FromDB == null
		 writeReportLog("Loan number with active claim (Total Loss) is not present in Collection report","Passed","","")
	else
		 writeReportLog("Loan number with active claim (Total Loss) is present in Collection report","Failed", "","")
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/verify_LoanNumExists_InCollection_Report_FromDB","Failed", "","")

//*****************************************************************************************************************************************
//@methodName: get_PendingId_for_InsClaim_FromDB(ClaimType,claimID,loanNumber)
//@Description: This function is to get the Pending Id for Insurance from DB
//@Author: Sumithra
//@Date 01 Aug 2019
//Ex:  get_PendingId_for_InsClaim_FromDB("TOTLLOSS","1","087400009897")
//*****************************************************************************************************************************************
String get_PendingId_for_InsClaim_FromDB(String ClaimType,String claimID,String loanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query = "Select * from bp_account_ins_claim_pend_tbl icpt, bp_account_tbl act where icpt.acct_id = act.acct_id && claim_type = //"+ClaimType+"// && ins_claim_id = //"+claimID+"// && loan_nbr =//"+loanNumber+"//"
	   //Executing the Query Generated
	String sGet_PendingId_for_InsClaim_FromDB = runSQLQuery_WithWarning_WithoutExit(query,"ins_pend_id")
	 //error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_PendingId_for_InsClaim_FromDB","Failed", "","")
	return sGet_PendingId_for_InsClaim_FromDB
//*****************************************************************************************************************************************
//@methodName: get_EntryDate_And_LastChangedDate_for_InsClaim_FromDB(ClaimType,claimID,loanNumber,requiredFieldNames)
//@Description: This function is to get the entry date && last changed date for insurance claims from DB
//@Author: Sumithra
//@Date 01 Aug 2019
//Ex:  get_EntryDate_And_LastChangedDate_for_InsClaim_FromDB("TOTLLOSS","1","087400009897",requiredFieldNames)
//*****************************************************************************************************************************************
String get_EntryDate_And_LastChangedDate_for_InsClaim_FromDB(String ClaimType,String claimID,String loanNumber,String requiredFieldNames)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query , sGet_EntryDate_And_LastChangedDate_for_InsClaim_FromDB
	query = "Select icpt.entry_userid as InsTable_EntryID, icpt.entry_dt as InsTable_EntryDate,icpt.last_chg_dt as InsTable_lastEntryDate ,icpt.last_chg_userid as InsTable_lastEntryID from bp_account_ins_claim_pend_tbl icpt, bp_account_tbl act where icpt.acct_id = act.acct_id && claim_type = //"+ClaimType+"// && ins_claim_id = //"+claimID+"// && loan_nbr =//"+loanNumber+"//"
	//Executing the Query Generated
	 sGet_EntryDate_And_LastChangedDate_for_InsClaim_FromDB = runSQLQuery_FetchMultipleValues_WithWarning(query,requiredFieldNames)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_EntryDate_And_LastChangedDate_for_InsClaim_FromDB","Failed", "","")
	return sGet_EntryDate_And_LastChangedDate_for_InsClaim_FromDB

//*****************************************************************************************************************************************
//@methodName: get_LoanNumber_FromAppDB_WhereActiveClaimNotExists(AccountStatus,AccountTypeCode,accountClass,affiType,UI_Del_Status)
//@Description: This function is to get loan number from DB where where active claim is not exist
//@Author: Sumithra
//@Date 01 Aug 2019
//Ex:  get_LoanNumber_FromAppDB_WhereActiveClaimNotExists("Active","55","NEW_LOAN","PRIMARY","Current")
//*****************************************************************************************************************************************
String get_LoanNumber_FromAppDB_WhereActiveClaimNotExists(String AccountStatus,String AccountTypeCode,String accountClass,String affiType,String UI_Del_Status)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Get ID Based on Delinquency Status && Contractual status
	 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	String Account_Class, Account_Type, affi_Type, query
	if accountClass != "" 
		Account_Class = "and acct_class = //" + accountClass + "//"
	if AccountTypeCode != "" 
		Account_Type = "and acct_type= //" + AccountTypeCode + "//"
	if affiType != "" 
		if affiType.ToUpper () == "PRIMARY" 
			affi_Type =  "and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) && affil_type = //PRIMARY//)"
		else if affiType.ToUpper () == "COSIGN" || affiType.ToUpper ()== "JOINT" 	
			affi_Type = "and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) && affil_type = //" + affiType.ToUpper ()+ "//)"
	//query to run
	if UI_Del_Status == ">90" 
		query = "Select * from support.bp_account_tbl where acct_status = //" + AccountStatus + "//" + Account_Class + Account_Type +" && del_status = //"+ delinqStatus  +"// && contractual_status > //"+ contractual_status  +"// && not acct_id = any(select acct_id from bp_account_ins_claim_pend_tbl as a where a.claim_type = //TOTLLOSS// && a.claim_yn = //Y//) "+ affi_Type +" order by rand()"
	else
		query = "Select * from support.bp_account_tbl where acct_status = //" + AccountStatus + "//" + Account_Class + Account_Type +" && del_status = //"+ delinqStatus  +"// && contractual_status = //"+ contractual_status  +"// && not acct_id = any(select acct_id from bp_account_ins_claim_pend_tbl as a where a.claim_type = //TOTLLOSS// && a.claim_yn = //Y//) "+ affi_Type +" order by rand()"
	//Fetching the loan number from DB
	String loanNumber = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	//if Loan are not available 
	if loanNumber == "0" 
		 writeReportLog("<b> <font color=//orange//> No Loans found for Delinquency Status: " + UI_Del_Status + "</font> </b>" ,"Passed",FailComments,"")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_FromAppDB_WhereActiveClaimNotExists","Failed", "","")
	return loanNumber

//*****************************************************************************************************************************************
//@methodName: get_OrganizationId_FromAppDB(StateName)
//@Description: This function is to get Organization id from DB
//@Author: Sumithra
//@Date 10 September 2019
//Ex:  get_OrganizationId_FromAppDB("SC")
//*****************************************************************************************************************************************
String get_OrganizationId_FromAppDB(String StateName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	String query = "Select * from Branch_AppObjectup_tbl where BRANCH_AppObjectUP_STATE = //"+StateName+"//"
	String sGet_OrganizationId_FromAppDB = runSQLQuery(query, "organization_id")
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_OrganizationId_FromAppDB","Failed", "","")
	return sGet_OrganizationId_FromAppDB
//*****************************************************************************************************************************************
//@methodName: get_DataFromSP_In_StatisticsReport(SPName,orgId,recordDate,AccountType,DataType,requredColumnNames)
//@Description: This function is to get data from SP in Statistics report
//@Author: Sumithra
//@Date 22 Aug 2019
//Ex:  get_DataFromSP_In_StatisticsReport("StatsDelinquencySummary",//792//,today_Date,"%","DAILY",StatsColumnNames)
//*****************************************************************************************************************************************
String get_DataFromSP_In_StatisticsReport(String SPName,String orgId,String recordDate,String AccountType,String DataType,String requredColumnNames)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGet_DataFromSP_In_StatisticsReport, query
	recordDate = formatDateWithSpecifiedDelimeter(recordDate,"yyyymmdd","-")
	if SPName == "StatsDelinquencySummary" 
		query = "exec sp_rpt_stats_del_summary //"+orgId+"//,//"+recordDate+"//,//"+AccountType+"//,//"+DataType+"//"
	else if SPName== "StatsBranchOperation" 
		query = "exec sp_rpt_stats_branch_ops //"+orgId+"//,//"+recordDate+"//,//"+AccountType+"//,//"+DataType+"//"
	else if SPName == "StatsAccountSummary" 
		query = "exec sp_rpt_stats_acct_summary //"+orgId+"//,//"+recordDate+"//,//"+AccountType+"//,//"+DataType+"//"
	else	
		 writeReportLog("SP name your searching is not exist","Failed", "","")
	   //Executing the Query Generated
	//get_DataFromSP_In_StatisticsReport = runSQLQuery_FetchMultipleValues_WithWarning(query,requredColumnNames)
	sGet_DataFromSP_In_StatisticsReport = runSQLQuery_FetchMultipleValues_WithoutExit(query,requredColumnNames)
	 //error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_DataFromSP_In_StatisticsReport","Failed", "","")
	return sGet_DataFromSP_In_StatisticsReport
//*****************************************************************************************************************************************
//@methodName: getLoanNumber_FromDB_where_CPINotExist(AccountTypeCode)
//@Description: This functionis to get the loan number where CPI is not exist
//@Author: Sumithra
//@Date 15 June 2019
//Ex:  getLoanNumber_FromDB_where_CPINotExist("55")
//***************************************************************************************************************************************** 
String getLoanNumber_FromDB_where_CPINotExist(String AccountTypeCode)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGetLoanNumber_FromDB_where_CPINotExist
	//query to run 
	 String query = "Select loan_nbr from bp_account_component_tbl,bp_account_pmt_schedule_tbl,bp_account_tbl where bp_account_component_tbl.acct_id =bp_account_pmt_schedule_tbl.acct_id && bp_account_pmt_schedule_tbl.acct_id = bp_account_tbl.acct_id && bp_account_pmt_schedule_tbl.pmt_type = //CONTRACT//  && bp_account_component_tbl.descr != //Collateral Protection// && bp_account_component_tbl.descr != //deleted// && bp_account_pmt_schedule_tbl.pmt_dt > GETDATE() && bp_account_tbl.acct_status = //ACTIVE// && acct_type=//" + AccountTypeCode +"// order by rand()"
	//run query to fetch loan number
	 sGetLoanNumber_FromDB_where_CPINotExist = runSQLQuery(query, "loan_nbr")
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/getLoanNumber_FromDB_where_CPINotExist","Failed", "","")
	return sGetLoanNumber_FromDB_where_CPINotExist
//*****************************************************************************************
//@methodName: get_Bankrupt_Account_LockedYN_Status_FromDB(accountType,loanNumber)
//@Author Chandra
//@Date 11 Oct 2019
//@Description This will get the Bankrupt Account Loacked YN Status from DB based on account type && Loan number
//Ex: get_Bankrupt_Account_LockedYN_Status_FromDB("ACCOUNT","087400009553")
//*****************************************************************************************
String get_Bankrupt_Account_LockedYN_Status_FromDB(String accountType,String loanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Run SQL query 
	String sGet_Bankrupt_Account_LockedYN_Status_FromDB = runSQLQuery("select uf_is_locked(//"+ accountType +"//,//"+ loanNumber +"//) as Locked_yn","Locked_yn")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_Bankrupt_Account_LockedYN_Status_FromDB","Failed", "","Y")
	return sGet_Bankrupt_Account_LockedYN_Status_FromDB
//*****************************************************************************************
//@methodName: get_DealerDetails_AfterLoanModification_FromDB(accountID,requiredFileds,queryPath)
//@Author Chandra
//@Date 16 Oct 2019
//@Description This will get the Dealer Details from DB after loan modification
//Ex: get_DealerDetails_AfterLoanModification_FromDB(accountID,requiredFileds,queryPath)
//*****************************************************************************************
String get_DealerDetails_AfterLoanModification_FromDB(String accountID,String requiredFileds,String queryPath)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String baseQuery, requiredValues
	//Get SQL Query form text file
	baseQuery = get_Entire_File_Content(queryPath)
	//Replacing the Account ID
	baseQuery = baseQuery.Replace("@acct_id",accountID)
	//Logging the Query Generated in UFT Report
	  LogSuccessMessage("Query Generated in get_DealerDetails_AfterLoanModification_FromDB",baseQuery)
	//Running the SQL Query && returning the value
	requiredValues = runSQLQuery_FetchMultipleValues(baseQuery,requiredFileds)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerDetails_AfterLoanModification_FromDB","Failed", "" ,"")
	return requiredValues

//***********************************************************************************************************************
//@methodName: get_GracePeriod_From_DB(Currentstate,CountryName)
//@Author: Sumithra
//@Date 29 Nov 2018
//@Description This will give the Grace period from DB
//Ex:  get_GracePeriod_From_DB("SC","USA")
//***********************************************************************************************************************
String get_GracePeriod_From_DB(String Currentstate,String CountryName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Query to fetch the grace period based on state
	String query = "Select * from bp_charge_calc_tbl where start_dt <= today() && end_dt >= today() && state = //"+Currentstate+"// && country=//"+CountryName+"// && opt = //LATE_CHG//"
	String sGet_GracePeriod_From_DB = runSQLQuery(query, "grace_days")
	 writeReportLog("Grace period for State: " + Currentstate + " is "+ sGet_GracePeriod_From_DB +" days" ,"Passed",FailComments,"")
	//Error handing
	 if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/get_GracePeriod_From_DB","Failed", "" ,"")
	return sGet_GracePeriod_From_DB
//***********************************************************************************************************************
//@methodName: validate_LastLateChargeAppliedDate_in_AppDB(ExpLateChgAppliedDate)
//@Author: Sumithra
//@Date 29 Nov 2018
//@Description This will validate last late cahrge applied date in branch_AppObjectup table
//EX:  validate_LastLateChargeAppliedDate_in_AppDB("29/11/2018")
//***********************************************************************************************************************
validate_LastLateChargeAppliedDate_in_AppDB(String ExpLateChgAppliedDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//get late charge applied date from DB
	String lastLateChgAppliedDate
	lastLateChgAppliedDate = getvalue_From_AppDB("BRANCH_AppObjectUP_TBL","last_late_charge_applied").Trim()
	//validate
	 validateDataAndReport(lastLateChgAppliedDate,ExpLateChgAppliedDate,"Validating last late charge applied date in Branch AppObjectup Table: " +lastLateChgAppliedDate)
	//Error handling
	if GetErrorCount() > 0 
		 writeReportLog("Failed in validate_LastLateChargeAppliedDate_in_AppDB","Failed","","")

//*********************************************************************************************
//@methodName: calculate_LateChargeAmount_BasedOn_CalcMethod_FromDB(stateName,emiAmount,loanCreationDate,accountType)
//@Author Sumithra HP
//@Date 11 October 2019
//@Description This is to calculate the late charge amount based on Calculation method from DB
//Ex  calculate_LateChargeAmount_BasedOn_CalcMethod_FromDB("SC","342","2019-10-30","55")
//*********************************************************************************************
 //*********************************************************************************************
//@methodName: get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB(LoanNumber,ChargeType)
//@Author Sumithra HP
//@Date 19 September 2019
//@Description This is for get the Diffrence Amount for Charge Amount && Paid Amount From DB
//Ex  get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB("08740008879","")
//Ex  get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB("08740008879","LATE_CHG")
//*********************************************************************************************
String get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB(String LoanNumber,String ChargeType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String recordDate, charge_Type
	recordDate = formatDateWithSpecifiedDelimeter(date,"yyyymmdd","-")
	//charge type
	if ChargeType != "" 
		charge_Type = "and charge_type=//"+ChargeType+"//"	
	//query	
	String query = "Select chargeAmount = sum(charge_amt)-sum(paid_amt) from bp_account_tbl a ,bp_account_charge_tbl b where a.acct_id=b.acct_id && waived_yn =//N// && adj_princ_yn =//N// && loan_nbr=//"+LoanNumber+"//" +charge_Type	
	//Updating the Query in the UFT Log
	Print ("Query to get Difference of charge amount && Paid amount from DB",query)
	//Executing the Query Generated
	String sGet_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB = runSQLQuery_FetchMultipleValues_WithWarning(query,"chargeAmount")
	if GetErrorCount()>0  			
		 writeReportLog("Failed in step/get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB","Failed", "" ,"Y")
	return sGet_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB
//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_Eligible_for_LateCharges(sinceLastPaymentDays,fundingDate,fundingDateOperator)
//@Author Sumithra HP
//@Date 10 Oct 2019
//@Description This function is to get the Loan number from DB where late charge is applicable
//NOTE: for this function if you pass Empty("") it will ignore that condition 
// get_LoanNumberFromDB_Eligible_for_LateCharges("","2019-08-01",">=")
// get_LoanNumberFromDB_Eligible_for_LateCharges("45","2019-08-01",">=")
// get_LoanNumberFromDB_Eligible_for_LateCharges("45","","")
//***********************************************************************************************************************************************
String get_LoanNumberFromDB_Eligible_for_LateCharges(String sinceLastPaymentDays,String fundingDate,String fundingDateOperator)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String startDate, endDate, sFundingDate, funding_Date, sinceLast_PaymentDays
	if sinceLastPaymentDays != "" 
		startDate = formatDateWithSpecifiedDelimeter(DateSerial(Year(date),Month(date)-1,1),"YYYYMMDD","-")
		endDate = formatDateWithSpecifiedDelimeter(DateSerial(Year(date), 1 + Month(date)-1, 0),"YYYYMMDD","-")
		endDate = formatDateWithSpecifiedDelimeter(dateadd("d",-1,endDate),"YYYYMMDD","-")
		sinceLast_PaymentDays = "and acct_id in(select acct_id from bp_account_charge_tbl where charge_type=//LATE_CHG// group by acct_id  having max(due_dt) >=//"+startDate+"// && max(due_dt) <=//"+endDate+"//) && days_since_last_pay >=//"+sinceLastPaymentDays+"//"
	if fundingDate != "" 
		sFundingDate = formatDateWithSpecifiedDelimeter(fundingDate,"YYYYMMDD","-")
		funding_Date = "and funding_dt "+fundingDateOperator+" //"+fundingDate+"//"
	//query
	String query = "Select * from bp_account_tbl where acct_status=//Active// " + sinceLast_PaymentDays + funding_Date + "  && not acct_id = any(select acct_id from bp_account_ins_claim_pend_tbl as a where a.claim_type = //TOTLLOSS// && a.claim_yn = //Y//) && acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by rand()"	
	//Updating the Query in the UFT Log
	Print ("Query to get loan number from DB where Late Charge is applicable",query)
	//Returing the loan number  
	String sGet_LoanNumberFromDB_Eligible_for_LateCharges = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumberFromDB_Eligible_for_LateCharges","Failed", "","")
	return sGet_LoanNumberFromDB_Eligible_for_LateCharges

//************************************************************************************************************************************************
//@Method: get_Latest_LateChargeAmount_And_StartDate_FromDB(stateName,LateChargeAmount,StartDate)
//@Author karthik
//@Date 10 Oct 2019
//@Description This function is to get the Latecharge amount && Startdate from DB
// get_Latest_LateChargeAmount_And_StartDate_FromDB("IN",LateChargeAmount,StartDate)
//**************************************************************************************************************************************************
String get_Latest_LateChargeAmount_And_StartDate_FromDB(String stateName,String LateChargeAmount,String StartDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sResult
	//query
	String query = "Select * from bp_charge_calc_tbl where state =//"+stateName+"// && opt =//LATE_CHG// order by start_dt desc"
	//Updating the Query in the UFT Log
	Print ("Query to get latest Late Charge amount && Start date from DB",query)
	//Returing the start date && late charge amount
	sResult = runSQLQuery_FetchMultipleValues_WithWarning(query,"start_dt;amt")	
	StartDate = sResult.GetField(";", 1)
	LateChargeAmount = sResult.GetField(";", 2)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_Latest_LateChargeAmount_And_StartDate_FromDB ","Failed", "","")
	return LateChargeAmount
//*********************************************************************************************
//@methodName: get_DealerName_BasedOnCriteriaSpecified_FromDB(dealerName,requiredField)
//@Author Chandra
//@Date 28 OCT 2019
//@Description This is get the Sum of Dealer Discount && Reserve Amount based on Dealer Name from App DB
//@Returing the Dealer Name
//Ex  get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB("All Tech Auto Sales LLC","087400000017","short_name;sumReserveAmt;sumDiscountAmt")
// get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB("All Tech Auto Sales LLC","087400000017","short_name;sumReserveAmt;sumDiscountAmt")
// get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB("All Tech Auto Sales LLC","087400000017","short_name;sumReserveAmt;sumDiscountAmt")
// get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB("All Tech Auto Sales LLC","087400000017","short_name;sumReserveAmt;sumDiscountAmt")
//*********************************************************************************************
String get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB(String dealerID,String requiredField)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Initial Query
	String baseQuery = "Select DRT.dealer_id,sum(DRT.reserve_amt) as sumReserveAmt,sum(DRT.discount_amt) as sumDiscountAmt from bp_dealer_tbl BDT inner join bp_dealer_reserve_tbl DRT on BDT.dealer_Id = DRT.dealer_id where BDT.active_yn = //Y// && DRT.dealer_id = //"+ dealerID +"// group by DRT.dealer_id"
	String sGet_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB = runSQLQuery_FetchMultipleValues(baseQuery,requiredField)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB","Failed", "","")
	return sGet_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB

//********************************************************************************************************************************************
//@methodName: getRowNumber_BasedOnDealerName_FromDB(dealerID)
//@Description: This function is to get Row Number based on Dealer Number from DB
//@Author: Chandra
//@Date 30-10-2019
//Ex:  getRowNumber_BasedOnDealerName_FromDB("0874125602002")
//*********************************************************************************************************************************************
String getRowNumber_BasedOnDealerName_FromDB(String dealerID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String rowNumber, DealerName_query
	DealerName_query = "with resultsTable as (select row_number() over(order by short_name asc,dealer_id desc) as RowNo, short_name,dealer_id  from bp_dealer_tbl where active_yn = //Y//) select RowNo,dealer_id from resultsTable where dealer_id = //"+ dealerID +"//"
	rowNumber = runSQLQuery(DealerName_query,"RowNo")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getRowNumber_BasedOnDealerName_FromDB","Failed", "" ,"")
	return rowNumber

//********************************************************************************************************************************************
//@methodName: getRepresentativeName_BasedOnDealerName_FromDB(requiredFields,dealerID)
//@Description: This function is to get Representative Name based on Dealer Name from DB
//@Author: Chandra
//@Date 30-10-2019
//Ex:  getRepresentativeName_BasedOnDealerName_FromDB("first_name","087400000015")
//*********************************************************************************************************************************************
String getRepresentativeName_BasedOnDealerName_FromDB(String requiredFields,String dealerID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String repName_query, represantativeName
	repName_query = "Select dr.first_name from bp_dealer_tbl d, bp_dealer_rep_tbl dr where d.dealer_id = dr.dealer_id && d.active_yn = //Y// && d.dealer_id = //"+ dealerID +"//"
	represantativeName = runSQLQuery(repName_query,requiredFields)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getRepresentativeName_BasedOnDealerName_FromDB","Failed", "" ,"")
	return represantativeName

//*************************************************************************************************************************************************
//@Method: runSQLQuery_FetchMultipleValues_WithoutExit(query, requiredFieldName)   
//@Author Chandra
//@Date 24 Oct 2019
//@Description This function is run the SQL query to fetch multiple values with out exist test
//Ex: runSQLQuery_FetchMultipleValues_WithoutExit(query, "loan_nbr;trans_id")   
//*************************************************************************************************************************************************
String runSQLQuery_FetchMultipleValues_WithoutExit(String query,String requiredFieldNames)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Variable declaration
	String conn, rs, sRunSQLQuery_FetchMultipleValues_WithoutExit, outputString = ""
	Database db
	Integer i
	List<String> lsValues
	 LogSuccessMessage("Test Data Get Query",query)
	//Object declaration
	// AppObject conn= createobject("adodb.connection")
	// AppObject rs = createobject("adodb.recordAppObject")
	//Connection string
	conn =  "Dsn=branch;Uid=support;Pwd=sql;"
	db.Connect(conn)
	//Executing the Query
	// rs.open query, conn
	db.Execute(query)
	db.FetchToList (lsValues)
	//Validating for Query No Results
	if lsValues == null
		sRunSQLQuery_FetchMultipleValues_WithoutExit = ""
	else
		 //splitting the name
		lsValues = requiredFieldNames.Split(";")
		for (i =1; i<=lsValues.Count(); i++)
			 if i != 0 
				 	outputString = outputString + ";"
				 requiredFieldNames = lsValues[i]//rs.Fields(arr(i))
				 outputString = outputString + requiredFieldNames
				//Returing the Value
				sRunSQLQuery_FetchMultipleValues_WithoutExit = outputString 
	db.Disconnect()
	  //if Query Does not Return Any Result
	if GetErrorCount()>0 
		writeReportLog("DB column Names " + requiredFieldNames + " which you are looking is not available in the query Result; Query : " + query ,"Warning", "","")		
	return sRunSQLQuery_FetchMultipleValues_WithoutExit
//*****************************************************************************************
//@methodName: get_CashDrawerUser_BasedOnCriteriaSpecified(employeType,securityLevel)
//@Author Chandra
//@Date 04 Oct 2019
//@Description This will get the existing cash drawer Manager user from DB
//Ex: get_CashDrawerUser_BasedOnCriteriaSpecified("14A","400")
//*****************************************************************************************
String get_CashDrawerUser_BasedOnCriteriaSpecified(String employeType,String securityLevel)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query
	//Get the Cash Drawer from the Shared Location 
	query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath")+"CashDrawer_User_BasedOnSpecifiedCriteria_SQLQuery.txt")
	query = query.Replace("@empl_type",employeType)
	query = query.Replace("@security_level",securityLevel)
	//Updating the Query in the UFT Log
	Print ("Query to Identify the Cash Drawer & AppObject Pwd",query)
	//Returing the 1st User ID with Cash Drawer    
	String sGet_CashDrawerUser_BasedOnCriteriaSpecified = runSQLQuery(query,"userid")		
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_CashDrawerUser_BasedOnCriteriaSpecified","Failed", "","")
	return sGet_CashDrawerUser_BasedOnCriteriaSpecified
//***********************************************************************************************************************
//@methodName: get_NonMatured_LoanNumber_FromDB(accountType)
//@Author: Sumithra
//@Date 30 Oct 2019
//@Description This is to get loan number from DB which are not matured
//Ex:  get_NonMatured_LoanNumber_FromDB("55")
//***********************************************************************************************************************
String get_NonMatured_LoanNumber_FromDB(String accountType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	String query, sGet_NonMatured_LoanNumber_FromDB
	query =	"Select * from support.bp_account_tbl where acct_status =//Active// && acct_type=//"+accountType+"// && acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) > getdate(*)) order by rand()"
	//	query =	"Select * from support.bp_account_tbl where acct_status =//Active// && acct_type=//"+accountType+"// && acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) < getdate(*)) order by loan_nbr asc"
	//run query
	sGet_NonMatured_LoanNumber_FromDB = runSQLQuery_WithWarning_WithoutExit(query, "loan_nbr")
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_NonMatured_LoanNumber_FromDB","Failed", "","")
	return sGet_NonMatured_LoanNumber_FromDB
//***********************************************************************************************************************
//@methodName: getMaturedLoanNumber_FromDB(accountType)
//@Author: Sumithra
//@Date 30 Oct 2019
//@Description This is to get loan number from DB which are matured
//Ex:  getMaturedLoanNumber_FromDB("55")
//***********************************************************************************************************************
String getMaturedLoanNumber_FromDB(String accountType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String stateName, query, sGetMaturedLoanNumber_FromDB
	//query to run
	stateName = System.GetEnvVar("currentState")
	if stateName =="NC" && accountType =="31" 
		//		String query = "Select aa.acct_id,a.loan_nbr,aa.activity_code, aa.activity_descr from bp_account_activity_tbl aa inner join bp_account_tbl a where aa.activity_code = //ADJ_INT// && a.acct_status = //ACTIVE// order by aa.entry_dt desc"
		String query = "Select aa.acct_id,a.loan_nbr,aa.activity_code, aa.activity_descr from bp_account_activity_tbl aa inner join bp_account_tbl a where aa.activity_code = //ADJ_INT// && a.acct_status != //PAID_OUT// && a.acct_status != //CHRG_OFF// order by aa.entry_dt desc"
	else
		//		query =	"Select * from support.bp_account_tbl where acct_status =//Active// && acct_type=//"+accountType+"// && acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >= getdate(*)) order by loan_nbr desc"
		query =	"Select * from support.bp_account_tbl where acct_status =//Active// && acct_type=//"+accountType+"// && acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) <= getdate(*)) order by rand()"
	//run sql query
	sGetMaturedLoanNumber_FromDB = runSQLQuery_WithWarning_WithoutExit(query, "loan_nbr")
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/getMaturedLoanNumber_FromDB","Failed", "","")
	return sGetMaturedLoanNumber_FromDB
//*********************************************************************************************
//@methodName: get_DealerName_BasedOnCriteriaSpecified_FromDB(holdBackType,principlaBal,requiredField)
//@Author Chandra
//@Date 24 OCT 2019
//@Description This is get the Dealer Name based on criteria specified from App DB
//@Returing the Dealer Name
//Ex  get_DealerName_BasedOnCriteriaSpecified_FromDB("DISCOUNT","12000","short_name")
// get_DealerName_BasedOnCriteriaSpecified_FromDB("RESERVE","12000","short_name")
// get_DealerName_BasedOnCriteriaSpecified_FromDB("Both","12000","short_name")
// get_DealerName_BasedOnCriteriaSpecified_FromDB("Zero","12000","short_name")
//*********************************************************************************************
String get_DealerName_BasedOnCriteriaSpecified_FromDB(String holdBackType,Real orginal_principlaBal,String requiredField)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Initial Query
	String baseQuery ="" , principlaBal
	Real new_principlaBal,  rprinciplaBal
	//String basequery = "Select BDT.short_name,DRT.dealer_id,sum(isnull(DRT.reserve_amt,0)) as sumReserveAmt,sum(isnull(DRT.discount_amt,0)) as sumDiscountAmt from bp_dealer_tbl BDT inner join bp_dealer_reserve_tbl DRT on BDT.dealer_Id = DRT.dealer_id where BDT.active_yn = //Y//"
	baseQuery = "Select BDT.short_name,DRT.dealer_id,sum(isnull(DRT.reserve_amt,0)) as sumReserveAmt,sum(isnull(DRT.discount_amt,0)) as sumDiscountAmt, MIN(BDT.RESERVE_AMT) DL_RES,MIN(BDT.DISCOUNT_AMT) DL_DIS from bp_dealer_tbl BDT inner join bp_dealer_reserve_tbl DRT on BDT.dealer_Id = DRT.dealer_id where BDT.active_yn = //Y//"
	//New Principal Bal
	orginal_principlaBal =(orginal_principlaBal * 5)/100
	new_principlaBal = Math.Round(orginal_principlaBal, 2)
	rprinciplaBal = orginal_principlaBal - new_principlaBal 
	principlaBal = rprinciplaBal.Format()
	//Appending the Query based hold back type
	if holdBackType.ToUpper() == "DISCOUNT" 
		//Dealer Reserve is zero && Discount amount is not equal to zero
		//baseQuery = baseQuery + " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt != 0 && sumDiscountAmt < " + principlaBal + " && sumReserveAmt = 0 && DL_RES = 0 && DL_DIS = 0 order by DRT.dealer_id "
		//Modified on 6th Jan 2020
		baseQuery = baseQuery + " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt != 0 && sumDiscountAmt < " + principlaBal + " && sumReserveAmt = 0 && DL_RES = 0 && DL_DIS != 0 order by DRT.dealer_id "
	else if holdBackType.ToUpper() == "RESERVE" 
		//Dealer Reserve is not equal to zero && Discount amount is zero
		//		baseQuery = baseQuery + " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt = 0 && sumReserveAmt != 0 && sumReserveAmt < " + principlaBal + " && DL_RES = 0 && DL_DIS != 0 order by DRT.dealer_id "
		baseQuery = baseQuery + " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt = 0 && sumReserveAmt != 0 && sumReserveAmt < " + principlaBal + " && DL_RES != 0 && DL_DIS = 0 order by DRT.dealer_id "
	else if holdBackType.ToUpper() == "BOTH" 
		//Dealer Reserve && Discount amount both not equal to zero
		//baseQuery = baseQuery + " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt != 0 && sumReserveAmt != 0 && sumReserveAmt < " + principlaBal + " && DL_RES = 0 && DL_DIS != 0  order by DRT.dealer_id "	
		baseQuery = baseQuery + " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt != 0 && sumReserveAmt != 0 && sumReserveAmt < " + principlaBal + " order by DRT.dealer_id "	
	else if holdBackType.ToUpper() == "ZERO" 
		//Dealer Reserve && Discount amount both is equal to zero
		baseQuery = baseQuery + " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt = 0 && sumReserveAmt = 0 && DL_RES=0 && DL_DIS=0 order by rand()"
	else
		//Pick an active dealer
		baseQuery = baseQuery + " group by BDT.short_name,DRT.dealer_id order by rand()"
	String sGet_DealerName_BasedOnCriteriaSpecified_FromDB = runSQLQuery_FetchMultipleValues(baseQuery,requiredField)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerName_BasedOnCriteriaSpecified_FromDB","Failed", "","")
	return sGet_DealerName_BasedOnCriteriaSpecified_FromDB

//*********************************************************************************************
//@methodName: get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB(dealerType,accountType,acctStatus,contractFromDate,requiredFileds, queryPath)
//@Author Chandra
//@Date 24 Sep 2019
//@Description This will AppObject the Field Value for the Field Name specified In Modify To Section from Loan Modification Window
//@Retruning the DB values
//Ex 1.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("DISCOUNT","AUTO","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"")
//   2.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("RESERVE","AUTO","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"")
//   3.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("BOTH","AUTO","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"Current")
//   4.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("DISCOUNT","Motor","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"")
//   5.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("RESERVE","Motor","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"30")
//   6.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("BOTH","Motor","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"")
//*********************************************************************************************
String get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB(String dealerType,String accountType,String acctStatus,String contractFromDate,String requiredFileds,String queryPath,String UI_Del_Status)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String baseQuery, sContractFromDate, sContractToDate, ContractToDate
	//Get SQL Query form text file
	baseQuery = get_Entire_File_Content(queryPath)
	//Constructing based on Dealer DISCOUNT/RESERVE/BOTH(RESERVE && DISCOUNT) Amount 
	if dealerType.ToUpper() == "DISCOUNT" 
		//		baseQuery = baseQuery + " && d.total_discount != 0 && d.total_reserve = 0 && (a.princ_bal - round(((a.princ_bal *5) /100),2)) > d.total_discount" 
		baseQuery = baseQuery + " && d.total_discount != 0 && d.total_reserve = 0 " 
	else if dealerType.ToUpper() == "RESERVE" 
		//		baseQuery = baseQuery + " && d.total_reserve != 0 && d.total_discount = 0 && (a.princ_bal - round(((a.princ_bal *5) /100),2)) > d.total_reserve" 
		baseQuery = baseQuery + " && d.total_reserve != 0 && d.total_discount = 0 " 
	else if dealerType.ToUpper() == "BOTH" 
		baseQuery = baseQuery + " && a.princ_bal > d.total_reserve && d.total_reserve != 0 && d.total_discount != 0"
	//Constructing based on Account Type
	if accountType.ToUpper () == "MOTOR" ||  accountType == "56" 
		baseQuery = baseQuery + " && acct_type in (//56//)"
	else if accountType.ToUpper () == "AUTO" ||  accountType == "55" 
		baseQuery = baseQuery + " && acct_type in (//55//)"
	//Constructing based on UI_Del_Status
	if UI_Del_Status != "" 
		//Get ID Based on Delinquency Status && Contractual status
		 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
		//append delinquency status
		baseQuery = baseQuery + "and del_status = //"+ delinqStatus  +"// && contractual_status = //"+ contractual_status  +"//"
	//Constructing based on Account Status
	if acctStatus.ToUpper() !="ANY" || acctStatus.Trim() == "" || acctStatus.IsNull() 
		baseQuery = baseQuery + " && a.acct_status = //" + acctStatus + "//"
		//	//Constructing based on Processed Date
		//	 if contractFromDate != ""  
		//	 	
		//		ContractFromDate = formatDateWithSpecifiedDelimeter(contractFromDate,"YYYYMMDD","-")
		//		//query to run 
		//		baseQuery = baseQuery + " && procd_dt < //" + contractFromDate + "//"
		//    
		//Constructing based on Processed Date
	 if contractFromDate != ""  
		 if contractFromDate.IndexOf(">") > 0 
					contractFromDate = contractFromDate.Replace(">","")
			sContractFromDate =formatDateWithSpecifiedDelimeter(contractFromDate, "YYYY<MMDD", "-")
			ContractToDate = addDays_for_SepecifiedDate("d","-45",date)
			sContractToDate = formatDateWithSpecifiedDelimeter(ContractToDate,"YYYYMMDD","-")
			//query to run 
			 		 	baseQuery = baseQuery + " && funding_dt > //" + contractFromDate + "// && funding_dt < //"+ContractToDate+"//"
		 else
			sContractFromDate = formatDateWithSpecifiedDelimeter(contractFromDate,"YYYYMMDD","-")
			//query to run 
			baseQuery = baseQuery + " && procd_dt < //" + contractFromDate + "//"
	//Appending the Order by
	baseQuery = baseQuery + " order by rand()"
	//Logging the Query Generated in UFT Report
	  LogSuccessMessage("Query Generated in getLoanNumberBasedOnCriteriaSelected",baseQuery)
	//Running the SQL Query && returning the value
	String loanNumber_DB = runSQLQuery_FetchMultipleValues_WithoutExit(baseQuery,requiredFileds)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB","Failed", "" ,"")
	return loanNumber_DB

//***********************************************************************************************************
//@methodName: updateSQLQuery_InHomeOffice(query)
//@Description: This will update the data to home office
//@Author:Karthik 
//@Date 16 Oct 2019
//Ex:  updateSQLQuery_InHomeOffice("update e_app_tbl AppObject status =//NOTVIEW// where ssn = //248291507//"))
//***********************************************************************************************************
updateSQLQuery_InHomeOffice(String query)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String loginSheetPath, homeOffice_Username, homeOffice_Passcode, objConnection, sqlQuery
	Database db
	 	loginSheetPath = System.GetEnvVar("BranchPlusSharedPath") + "LoginDetails.xlsx"
	// DataTable.AddSheet("Login")
	// DataTable.ImportSheet (loginSheetPath,"Login","Login")
	homeOffice_Username = DataStore.Query("NetworkUsername")
	homeOffice_Passcode = DataStore.Query("NetworkPasscode")
	// //Create ADODB connection object
	// AppObject objConnection = CreateObject("ADODB.Connection") 
	// //Create RecordAppObjectobject
	// AppObject objRecordAppObject = CreateObject("ADODB.RecordAppObject")
	//Connect to DB using provider && server
	//objConnection.open "provider=sqloledb;Server=s1-sql-brgqa1\inst_a;User Id="+homeOffice_Username+"; Password="+homeOffice_Passcode+"; Database=HomeOffice;Trusted_Connection=Yes"
	objConnection =  "provider=sqloledb;Server=s1-sql-brgdev1\inst_a;User Id="+homeOffice_Username+"; Password="+homeOffice_Passcode+"; Database=HomeOffice;Trusted_Connection=Yes"    
	db.Connect(objConnection)
	//Write the SQL Query
	sqlQuery=query
	db.Execute(sqlQuery)
	db.Disconnect()
	//Error handling 
	 if GetErrorCount()>0              
		 writeReportLog("Failed to updateSQLQuery_InHomeOffice","Failed", "" ,"")
	
	//EX: updateSQLQuery_InSQLServer_HO_BasedOnServer("QA",query)--> This will run the query in the QA Environment (SQL Server)
	//EX: updateSQLQuery_InSQLServer_HO_BasedOnServer("DEV",Query) --> This will run the query in the Dev Environment (SQL Server)
updateSQLQuery_InSQLServer_HO_BasedOnServer(String serverType,String query)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String loginSheetPath, homeOffice_Username, homeOffice_Passcode, objConnection, sqlQuery, serverName
	Database db
	
	 	loginSheetPath = System.GetEnvVar("BranchPlusSharedPath") + "LoginDetails.xlsx"
	//  DataTable.AddSheet("Login")
	//  DataTable.ImportSheet (loginSheetPath,"Login","Login")
	 	homeOffice_Username =DataStore.Query("NetworkUsername")
	homeOffice_Passcode =DataStore.Query("NetworkPasscode")
	Print ("Electronic Payments Insert Query",query)
	// //Create ADODB connection object
	// AppObject objConnection = CreateObject("ADODB.Connection") 
	// //Create RecordAppObjectobject
	// AppObject objRecordAppObject = CreateObject("ADODB.RecordAppObject")
	//Connect to DB using provider && server
	if serverType == "QA" 
		// objConnection.open "provider=sqloledb;Server=s1-sql-brgqa1\inst_a;User Id="+homeOffice_Username+"; Password="+homeOffice_Passcode+"; Database=HomeOffice;Trusted_Connection=Yes"
		//	serverName = "s1-sql-brgqa1"
		serverName = "SQL-DB-D3"
	else if serverType == "DEV" 
		 //objConnection.open "provider=sqloledb;Server=s1-sql-brgdev1\inst_a;User Id="+homeOffice_Username+"; Password="+homeOffice_Passcode+"; Database=HomeOffice;Trusted_Connection=Yes"    
		serverName = "s1-sql-brgdev1"
	else
		 writeReportLog("Wrong Value passed to serverType argument || : updateSQLQuery_InSQLServer_HO_BasedOnServer","Failed","","")
	//Connect to DB
	//     objConnection.open "provider=sqloledb;Server="+ serverName +"\inst_a;User Id="+homeOffice_Username+"; Password="+homeOffice_Passcode+"; Database=HomeOffice;Trusted_Connection=Yes"    
	objConnection =  "provider=sqloledb;Server="+ serverName +";User Id="+homeOffice_Username+"; Password="+homeOffice_Passcode+"; Database=HomeOffice;Trusted_Connection=Yes"    
	db.Connect(objConnection)
	
	//Write the SQL Query
	sqlQuery=query
	db.Execute(sqlQuery)
	db.Disconnect()
	
	// //Open the recordAppObject object executing the SQL statement && update records 
	// objRecordAppObject.Open sqlQuery,objConnection
	// //RecordAppObject.Close
	// AppObject objRecordAppObject=nothing
	// objConnection.Close
	// AppObject objConnection=nothing    
	//Error handling 
	 if GetErrorCount()>0              
		 writeReportLog("Failed to updateSQLQuery_InHomeOffice","Failed", "" ,"")

//***********************************************************************************************************
//@methodName: runQuery_InHomeoffice_FetchMultipleValues(query,requiredFieldName)
//@Description: This will fetch the data from home office
//@Author:Karthik
//@Return : Return the column details from DB
//@Date 16 Oct 2019
//Ex:  runQuery_InHomeoffice_FetchMultipleValues("select * from e_app_tbl","ssn"))
//***********************************************************************************************************
String runQuery_InHomeoffice_FetchMultipleValues(String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String loginSheetPath, homeOffice_Username, homeOffice_Passcode, objConnection, sqlQuery, serverName
	Database db
	List<String> lsValues, arr
	Integer i
	String outputString ="", sRunQuery_InHomeoffice_FetchMultipleValues
	
	loginSheetPath = System.GetEnvVar("BranchPlusSharedPath") + "LoginDetails.xlsx"
	// // DataTable.AddSheet("Login")
	// DataTable.ImportSheet (loginSheetPath,"Login","Login")
	 	homeOffice_Username =DataStore.Query("NetworkUsername")
	homeOffice_Passcode =DataStore.Query("NetworkPasscode")
	// //Create ADODB connection object
	// AppObject objConnection = CreateObject("ADODB.Connection") 
	// //Create RecordAppObjectobject
	// AppObject objRecordAppObject = CreateObject("ADODB.RecordAppObject")
	//Connect to DB using provider && server
	objConnection = "provider=sqloledb;Server=s1-sql-brgqa1\inst_a;User Id="+homeOffice_Username+"; Password="+homeOffice_Passcode+"; Database=HomeOffice;Trusted_Connection=Yes"
	db.Connect(objConnection)
	
	//Write the SQL Query
	sqlQuery=query
	db.Execute(sqlQuery)
	db.FetchToList(lsValues)
	db.Disconnect()
	
	//Validating for Query No Results
	if lsValues == null
		 writeReportLog("Looks Like Query >> " + query +  " did not found any record","Failed", "","")
	else
		//splitting the column values
		arr = requiredFieldName.Split(":")
		for (i =1; i<=lsValues.Count(); i++)
			if i != 0 
				outputString = outputString + ":"
				requiredFieldName =arr[i]
				outputString = outputString + requiredFieldName
	//Returing the Value
	sRunQuery_InHomeoffice_FetchMultipleValues = outputString 
	//Error handling
	if GetErrorCount()>0              
		 writeReportLog("Failed in Step/: runQuery_InHomeoffice_FetchMultipleValues","Failed", "" ,"")
	return sRunQuery_InHomeoffice_FetchMultipleValues
//***********************************************************************************************************************
//@methodName: insert_ElectronicPayment_InHomeOfficeDB(branchId,LoanNumber,appliedAmount)
//@Author: Sumithra
//@Date 12 Dec 2018
//@Description This will insert the electronic payment from home office DB
//Ex:  insert_ElectronicPayment_InHomeOfficeDB("0881","088100002224","10")
//***********************************************************************************************************************
insert_ElectronicPayment_InHomeOfficeDB(String branchId,String LoanNumber,String appliedAmount)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String insertDataQuery
	//get query from shared path
	insertDataQuery = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath")+"BRP-1571_script_for_HO_Insert_ElectronicPayments.sql")
	insertDataQuery = insertDataQuery.Replace("//BRANCH//","//"+branchId+"//")
	insertDataQuery = insertDataQuery.Replace("//LOAN_NBR//","//"+LoanNumber+"//")
	insertDataQuery = insertDataQuery.Replace("appliedAmount",appliedAmount)
	//upadted query
	 updateSQLQuery_InHomeOffice(insertDataQuery)
	Sleep (3)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in insert_ElectronicPayment_InHomeOfficeDB","Failed", "","")

insert_ElectronicPayment_InSQLServer_HODB(String serverType,String branchId,String LoanNumber,String appliedAmount)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String insertDataQuery, PaymentDate, acct_id
	
	//get query from shared path
	insertDataQuery = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath")+"BRP-1571_script_for_HO_Insert_ElectronicPayments.sql")
	insertDataQuery = insertDataQuery.Replace("//BRANCH//","//"+branchId+"//")
	insertDataQuery = insertDataQuery.Replace("//LOAN_NBR//","//"+LoanNumber+"//")
	insertDataQuery = insertDataQuery.Replace("appliedAmount",appliedAmount)
	//as part of year end regression script failures maintainted the script with inserting payment date as system date
	PaymentDate = getTodaysDate_mmddyyyy_format()
	insertDataQuery = insertDataQuery.Replace("PAYMENT_DATE",PaymentDate)
	//Fetching Account_id -- for the New Changes Made as part of 9.4.1 Fix
	acct_id = getAccountID_From_DB_basedOnLoanNumber(LoanNumber)
	insertDataQuery = insertDataQuery.Replace("ACCT_ID",acct_id)
	//upadted query
	 updateSQLQuery_InSQLServer_HO_BasedOnServer(serverType,insertDataQuery)
	Sleep (3)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in insert_ElectronicPayment_InHomeOfficeDB","Failed", "","")

//***********************************************************************************************************************
//@methodName: update_Domain_In_BP_Website_Table_FromDB
//@Author: Sumithra
//@Date 30 Oct 2019
//@Description This is to update domian in website table
//Ex:  update_Domain_In_BP_Website_Table_FromDB("ONLINE PMTS TEST","http://sfc-api-qa201")
//***********************************************************************************************************************
update_Domain_In_BP_Website_Table_FromDB(String website,String domain)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query 
	String query = "Update bp_website_tbl AppObject domain =//"+domain+"// where website =//"+website+"//"
	//upadted query
	 runUpdateSQLQuery(query)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in update_Domain_In_BP_Website_Table_FromDB","Failed", "","")

//*****************************************************************************************
//@methodName: get_DealerTotalAmount_FromDB(dealerID,requiredField)
//@Author Chandra
//@Date 27 Sep 2019
//@Description This will get the existing cash drawer Superviosr user from DB
//Ex: get_DealerTotalAmount_FromDB("08810234762378","total_discount")
//*****************************************************************************************
String get_DealerTotalAmount_FromDB(String dealerID,String requiredField)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query = "Select * from bp_dealer_reserve_tbl where dealer_id = //"+  dealerID + "// order by entry_dt desc"
	String sGet_DealerTotalAmount_FromDB = runSQLQuery(query,requiredField)
	 //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_DealerTotalAmount_FromDB ","Failed", "","")
	return sGet_DealerTotalAmount_FromDB

//*********************************************************************************************
//@MEthodName getCountOfBusinessAgents_FromDB
//@Author Karthik.Shekar
//@Description This function will get the count of Business agents from App DB based on criteria specified
//@Return count
//@Date 13 Nov 2019
//EX:  msgbox getCountOfBusinessAgents_FromDB("Repossession","Y")
//     msgbox getCountOfBusinessAgents_FromDB("","Y")
 //********************************************************************************************** 
 String getCountOfBusinessAgents_FromDB(String agentType, String activeYN)
	String sGetCountOfBusinessAgents_FromDB, dbAgentType
	 //Query
	 String query = "Select count(*) from bp_business_agent_tbl where active_yn = //" + activeYN + "//"
	  //Constructing the Query based on Criteria
	 if agentType.ToUpper() =="REPOSSESSION"
		 	dbAgentType = "REPOAGNT"
		 	query = query + " && agent_type = //" + dbAgentType + "//" 
	 else if agentType.ToUpper() =="GARNISHMENT"
		 	dbAgentType = "GARNAGNT"
		 	query = query + " && agent_type = //" + dbAgentType + "//" 
	 else if agentType.ToUpper() == "OTHERS" 
		  	dbAgentType = "OTHERAGENT"
		  	query = query + " && agent_type = //" + dbAgentType + "//" 
	 else if agentType.ToUpper() =="ALL" || agentType.Trim().Length() == 0 
		  	query = query
	 else
		 	 writeReportLog("AgentType " + agentType +" passed to function getCountOfBusinessAgents_FromDB is not corect","Passed","","")
		 //Returning 
	  sGetCountOfBusinessAgents_FromDB = runSQLQuery(query,"count(*)") 
	  //Error Handling
	   if GetErrorCount()>0 
			 writeReportLog("Failed in step/getCountOfBusinessAgents_FromDB","Failed", "","")
	return sGetCountOfBusinessAgents_FromDB
 
//********************************************************************************************
//@Method get_random_DealerNameAndID_FromAppDB
//@Author Karthik.Shekar
//@Date 21 Nov 2019
//@Description this function will get the Dealer Name && ID based on the Dealer Status Passed
//@Return DealerName;DealerID
//msgbox get_random_DealerNameAndID_FromAppDB("y")
//msgbox get_random_DealerNameAndID_FromAppDB("y")
//********************************************************************************************
String get_random_DealerNameAndID_FromAppDB(String dealerStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Query
	String query = "Select * from bp_dealer_tbl where active_yn = //"+ dealerStatus.ToUpper() +"//" + " order by rand()"		
	 //Returing the Value
	 String sGet_random_DealerNameAndID_FromAppDB = runSQLQuery_FetchMultipleValues_WithWarning(query,"short_name;dealer_id")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerDetails_FromAppDB","Failed", "","")
	return sGet_random_DealerNameAndID_FromAppDB

//***********************************************************************************************************************************
//@Method: get_DealerAddress_BasedOnDealerID_FromAppDB(dealerID,dealerType,addrType,requiredField)
//@Author Karthik
//@Date 18 Oct 2019
//@Description This function is to get the Dealer Address based on dealer Id from DB
//Ex:  getValue_CheckbookPayment_window("087400000001","DEALER","MAILING","addr1;addr2;addr3;zipcode;city;state")
//************************************************************************************************************************************
String get_DealerAddress_BasedOnDealerID_FromAppDB(String dealerID,String dealerType,String addrType,String requiredField)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Query
	String query = "Select * from bp_location_tbl where loc_id = //"+ dealerID +"// && loc_type = //"+ dealerType +"// && loc_class = //"+ addrType +"//"
	String sGet_DealerAddress_BasedOnDealerID_FromAppDB = runSQLQuery_FetchMultipleValues_WithWarning(query,requiredField)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerAddress_BasedOnDealerID_FromAppDB","Failed", "","")
	return sGet_DealerAddress_BasedOnDealerID_FromAppDB
//***********************************************************************************************************************************
//@Method: update_DealerAddress_BasedOnDealerID_FromAppDB
//@Author Karthik
//@Date 06 Sep 2019
//@Description This function will update the dealer Address 2 field value && Phone Number in Location Table
//Ex:  update_DealerAddress_BasedOnDealerID_FromAppDB("106000000003","DEALER","MAILING","addr2","Latke View")
//Ex:  update_DealerAddress_BasedOnDealerID_FromAppDB("106000000003","DEALER","MAILING","addr1","#28987")
//************************************************************************************************************************************
update_DealerAddress_BasedOnDealerID_FromAppDB(String dealerID,String dealerType,String addrType,String colName,String valuetoSet)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Query
	String query = "update bp_location_tbl AppObject " + colName + " = //" + valuetoSet + "// where loc_id = //"+ dealerID +"// && loc_type = //"+ dealerType +"// && loc_class = //"+ addrType +"//"
	//running the SQL Querys
	  runUpdateSQLQuery(query)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerAddress_BasedOnDealerID_FromAppDB","Failed", "","")

//***********************************************************************************************************************
//@methodName: get_BusinessAgentCount_BasedOn_AgentType_FromDB(agentType)
//@Author: Karthik.Shekar
//@Date 24 Oct 2019
//@Description This will get Business Agent count based on agent type from DB
//Ex:  get_BusinessAgentCount_BasedOn_AgentType_FromDB("GARNAGNT")
//Ex:  get_BusinessAgentCount_BasedOn_AgentType_FromDB("REPOAGNT")
//***********************************************************************************************************************
String get_BusinessAgentCount_BasedOn_AgentType_FromDB(String agentType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sResult, sGet_BusinessAgentCount_BasedOn_AgentType_FromDB
	//run query to fetch loan number
	 sResult = runSQLQuery_WithWarning_WithoutExit("select Count(dba_name) from bp_business_agent_tbl where agent_type = //"+agentType+"//","count(bp_business_agent_tbl.dba_name)")
	 if sResult != "" 
		 	sGet_BusinessAgentCount_BasedOn_AgentType_FromDB = sResult
	 else
		 	sGet_BusinessAgentCount_BasedOn_AgentType_FromDB = "0"
	 if GetErrorCount()>0 
			 writeReportLog("Failed in step/get_BusinessAgentCount_BasedOn_AgentType_FromDB","Failed", "","")
	return sGet_BusinessAgentCount_BasedOn_AgentType_FromDB

//***********************************************************************************************************************************
//@Method: getPaymentType_BasedOnTransID_FromDB(transID,requiredFields)
//@Author Chandra
//@Date 25 Nov 2019
//@Description This function is to get the Value from Payment Account table based trans ID from DB
//Ex:  getPaymentType_BasedOnTransID_FromDB(transID,requiredFields)
//************************************************************************************************************************************
String getPaymentType_BasedOnTransID_FromDB(String transID,String requiredFields)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGetPaymentType_BasedOnTransID_FromDB = runSQLQuery("select * from  bp_account_payment_tbl where trans_id = //"+ transID +"//",requiredFields)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: getPaymentType_BasedOnTransID_FromDB","Failed", "" ,"")
	return sGetPaymentType_BasedOnTransID_FromDB

//msgbox getDealerStateBasedOnLoanNumber("088100009483")
String getDealerStateBasedOnLoanNumber(String loanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGetDealerStateBasedOnLoanNumber = runSQLQuery("select state from bp_dealer_tbl where dealer_id = (select dealer_id from bp_account_tbl where loan_nbr = //" + loanNumber + "//)","state")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: getPaymentType_BasedOnTransID_FromDB","Failed", "" ,"")
	return sGetDealerStateBasedOnLoanNumber

//***********************************************************************************************************************
//@methodName: get_BusinessAgent_FromAppDB
//@Author: Karthik
//@Date 28 Aug 2019
//@Description This will get Business Agent from DB
//Ex:  get_BusinessAgent_FromAppDB("Y","Repossession","dba_name")
//     get_BusinessAgent_FromAppDB("N,"Garnishment","agent_id")
//***********************************************************************************************************************
String get_BusinessAgent_FromAppDB(String activeYN,String agentType,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//	//run SQL Query
	//	requiredValue = runSQLQuery_WithWarning_WithoutExit("select * from bp_business_agent_tbl", requiredFieldName)
	//Query
	String dbAgentType, sGet_BusinessAgent_FromAppDB
	 String query = "Select * from bp_business_agent_tbl where active_yn = //" + activeYN + "//" 
	 //Constructing the Query based on Criteria
	  if agentType.ToUpper() =="REPOSSESSION"
		  	dbAgentType = "REPOAGNT"
		  	query = query + " && agent_type = //" + dbAgentType + "//" 
	  else if agentType.ToUpper() =="GARNISHMENT"
		  	dbAgentType = "GARNAGNT"
		  	query = query + " && agent_type = //" + dbAgentType + "//" 
	  else if agentType.ToUpper() == "OTHERS"
		  	dbAgentType = "OTHERAGENT"
		  	query = query + " && agent_type = //" + dbAgentType + "//" 
	  else if agentType.ToUpper() =="ALL" ||  agentType.Trim().Length() == 0
		  	query = query
	  else
	  	 writeReportLog("AgentType " + agentType +" passed to function get_BusinessAgent_FromAppDB is not corect","Failed","","")
	  query = query + " order by rand()"
	  //Returning 
	  sGet_BusinessAgent_FromAppDB = runSQLQuery(query,requiredFieldName) 
	  //Error Handling
	 if GetErrorCount()>0 
			 writeReportLog("Failed in step/get_BusinessAgent_FromAppDB","Failed", "","")
	return sGet_BusinessAgent_FromAppDB

//***********************************************************************************************************************
//@methodName: get_MailingAddress_FromAppDB(requiredFieldName)
//@Author: Karthik
//@Date 28 Aug 2019
//@Description This will get Business Agent from DB
//Ex:  get_MailingAddress_FromAppDB("addr1:addr2:city:state:zipcode")
//***********************************************************************************************************************
String get_MailingAddress_FromAppDB(String requiredFieldNames)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String requiredValue, sGet_MailingAddress_FromAppDB
	//run SQL Query
	requiredValue = runSQLQuery_FetchMultipleValues_WithWarning("select * from bp_location_tbl where loc_type = //BRANCH// && loc_class = //MAILING//",requiredFieldNames)
	//Returning the value
	sGet_MailingAddress_FromAppDB = requiredValue
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_MailingAddress_FromAppDB","Failed", "" ,"")
	return sGet_MailingAddress_FromAppDB

//***********************************************************************************************************************************
//@Method: get_GLDescription_BasedOnTransID_FromDB(colName)
//@Author Chandra
//@Date 19 Aug 2019
//@Description This function is get the GL Description based on Transaction ID from DB
//@Returning the GL Description
//Ex:  get_GLDescription_BasedOnTransID_FromDB("0000087854564")
//************************************************************************************************************************************
String get_GLDescription_BasedOnTransID_FromDB(String transactionID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String GL_Descr, rowCount, sGet_GLDescription_BasedOnTransID_FromDB
	String Coa_Details, GL_All_Description
	Integer RowCount_DB
	GL_Descr = ""
	rowCount = ""
	//Get Row Count from General Ledger details tbl in DB
	rowCount = get_COA_RowCount_BasedOnTransactionID_FromDB(transactionID)
	
	//Getting GL Description based on Transaction ID 
	for (Integer RowCount_DB = 1;RowCount_DB<=Integer.Parse( rowCount); RowCount_DB++)
		//COA number getting based on row && Trans ID
		Coa_Details = get_Data_In_GeneralLedgerDetailTbl_FromDB(RowCount_DB,transactionID,"coa")
		//Get GL Description from chart account tble from DB based on COA number
		GL_Descr = get_GLDescription_In_ChartAccountTbl_FromDB(Coa_Details)
		//Getting all the GL Description additng to variable
		GL_All_Description = Coa_Details + " " + GL_Descr + "||" + GL_All_Description
	sGet_GLDescription_BasedOnTransID_FromDB = GL_All_Description
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_GLDescription_BasedOnTransID_FromDB","Failed", "","Y")
	return sGet_GLDescription_BasedOnTransID_FromDB

//***********************************************************************************************************************************
//@Method: get_GLDescription_BasedOnTransID_FromDB(transactionID)
//@Author Chandra
//@Date 19 Aug 2019
//@Description This function is get the Row Count based on Transaction ID from DB (Chart account tbl & genral ledger details tbl)
//@Returning the Row Count
//Ex:  get_COA_RowCount_BasedOnTransactionID_FromDB("000001237845")
//************************************************************************************************************************************
String get_COA_RowCount_BasedOnTransactionID_FromDB(String transactionID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String requiredValue
	//Get Data from Bank Details Table based Last Entry Date record
	requiredValue = runSQLQuery("select Count(*) from bp_chart_accounts_tbl where coa in (select coa from bp_general_ledger_detail_tbl where trans_id = //"+ transactionID +"//)","count(*)")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_COA_RowCount_BasedOnTransactionID_FromDB","Failed", "","Y")
	return requiredValue

//***********************************************************************************************************************************
//@Method: get_Data_In_GeneralLedgerDetailTbl_FromDB(rowNumber,transactionID,requiredFields)
//@Author Chandra
//@Date 19 Aug 2019
//@Description This function is get the Data in Genral ledger details tbl based on row number, Transaction ID && like coa, account id from DB (Chart account tbl & genral ledger details tbl)
//@Returning the Row Count
//Ex:  get_Data_In_GeneralLedgerDetailTbl_FromDB("1","00000214586","coa")
//************************************************************************************************************************************
String get_Data_In_GeneralLedgerDetailTbl_FromDB(Integer rowNumber,String transactionID,String requiredFields)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String requiredValue
	//Get Data from Bank Details Table based Last Entry Date record
	requiredValue = runSQLQuery("select TOP 1 START AT "+ "{rowNumber}" +" * from bp_chart_accounts_tbl where coa in (select coa from bp_general_ledger_detail_tbl where trans_id = //"+ transactionID +"//)",requiredFields)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_Data_In_GeneralLedgerDetailTbl_FromDB","Failed", "","Y")
	return requiredValue

//***********************************************************************************************************************************
//@Method: get_GLDescription_In_ChartAccountTbl_FromDB(coa_ID)
//@Author Chandra
//@Date 19 Aug 2019
//@Description This function is get the GL description from DB based on COA number (Chart account tbl)
//@Returning the Row Count
//Ex:  get_GLDescription_In_ChartAccountTbl_FromDB("1002")
//************************************************************************************************************************************
String get_GLDescription_In_ChartAccountTbl_FromDB(String coa_ID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Get Data from bp_chart_accounts_tbl based on COA number
	String requiredValue = runSQLQuery("select * from bp_chart_accounts_tbl where coa = //"+ coa_ID +"//","descr")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_GLDescription_In_ChartAccountTbl_FromDB","Failed", "","Y")
	return requiredValue

//*********************************************************************************************
//@methodName: update_CashDrawerUserSecurityLevel_BasedOnUser(securiyLevel,cashDrawerUserID)
//@Author Chandra
//@Date 27 Aug 2019
//@Description This is to Update the Security level less than 400 based on User Id in DB
//Ex: Result = update_CashDrawerUserSecurityLevel_BasedOnUser("300","csw")
//*********************************************************************************************
update_CashDrawerUserSecurityLevel_BasedOnUser(String securiyLevel,String cashDrawerUserID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") +"Update_CashDrawerUser_SecurityLevel_SQLQuery.txt")
	//Replace the UserID 
	query = query.Replace("@UserID@",cashDrawerUserID)
	//Replace the Security Level
	query = query.Replace("@securityLevel@",securiyLevel)
	//Run Sql Query
	 runUpdateSQLQuery(query)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: update_CashDrawerUserSecurityLevel_BasedOnUser","Failed", "","Y")

//*********************************************************************************************
//@methodName: get_DealerDetails_FromAppDB(holdback_Type,discountAmount,requiredField)
//@Author Chandra
//@Date 07 May 2019
//@Description This is get the Dealer Name from App DB
//@Returing the Dealer Name
//Ex  get_DealerDetails_FromAppDB("Y","DISCOUNT","100","short_name")
//	 get_DealerDetails_FromAppDB("N","RESERVE","200","short_name")
//*********************************************************************************************
String get_DealerDetails_FromAppDB(String dealerStatus,String holdback_Type,String discountAmount,String requiredField)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Query
	String sGet_DealerDetails_FromAppDB
	String query = "Select * from bp_dealer_tbl where active_yn = //"+ dealerStatus.ToUpper() +"// && holdback_type = //"+ holdback_Type.ToUpper() +"//"
	//if Discount Amount is empty ignore
	if dealerStatus.ToUpper() == "Y" 
		query = query + " && discount_amt <= //"+ discountAmount +"//"
	sGet_DealerDetails_FromAppDB = runSQLQuery(query,requiredField)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerDetails_FromAppDB","Failed", "","")
	return sGet_DealerDetails_FromAppDB

//************************************************************************************************************************************************
//@Method: get_ChargeFromDB(stateName,acct_type,opt_type,order,effectiveDate)
//@Author Deepthi
//@Date 17 Jan 2020
//@Description This function is to get the NSF amount from DB
// get_ChargeFromDB("IN",//55//,//NSF_CHRG//,//2020-01-01//)
//**************************************************************************************************************************************************
String get_ChargeFromDB(String stateName,String acct_type,String opt_type,String order,String effectiveDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query
	String sGet_ChargeFromDB, query, sResult
	//String query = "Select * from bp_charge_calc_tbl where state =//"+stateName+"// && opt = //NSF_CHRG// order by start_dt "+order+""
	query="select * from bp_charge_calc_tbl where state = //"+stateName+"// && acct_type = //"+acct_type+"// && opt = //"+opt_type+"// && date(start_dt) "+order+" //"+effectiveDate+"//"
	//Updating the Query in the UFT Log
	Print ("Query to get latest Late Charge amount && Start date from DB",query)
	//Returing the start date && late charge amount
	sResult = runSQLQuery_FetchMultipleValues_WithWarning(query,"start_dt;amt")	
	//StartDate = Split(result,";")(0)
	sGet_ChargeFromDB = sResult.Split(";")[2]
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_ChargeFromDB ","Failed", "","")
	return sGet_ChargeFromDB

//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate(dealerState,stateoperator,fundingDate,fundingDateOperator,accounttype)
//@Author Deepthi
//@Date 16 Jan 2020
//@Description This function is to get the Loan number from DB based on the selected dealer
//Example:  get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate("NC","=",01-01-2020",">","55")
//***********************************************************************************************************************************************
String get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate(String dealerState,String stateoperator,String fundingDate,String fundingDateOperator,String accounttype)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query
	String sGet_LoanNumberFromDB_BasedOnDealerStateAndFundingDate
	String query = "Select * from bp_account_tbl where dealer_id in (select dealer_id from bp_dealer_tbl where state "+stateoperator+"//"+dealerState+"//) && acct_status= //ACTIVE// && acct_type=//"+accounttype+"// && funding_dt "+fundingDateOperator+" //"+fundingDate+"//  order by rand()"	
	//Updating the Query in the UFT Log
	Print ("Query to get loan number from DB where Late Charge is applicable",query)
	//Returing the loan number  
	sGet_LoanNumberFromDB_BasedOnDealerStateAndFundingDate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate","Failed", "","")
	return sGet_LoanNumberFromDB_BasedOnDealerStateAndFundingDate

//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate
//@Author Deepthi
//@Date 20 Jan 2020
//@Description This function is to get the loan number form DB based on the Payment Type passed to method along with Loan Functing Date && Account Type
//@Return Loan Number
//Example:get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate("CHECKPAY","N","01-01-2020,">","55")
//        get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate("CASH","N","01-01-2020,"<","56)
//***********************************************************************************************************************************************
String get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate(String paymentType,String reversedYn,String fundingDate,String fundingDateOperator,String accounttype)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query
	String query = "Select * from bp_account_tbl where acct_id in(select acct_id from bp_account_payment_tbl where  pmt_type=//"+paymentType+"// && reversed_yn=//"+reversedYn+"//) && acct_status= //ACTIVE// && acct_type=//"+accounttype+"// && funding_dt "+fundingDateOperator+" //"+fundingDate+"// order by rand()"
	//Updating the Query in the UFT Log
	Print ("Query to get loan number from DB where Late Charge is applicable",query)
	//Returing the loan number  
	 String sGget_LoanNumberFromDB_BasedOnPaymentype_Fundingdate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate","Failed", "","")
	return sGget_LoanNumberFromDB_BasedOnPaymentype_Fundingdate

//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_BasedOnFundingDate(fundingDate,fundingDateOperator,accounttype)
//@Author Deepthi
//@Date 16 Jan 2020
//@Description This function is to get the Loan number from DB based on the selected dealer
//Example:  get_LoanNumberFromDB_BasedOnFundingDate("2020-01-01",">","55")
String get_LoanNumberFromDB_BasedOnFundingDate(String affiliationType,String fundingDate,String fundingDateOperator,String accounttype)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query
	String sGet_LoanNumberFromDB_BasedOnFundingDate
	String query = "Select * from bp_account_tbl  where acct_status= //ACTIVE// && acct_type=//"+accounttype+"// && funding_dt "+fundingDateOperator+" //"+fundingDate+"//"	
	if affiliationType.ToUpper() == "PRIMARY" 
		query =  query + " && acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) && affil_type = //PRIMARY//)"
	else if affiliationType.ToUpper() == "COSIGN" || affiliationType.ToUpper() == "JOINT" 	
		   query =  query + " && acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) && affil_type = //" + affiliationType.ToUpper() + "//)"
	//Appending Order by
	query = query + " order by rand()"
	//Updating the Query in the UFT Log
	Print ("Query to get loan number from DB where Late Charge is applicable",query)
	//Returing the loan number  
	  sGet_LoanNumberFromDB_BasedOnFundingDate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("get_LoanNumberFromDB_BasedOnFundingDate","Failed", "","")
	return sGet_LoanNumberFromDB_BasedOnFundingDate
//
////************************************************************************************************************************************************
////@Method: get_ChargeFromDB(stateName,acct_type,opt_type,order,effectiveDate)
////@Author Deepthi
////@Date 17 Jan 2020
////@Description This function is to get the NSF amount from DB
//
//// get_Latest_NSFAmount_And_StartDate_FromDB("IN",//55//,//NSF_CHRG//,//2020-01-01)
//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate(paymentType,reversedYn,dealerState,stateoperator,fundingDate,fundingDateOperator,accounttype)
//@Author Deepthi
//@Date 20 Jan 2020
//@Description This function is to get the loan form DB which has check payment
//Example:get_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate("CHECKPAY//,"N","NC","=","2020-01-01",">","55")
//***********************************************************************************************************************************************
String get_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate(String paymentType,String reversedYn,String dealerState,String stateoperator,String fundingDate,String fundingDateOperator,String accounttype)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGet_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate
	//query
	String query = "Select * from bp_account_tbl where acct_id in (select acct_id from bp_account_payment_tbl where  pmt_type=//"+paymentType+"// && reversed_yn=//"+reversedYn+"// && entry_dt "+fundingDateOperator+" //"+fundingDate+"//) && dealer_id in (select dealer_id from bp_dealer_tbl where state=//"+dealerState+"//) && acct_status= //ACTIVE// && acct_type=//"+accounttype+"// && funding_dt "+fundingDateOperator+" //"+fundingDate+"// order by rand()"	
	//Updating the Query in the UFT Log
	Print ("Query to get loan number from DB Based on Payment Type && Funding Date ",query)
	//Returing the loan number  
	 sGet_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
	   //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate","Failed", "","")
	return sGet_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate

//********************************************************************************************
//@Method get_random_DealerName_BasedOnDealerState_FromAppDB(stateOperator,state,dealerStatus)
//@Author Deepthi 
//@Date 23 Jan 2020
//@Description this function will get the Dealer Name D based on the Dealer Status && dealer state Passed
//@Return DealerName
//Example:  get_random_DealerName_BasedOnDealerState_FromAppDB("=","NC","Y")
//********************************************************************************************
String get_random_DealerName_BasedOnDealerState_FromAppDB(String stateOperator,String state,String dealerStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Query
	String query = "Select * from bp_dealer_tbl where state "+stateOperator+" //"+state+"// && active_yn = //"+ dealerStatus.ToUpper() +"//" + " order by rand()"		
	 //Returing the Value
	 String sGet_random_DealerName_BasedOnDealerState_FromAppDB = runSQLQuery_WithWarning_WithoutExit(query,"short_name")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("get_random_DealerName_BasedOnDealerState_FromAppDB","Failed", "","")
	return sGet_random_DealerName_BasedOnDealerState_FromAppDB
//********************************************************************************************
//@Method get_DealerName_BasedOnLoanNumber_FromAppDB(LoanNumber)
//@Author Deepthi 
//@Date 23 Jan 2020
//@Description this function will get the dealer ID based on the Loan Number
//@Return DealerName
//Example:  get_DealerName_BasedOnLoanNumber_FromAppDB("LoanNumber")
//********************************************************************************************
String get_DealerName_BasedOnLoanNumber_FromAppDB(String LoanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Query
	String sGet_DealerName_BasedOnLoanNumber_FromAppDB
	String query = "Select short_name from bp_dealer_tbl where dealer_id = (select dealer_id from bp_account_tbl where loan_nbr = //"+LoanNumber+"//)"		
	 //Returing the Value
	 sGet_DealerName_BasedOnLoanNumber_FromAppDB = runSQLQuery_WithWarning_WithoutExit(query,"short_name")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("get_DealerName_BasedOnLoanNumber_FromAppDB","Failed", "","")
	return sGet_DealerName_BasedOnLoanNumber_FromAppDB

//*********************************************************************************************
//@methodName: get_LoanNumber_FromDB_Where_AppObjecttlementNotExists_BasedOnComponentsRequired(AccountStatus,AccountTypeCode,UI_Del_Status,CPIAndPFSRequired)
//@Author Sumithra
//@Date 12 Nov 2019
//@Description This return the loan number where AppObjecttlement not exist based on components presents
//Ex  get_LoanNumber_FromDB_Where_AppObjecttlementNotExists_BasedOnComponentsRequired(AccountStatus,AccountTypeCode,UI_Del_Status,CPIAndPFSRequired)
// get_LoanNumber_FromDB_Where_AppObjecttlementNotExists_BasedOnComponentsRequired("Active","","","N")
// get_LoanNumber_FromDB_Where_AppObjecttlementNotExists_BasedOnComponentsRequired("Active","55","","","N","N")
//EX: get_LoanNumber_FromDB_Where_AppObjecttlementNotExists_BasedOnComponentsRequired("CHARGEDOFF","55","PRIMARY","","N","N")
//*********************************************************************************************
String get_LoanNumber_FromDB_Where_AppObjecttlementNotExists_BasedOnComponentsRequired(String AccountStatus,String AccountTypeCode,String affiType,String UI_Del_Status,String CPIAndPFSRequired,String VSCComponentRequired)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query, sGet_LoanNumber_FromDB_Where_AppObjecttlementNotExists_BasedOnComponentsRequired
	String affiliation_Type, Components, loanNumber, VSCComponents, AccountType_Code, delinquencyStatus
	if UI_Del_Status != "" 
		 //Get ID Based on Delinquency Status && Contractual status
		 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
		delinquencyStatus = "and del_status = //"+ delinqStatus  +"// && contractual_status = //"+ contractual_status  +"//"
	if AccountTypeCode != ""  		
		AccountType_Code = " && acct_type=//" + AccountTypeCode +"// "
	if affiType != "" 
		 if affiType.ToUpper () == "PRIMARY" 
			affiliation_Type =  " && acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) && affil_type = //PRIMARY//)"
		else if affiType.ToUpper () == "COSIGN" || affiType.ToUpper ()== "JOINT" 	
			 		affiliation_Type = " && acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) && affil_type = //" + affiType.ToUpper ()+ "//)"
				// affiliation_Type = " && acct_id in (select acct_id from bp_account_customer_affil_tbl where affil_type = //"+affiType+"//)"
					//query to run 
	if CPIAndPFSRequired.Trim() == "" || CPIAndPFSRequired.Trim().Length() == 0 
		//Ignore		
	else if CPIAndPFSRequired == "N" 
		//Components = "and acct_id not in (select acct_id from bp_account_component_tbl where opt in(//GAP//,//CPI//)  group by acct_id)"
		Components = "and acct_id not in (select distinct(acct_id) from bp_account_Component_tbl where descr like //%GAP%// || opt = //CPI//)"
	else if CPIAndPFSRequired == "Y" 
		Components = "and acct_id  in (select acct_id from bp_account_component_tbl where opt =//GAP// || opt = //CPI// && end_dt >= getdate(*) group by acct_id)"
	else
		 writeReportLog("Wrong Parameter passed for Component","Failed", "","")	
	if VSCComponentRequired.Trim() == "" || VSCComponentRequired.Trim().Length() == 0 
		//Ignore		
	else if VSCComponentRequired == "N" 
		VSCComponents = "and acct_id not in (select acct_id from bp_account_component_tbl where opt like //WAR%// group by acct_id)"
	else if VSCComponentRequired == "Y" 
		VSCComponents = "and acct_id in (select acct_id from bp_account_component_tbl where opt = //WAR36// && end_dt >= getdate(*) group by acct_id)"
	else
		 writeReportLog("Wrong Parameter passed for VSC Component","Failed", "","")	
	 query = "Select * from support.bp_account_tbl where acct_status =//" + AccountStatus + "//" +AccountType_Code + delinquencyStatus + affiliation_Type + " && acct_id not in (select acct_id from bp_account_AppObjecttlement_tbl)  " + Components + VSCComponents +" order by rand()"
	//UFT Logger
	 LogSuccessMessage("AppObjecttlement query", query)
	//Fetching the loan number from DB
	loanNumber = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	//if Loan are not available 
	if loanNumber == "0" 
		// writeReportLog("<b> <font color=//orange//> No Loans found for Criteria " + AccountStatus + "|" + AccountTypeCode + "|" + affiType +"|"+ UI_Del_Status + "</font> </b>" ,"Passed",FailComments,"")
		 LogWarning("No Loans found for Criteria " + AccountStatus + " | " + AccountTypeCode + " | " + affiType +" | "+ UI_Del_Status )
	sGet_LoanNumber_FromDB_Where_AppObjecttlementNotExists_BasedOnComponentsRequired = loanNumber
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_FromDB_Where_AppObjecttlementNotExists_BasedOnComponentsRequired","Failed", "","")
	return sGet_LoanNumber_FromDB_Where_AppObjecttlementNotExists_BasedOnComponentsRequired
//*************************************************************************************************************
//@methodName : get_DailyMangrActivityDescription_FromDB(rowId,currentState,todayDate,branchID,ChartAcctType,colName)
//@Author     : GG
//@Date       : 13 FEB 2019
//@Description: This will select/Unselect the checkbox in Daily Closing Window
//Ex:  get_DailyMangrActivityDescription_FromDB(1,"SC","02-13-2018","ASAppObjectCUR","0874","chart_account_id")
//*************************************************************************************************************
String get_DailyMangrActivityDescription_FromDB(String rowId,String currentState,String todayDate,String ChartAcctType,String branchID,String colName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query, sGet_DailyMangrActivityDescription_FromDB
	//Get the Cash Drawer from the Shared Location
	query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "Daily_Managers_ReportSQLQuery.txt")
	//Replace the Current State, branchId && Row number Dynamicaly
	query = query.Replace("$currentState$",currentState)
	query = query.Replace("$rowId$",rowId)
	query = query.Replace("$branchID$",branchID)
	//Replace the Today//s Date Dynamicaly
	query = query.Replace("$todayDate$",todayDate)
	//Replace the Chart of Account Type Dynamicaly
	query = query.Replace("$ChartAcctType$",ChartAcctType)
	//Updating the Query in the UFT Log
	Print ("Query to Identify the Total Description Count of Daily manager report table Based on State,Date && Chart of Account Type:",query)
	//Returing the Descrition Field name of AsAppObjects/Liability,Income,Expense from DB
	sGet_DailyMangrActivityDescription_FromDB = runSQLQuery(query,colName)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_DailyMangrActivityDescription_FromDB","Failed", "" ,"")
	return sGet_DailyMangrActivityDescription_FromDB
//*****************************************************************************************************************************************
//@methodName: get_TotalPriceAndBeginAmt_AsAppObject_Liability_Income_Expense_FromDB(str_FilePath,reportType,nodeTreeName,nodeName)
//@Description: This function is to get the Total Amount of Income, Expense,Liability && AsAppObjects Section in Daily Managers Report
//@Author: GG
//@Date 20 FEB 2019
//Ex:  get_TotalPriceAndBeginAmt_AsAppObject_Liability_Income_Expense_FromDB("02/12/2019","CR","ASAppObjectCUR","0874")
//*****************************************************************************************************************************************
String get_TotalPriceAndBeginAmt_AsAppObject_Liability_Income_Expense_FromDB(String todayDate,String creditType,String ChartAcctType,String branchID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query, sGet_TotalPriceAndBeginAmt_AsAppObject_Liability_Income_Expense_FromDB
	//Get the Cash Drawer from the Shared Location
	query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "DailyManagesReport_TotalAmount_AsAppObject_Expense_Income_Liability_SQLQuery.txt")
	//Replace the Current State, branchId && Row number Dynamicaly
	query = query.Replace("$branchID$",branchID)
	//Replace the Today//s Date Dynamicaly
	query = query.Replace("$todayDate$",todayDate)
	//Replace the Chart of Account Type Dynamicaly
	query = query.Replace("$ChartAcctType$",ChartAcctType)
	//Replace the Chart of Account Type Dynamicaly
	query = query.Replace("$creditType$",creditType)
	//Updating the Query in the UFT Log
	Print ("Query to Identify the Total Description Count of Daily manager report table Based on State,Date && Chart of Account Type:",query)
	//Returing the Descrition Field name of AsAppObjects/Liability,Income,Expense from DB
	sGet_TotalPriceAndBeginAmt_AsAppObject_Liability_Income_Expense_FromDB = runSQLQuery_FetchMultipleValues(query,"begin income:period income")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_TotalPriceAndBeginAmt_AsAppObject_Liability_Income_Expense_FromDB","Failed", "" ,"")
	return sGet_TotalPriceAndBeginAmt_AsAppObject_Liability_Income_Expense_FromDB
//*****************************************************************************************
//@methodName : get_DailyMangrActivityCount_FromDB(branchID,todayDate,ChartAcctType)
//@Author     : GG
//@Date       : 13 FEB 2019
//@Description: This will select/Unselect the checkbox in Daily Closing Window
//Ex:  get_DailyMangrActivityCount_FromDB("0874","02-13-2019","ASAppObjectCUR")
//*****************************************************************************************
 String get_DailyMangrActivityCount_FromDB(String branchID,String todayDate, String ChartAcctType)
	//Get the Daily Managers Report query from the Shared Location	
	String query, sGet_DailyMangrActivityCount_FromDB
	query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "DailyManagerReportCount_SQLQuery.txt")
	//Replace the BranchID Dynamicaly
	query = query.Replace("$branchID$",branchID)
	//Replace the Today//s Date Dynamicaly
	query = query.Replace("$todayDate$",todayDate)
	//Replace the Chart of Account Type Dynamicaly
	query = query.Replace("$ChartAcctType$",ChartAcctType)
	//Updating the Query in the UFT Log
	Print ("Query to Identify the Total Count of Daily manager report table Based on State,Date && Chart of Account Type:",query)
	//Returing the total count of AsAppObjects/Liability,Income,Expense fields from DB
	sGet_DailyMangrActivityCount_FromDB = runSQLQuery(query,"Count(*)")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_DailyMangrActivityCount_FromDB","Failed", "" ,"")
	return sGet_DailyMangrActivityCount_FromDB

//*****************************************************************************************
//@methodName : get_Entire_File_Content(String sFilePath)
//@Author     : Lokesh
//@Date       : 26 Sept 2023
//@Description: This will get the content of the file
//Ex:  get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "DailyManagerReportCount_SQLQuery.txt")
//*****************************************************************************************
String get_Entire_File_Content(String sFilePath)
	// variables
	TextFile MyFile 
	MyFile.Open (sFilePath, FileMode.Read, FileEncoding.UTF16)
	String sLine , sTemp = ""
	while (MyFile.Read (sLine))
		sTemp = sTemp+sLine
	return sTemp

// Returns List of Values
String runSQLQuery_FetchMultipleValues(String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Variable declaration
	String conn, rs, outputString = ""
	Database db
	List<String> lsValues
	Integer i
	//Object declaration
	// AppObject conn= createobject("adodb.connection")
	// AppObject rs = createobject("adodb.recordAppObject")
	//Connection string
	conn =  "Dsn=branch;Uid=support;Pwd=sql;"
	db.Connect(conn)
	//Executing the Query
	db.Execute(query)
	db.FetchToList(lsValues)
	   //Validating for Query No Results
	if lsValues == null
		 writeReportLog("Looks Like Query >> " + query +  " did not found any record","Failed", "","")
	else
		 //splitting the name
		lsValues = requiredFieldName.Split(":")
		for (i =1; i<=lsValues.Count(); i++)
			 if i != 0 
				 	outputString = outputString + ":"
				 requiredFieldName = lsValues[i]
				 outputString = outputString + requiredFieldName
	db.Disconnect ()
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: runSQLQuery_FetchMultipleValues","Failed", "" ,"")
	//Returing the Value
	return outputString 
	
//****************************************************************
//@Method set_ONLINE_PMTS_TEST_URL_InLocalDB
//@Description this method will update the Domain in BP_Website_Tbl for "Online PMTS Test" field
//@Param serverType --> QA || DEV
//@Author Karthik.Shekar
//
//@EX: set_ONLINE_PMTS_TEST_URL_InLocalDB("QA")
//********************************************************************
set_ONLINE_PMTS_TEST_URL_InLocalDB(String serverType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	if serverType == "QA" 
		 update_Domain_In_BP_Website_Table_FromDB("ONLINE PMTS TEST",System.GetEnvVar("QAServerURL"))
	else if serverType == "DEV" 
		 update_Domain_In_BP_Website_Table_FromDB("ONLINE PMTS TEST",System.GetEnvVar("DevSQLServerURL"))
	else
		 writeReportLog("Wrong Value " + serverType +  "Passed to AppObject_HO_Domain_InLocalDB ","","","")

//************************************************************************************************
//@MethodName enableOrDisableFeature_In_SQLServer_HODB
//@Description This Method will Enable || Disable the Featrue in SQL HO DB for the Specified Feature && Branch ID
//@Param serverType --> QA || DEV
//		branchID --> Pass the Branch ID for which you want to make changes
//		featureName --> Specify the Feature Name
//		statustoSet --> Pass Y || N || Enable || Disable
//@Author Karthik.SHekar
//@Date 14 Feb 2019
//EX: enableOrDisableFeature_In_SQLServer_HODB("DEV","0881","AutoPayments","DISABLE")
//EX: enableOrDisableFeature_In_SQLServer_HODB("QA","0881","AutoPayments","Y")
//****************************************************************************************************
enableOrDisableFeature_In_SQLServer_HODB(String serverType,String branchID,String featureName,String statustoSet)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String featureYn, featureQuery
	if statustoSet.ToUpper() == "ENABLE" || statustoSet.ToUpper() == "Y" 
		featureYn = "Y"
	else if statustoSet.ToUpper() == "DISABLE" || statustoSet.ToUpper() == "N" 
		featureYn = "N"
	else
		 writeReportLog("Please Pass Proper Input to enableOrDisableFeature_In_SQLServer_HODB","Failed","Either Y || N","")
	//Run update Query
	featureQuery =  "update bp_feature_tbl AppObject feature_yn = //" + featureYn + "// where feature = //"+ featureName + "// && branch_id = //"+ branchID +"//"
	//Logger
	 LogSuccessMessage("Feature update Query (HO DB) >>" +  featureQuery,"")
	 	//Run Update Query
	 	 updateSQLQuery_InSQLServer_HO_BasedOnServer(serverType,featureQuery)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in enableFeatureInDB","Failed", "","")

//******************************************************
//@Method getAccountID_From_DB_basedOnLoanNumber
//@Description This method will get the Accoutn ID from DB based on Loan Number
//@Return Acct_ID 
//@Author Karthik.Shekar
//@Data 14 Feb 2020
//EX:getAccountID_From_DB_basedOnLoanNumber("088100001456")
//**********************************************************
String getAccountID_From_DB_basedOnLoanNumber(String loanNum)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGetAccountID_From_DB_basedOnLoanNumber = runSQLQuery("select acct_id from bp_account_tbl where loan_nbr = //"+ loanNum +"//","acct_id")
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getAccountID_From_DB_basedOnLoanNumber","Failed", "" ,"")
	return sGetAccountID_From_DB_basedOnLoanNumber

//*****************************************************************************************************************************************
//@methodName: get_ApprovedDate_EntryDate_And_LastChangedDate_for_AppObjecttlements_FromDB(loanNumber,requiredFieldNames)
//@Description: This function is to get the approved date,entry date && last changed date for AppObjecttlement from DB
//@Author: Sumithra
//@Date 18 Nov 2019
//Ex:  get_ApprovedDate_EntryDate_And_LastChangedDate_for_AppObjecttlements_FromDB("106000008435","approved_userid;approved_dt;entry_userid;entry_dt;last_chg_dt;last_chg_userid")
//*****************************************************************************************************************************************
String get_ApprovedDate_EntryDate_And_LastChangedDate_for_AppObjecttlements_FromDB(String loanNumber,String requiredFieldNames)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query = "Select stlmnt.approved_userid as AppObjecttlement_ApprovedID, stlmnt.approved_dt as AppObjecttlement_ApprovedDate,stlmnt.entry_userid as AppObjecttlement_EntryID, stlmnt.entry_dt as AppObjecttlement_EntryDate,stlmnt.last_chg_dt as AppObjecttlement_lastEntryDate ,stlmnt.last_chg_userid as AppObjecttlement_lastEntryID from bp_account_AppObjecttlement_tbl stlmnt, bp_account_tbl act where stlmnt.acct_id = act.acct_id && active_yn = //Y// && loan_nbr =//"+loanNumber+"//"
	   //Executing the Query Generated
	String sGet_ApprovedDate_EntryDate_And_LastChangedDate_for_AppObjecttlements_FromDB = runSQLQuery_FetchMultipleValues_WithWarning(query,requiredFieldNames)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_ApprovedDate_EntryDate_And_LastChangedDate_for_AppObjecttlements_FromDB","Failed", "","")
	return sGet_ApprovedDate_EntryDate_And_LastChangedDate_for_AppObjecttlements_FromDB

//***************************************************************************************
//@MethodName getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB
//@Description this method will get the Latest Transaction ID based on the conditions passed to method i.e., Loan number, Payment type
//			 reversedYN, transactionDateOperatior && transaction Date
//@author Karthik.Shekar
//@return TransactionID
//Ex: msgbox getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB("088100007553", "CHECKPAY", "N", "<", "2020-01-01")
//***************************************************************************************
String getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB(String loanNumber,String paymentType,String reversedYN,String transactionDateOperator,String transactionDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query = "Select trans_id from bp_account_payment_tbl where  pmt_type=//"+ paymentType + "// && reversed_yn=//" + reversedYN + "// && entry_dt "+ transactionDateOperator + " //" + transactionDate +"// && acct_id in (select acct_id from bp_account_tbl where loan_nbr =//" + loanNumber + "//) order by trans_id desc"
	//Updating the Query in the UFT Log
	Print ("Query to getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB ", query)
	//Returing the loan number  
	  String sGgetTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB = runSQLQuery(query,"trans_id")
	   //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB","Failed", "","")
	return sGgetTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB

//****************************************************************************************
//@Method Name getCurrentStateName_FullName_DB
//@Author Karthik.Shekar
//@Description this fuction will get the Full name of Current State from DB
//@Return Full State name
//@Date 10 April 2020
//Ex: msgbox getCurrentStateName_FullName_DB()
//******************************************************************************************
String getCurrentStateName_FullName_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String currentState, fullName
	currentState = getCurrentStateName_From_DB()
	String query = "Select * from bp_state_country_tbl where state = //" + currentState + "//"
	//Run query
	fullName = runSQLQuery(query,"state_name")
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getCurrentStateName_FullName_DB","Failed", "" ,"")
	return fullName

//*****************************************************************************************
//@methodName: AppObject_TestURL_DebitOrCreditCard_Payment_InDB()
//@Author Ambika
//@Date 09 oct 2019
//@Description This is to AppObject the test url before debit/credit Payment
//Ex: AppObject_TestURL_DebitOrCreditCard_Payment_InDB()
//*****************************************************************************************
Set_TestURL_DebitOrCreditCard_Payment_InDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String version, query
	version = getAppVersionNumber_From_DB()
	if version.Replace(".","").Trim() >= "950"
		//Get the query from the Shared Location 
		query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath")+"DebitOrCredit_SQLQuery_9.5.txt")
	else
		//Get the query from the Shared Location 
		query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath")+"DebitOrCredit_Repay_SQLQuery_9.4.txt")
	//run Sql  query   
	 runUpdateSQLQuery(query)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : AppObject_TestURL_DebitOrCreditCard_Payment_InDB ","Failed", "","")

//******************************************************************************************************************************************************
//@Method: getValueFromComponentTable_AppDB(acctId,valueToFetch,CompOption)
//@Author Ambika
//@Date 05 Mar 2020
//@Description: This function is to get value in component table from DB
//Ex:  getValueFromComponentTable_AppDB("106000020711","CPI","CANCEL")
//******************************************************************************************************************************************************
String getValueFromComponentTable_AppDB(String acctId,String CompOption,String valueToFetch)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGetValueFromComponentTable_AppDB, colName
	//fetching column name from db
	if valueToFetch.ToUpper() == "CANCEL" 
		colName = "cancel_yn"
	else if valueToFetch.ToUpper() == "REFUNDABLE" 
		colName = "refundable_yn"
	else if valueToFetch.ToUpper() == "COMPONENT_ID" 
		colName = "cmpnt_id"
	else
		 writeReportLog("Please pass the Proper parameter value to method getValueFromComponentTable_AppDB","Failed","","")
	//query
	String query = "Select * from bp_account_component_tbl where acct_id = //"+ acctId +"// && opt = //"+ CompOption +"// order by entry_dt desc" 
	//Executing the Query Generated
	 sGetValueFromComponentTable_AppDB = runSQLQuery(query,colName)
	   //error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getValueFromComponentTable_AppDB","Failed", "" ,"")
	return sGetValueFromComponentTable_AppDB

////****************************************************************************************************
////@method getLoanNumber_Basedon_AlliedInsuranceDate
////@Author Karthik.Shekar
////@Description This will get the Loan Number based on Allied Insurance Details Paramters which has been passed.
////				NOTE: You can Ignore a Paramter by passing Empty value ""
////@Date 12 May 2020
////@Return Loan number based on criteria specified. 
//	
//	
//
//****************************************************************************************************
//@method getLoanNumber_Basedon_AlliedInsuranceDate
//@Author Karthik.Shekar
//@Description This will get the Loan Number based on Allied Insurance Details Paramters which has been passed.
//				NOTE: You can Ignore a Paramter by passing Empty value ""
//@Date 12 May 2020
//@Return Loan number based on criteria specified. 
//@Modified by Deepthi
//@Modified Date 15 june 2020
//@ modified to retrieve the data based on coverage status
//ex: msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",true,true,"","",">","05/12/2020") //Fetching for Active Insurance
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","CHRG_OFF",true,true,"","","<","05/12/2020")//Fetching for Expired Insurance
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",true,true,"<","05/12/2020","","") //Fetching for already Canceled Insurance
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",true,true,">","05/12/2020","","")//Fetching for Future Cancel Date
//	msgbox c // Fetching for Empty Compnay Name
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE","",false,"","","","") // Fetching for Empty Poliicy Number
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("","","ACTIVE",true,true,"","","","") // if we want to ignore the Loan Type
//ex: for modified method
//   msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",true,true,"","",">","05/12/2020","") //Fetching for Active Insurance irrespective of coverage status
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","CHRG_OFF",true,true,"","","<","05/12/2020","Active")//Fetching for Expired Insurance where coverage status is active
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",true,true,"<","05/12/2020","","","Waive") //Fetching for already Canceled Insurance where coverage status is waive
//for Reference
//actStatus Codes/Values = //ACTIVE//,//APPROVED//,//CANCELLD//,//CHRG_OFF//,//CHRGBANK//,//CHRGSKIP//,//PAID_OUT//,//REDEEMED//,//REPO//,//REPOSOLD//,//REVERSED//,//SKIP//,//SOLDIER//
//************************************************************************************************************
String getLoanNumber_Basedon_AlliedInsuranceDate(String accountType,String affiType,String acctStatus,Boolean isInsCompanyName,Boolean isInsPolicyNum,String insCancelOperator,String insCancelDate,String insExpOperator,String inExpirationDate,String coverageStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGetLoanNumber_Basedon_AlliedInsuranceDate
	//Base Query
	String baseQuery = "Select * from bp_account_tbl BAT inner join bp_account_ins_allied_tbl AIAT on BAT.acct_id = AIAT.acct_id where BAT.int_type = //INT_BRNG//"
	//Constructing based on Affi Type
	if affiType.ToUpper () == "PRIMARY" 
		baseQuery =  baseQuery + " && BAT.BAT.acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) && affil_type = //PRIMARY//)"
	else if affiType.ToUpper () == "COSIGN" || affiType.ToUpper ()== "JOINT" 	
		   baseQuery = baseQuery + " && acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) && affil_type = //" + affiType.ToUpper ()+ "//)"
	//Constructing based on Account Type
	if accountType.ToUpper () == "MOTOR" ||  accountType == "56" 
		baseQuery = baseQuery + " && BAT.acct_type = //56//"
	else if accountType.ToUpper () == "AUTO" ||  accountType == "55" 
		baseQuery = baseQuery + " && BAT.acct_type = //55//"
	else if accountType.ToUpper () == "DIRECT" ||  accountType == "31" 
		baseQuery = baseQuery + " && BAT.acct_type = //31//"
	//else
		// writeReportLog("Wrong Value passed to Account Type Parameter in function getLoanNumber_Basedon_AlliedInsuranceDate","Failed","","")
	//Constructing based on Account Status
	if acctStatus.ToUpper() !="ANY" || acctStatus.Trim() == "" || acctStatus.IsNull() 
		baseQuery = baseQuery + " && BAT.acct_status = //" + acctStatus + "//"
	//Constructing based on Insurance Company Name ( Ignore if other Values are Passed )
	if isInsCompanyName.IsNull() || isInsCompanyName == false 
		baseQuery = baseQuery + " && InsurerInsuranceCompanyNam is null" 
	else if (isInsCompanyName.IsNull() == false  || isInsCompanyName == true) 
		baseQuery = baseQuery + " && InsurerInsuranceCompanyNam is not null"
	//Constructing based on Insurance Policy Number ( Ignore if other Values are Passed )
	if isInsPolicyNum.IsNull() || isInsPolicyNum == false 
		baseQuery = baseQuery + " && InsurancePolicyNumber is null" 
	else if (isInsPolicyNum.IsNull() == false  || isInsPolicyNum == true) 
		baseQuery = baseQuery + " && InsurancePolicyNumber is not null"
	//Constructing query based on Ins Cancel Date ( Ignore Only if Empty String is Passed )
	if insCancelDate.Trim().Length() > 0 
		baseQuery = baseQuery + " && convert(date,InsuranceCancel,101) "+ insCancelOperator +" convert(date, //"+ insCancelDate + "//, 101)"		
	//Constructing query based on Ins Expiration Date( Ignore Only if Empty String is Passed )
	if inExpirationDate.Trim().Length() > 0 
		baseQuery = baseQuery + " && convert(date, InsuranceExpiration,101) "+ insExpOperator + " convert(date,//"+ inExpirationDate +"//, 101)"
	//Constructing query based on Required Coverage Status && Required Coverage Ins Status
	if coverageStatus.Trim().Length() > 0 
		baseQuery = baseQuery + " && RequiredCoverageStatus = //" + coverageStatus + "//"
	//Appending the Order by
	baseQuery = baseQuery + " order by rand()"
	//Logging the Query Generated in UFT Report
	  LogSuccessMessage("Query Generated in getLoanNumber_Basedon_AlliedInsuranceDate",baseQuery)
	//Running the SQL Query && returning the value
	sGetLoanNumber_Basedon_AlliedInsuranceDate = runSQLQuery_FetchMultipleValues_WithoutExit(baseQuery,"loan_nbr")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in getLoanNumber_Basedon_AlliedInsuranceDate","Failed", "" ,"")
	return sGetLoanNumber_Basedon_AlliedInsuranceDate

//****************************************************************************************************************
//@Method getData_From_AlliedInsuranceTbl_AppDb
//@Date 13 May 2020
//@Author Karthik.Shekar
//@Description this funcntion will get the Data from Allied Insurance Tbl which is there in App(ASA) DB
//EX: msgbox getData_From_AlliedInsuranceTbl_AppDb("count","") --> To get Cnt of Records
//	msgbox getData_From_AlliedInsuranceTbl_AppDb("count","088100028892") --> to get Count of Records for a Particular Account
//	msgbox getData_From_AlliedInsuranceTbl_AppDb("rec_id:rec_date:acct_id","") --> Fetches value of 1st Record
//	msgbox getData_From_AlliedInsuranceTbl_AppDb("rec_id:rec_date:acct_id","088100028236") --> Filters data based on Account iD
//****************************************************************************************************************
String getData_From_AlliedInsuranceTbl_AppDb(String requiredFields,String accountId)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String alliedDetails, sGetData_From_AlliedInsuranceTbl_AppDb
	String query = "Select * from bp_account_ins_allied_tbl"
	//Special Conditon	
	if accountId.Trim().Length() > 0 
		query = query + " where acct_id = " + accountId		
	//Count
	if requiredFields.ToUpper() == "COUNT"
		query = query.Replace("*","count(*)")
		requiredFields = "count(*)"	
	//	if ToUpper(requiredFields) = ToUpper("Count") 
	//		String query = "Select count(*) from bp_account_ins_allied_tbl"
	//		requiredFields = "count(*)"	
	//	else if Length(Trim(accountId)) > 0 
	//		query = query + " where acct_id = " + accountId		
	//	
	//Logger
	// LogSuccessMessage("query ; getData_From_AlliedInsuranceTbl_AppDb",query)
	//Executing the Query Generated
	alliedDetails = runSQLQuery_FetchMultipleValues(query, requiredFields)
	sGetData_From_AlliedInsuranceTbl_AppDb = alliedDetails
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: getData_From_AlliedInsuranceTbl_AppDb","Failed", "" ,"")
	return sGetData_From_AlliedInsuranceTbl_AppDb

//********************************************************************************************************
//@Method getValue_InSQLServer_HO_BasedOnServer
//@Date 19 May 2020
//@Author Karthik.Shekar
//@Description This function will query the HO DB && return the Value for the field Values specified.
//@Return Values for the Column name specified
//EX: msgbox getValue_InSQLServer_HO_BasedOnServer("DEV","0881","select * from bp_feature_tbl where feature = //AutoPayments//","feature:feature_yn")
//    msgbox getValue_InSQLServer_HO_BasedOnServer("QA","1524","select * from bp_feature_tbl where feature = //AutoPayments//","feature_yn")
//********************************************************************************************************
String getValue_InSQLServer_HO_BasedOnServer(String serverType,String branchID,String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String loginSheetPath, homeOffice_Username, homeOffice_Passcode,serverName
	Database db
	String objConnection, sqlQuery,outputString = "", sGetValue_InSQLServer_HO_BasedOnServer
	List <String> lsValues
	Integer i
	 	loginSheetPath = System.GetEnvVar("BranchPlusSharedPath") + "LoginDetails.xlsx"
	// DataTable.AddSheet("Login")
	// DataTable.ImportSheet (loginSheetPath,"Login","Login")
		homeOffice_Username =DataStore.Query("NetworkUsername")
	homeOffice_Passcode =DataStore.Query("NetworkPasscode")
	//appending the Branch ID
	query = query + " && branch_id = //" + branchID + "//" 
	//Logger
	Print ("query generated to getSQLQuery_InSQLServer_HO_BasedOnServer",query)
	//Create ADODB connection object
	// AppObject objConnection = CreateObject("ADODB.Connection") 
	// //Create RecordAppObjectobject
	// AppObject objRecordAppObject = CreateObject("ADODB.RecordAppObject")
	//Connect to DB using provider && server
	if serverType == "QA" 
		// objConnection.open "provider=sqloledb;Server=s1-sql-brgqa1\inst_a;User Id="+homeOffice_Username+"; Password="+homeOffice_Passcode+"; Database=HomeOffice;Trusted_Connection=Yes"
		serverName = "s1-sql-brgqa1"
	else if serverType == "DEV" 
		 //objConnection.open "provider=sqloledb;Server=s1-sql-brgdev1\inst_a;User Id="+homeOffice_Username+"; Password="+homeOffice_Passcode+"; Database=HomeOffice;Trusted_Connection=Yes"    
		serverName = "s1-sql-brgdev1"
	else
		 writeReportLog("Wrong Value passed to serverType argument || : getValue_InSQLServer_HO_BasedOnServer","Failed","","")
	//Connect to DB
	 objConnection = "provider=sqloledb;Server="+ serverName +"\inst_a;User Id="+homeOffice_Username+"; Password="+homeOffice_Passcode+"; Database=HomeOffice;Trusted_Connection=Yes"    
	db.Connect(objConnection)
	//Write the SQL Query
	sqlQuery=query
	//Executing the Query
	db.Execute(query)
	db.FetchToList(lsValues)
	   //Validating for Query No Results
	if lsValues == null
		 writeReportLog("Looks Like Query >> " + query +  " did not found any record","Failed", "","")
	else
		 //splitting the name
		lsValues = requiredFieldName.Split(":")
		for (i =1; i<=lsValues.Count(); i++)
			 if i != 0 
				 	outputString = outputString + ":"
				 requiredFieldName = lsValues[i]
				 outputString = outputString + requiredFieldName
	db.Disconnect ()
	
	//Error handling 
	 if GetErrorCount()>0              
		 writeReportLog("Failed to getValue_InSQLServer_HO_BasedOnServer","Failed", "" ,"")
	return outputString

//*********************************************************************
//@Method getLoanNumber_WithOut_AlliedInsuranceDate
//@Author Karthik.Shekar
//@Date 18 May 2020
//Description This function will get the Loan Number which does not Contain Allied Insurance Based based on accountType && Account Status
//@Return Loan Number	
//Modified by deepthi 
//Modified Date 15 june 2020
//Modified method to retreive null when the query result is empty
//EX: msgbox getLoanNumber_WithOut_AlliedInsuranceDate("Auto","Active")
//    msgbox getLoanNumber_WithOut_AlliedInsuranceDate("","")
//**********************************************************************
String getLoanNumber_WithOut_AlliedInsuranceDate(String accountType,String acctStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Base query
	String sGetLoanNumber_WithOut_AlliedInsuranceDate
	String baseQuery = "Select * from bp_account_tbl where acct_id not in (select distinct(acct_id) from bp_account_ins_allied_tbl) && length(loan_nbr) > 3"
	//Constructing based on Account Type
	if accountType.ToUpper () == "MOTOR" ||  accountType == "56" 
		baseQuery = baseQuery + " && acct_type = //56//"
	else if accountType.ToUpper () == "AUTO" ||  accountType == "55" 
		baseQuery = baseQuery + " && acct_type = //55//"
	else if accountType.ToUpper () == "DIRECT" ||  accountType == "31" 
		baseQuery = baseQuery + " && acct_type = //31//"	
	//Constructing based on Account Status
	if acctStatus.ToUpper() !="ANY" || acctStatus.Trim() == "" || acctStatus.IsNull() 
		baseQuery = baseQuery + " && acct_status = //" + acctStatus + "//"
	//Writer Report Log
	  LogSuccessMessage("Query Generated in getLoanNumber_WithOut_AlliedInsuranceDate",baseQuery)
	 //Running the SQL Query && returning the value
	//getLoanNumber_WithOut_AlliedInsuranceDate = runSQLQuery_FetchMultipleValues(baseQuery,"loan_nbr")	
	sGetLoanNumber_WithOut_AlliedInsuranceDate = runSQLQuery_FetchMultipleValues_WithoutExit(baseQuery,"loan_nbr")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in getLoanNumber_WithOut_AlliedInsuranceDate","Failed", "" ,"")
	return sGetLoanNumber_WithOut_AlliedInsuranceDate

//*********************************************************************************************************
//@Method insertRowIn_bpAlliedInsuranceDataTbl
//@Date 21 May 2020
//@Description This function will insert the new row of Data into the bp_account_ins_allied_tbl
//@Input Parameter passs the Filed Name & Field Values which needs to be replaced from Standard Data using seperator ":"
//NOTE: Rec_ID value should be unique
//	   branch_id should be replaced
//EX:  insertRowIn_bpAlliedInsuranceDataTbl("rec_id:branch_id:acct_id:InsuranceExpiration",Generate_RandomNumber_UserDefind("0123456789","12") + "//0881//://088100028569//://08/13/2022//")
//    insertRowIn_bpAlliedInsuranceDataTbl("rec_id:acct_id:InsuranceExpiration",Generate_RandomNumber_UserDefind("0123456789","12") + "://088100028569//://08/13/2022//")
//	 insertRowIn_bpAlliedInsuranceDataTbl("rec_id:acct_id",Generate_RandomNumber_UserDefind("0123456789","12") + "://088100028569//")
//********************************************************************************************************
insertRowIn_bpAlliedInsuranceDataTbl(String fieldNamestoReplace,String fieldValuesToReplace)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	List<String> eachFieldnameToRepalce, eachFieldValuesToReplace
	String testScriptListPath, fieldNameArrary,fieldValuesArrary, query
	Integer itr, ifFieldPrest
	//Field Value that needs to be replaced with Standard Data
	eachFieldnameToRepalce = fieldNamestoReplace.Split(":")
	eachFieldValuesToReplace = fieldValuesToReplace.Split(":")
	//Reading Test Standard Test Data from excel sheet 
	testScriptListPath = System.GetEnvVar("BranchPlusSQLPath") + "newDataRow_bpAlliedInsuTableData.xlsx"
	//msgbox testScriptListPath
	//Create the excel object
	Database db
	// AppObject objExcel = CreateObject("Excel.Application") 
	//objExcel.Visible = true
	db.Connect (testScriptListPath)
	// AppObject objWorkbook = objExcel.Workbooks.Open(testScriptListPath)
	fieldNameArrary = ""
	fieldValuesArrary= ""
	while db.Fetch(fieldNameArrary) // recheck
		fieldNameArrary = fieldNameArrary + "," + fieldNameArrary
		ifFieldPrest = eachFieldnameToRepalce.Find(fieldNameArrary)
		if ifFieldPrest > 0 
			//msgbox objExcel.Cells(1,itr).Value			
			fieldValuesArrary = fieldValuesArrary + "," + eachFieldValuesToReplace[ifFieldPrest-1]
		else
			fieldValuesArrary = fieldValuesArrary + "," + fieldNameArrary
		//Replace the Value
	fieldNameArrary = fieldNameArrary.Right(fieldNameArrary.Length()-1)
	fieldValuesArrary = fieldValuesArrary.Right(fieldValuesArrary.Length()-1)
	db.Disconnect()
	//Query
	query = "INSERT INTO bp_account_ins_allied_tbl (" + fieldNameArrary + ") VALUES ("+ fieldValuesArrary +")"
	//Log Query
	 LogSuccessMessage("query to Insert Record into bp_account_Ins_allied_tbl",query)
	//Running the update Query
	 runUpdateSQLQuery(query)

//**********************************************************************************
//arryObe = "Test:Karthik:Shekar:Marlabs"
//msgbox getIndex(Split(arryObe,":"),"Marlabs")
//NOTE: THis is more of a Supporting reusable function to insertRowIn_bpAlliedInsuranceDataTbl
//*************************************************************************************
Integer getIndex(List<String> arraryObject,String fieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	Boolean found = false
	Integer iGetIndex = 0, itr
	for (itr =1; itr <= arraryObject.Count(); itr++)
		if arraryObject[itr] ==fieldName 
			iGetIndex =  itr+1
			found = true
			break
	if found == false 
		iGetIndex = 0
	return iGetIndex
//****************************************************************************************************************
//@Method run_VSC_RefundAmount_Query_FetchValue_FromDB
//@Author Karthik.SHekar
//@Date 10 Jun 2020
//@Description this function will run the Query to Fetch the Refund Amount/Milage Refund Amt / DProRefunAmt for the details passed
//EX: run_VSC_RefundAmount_Query_FetchValue_FromDB("2020-07-13","166500004190","166500012390","74000","RefundAmt;MileageRefundAmt")
//    msgbox run_VSC_RefundAmount_Query_FetchValue_FromDB("2020-07-15","166500019436","166500057464","74000","RefundAmt")
//for Reference: Filed/Column Names in Db --> ChargeAmt,TotalDays, EarnedDays,DProRefundAmt, MileageRefundAmt, RefundAmt
//****************************************************************************************************************
String run_VSC_RefundAmount_Query_FetchValue_FromDB(String refundDate,String acctID,String compID,String currentMiles,String fieldNameToget)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String vscRefundQuery
	vscRefundQuery = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath")+"VSC_refund_query.sql")	
	vscRefundQuery = vscRefundQuery.Replace("@refundDate@",refundDate)
	vscRefundQuery = vscRefundQuery.Replace("@acctID@",acctID)
	vscRefundQuery = vscRefundQuery.Replace("@compID@",compID)
	vscRefundQuery = vscRefundQuery.Replace("@currentMiles@",currentMiles)
	 LogSuccessMessage("VSC Refund Query Generated",vscRefundQuery)
	//Returning the Value
	String sRun_VSC_RefundAmount_Query_FetchValue_FromDB = runSQLQuery_FetchMultipleValues_WithoutExit(vscRefundQuery, fieldNameToget)  	
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: run_VSC_RefundAmount_Query_FetchValue_FromDB","Failed", "" ,"")
	return sRun_VSC_RefundAmount_Query_FetchValue_FromDB

 //***********************************************************************************
 //@Mthoe getDealerName_BasedOnHoldBackType_ACH
 //@Description This will get the Dealer name based on the Dealer Status, Holdback Type, ACH Eanbled && Dealer State
 //@Author Karthik.SHekar
 //@Date 12 June 2020
//EX:  msgbox getDealerName_BasedOnHoldBackType_ACH_FromAppDB("Y","Reserve","N","")
	// msgbox getDealerName_BasedOnHoldBackType_ACH_FromAppDB("Y","Discount","N","SC")
	// msgbox getDealerName_BasedOnHoldBackType_ACH_FromAppDB("Y","RESERVE","Y","")
	// msgbox getDealerName_BasedOnHoldBackType_ACH_FromAppDB("Y","DISCOUNT","Y","AL")
	// msgbox getDealerName_BasedOnHoldBackType_ACH_FromAppDB("Y","RESERVE","","NC")
 //************************************************************************************** 
 String getDealerName_BasedOnHoldBackType_ACH_FromAppDB(String dealerStatus, String holdback_Type, String achEnabled, String dealerState)
	//Query
	String dealerFetched
	String query = "Select * from bp_dealer_tbl where active_yn = //"+ dealerStatus.ToUpper() +"// && holdback_type = //"+ holdback_Type.ToUpper() +"//"
	if holdback_Type.ToUpper() =="RESERVE" 
		query = query + " && reserve_amt != 0.00"
	else if holdback_Type.ToUpper() =="DISCOUNT" 
		query = query + " && discount_amt != 0.00"
	if achEnabled.ToUpper() == "Y" 
		query = query + " && dealer_id in (select tbl_id from bp_banking_tbl where active_yn = //Y//)"
	else if achEnabled.ToUpper() == "N" 
		query = query + " && dealer_id not in (select tbl_id from bp_banking_tbl where active_yn = //Y//)"
	if dealerState.Trim().Length() > 0 
		query = query + " && state =//" + dealerState + "//"	
	//Appending Order By
	query = query + " order by rand()"
	//Returning the Value
	 dealerFetched = runSQLQuery_WithWarning_WithoutExit(query,"short_name")
	  writeReportLog("Dealer Identified is " + dealerFetched,"Passed","","")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in getDealerName_BasedOnHoldBackType_ACH_FromAppDB","Failed", "","")
	 return dealerFetched
 
//*********************************************************************
//@Method get_DealerRepresentative_BasedOn_DealerName_FromDB
//@Date 19 July 2020
//@Author Karthik.Shekar
//@Description This fucntion will get the Dealer Representative Name Based on Dealer Name from App DB
//@Return DealerName ( Firstname LastName )
//EX: get_DealerRepresentative_BasedOn_DealerName_FromDB("Flexi ford")
//**********************************************************************
String get_DealerRepresentative_BasedOn_DealerName_FromDB(String dealerName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String dealRep, sGet_DealerRepresentative_BasedOn_DealerName_FromDB
	String query = "Select * from bp_dealer_rep_tbl where active_yn = //Y// && dealer_id in (select dealer_id from bp_dealer_tbl where short_name =//"+ dealerName +"//)"
	//Dealer Rep Fetched from DB
	dealRep = runSQLQuery_FetchMultipleValues_WithoutExit(query,"first_name;last_name")
	//Returning the Value	
	sGet_DealerRepresentative_BasedOn_DealerName_FromDB = dealRep.Split(";")[1] + " " + dealRep.Split(";")[1]
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to get_DealerRepresentative_BasedOn_DealerName_FromDB","Failed", "" ,"")
	return sGet_DealerRepresentative_BasedOn_DealerName_FromDB

//**********************************************************************************
//@Method getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB
//@Author Karthik.Shekar
//@Date 25 June 2020
//@Description THis Fucntion will get the count of Charge type based on Loan Number, ChargeType && waivedYN Status from APP DB
//msgbox getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB("087400009608","CPI_CHG","Y")
//msgbox getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB("087400009608","CPI_CHG","N")
//*******************************************************************************************
String getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB(String loanNumber,String chargeType,String waivedYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	 String query = "Select count(*) from bp_account_charge_tbl where acct_id in (select acct_id from bp_account_tbl where loan_nbr =//"+ loanNumber +"//) && charge_type in (//"+chargeType+"//) && waived_yn =//"+waivedYN+"//"     
	//run query to fetch loan number
	 String sGetCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB = runSQLQuery_WithWarning_WithoutExit(query, "count(*)")
	   if GetErrorCount()>0 
			 writeReportLog("Failed in step/getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB","Failed", "","")
	return sGetCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB

//******************************************************************
//@MEthod run_Query_To_Skip_DealerStats_NightlyRun_AppDB
//@AUthor Karthik.Shekar
//@Description This will update the Stored Procedure in App DB to Skip the updating Dealer Stats during Nightly Batch Process which is going to spead up the Nightly Process
//@Date 30 June 2020
//Ex: run_Query_To_Skip_DealerStats_NightlyRun_AppDB()
//******************************************************************
run_Query_To_Skip_DealerStats_NightlyRun_AppDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	//	query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "Skip_DealerStats_During_NightlyRun.sql")
	String filePath	
	filePath = System.GetEnvVar("BranchPlusSQLPath") + "Skip_DealerStats_During_NightlyRun.sql"
	filePath = filePath.Replace("\","/")
	//Run Sql Query
	 runUpdateSQLQuery("read //" + filePath + "//")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: run_Query_To_Skip_DealerStats_NightlyRun_AppDB","Failed", "","Y")

//******************************************************************
//@MEthod run_Query_To_Skip_SmallBalance_NightlyRun_AppDB
//@AUthor Karthik.Shekar
//@Description This will update the Stored Procedure in App DB to Skip the updating Small Balance Data during Nightly Batch Process which is going to spead up the Nightly Process
//@Date 30 June 2020
//Ex: run_Query_To_Skip_SmallBalance_NightlyRun_AppDB()
//******************************************************************
run_Query_To_Skip_SmallBalance_NightlyRun_AppDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	String query
	query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "Skip_SmallBalance_During_NightlyRun.sql")	
	//Run Sql Query
	 runUpdateSQLQuery(query)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: run_Query_To_Skip_SmallBalance_NightlyRun_AppDB","Failed", "","Y")

//*****************************************************************************************************
//@Method add_AllKindOfCharges_toAccount_FromAppDB
//@Author Karthik.Shekar
//@Date 21 July 2020
//@Description This function will add all Kind of Charges to Account 
//@Paramters loanNumber --> Loan Number to which charges needs to be added
//			processDate --> This is more of a Transaction Date which needs to be AppObject (yyyy-mm-dd)
//EX:  add_AllKindOfCharges_toAccount_FromAppDB("088100009734","2020-09-07")
//EX:  add_AllKindOfCharges_toAccount_FromAppDB("088100009734","2020-12-08")
//******************************************************************************************************
add_AllKindOfCharges_toAccount_FromAppDB(String loanNumber,String processDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Fetching the Last Trans ID
	//lastTransId= runSQLQuery("select max(trans_id) as trans_id from bp_account_charge_tbl","trans_id")
	//lastTransId= runSQLQuery("select trans_id from bp_account_charge_tbl order by trans_id desc","trans_id")
	String lastTransId, acctId, branchId, baseQuery
	String nextTransID, updateQuery
	lastTransId = runSQLQuery("select next_value from bp_next_value_tbl where key_name = //trans_id//","next_value")
	//Account ID
	acctId = getAccountID_From_DB_basedOnLoanNumber(loanNumber)
	//Fetch Branch ID
	branchId = getBranchID_From_DB()
	//#####
	//STATE VARIATION
	//#######
	if System.GetEnvVar("currentState") == "OH" 
		//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
		baseQuery = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "add_AllKindOfCharges_toAccount_OH.txt")	
	else
		//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
		baseQuery = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "add_AllKindOfCharges_toAccount.txt")	
	//Replacing the Account ID
	baseQuery = baseQuery.Replace("@AcctId@",acctId)
	baseQuery = baseQuery.Replace("@BranchID@",branchId)
	baseQuery = baseQuery.Replace("@ProcessDate@",processDate)
	baseQuery = baseQuery.Replace("@TransID@",lastTransId)
	//Logger
	 LogSuccessMessage("Query generated add_AllKindOfCharges_toAccount",baseQuery)
	//Run Sql Query to Insert all Charges
	 runUpdateSQLQuery(baseQuery)
	//Updating the next_Value in Transaction Table
	 nextTransID = (Integer.Parse(lastTransId) + 5).Format()
	 nextTransID =  ("000000000000" + nextTransID).Right(12)	 
	 updateQuery = "update bp_next_value_tbl AppObject next_value = //"+ nextTransID + "// where key_name = //trans_id//"	 
	  runUpdateSQLQuery(updateQuery)
	//Error Handlin
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: add_AllKindOfCharges_toAccount_FromAppDB","Failed", "","Y")

//***************************************************************************************************
//@Method getCurrentPrincipalBalanceAndInterest_for_Account
//Author Karthik.SHkear
//@Description This method willl get the Current Principal && Current Interest of the Account.
//@Date 27 Aug 2020
//  getCurrentPrincipalBalanceAndInterest_for_Account("088100029251", expPrinc, expInt )
//msgbox expPrinc
//msgbox expInt
//***************************************************************************************************
String getCurrentPrincipalBalanceAndInterest_for_Account(String accountID,out String ByRef_expCurPrinc, out String ByRef_expCurInt)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	String query, queryOutput, expCurPrinc, expCurInt
	query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "getCurrentPrincipalBalanceAndInterest_for_Account.txt")	
	//Replacing the Acct Id in Query
	query = query.Replace("@acctID@",accountID.Trim())
	//Logger
	// writeReportLog("Query generated as part of getCurrentPrincipalBalanceAndInterest_for_Account","Passed",query,"")
	 LogSuccessMessage("Query generated as part of getCurrentPrincipalBalanceAndInterest_for_Account",query)
	//Returning the Values
	queryOutput = runSQLQuery_FetchMultipleValues_WithoutExit(query,"pend_princ_till_today;pend_int")
	//ByRef Returning the Values
	ByRef_expCurPrinc = queryOutput.Split(";")[1]
	ByRef_expCurInt = queryOutput.Split(";")[2]
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getCurrentPrincipalBalanceAndInterest_for_Account","Failed", "" ,"")
	return queryOutput

//********************************************************************************************
//@Method get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB
//@Author Karthik.Shekar
//@Description This fucntion will get teh Waived Stats from Charges Table of Payment Tab if we pass the Account ID && Transaction Number
//
//msgbox get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB("176400010993","182301")
//msgbox get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB("176400010993","182286")
//********************************************************************************************
Boolean get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB(String acctID,String transId)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	Boolean bWaivedStatus = false
	String query = "Select waived_yn from bp_account_charge_tbl where acct_id = //"+ acctID + "// && trans_id = //"+ transId + "//"
	//Returning the Value
	String sGet_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB = runSQLQuery(query,"waived_yn")	
	if (sGet_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB.ToLower() == "true")
		bWaivedStatus = true
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB","Failed", "","Y")
	return bWaivedStatus

//****************************************************************************************************************
//@Method getData_From_AlliedInsuranceTbl_BasedOnRecID_AppDb
//@Date 13 May 2020
//@Author Karthik.Shekar
//@Description this funcntion will get the Data from Allied Insurance Tbl which is there in App(ASA) DB
//@Modified By: Deepthi
//Modified to get data from the Allied Insurnace Tbl based on the rec_id 
//EX: msgbox getData_From_AlliedInsuranceTbl_AppDb("count","","") --> To get Cnt of Records
//    msgbox getData_From_AlliedInsuranceTbl_AppDb("count","088100028892","") --> to get Count of Records for a Particular Account
//    msgbox getData_From_AlliedInsuranceTbl_AppDb("rec_id:rec_date:acct_id","","") --> Fetches value of 1st Record
//    msgbox getData_From_AlliedInsuranceTbl_AppDb("rec_id:rec_date:acct_id","088100028236","rec_id") --> Filters data based on Account ID && rec_id
//****************************************************************************************************************
String getData_From_AlliedInsuranceTbl_BasedOnRecID_AppDb(String requiredFields,String accountId,String rec_ID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query = "Select * from bp_account_ins_allied_tbl"
	String alliedDetails
	//Special Conditon    
	if accountId.Trim().Length() > 0 
		query = query + " where acct_id = " + accountId        
	//Count
	if requiredFields.ToUpper() == "COUNT"
		query = query.Replace("*","count(*)")
		requiredFields = "count(*)"    
	//Special Conditon    
	if rec_ID.Trim().Length() > 0 
		query = query + " && rec_id = " + rec_ID        
	//Logger
	 LogSuccessMessage("query ; getData_From_AlliedInsuranceTbl_BasedOnRecID_AppDb",query)
	//Executing the Query Generated
	alliedDetails = runSQLQuery_FetchMultipleValues(query, requiredFields)
	//Error handling
	if GetErrorCount()>0              
		 writeReportLog("Failed in Step/: getData_From_AlliedInsuranceTbl_BasedOnRecID_AppDb","Failed", "" ,"")
	return alliedDetails

//*****************************************************************************************
//@methodName: getAndValidate_TestURL_DebitOrCreditCard_Payment_InDB(ExpTestUrl)
//@Author Ambika
//@Date 27 May 2020
//@Description This is to get the web url from bp_credit_card_AppObjectup_tbl && validte web url
//Ex: getAndValidate_TestURL_DebitOrCreditCard_Payment_InDB()
//***********t******************************************************************************
List<String> getAndValidate_TestURL_DebitOrCreditCard_Payment_InDB() // Need to define output
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String version, ExpTestUrl, TestUrl
	String PmtProdUrl, PmtTestUrl, RvsProdUrl, RvsTestUrl
	List<String> lsValues
	version = getAppVersionNumber_From_DB()
	ExpTestUrl = "https://qa-cardpayments-api.security-finance.com/qa/CardService/Services/CardService.svc"
	//handling based on version
	if version.Replace(".","").Trim() >= "950" 
		//fetching required values from db
		PmtProdUrl = runSQLQuery_FetchMultipleValues("select web_url from bp_credit_card_AppObjectup_tbl where cc_type = //PMTPROD//","web_url")
		PmtTestUrl = runSQLQuery_FetchMultipleValues("select web_url from bp_credit_card_AppObjectup_tbl where cc_type = //PMTTEST//","web_url")
		RvsProdUrl = runSQLQuery_FetchMultipleValues("select web_url from bp_credit_card_AppObjectup_tbl where cc_type = //RVSPROD//","web_url")
		RvsTestUrl = runSQLQuery_FetchMultipleValues("select web_url from bp_credit_card_AppObjectup_tbl where cc_type = //RVSTEST//","web_url")
		//validating test url
		 validateDataAndReport(PmtProdUrl,ExpTestUrl,"Validation of PMTPROD web url")
		 validateDataAndReport(PmtTestUrl,ExpTestUrl,"Validation of PMTTEST web url")
		 validateDataAndReport(RvsProdUrl,ExpTestUrl,"Validation of RVSPROD web url")
		 validateDataAndReport(RvsTestUrl,ExpTestUrl,"Validation of RVSTEST web url")
		lsValues.Add (PmtProdUrl)
		lsValues.Add (PmtTestUrl)
		lsValues.Add (RvsProdUrl)
		lsValues.Add (RvsTestUrl)
		
	else
		//fetching required values from db
		TestUrl = runSQLQuery_FetchMultipleValues("select web_url from bp_credit_card_AppObjectup_tbl where cc_type = //CREDIT//","web_url")
		//validating test url
		 validateDataAndReport(TestUrl,ExpTestUrl,"Validation of Credit web url")
		lsValues.Add (TestUrl)
		
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : getAndValidate_TestURL_DebitOrCreditCard_Payment_InDB ","Failed", "","")
	return lsValues
//********************************************************************************************
//@Author Karthik.Shekar
//@Description This Fucntion will AppObject the date in Bath Process Table
//@Date 20 Aug 2020
//Ex: AppObject_EndDate_In_Bp_Batch_Process_Tbl("ue_dealer_statistics_summ", "2000-12-31")
//********************************************************************************************
Set_EndDate_In_Bp_Batch_Process_Tbl_AppDB(String eventName,String endDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String Query
	Query =  "update bp_batch_process_tbl AppObject end_dt =//" + endDate + " 00:00:00.000// where event_name = //"+ eventName + "//"
	 LogSuccessMessage("Query AppObject_EndDate_In_Bp_Batch_Process_Tbl_AppDB >>" +  Query,"")
	 runUpdateSQLQuery(Query)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/AppObject_EndDate_In_Bp_Batch_Process_Tbl_AppDB","Failed", "","")

//**********************************************************************************************************************************
//@Method get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal
//@Author Karthik.Shekar
//@Description This Method will fetch the Loan number which will have the current Interest && Current principal in it for current system date based on input paramteres passed.
//			  NOTE: THis will Fail the Script if it does not find any account with above mentioned criteria
//EX: msgbox get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal("Active","55","Current","2020-01-01","2020-07-01")
//    msgbox get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal("REPO","31","Current","2020-01-01","2020-07-01")
//********************************************************************************************************************************************
String get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal(String AccountStatus,String AccountTypeCode,String UI_Del_Status,String ContractFromDate,String ContractToDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Flag
	Boolean found = false
	Integer itr
	String loanNum, accntID, sGet_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal
	String currentInt, currentPrinc
	//Iterating && Validating
	for(itr=1; itr<=50; itr++)
		loanNum = get_LoanNumber_FromDB_BasedOn_ContractDate(AccountStatus,AccountTypeCode,UI_Del_Status,ContractFromDate,ContractToDate)
		accntID = getAccountID_From_DB_basedOnLoanNumber(loanNum)
		getCurrentPrincipalBalanceAndInterest_for_Account(accntID, currentPrinc, currentInt)
		//Identifying account with Current Principal && CurrInt		
		if Math.Round(Real.Parse(currentPrinc), 4) > Math.Round(1, 4) && Math.Round(Real.Parse(currentInt), 4) > Math.Round(0, 4) 
			found = true
			//			msgbox itr
			//			msgbox currentPrinc
			//			msgbox currentInt
			sGet_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal = loanNum
			break
	//Validating if no loan Found
	if found == false 
		sGet_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal = "0"
		// writeReportLog("Not able to find any Loan for Current Date " + date() + " Which Contains Current Interest && Current Principal in it. Please try for different date","Failed","Looking for --> "  & AccountStatus + "," + AccountTypeCode+ "," + UI_Del_Status + "," + ContractFromDate + "," &ContractToDate,"")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal ","Failed", "","")
	return sGet_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal
//*********************************************************************************************************
//@Author: Karthik Shekar
//@Method: get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB
//@Date: 09 Sep 2020
//This function is intended to get the total chargeamount from Charge Table irrespective of waive status && charge type
//CharteTYpe (for Ref) --> //LATE_CHG//	//PRINCPAL//	//COLL_CHG//	//NSF_CHRG//	//DEFERMNT//	//INTEREST//	//INT_DUE//	//LOANCONV//	//MISC_CHG//	//NSF_CHNG//	//EXCESS//	//COLL_EXP//	//CPI_CHG//
//EX: msgbox get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","")
//	msgbox get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","LATE_CHG","Y")
//	msgbox get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","LATE_CHG","N")
//	msgbox get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","Y")
//	msgbox get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","N")
//*********************************************************************************************************
String get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB(String acctID,String chargeType,String waivedYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGet_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB
	String query = "Select isnull(sum(charge_amt), 0) as Sum_Chrg_Amt from bp_account_charge_tbl where charge_type not in (//INTEREST//,//PRINCPAL//) && acct_id = //"+ acctID + "//"
	//Handling for Charge Type
	if chargeType.Trim().Length() > 0 && chargeType != "" 
		query = query + " && charge_type = //"+  chargeType +"//"
	//Handling for Waived YN
	if waivedYN.Trim().Length() > 0 && waivedYN != "" 
		query = query + " && waived_yn = //"+  waivedYN +"//"
	//UFT Logger.Trim(
	 LogSuccessMessage("Query generated get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB",query)
	//Returning the Value
	sGet_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB = runSQLQuery(query,"Sum_Chrg_Amt")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB","Failed", "","Y")
	return sGet_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB

//*********************************************************************************************************
//@Author: Karthik Shekar
//@Method: get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB
//@date: 09 Sep 2020
//@Description This function is intended to get the total paid charge from Charge Table irrespective of waive status && charge type
//CharteTYpe (for Ref) --> //LATE_CHG//	//PRINCPAL//	//COLL_CHG//	//NSF_CHRG//	//DEFERMNT//	//INTEREST//	//INT_DUE//	//LOANCONV//	//MISC_CHG//	//NSF_CHNG//	//EXCESS//	//COLL_EXP//	//CPI_CHG//
//EX: msgbox get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","")
//	msgbox get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","LATE_CHG","Y")
//	msgbox get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","LATE_CHG","N")
//	msgbox get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","Y")
//	msgbox get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","N")
//*********************************************************************************************************
String get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB(String acctID,String chargeType,String waivedYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query = "Select isnull(sum(paid_amt), 0) as Paid_Chrg_Amt from bp_account_charge_tbl where charge_type not in (//INTEREST//,//PRINCPAL//) && acct_id = //"+ acctID + "//"
	//Handling for Charge Type
	if chargeType.Trim().Length() > 0 && chargeType != "" 
		query = query + " && charge_type = //"+  chargeType +"//"
	//Handling for Waived YN
	if waivedYN.Trim().Length() > 0 && waivedYN != "" 
		query = query + " && waived_yn = //"+  waivedYN +"//"
	//UFT Logger
	 LogSuccessMessage("Query generated get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB",query)
	//Returning the Value
	String sGet_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB = runSQLQuery(query,"Paid_Chrg_Amt")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB","Failed", "","Y")
	return sGet_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB

//*******************************************************
//@MethodName is_AgentAvailable_In_DB
//@Author Karthik.Shekar
//@Description This function wil Valdiate if the Agent is available in System || not based on its Active Status.
//@Date 11 Sep 2020
//EX: msgbox is_AgentAvailable_In_DB("Automation Tester","")
//msgbox is_AgentAvailable_In_DB("Automation Tester","N")
//msgbox is_AgentAvailable_In_DB("Karthik Shekar","Y")
//**********************************************************
Boolean is_AgentAvailable_In_DB(String agentName,String activeYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query = "Select count(*) from bp_business_agent_tbl where dba_name = //"+ agentName + "//"
	String cnt
	Boolean bIs_AgentAvailable_In_DB = false
	if activeYN.Trim() != "" 
		query = query + " && active_yn = //"+ activeYN + "//"
	//Run the query
	cnt = runSQLQuery_WithWarning_WithoutExit(query,"count(*)")
	//Returning the Value
	if Integer.Parse(cnt) == 0 
		bIs_AgentAvailable_In_DB = false
	else
		bIs_AgentAvailable_In_DB = true
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: is_AgentAvailable_In_DB","Failed", "","")
	return bIs_AgentAvailable_In_DB

//*******************************************************************************
//@Method get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB
//@Name Karthik.Shekar
//@Description This will get the Loan Based on Existing Payment Type(Which are not Reversed) && account Status
//@Values: PaymentTYpe --> //PAYMENT//	//DEFERMNT//	//PRINCPAL//	//CHRG_OFF//	//AppObjectTLEMT//	//PRINCADJ//	//SMALLBAL//	//INTRNLPY//	//ADJSTMNT//
//         acctStatus --> //ACTIVE//	//APPROVED//	//APPRVCND//	//BANKRUPT//	//CANCELLD//	//CHRG_OFF//	//CHRGBANK//	//CHRGSKIP//	//DENIED//	//PAID_OUT//	//PENDING//	//REDEEMED//	//REPO//	//REVERSED//
//EX: get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB("DEFERMNT","ACTIVE")
//  get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB("AppObjectTLEMT","CHRG_OFF")
//********************************************************************************
String get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB(String paymentType,String acctStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Reading Entire File Content
	String query, sGet_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB
	query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "get_LoanNumber_With_Existing_PaymentType_AppDB.txt")
	query = query.Replace("@PMT_CLASS@",paymentType)
	query = query.Replace("@ACCT_STATUS@",acctStatus)
	//Logger
	 LogSuccessMessage("Query get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB",query)
	//Returning the Value
	sGet_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB","Failed", "","Y")
	return sGet_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB

//**************************************************************
//@Method checkAndUpdate_MaxCheckNumber_Disbursement
//@Author Karthik.Shekar
//@Date 16 Sep 2020
//@Description This fucntion will update the Maximum Check Number Value in Disbursement account if  Check Number is less than 500
//EX:  checkAndUpdate_MaxCheckNumber_Disbursement()
//************************************************************
checkAndUpdate_MaxCheckNumber_Disbursement()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String nextCheckNBR, max_check_nbr
	Integer inextCheckNBR, imax_check_nbr
	
	//Fetching existing Check Number
	nextCheckNBR = runSQLQuery_WithWarning_WithoutExit("select next_check_nbr from bp_branch_banking_tbl where bank_type = //CHCKDISB//","next_check_nbr") 
	imax_check_nbr = Integer.Parse(max_check_nbr)
	//Fetching Max check Number
	max_check_nbr = runSQLQuery_WithWarning_WithoutExit("select max_check_nbr from bp_branch_banking_tbl where bank_type = //CHCKDISB//","max_check_nbr")
	inextCheckNBR = Integer.Parse(nextCheckNBR)
	//Validating && updating		
	if Integer.Parse(max_check_nbr) < (Integer.Parse(nextCheckNBR) + 500) 
		imax_check_nbr = inextCheckNBR + 700
		 runUpdateSQLQuery("update bp_branch_banking_tbl AppObject max_check_nbr = //"+ max_check_nbr + "// where bank_type = //CHCKDISB//")
	 //Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in checkAndUpdate_MaxCheckNumber_Disbursement","Failed", "","")

//*******************************************************************************
//@Method get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB
//@Name Shelma Joseph
//@Date 16 Sep 2020
//@Description //This function is intended to get the total count of charges from Charge Table irrespective of waive status && charge type
//CharteTYpe (for Ref) --> //LATE_CHG//    //PRINCPAL//    //COLL_CHG//    //NSF_CHRG//    //DEFERMNT//    //INTEREST//    //INT_DUE//    //LOANCONV//    //MISC_CHG//    //NSF_CHNG//    //EXCESS//    //COLL_EXP//    //CPI_CHG//
//EX: msgbox get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100028926","","")
//    msgbox get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100028926","CPI_CHG","Y")
//    msgbox get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100028926","CPI_CHG","N")
//    msgbox get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100028926","","Y")
//    msgbox get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100028926","","N")
//*********************************************************************************************************
String get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB(String acctID,String chargeType,String waivedYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sGet_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB
	String query = "Select count(*) as Count_chrg_Amt from bp_account_charge_tbl where charge_type not in (//INTEREST//,//PRINCPAL//) && acct_id = //"+ acctID + "//"
	//Handling for Charge Type
	if chargeType.Trim().Length() > 0 && chargeType != "" 
		query = query + " && charge_type = //"+  chargeType +"//"
	//Handling for Waived YN
	if waivedYN.Trim().Length() > 0 && waivedYN != "" 
		query = query + " && waived_yn = //"+  waivedYN +"//"
	//UFT Logger
	 LogSuccessMessage("Query generated get_Suf_CountOfChargeAmt_ChargesTbl_PaymentTab_FromAppDB",query)
	//Returning the Value
	sGet_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB = runSQLQuery(query,"Count_chrg_Amt")    
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB","Failed", "","Y")
	return sGet_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB

//***************************************************************************************************
//@Method getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate
//Author Karthik.SHkear
//@Description This method willl get the Current Principal && Current Interest of the Account.
//@Date 22 Sep 2020
//EX:  getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate("088100029258", "2020-09-30", actCurPrinc, actCurInt)
//	msgbox actCurPrinc + " - " + actCurInt
//
//***************************************************************************************************
 getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate(String accountID,String actDate,out String  ByRef_actCurPrinc, out String ByRef_actCurInt)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String queryOutput, query
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate.txt")	
	//query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "getCurrentPrincipalBalanceAndInterest_for_Account_New.txt")	
	//Replacing the Acct Id in Query
	query = query.Replace("@acctID@",accountID.Trim())
	query = query.Replace("@date@",actDate)
	//Logger
	// writeReportLog("Query generated as part of getCurrentPrincipalBalanceAndInterest_for_Account","Passed",query,"")
	 LogSuccessMessage("Query generated as part of getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate",query)
	//Returning the Values
	queryOutput = runSQLQuery_FetchMultipleValues_WithoutExit(query,"pend_princ_till_today;pend_int")
	//ByRef Returning the Values
	ByRef_actCurPrinc = queryOutput.Split(";")[1]
	ByRef_actCurInt = queryOutput.Split(";")[2]
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate","Failed", "" ,"")

//***************************************************************
//EX: msgbox get_RepoDate_From_AppDB("088100029258")
//***************************************************************
String get_RepoDate_From_AppDB(String acctID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query = "Select date(repo_dt) as repodate,* from bp_account_tbl where acct_id = //" + acctID + "//"
	//Returning the Value
	String sGet_RepoDate_From_AppDB = runSQLQuery(query,"repodate")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_RepoDate_From_AppDB","Failed", "","")
	return sGet_RepoDate_From_AppDB

//***************************************************************
//EX: msgbox get_AccountStatus_From_AppDB("088100029258")
//***************************************************************
String get_AccountStatus_From_AppDB(String acctID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query = "Select acct_status as repodate,* from bp_account_tbl where acct_id = //" + acctID + "//"
	//Returning the Value
	String sGet_AccountStatus_From_AppDB = runSQLQuery(query,"acct_status")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_RepoDate_From_AppDB","Failed", "","")
	return sGet_AccountStatus_From_AppDB
	

//***************************************************************************************************************************
//@Method: get_LoanNumber_FromDB_BasedOn_ContractDate(AccountStatus,AccountTypeCode,UI_Del_Status,ContractFromDate,ContractToDate)
//@Author: Karthik
//@Date 23 Sep 2020
//@Description: This function will get the loan from DB based on contract From Date, Contract To Date, Account Status && DealerState
//Ex:  get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState("Active","55","30","NC", "2018-12-01","")
//Ex:  get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState("Active","55","30","SC", "","")
//***************************************************************************************************************************
String get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState(String AccountStatus,String AccountTypeCode,String UI_Del_Status,String dealerState,String ContractFromDate,String ContractToDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String sContractFromDate, contract_FromDate, Contract_ToDate, query, sqlquery
	if AccountStatus.ToUpper() == "ACTIVE" 
		 //Get ID Based on Delinquency Status && Contractual status
		  get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
		 if ContractFromDate != ""  
			sContractFromDate = formatDateWithSpecifiedDelimeter(ContractFromDate,"YYYYMMDD","-")
			contract_FromDate = "and funding_dt >= //"+ContractFromDate+"// "
			 if ContractToDate != "" 
				 	 ContractToDate = formatDateWithSpecifiedDelimeter(ContractToDate,"YYYYMMDD","-")
				 Contract_ToDate = "and funding_dt < //"+ContractToDate+"//"
		 			//query to run 
		  //Query
		 		//query = "acct_status =//" + AccountStatus + "//" + " && acct_type=//" + AccountTypeCode +"// && del_status = //"+ delinqStatus  +"// && contractual_status = //"+ contractual_status  +"// " + contract_FromDate & contract_ToDate + "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by loan_nbr desc"
		 		query = "acct_status =//" + AccountStatus + "//" + " && acct_type=//" + AccountTypeCode +"// && del_status = //"+ delinqStatus  +"// && contractual_status = //"+ contractual_status  +"// " + contract_FromDate + Contract_ToDate + "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*))"
	 else
		 query ="acct_status =//" + AccountStatus + "//" + " && acct_type=//" + AccountTypeCode +"//" + contract_FromDate + Contract_ToDate + "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*))"	
			//Handling for the Dealer State    
		if dealerState != "" 
			query =  query + " &&  dealer_id in (select dealer_id from bp_dealer_tbl where state = //"+ dealerState +"//)"
			//Query
		 	//query = "acct_status =//" + AccountStatus + "//" + " && acct_type=//" + AccountTypeCode +"// && del_status = //"+ delinqStatus  +"// && contractual_status = //"+ contractual_status  +"// " + contract_FromDate & contract_ToDate + "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by loan_nbr desc"
	 if System.GetEnvVar("currentState") == "OH" 
			sqlquery = "Select * from support.bp_account_tbl where acct_id not in (select distinct(acct_id) from bp_account_charge_tbl where charge_type = //COLL_EXP//) && " + query + " order by rand()"
	else
		sqlquery = "Select * from support.bp_account_tbl where " + query + " order by rand()"
	//UFT Logger
	 LogSuccessMessage("Query generated get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState", sqlquery)
	//run query to fetch loan number
	// get_LoanNumber_FromDB_BasedOn_ContractDate = runSQLQuery(sqlQuery, "loan_nbr")
	String sGet_LoanNumber_FromDB_BasedOn_ContractDate_DealerState = runSQLQuery_WithWarning_WithoutExit(sqlquery, "loan_nbr")
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState","Failed", "","")
	return sGet_LoanNumber_FromDB_BasedOn_ContractDate_DealerState
//**********************************************************************************************************************************
//@Method get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState
//@Author Karthik.Shekar
//@Description This Method will fetch the Loan number which will have the current Interest && Current principal in it for current system date based on input paramteres passed.
//	NOTE: it will Return 0 if we don//t find any loans for Specified Criteria
//			  
//EX: msgbox get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState("Active","55","Current","NC","2020-01-01","2020-07-01")
//    msgbox get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState("REPO","31","Current","SC","2020-01-01","2020-07-01")
//********************************************************************************************************************************************
String get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState(String AccountStatus,String AccountTypeCode,String UI_Del_Status,String dealerState,String ContractFromDate,String ContractToDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Flag
	Boolean found = false
	Integer itr
	String loanNum, accntID, currentPrinc, currentInt
	String sGet_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState
	//Iterating && Validating
	for(itr =1; itr<= 20; itr++)
		loanNum = get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState(AccountStatus,AccountTypeCode,UI_Del_Status,dealerState,ContractFromDate,ContractToDate)
		accntID = getAccountID_From_DB_basedOnLoanNumber(loanNum)
		 getCurrentPrincipalBalanceAndInterest_for_Account(accntID, currentPrinc, currentInt)
		//Identifying account with Current Principal && CurrInt		
		if Math.Round(Real.Parse(currentPrinc), 4) > Math.Round(1, 4) && Math.Round(Real.Parse(currentInt), 4) > Math.Round(0 , 4)
			found = true
			//			msgbox itr
			//			msgbox currentPrinc
			//			msgbox currentInt
			sGet_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState = loanNum
			break
	//Validating if no loan Found
	if found == false 
		sGet_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState = "0"
		// writeReportLog("Not able to find any Loan for Current Date " + date() + " Which Contains Current Interest && Current Principal in it. Please try for different date","Failed","Looking for --> "  & AccountStatus + "," + AccountTypeCode+ "," + UI_Del_Status + "," + ContractFromDate + "," &ContractToDate,"")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal ","Failed", "","")
	return sGet_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState

//*********************************************************************************************
//@methodName: update_CustomPaymentProcessingOrder_In_AppDB
//@Author Karthik
//@Date 24 Sep 2020
//@Description This is to Update the Security level less than 400 based on User Id in DB
//Ex: update_CustomPaymentProcessingOrder_In_AppDB("NC","55", "ZZZZZZZZ") ---> Active Account
//    update_CustomPaymentProcessingOrder_In_AppDB("SC","31", "REPO") ---> REP Account
//*********************************************************************************************
update_CustomPaymentProcessingOrder_In_AppDB(String state,String loanType,String accountStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	String query
	query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") +"query_To_Update_AppDB_With_CustomPaymentOrder.txt")
	//Replace the UserID 
	query = query.Replace("@state@",state)
	//Replace the Security Level
	query = query.Replace("@loanType@",loanType)
	//Replace the Security Level
	query = query.Replace("@accountStatus@",accountStatus)
	//Run Sql Query
	 runUpdateSQLQuery(query)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: update_CashDrawerUserSecurityLevel_BasedOnUser","Failed", "","Y")

//*****************************************************************************************************
//@Method add_AllKindOfCharges_toAccount_FromAppDB
//@Author Karthik.Shekar
//@Date 08 Oct 2020
//@Description This function will add Specific Charge to Account 
//@Paramters loanNumber --> Loan Number to which charges needs to be added
//			processDate --> This is more of a Transaction Date which needs to be AppObject (yyyy-mm-dd)
//			chargeType --> Pass the Charge Type To Insert the value
//EX:  add_SpecificCharge_toAccount_FromAppDB("088100009734","2020-09-07", "DEFERMNT")
//EX:  add_SpecificCharge_toAccount_FromAppDB("088100009734","2020-12-08","NSF_CHNG")
//******************************************************************************************************
add_SpecificCharge_toAccount_FromAppDB(String loanNumber,String processDate,String chargeType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String lastTransId, acctId, branchId, baseQuery, updateQuery
	String nextTransID
	//Fetching the Last Trans ID    
	lastTransId = runSQLQuery("select next_value from bp_next_value_tbl where key_name = //trans_id//","next_value")
	//Account ID
	acctId = getAccountID_From_DB_basedOnLoanNumber(loanNumber)
	//Fetch Branch ID
	branchId = getBranchID_From_DB()
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	baseQuery = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "add_SpecificCharge_ToAccount.txt")	
	//Replacing the Account ID
	baseQuery = baseQuery.Replace("@AcctId@",acctId)
	baseQuery = baseQuery.Replace("@BranchID@",branchId)
	baseQuery = baseQuery.Replace("@ProcessDate@",processDate)
	baseQuery = baseQuery.Replace("@TransID@",lastTransId)
	baseQuery = baseQuery.Replace("@ChargeType@",chargeType)
	//Logger
	 LogSuccessMessage("Query generated add_SpecificCharge_toAccount_FromAppDB",baseQuery)
	//Run Sql Query to Insert all Charges
	 runUpdateSQLQuery(baseQuery)
	//Updating the next_Value in Transaction Table
	 nextTransID = (Integer.Parse(lastTransId) + 1).Format()
	 nextTransID =  ("000000000000" + nextTransID).Right( 12)	 
	 updateQuery = "update bp_next_value_tbl AppObject next_value = //"+ nextTransID + "// where key_name = //trans_id//"
	  runUpdateSQLQuery(updateQuery)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: add_SpecificCharge_toAccount_FromAppDB","Failed", "","Y")

//******************************************************************************************************************************************************
//@MethodName: getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable()
//@Author Karthik
//@Date 12 Oct 2020
//@Description This will get the loan number from the account which contains the charges like "NSF Change// && //Collectin Charge" in it. 
//msgbox getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable("Active")
//msgbox getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable("CHRG_OFF")
//msgbox getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable("") --> Can Give Empty Value as well. That time it will not filter for acc status
//******************************************************************************************************************************************************
String getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable(String accStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query to run 
	String query, sGetLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable
	query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "getLoanNumber_FromAcc_With_ChargesNotPresntIn_OrderTable.txt")
	//Additional Condition only when Acc Status is not null
	if accStatus.Trim().Length() > 0 
		query = query + " && a.acct_status =//" + accStatus + "//"
	//Appending Order by
	query = query + " order by rand()" 
	//Logger
	 LogSuccessMessage("Query generated getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable",query)
	//run query to fetch loan number
	 sGetLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable = runSQLQuery(query, "loan_nbr")
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable","Failed", "","")
	return sGetLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable

//************************************************************************
//@Method getLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday
//@Date 19 Oct 2020
//@Author Karthik.Shekar
//@Description This fucntion will get the Loan number from DB for the accounts which contains the Charges which are not defined in
//			Payment Processing Order Table also this will filter for account based on AccStatus && DueTodayAmt 
//EX: msgbox getLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday("Active","=", "0")
//    msgbox getLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday("Active",">", "100")
//************************************************************************
String getLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday(String accStatus,Real dueTodayAmtOperator,String dueTodayAmt)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	Boolean found = false
	Integer itr
	String loanNumber, actdueTodayAmt, sGetLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday
	for (itr =1; itr<=30; itr++)
		loanNumber = getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable(accStatus)
		//Fetching Due TOday Amount
		actdueTodayAmt = get_TotalDueToday_Amount_FromAppDB(loanNumber)
		//msgbox actdueTodayAmt
		//Validating for Condition
		//if Math.Round(Real.Parse(actdueTodayAmt) = Math.Round(Real.Parse(dueTodayAmt) 
		 if (Math.Round(Real.Parse(actdueTodayAmt), 4) + dueTodayAmtOperator + Math.Round(Real.Parse(dueTodayAmt), 4)) >0
			found = true
			sGetLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday = loanNumber
			break
	//Returning zero if we don//t find any loan
	if found == false 
		sGetLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday = "0"
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable","Failed", "" ,"")
	return sGetLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday

//***************************************************************************************************************
//@MEthod get_TotalDueToday_Amount_FromAppDB
//@Author Karthik.Shekar
//@Date 19 OCt 2020
//@DEscription this method will return "Total Due Today" Amount if we pass the Loan number to it. 
//EX: msgbox get_TotalDueToday_Amount_FromAppDB("088100009734")
//***************************************************************************************************************
String get_TotalDueToday_Amount_FromAppDB(String loanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query to run 
	String query, sGet_TotalDueToday_Amount_FromAppDB
	query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "get_TotalDueTodayAmount_BasedOnLoanNumber_SQLQuery.txt")
	//Replaceing the LoanNumber
	query = query.Replace("@LoanNumber",loanNumber)
	//Logger
	 LogSuccessMessage("Query Generated get_TotalDueToday_Amount_FromAppDB",query)
	//Get the Due To Day Amount from DB
	sGet_TotalDueToday_Amount_FromAppDB = runSQLQuery(query, "Amount Due Today")
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_TotalDueToday_Amount_FromAppDB","Failed", "" ,"")
	return sGet_TotalDueToday_Amount_FromAppDB

//****************************************************************
//@Method isCreditBureauAvailable_AppDB
//@Description this method will Return Ture || false after checking if the Required Credit Bureau is Available in that State are not
//@Date 07 dec 2020
//@Author karthik.SHekar
//EX: msgbox 	isCreditBureauAvailable_AppDB("TRANSUN") --> Use this  to check for TRANSUNION
	//msgbox 	isCreditBureauAvailable_AppDB("EQUIFAX") --> Use this  to check for EQUIFAX
	//msgbox  isCreditBureauAvailable_AppDB("MLA_EQ") --> for MLA EQUIFAX
	//msgbox 	isCreditBureauAvailable_AppDB("TR45") --> Negative Try
//******************************************************************
Boolean isCreditBureauAvailable_AppDB(String reqBureauName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String output
	Boolean bIsCreditBureauAvailable_AppDB
	output = runSQLQuery("select count(*) as cnt from bp_credit_bureau_tbl where service = //"+ reqBureauName +"//","cnt")
	if output == "0" 
		bIsCreditBureauAvailable_AppDB = false
	else
		bIsCreditBureauAvailable_AppDB = true
	//Error
	if GetErrorCount()>0  			
		 writeReportLog("Failed to isCreditBureauAvailable_AppDB","Failed", "" ,"")
	return bIsCreditBureauAvailable_AppDB

//**********************************************************************************
//@Method get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType
//@Author Karthik.Shekar
//@Description
//@Date 23 Dec 2020
//EX: msgbox get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType("31") --> for Direct Loan
//	msgbox get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType("55") --> for Auto Loan
//******************************************************************************************
String get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType(String accType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query to run 
	String query, sGet_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType
	query = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath") + "CPI_SQLQuery_BasedOnloan.txt")
	//Replace the account Type
	query = query.Replace("@account_type@",accType)
	//Logger
	 LogSuccessMessage("Query generated get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType",query)
	//run query to fetch loan number
	 sGet_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType = runSQLQuery_WithWarning_WithoutExit(query, "loan_nbr")
	 if GetErrorCount()>0 
			 writeReportLog("Failed in step/get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType","Failed", "","")
	return sGet_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType

//**********************************************************************************
//@Method get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndRequestUserId_CreditTable
//@Author Ritu Tripathi
//@Description
//@Date 16 Aug 2021
//EX: get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndRequestUserId_CreditTable(Bureau,RequestUserID)
//******************************************************************************************
String get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndRequestUserId_CreditTable(String Bureau,String RequestUserID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	String requiredFieldName
	String query = "Select top 1 * from credit_report_request_tbl where credit_bureau = //"+Bureau+"// && request_userid = //"+RequestUserID+"// && customer_id IN (Select customer_id from credit_report_request_tbl where customer_id not in(0) group by customer_id having count(customer_id) = 1 order by RAND()) order by RAND()"
	requiredFieldName = "org_id:customer_id:customer_original_owner:request_userid:credit_bureau:credit_score:credit_score_type:cr_userid:output_type:account_original_owner:account_id"
	//get details from DB
	String sGet_Details_OfCustomer_WithCreditScore_BasedOnBureauAndRequestUserId_CreditTable = runSQLQuery_FetchMultipleValues(query, requiredFieldName)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndRequestUserId_CreditTable","Failed", "","")
	return sGet_Details_OfCustomer_WithCreditScore_BasedOnBureauAndRequestUserId_CreditTable

//**********************************************************************************
//@Method get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable
//@Author Ritu Tripathi
//@Description
//@Date 23 Aug 2021
//EX: get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable(Bureau,CustomerID)
//******************************************************************************************
String get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable(String Bureau,String CustomerID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	String sGet_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable, requiredFieldName
	String query = "Select top 1 * from credit_report_request_tbl where credit_bureau = //"+Bureau+"// && customer_id = //"+CustomerID+"// order by record_dt desc"
	requiredFieldName = "org_id:customer_id:customer_original_owner:request_userid:credit_bureau:credit_score:credit_score_type:cr_userid:output_type:account_original_owner:account_id"
	//get details from DB
	sGet_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable = runSQLQuery_FetchMultipleValues(query, requiredFieldName)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable","Failed", "","")
	return sGet_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable

//**********************************************************************************
//@Method get_BranchAppObjectupDetails
//@Author Ritu Tripathi
//@Description This function is used to fetch the current branch && organization id from DB
//@Date 18 Aug 2021
//EX: get_BranchAppObjectupDetails()
//******************************************************************************************
String get_BranchAppObjectupDetails()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	String requiredFieldName, sGet_BranchAppObjectupDetails
	String query = "Select * from branch_AppObjectup_tbl;"
	requiredFieldName = "branch_id:organization_id"
	//get branch id && organization id from DB
	sGet_BranchAppObjectupDetails = runSQLQuery_FetchMultipleValues(query, requiredFieldName)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_BranchAppObjectupDetails","Failed", "","")
	return sGet_BranchAppObjectupDetails

//**********************************************************************************
//@Method pullNewCreditScore
//@Author Ritu Tripathi
//@Description This function is used to fetch the latest credit score based on credit bureau, Customer ID && Reference id
//@Date 20 Aug 2021
//EX: pullNewCreditScore("Equifax","167500035687","167500035685")
//******************************************************************************************
String pullNewCreditScore(String RequiredBureau,String CustomerID,String RefID_App)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	String requiredFieldName, sPullNewCreditScore
	String query = "Select top 1 * from credit_report_request_tbl where credit_bureau = //"+RequiredBureau+"// && customer_id = //"+CustomerID+"// && account_id = //"+RefID_App+"// order by record_dt desc"
	requiredFieldName = "credit_score"
	//get latest pulled credit score from DB
	sPullNewCreditScore = runSQLQuery(query, requiredFieldName)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/pullNewCreditScore","Failed", "","")
	return sPullNewCreditScore

//***********************************************************************************************************************
//@methodName: update_TestURL_bp_credit_service_ref_tbl
//@Author: Ritu
//@Date 15 September 2021
//@Description This is to updat API TEST URL in Credit Service table
//Ex:  update_TestURL_bp_credit_service_ref_tbl("ONLINE PMTS TEST","http://sfc-api-qa201")
//***********************************************************************************************************************
update_TestURL_bp_credit_service_ref_tbl(String state,String bureau,String ref_type,String ref_value)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	//query 
	//update bp_credit_service_ref_tbl AppObject ref_value=//https://qa-creditreport-api.security-finance.com/v6/api/CreditPull// where state=//GA// && service=//EQUIFAX// && ref_type = //API URL TEST//
	String query = "Update bp_credit_service_ref_tbl AppObject ref_value =//"+ref_value+"// where state=//"+state+"// && service=//"+bureau+"// && ref_type = //"+ref_type+"//"
	//upadted query
	 runUpdateSQLQuery(query)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in update_TestURL_bp_credit_service_ref_tbl","Failed", "","")

//*****************************************************************************************
//@methodName: validate_TestURL_bp_credit_service_ref_tbl
//@Author Ritu
//@Date 16 September 2021
//@Description This is to get the test url from bp_credit_service_ref_tbl && validte it
//Ex: validate_TestURL_bp_credit_service_ref_tbl()
//***********t******************************************************************************
validate_TestURL_bp_credit_service_ref_tbl(String state,String bureau,String ref_type,String expected_URL)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl && validte it",Group="BranchPlusSQLFunctions"]
	String query = "Select ref_value from bp_credit_service_ref_tbl where state=//"+state+"// && service=//"+bureau+"// && ref_type = //"+ref_type+"//"
	//fetching URL from DB
	String URL_InDB = runSQLQuery_FetchMultipleValues(query,"ref_value")
	//validating url
	 validateDataAndReport(URL_InDB,expected_URL,"Validation of API Test URL")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : validate_TestURL_bp_credit_service_ref_tbl ","Failed", "","")



