//******************************************************************************************************************
//EX:  Get_Data_DB("Select * from CUSTOMER_TBL where SSN=253981024", "LAST_NAME")
//******************************************************************************************************************
runSQLQuery(String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //Variable declaration
    String conn, rs
    Reporter.ReportEvent micDone,"Query",query
     LogSuccessMessage("Test Data Get Query",query)
    //Object declaration
    Set conn= createobject("adodb.connection")
    set rs = createobject("adodb.recordset")
    //Connection string
    conn.Open =  "Dsn=branch;Uid=support;Pwd=sql;"
   //Running the SQL Query
    rs.open query, conn
    runSQLQuery = rs.Fields(requiredFieldName)
    rs.Close
    conn.Close  
	if GetErrorCount()>0  			
		 writeReportLog("Failed to runSQLQuery","Failed", Err.Description ,"")

getApplicationNameFromDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	branchType = runSQLQuery("select branch_type from BRANCH_SETUP_TBL;","branch_type")
	if branchType = "BRANCH" 
		applicationName = "Branch"
	else if branchType = "PFS" 
		applicationName = "BranchPlus"
	getApplicationNameFromDB = applicationName
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getApplicationNameFromDB","Failed", Err.Description ,"")

getCurrentStateName_From_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	getCurrentStateName_From_DB = runSQLQuery("select BRANCH_SETUP_STATE from BRANCH_SETUP_TBL;","BRANCH_SETUP_STATE")
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getCurrentStateName_From_DB","Failed", Err.Description ,"")

//**********************************************************************************************************************************************************
//@methodName: getAppVersionNumber_From_DB()
//@Description: This will get the Application Version from the DB
//@Author: Hemanth
//Ex:  getAppVersionNumber_From_DB()
//*******************************************************************************************************************************************************
getAppVersionNumber_From_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	getAppVersionNumber_From_DB = runSQLQuery("select VERSION from bp_branch_setup_tbl;","VERSION")
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getAppVersionNumber_From_DB","Failed", Err.Description ,"")

//**********************************************************************************************************************************************************
//@methodName: getBuildNumber_From_DB()
//@Description: This will fetch the Build Number from the DB which is used for Reporting
//@Author: Hemanth
//Ex:  getBuildNumber_From_DB()
//*******************************************************************************************************************************************************
getBuildNumber_From_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	getBuildNumber_From_DB = runSQLQuery("select build_nbr from bp_branch_setup_tbl;","build_nbr")
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getBuildNumber_From_DB","Failed", Err.Description ,"")

//**********************************************************************************************************************************************************
//@methodName: getBranchID_From_DB()
//@Description: This will fetch the Branch ID from the DB which is used for Reporting
//@Author: Karthik
//Ex:  getBranchID_From_DB()
//*******************************************************************************************************************************************************
getBranchID_From_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	getBranchID_From_DB = runSQLQuery("select * from bp_branch_setup_tbl;","branch_id")
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getBuildNumber_From_DB","Failed", Err.Description ,"")

																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																				//to update value
runUpdateSQLQuery(String query)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
   //Variable declaration
    String conn, rs
    //Logger
    Reporter.ReportEvent micDone,"Query",query
    //Logger
     LogSuccessMessage("Test Data Get Query",query)
    //Object declaration
    Set conn= createobject("adodb.connection")
    set rs = createobject("adodb.recordset")
    //Connection string
    conn.Open =  "Dsn=branch;Uid=support;Pwd=sql;"    
    rs.open query, conn   
   // rs.Close
    conn.Close    
    if GetErrorCount()>0  			
		 writeReportLog("Failed to runUpdateSQLQuery","Failed", Err.Description ,"")

//***************************************************************************************************************************
//@Method: get_LoanNumber_From_DB()
//@Author: Sumithra
//@Date 9th july 2018
//@Description: This function is to get loan number from DB
//Ex:  get_LoanNumber_From_DB("ACTIVE","55")
//***************************************************************************************************************************
get_LoanNumber_From_DB(String AccountStatus,String AccountType_Code)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
     query = "Select * from support.bp_account_tbl where acct_status =//" & AccountStatus & "// and acct_type=//" & AccountType_Code & "// order by rand()"     
     //query = "Select * from support.bp_account_tbl where acct_status =//" & AccountStatus & "// and acct_type=//" & AccountType_Code & "// order by loan_nbr desc"     
    //run query to fetch loan number
	 loanNumber = runSQLQuery_WithWarning_WithoutExit(query, "loan_nbr")
	 //if Loan are not available 
	if loanNumber = "0" 
		 writeReportLog("<b> <font color=//orange//> No Loans found for Account type: " & AccountType_Code & "</font> </b>" ,"Passed",FailComments,"")
	get_LoanNumber_From_DB = loanNumber
   if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_From_DB","Failed", Err.Description,"")

//***************************************************************************************************************************
//@Method: UpdateComponentDescription_ComponentTab(refId)
//@Author: Sumithra
//@Date 4 july 2018
//@Description: This function is to update component description value
//Ex:  UpdateComponentDescription_ComponentTab(refId)
//***************************************************************************************************************************
UpdateComponentDescription_ComponentTab(String refId)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	Query1 = "Update bp_account_component_tbl set descr=//PFS GAP// where descr=//Dealer GAP// and acct_id =" & refId 
	Query2 = "Update bp_account_component_tbl set opt=//GAP// where descr=//PFS GAP// and acct_id = " & refId
    runUpdateSQLQuery(query1)
    runUpdateSQLQuery(query2)
    if GetErrorCount()>0  			
		 writeReportLog("Failed to UpdateComponentDescription_ComponentTab","Failed", Err.Description ,"")

//******************************************************************************************************************************************************
//@MethodName: get_LastChg_Date_CollateralTab_DB()
//@Author Chandra
//@Date 06 July 2018
//@Description This is get Last change Date,Time,UserID from DB in Collateral Tab
//Ex  get_LastChg_Date_CollateralTab_DB("last_chg_dt")
//******************************************************************************************************************************************************
get_LastChg_Date_CollateralTab_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_list").WaitWhileExists(10) 
		VIN_Number = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_list").GetCellData("#1","vin")
    //Get and return Lastchange Date in Collateral Tab
	LastChange_Date_DB = runSQLQuery("SELECT vin,last_chg_dt FROM support.bp_account_collateral_tbl where vin=//"& VIN_Number &"// ORDER BY last_chg_dt DESC","last_chg_dt")		
	get_LastChg_Date_CollateralTab_DB = LastChange_Date_DB
	GetDateTimeUserID = get_Add_Date_Time_UserID_DB(get_LastChg_Date_CollateralTab_DB)
	get_LastChg_Date_CollateralTab_DB = GetDateTimeUserID
    if GetErrorCount()>0  			
		 writeReportLog("Failed to get_LastChg_Date_CollateralTab_DB","Failed", Err.Description ,"")

//******************************************************************************************************************************************************
//@MethodName: get_Repo_LastChg_Redeemed_Date_AccountTab_DB()
//@Author Chandra
//@Date 06 July 2018
//@Description This is get Repo, Last change and Redeemed Date,Time,UserID from DB in Account Tab
//Ex  get_Repo_LastChg_Redeemed_Date_AccountTab_DB("repo_dt","last_chg_dt","redeemed_dt")
//******************************************************************************************************************************************************
get_Repo_LastChg_Redeemed_Date_AccountTab_DB(String RepoDate,String LastChangeDate,String RedeemedDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct").WaitWhileExists(10) 
		Account_ID = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct").GetCellData("#1","acct_id")
    //Get and return Repo, Lastchange, Redeemed Date in Account Tab
    if RepoDate = "repo_dt" 
    	Repo_Date_DB = runSQLQuery("SELECT repo_dt FROM support.bp_account_tbl where acct_id=//"& Account_ID &"// ORDER BY repo_dt DESC","repo_dt")
    	get_Repo_LastChg_Redeemed_Date_AccountTab_DB = Repo_Date_DB
	else if LastChangeDate = "last_chg_dt" 
		LastChange_Date_DB = runSQLQuery("SELECT last_chg_dt FROM support.bp_account_tbl where acct_id=//"& Account_ID &"// ORDER BY last_chg_dt DESC","last_chg_dt")		
		get_Repo_LastChg_Redeemed_Date_AccountTab_DB = LastChange_Date_DB
	else if RedeemedDate = "redeemed_dt" 
		Redeemed_Date_DB = runSQLQuery("SELECT redeemed_dt FROM support.bp_account_tbl where acct_id=//"& Account_ID &"// ORDER BY redeemed_dt DESC","redeemed_dt")		
		get_Repo_LastChg_Redeemed_Date_AccountTab_DB = Redeemed_Date_DB
	GetDateTimeUserID = get_Add_Date_Time_UserID_DB(get_Repo_LastChg_Redeemed_Date_AccountTab_DB)
	get_Repo_LastChg_Redeemed_Date_AccountTab_DB = GetDateTimeUserID
    if GetErrorCount()>0  			
		 writeReportLog("Failed to get_Repo_LastChg_Redeemed_Date_AccountTab_DB","Failed", Err.Description ,"")

//******************************************************************************************************************************************************
//@MethodName: get_AcctNum_From_DB_To_Add_CPI()
//@Author Sumithra
//@Date 13 July 2018
//@Description This is to get account number from DB to add CPI
//Ex  get_AcctNum_From_DB_To_Add_CPI()
//******************************************************************************************************************************************************
get_AcctNum_From_DB_To_Add_CPI()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run 
    query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "CPI_SQLQuery.txt")
    //run query to fetch loan number
	 get_AcctNum_From_DB_To_Add_CPI = runSQLQuery(query, "loan_nbr")
    if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_AcctNum_From_DB_To_Add_CPI","Failed", Err.Description,"")

//***************************************************************************************************************************
//@Method: get_Account_Id_From_DB(AccountStatus,AccountType_Code)
//@Author: Sumithra
//@Date 13th July 2018
//@Description: This function is to get account id from DB
//Ex:  get_Account_Id_From_DB(AccountStatus,AccountType_Code)
//***************************************************************************************************************************
get_Account_Id_From_DB(String AccountStatus,String AccountType_Code)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
     query = "Select * from support.bp_account_tbl where acct_status =" & "//" & AccountStatus & "//" & " and acct_type=" & AccountType_Code         
    //run query to fetch account id
	 //get_Account_Id_From_DB = runSQLQuery(query, "acct_id")
     get_Account_Id_From_DB = runSQLQuery_WithWarning_WithoutExit(query,"acct_id")
     //Error Handling
     if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_Account_Id_From_DB","Failed", Err.Description,"")

 //*************************************************************************************************************************************************
//@Method: get_LoanNumber_Payments_From_DB()
//@Author Chandra
//@Date 10th July 2018
//@Description This function is to get loan number from DB intrest amount is > 100 in Payments table
//@Return field value which is required
//Ex:  get_LoanNumber_Payments_From_DB("Active,"55","100")
//*************************************************************************************************************************************************
get_LoanNumber_Payments_From_DB(String AccountStatus,String AccountTypeCode,String InterestAmount)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
     query = "Select * from support.bp_account_tbl where acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode & "// and int_amt>//" & InterestAmount & "// Order By RAND()"       
    //run query to fetch loan number
	 get_LoanNumber_Payments_From_DB = runSQLQuery(query,"loan_nbr")
  	 if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_Payments_From_DB","Failed", Err.Description,"")

//*****************************************************************************************************************
//@methodName: Read_Individual_Column_Data(Sql,ColumnName)
//@Author Jeevan
//@Date 08 Aug 2018
//@Description This is to read individual column data from the DB Table
//Ex: Result = Read_Individual_Column_Data("bp_loantype_dealer_primaryapplicant,"LastName","SC")
//*****************************************************************************************************************
Read_Individual_Column_Data(String TableName,String ColumnName,String StateID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
String Connection
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
String ConnectionString
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
String Recordset
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
Sql = "Select * from "&TableName&" where UsedData <> //Y// and StateID =//"&StateID&"//"
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//define the connection string, specify database driver
ConnString = "DRIVER={MySQL ODBC 8.0 ANSI Driver}; SERVER=s1-alm-1; DATABASE=branchplusqa;UID=admin;PASSWORD=admin; OPTION=3"
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//create an instance of the ADO connection and recordset objects
Set Connection = CreateObject("ADODB.Connection")
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
Set Recordset = CreateObject("ADODB.Recordset")
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//Open the connection to the database
Connection.Open ConnString
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//Open the recordset object executing the SQL statement and update records 
Recordset.Open SQL,Connection
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
Read_Individual_Column_Data = Recordset(ColumnName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//Recordset.Close
Set Recordset=nothing
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
Connection.Close
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
Set Connection=nothing
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
 Function
//*****************************************************************************************************************
//@methodName: Update_Individual_Column_Data(TableName,ColumnName,Value,ID)
//@Author Jeevan
//@Date 08 Aug 2018
//@Description This is to Update individual column data to the DB Table
//Ex:  Update_Individual_Column_Data("createautomobileloan_individual","LastName","Jennie")
//*****************************************************************************************************************
Update_Individual_Column_Data(String TableName,String ColumnName,String Value,String ID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
String Connection
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
String ConnectionString
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
String Recordset
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
SQL ="UPDATE "&TableName&" SET "&ColumnName&" = //"&Value&"// Where ID="&ID
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//define the connection string, specify database driver
ConnString = "DRIVER={MySQL ODBC 8.0 ANSI Driver}; SERVER=s1-alm-1; DATABASE=branchplusqa;UID=admin;PASSWORD=admin; OPTION=3"
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//create an instance of the ADO connection and recordset objects
Set Connection = CreateObject("ADODB.Connection")
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
Set Recordset = CreateObject("ADODB.Recordset")
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//Open the connection to the database
Connection.Open ConnString
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//Open the recordset object executing the SQL statement and update records 
Recordset.Open SQL,Connection
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//Recordset.Close
Set Recordset=nothing
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
Connection.Close
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
Set Connection=nothing
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
 Function
//***********************************************GENERIC Function************************************************************************
//@methodName: getvalue_From_AppDB()
//@Author: Karthik
//@Date 27 Nov 2018
//@Description This will get teh Column Value for the Specified Column Name from Table Name Specified
//Ex:  getvalue_From_AppDB("bp_Branch_SetUP_TBL","last_daily_closing")
//***********************************************************************************************************************
getvalue_From_AppDB(String tableName,String columnName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query to fetch the Bank Id based on Employee ID
	query = "select * from " & tableName
	getvalue_From_AppDB = runSQLQuery(query, columnName)
	//Error handing
	 if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/getvalue_From_DBTable","Failed", Err.Description ,"")

runSQLQuery_WithWarning(String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //Variable declaration
    String conn, rs
     LogSuccessMessage("Test Data Get Query",queryToExecute)
    //Object declaration
    Set conn= createobject("adodb.connection")
    set rs = createobject("adodb.recordset")
    //Connection string
    conn.Open =  "Dsn=branch;Uid=support;Pwd=sql;"
    //Executing the Query
    rs.open query, conn     
	//Validating for Query No Results
	if rs.EOF 
		 writeReportLog("Looks Like Query >> " & query &  " did not found any record","Warning", Err.Description,"")		 
		//Exit Test and Update Summary Report
		 exitTestAndUpdateSummaryReport()
	else
		//Fetching the required Field Value
   		 runSQLQuery_WithWarning = rs.Fields(requiredFieldName)	
	rs.Close
    conn.Close 
    //if Query Does not Return Any Result
    if GetErrorCount()>0 
		 writeReportLog("DB column Name " & requiredFieldName & " which you are looking is not available in the query Result; Query : " & query ,"Warning", Err.Description,"")		

//**********************************************************************************************
//@methodName: get_LoanNumber_FromAppDB(AccountStatus, AccountTypeCode, UI_Del_Status)
//@Description: This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status.
//@Author: Chandra
//@Date 26 Feb 2019
//@Returning the Loan Number
//Ex:  get_LoanNumber_FromAppDB("ACTIVE", "55", "Current")
//*********************************************************************************************** 
get_LoanNumber_FromAppDB(String AccountStatus,String AccountTypeCode,String UI_Del_Status)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get ID Based on Delinquency Status and Contractual status
	 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	//query to run
	if UI_Del_Status = ">90" 
//		query = "Select * from support.bp_account_tbl where acct_status = //" & AccountStatus & "//" & " and acct_type= //" & AccountTypeCode & "// and del_status = //"& delinqStatus  &"// and contractual_status > //"& contractual_status  &"// order by rand()"
		query = "Select * from support.bp_account_tbl where acct_id Not in (select acct_id from bp_account_collateral_tbl where repo_assigned_yn = //N//) and acct_status = //" & AccountStatus & "//" & " and acct_type= //" & AccountTypeCode & "// and del_status = //"& delinqStatus  &"// and contractual_status > //"& contractual_status  &"// order by rand()"
	else
//		query = "Select * from support.bp_account_tbl where acct_status = //" & AccountStatus & "//" & " and acct_type= //" & AccountTypeCode & "// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// order by rand()"
		query = "Select * from support.bp_account_tbl where acct_id Not in (select acct_id from bp_account_collateral_tbl where repo_assigned_yn = //N//) and acct_status = //" & AccountStatus & "//" & " and acct_type= //" & AccountTypeCode & "// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// order by rand()"
	//Fetching the loan number from DB
	loanNumber = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	//if Loan are not available 
	if loanNumber = "0" 
		 writeReportLog("<b> <font color=//orange//> No Loans found for Account Type Code: " & AccountTypeCode & " and Delinquency Status: " & UI_Del_Status & "</font> </b>" ,"Passed",FailComments,"")
	get_LoanNumber_FromAppDB = loanNumber
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_FromAppDB","Failed", Err.Description,"")

//**********************************************************************************************
//@methodName: get_ID_BasedOn_DelinqStatus_And_ContractualStatus(ByVal UI_Del_Status, ByRef delinquencyStatus, ByRef contractual_status)
//@Description: This is to get the ID based on Delinquency Status (Current, Potential, 30,60,90,>90).
//@Author: Chandra
//@Date 26 Feb 2019
//@Returning the delinquencyStatus and contractual_status
//Ex:  get_ID_BasedOn_DelinqStatus_And_ContractualStatus("Current", "", "0")
//*********************************************************************************************** 
get_ID_BasedOn_DelinqStatus_And_ContractualStatus(String ByVal UI_Del_Status,String ByRef delinquencyStatus,String ByRef contractual_status)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	if ToUpper(UI_Del_Status) = ToUpper("Current") 
		delinquencyStatus = "" 
		contractual_status =  "0"
	else if ToUpper(UI_Del_Status) = ToUpper("Potential") 
		delinquencyStatus = "P" 
		contractual_status =  "0"
	else if UI_Del_Status = "30" 
		delinquencyStatus = "" 
		contractual_status =  "1"
	else if UI_Del_Status = "60" 
		delinquencyStatus = "" 
		contractual_status =  "2"
	else if UI_Del_Status = "90" 
		delinquencyStatus = "" 
		contractual_status =  "3"
	else if UI_Del_Status = ">90" 
		delinquencyStatus = "" 
		contractual_status =  "4"
	else
		 writeReportLog("Wrong arrguments passed: "& UI_Del_Status &" in get_ID_BasedOn_DelinqStatus_And_ContractualStatus","Failed", Err.Description,"")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_ID_BasedOn_DelinqStatus_And_ContractualStatus","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_BranchPlus_CityName_FromDB()
//@Author Chandra
//@Date 25 Feb 2019
//@Description This is get the Branch Plus City Name from App DB (bp_location_tbl)
//@Returing the Branch Plus City Name
//Ex  get_BranchPlus_CityName_FromDB()
//*********************************************************************************************
get_BranchPlus_CityName_FromDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get value from DB Query
	branchCityName = ToUpper(getvalue_From_AppDB("bp_location_tbl where loc_type = //BRANCH// and loc_class=//MAILING//", "city"))
	get_BranchPlus_CityName_FromDB = branchCityName
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_BranchPlus_CityName_FromDB","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_Null_Columns_In_ReceiptNotificationTbl_FromDB(columName,requiredFiledName)
//@Author Chandra
//@Date 25 Feb 2019
//@Description This is get the Field Values where Column value is //NULL// based on File name(file_path, file_name) in Receipt_notification_tbl from DB
//@Returing the cell value of specified column
//Ex  get_Null_Columns_In_ReceiptNotificationTbl_FromDB("file_path","file_path")
//*********************************************************************************************
get_Null_Columns_In_ReceiptNotificationTbl_FromDB(String columName,String requiredFiledName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Null value from receipt notification table from DB 
	requiredValue = runSQLQuery_WithWarning_WithoutExit("select * from receipt_notification_tbl where "& columName &" IS NULL order by entry_dt desc",requiredFiledName)
	if requiredValue = "0" 
		 writeReportLog("//"& requiredFiledName &"// value is not availble in //receipt_notification_tbl// DB, Please Run Nightly Job","Failed", "","")
	get_Null_Columns_In_ReceiptNotificationTbl_FromDB = requiredValue
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_Null_Columns_In_ReceiptNotificationTbl_FromDB","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_Data_In_ReceiptNotificationTbl_FromDB(accountID,requiredFiledName)
//@Author Chandra
//@Date 25 Feb 2019
//@Description This will get the for the specified reportID from Receipt_notification_tbl
//@returns retuns the cell value based for the field name specified
//Ex  get_Data_In_ReceiptNotificationTbl_FromDB("76578746710","file_path")
//*********************************************************************************************
get_Data_In_ReceiptNotificationTbl_FromDB(String reportID,String requiredFiledName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Null value from receipt notification table from DB 
	required_Value = runSQLQuery_WithWarning_WithoutExit("select * from receipt_notification_tbl where rpt_id = //"& reportID &"// order by entry_dt desc",requiredFiledName)
	if required_Value = "0" 
		 writeReportLog("//"& requiredFiledName &"// value is not availble in //receipt_notification_tbl// DB, Please Run Nightly Job","Failed", "","")
	get_Data_In_ReceiptNotificationTbl_FromDB = required_Value
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_Data_In_ReceiptNotificationTbl_FromDB","Failed", Err.Description,"")

//****************************** GENERIC FUNCTION ***********************************************
//@methodName: runSQLQuery_WithWarning_WithoutExit(query, requiredFieldName)
//@Author Chandra
//@Date 03 Jan 2018
//@Description This is to run sql query and get value with warning status, where values are not available with exit the test
//Ex:// runSQLQuery_WithWarning_WithoutExit(query, requiredFieldName)
//*********************************************************************************************
runSQLQuery_WithWarning_WithoutExit(String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //Variable declaration
    String conn, rs
     LogSuccessMessage("Test Data Get Query",query)
    //Object declaration
    Set conn= createobject("adodb.connection")
    set rs = createobject("adodb.recordset")
    //Connection string
    conn.Open =  "Dsn=branch;Uid=support;Pwd=sql;"
    //Executing the Query
    rs.open query, conn     
	//Validating for Query No Results
	if rs.EOF 
		runSQLQuery_WithWarning_WithoutExit = "0"
	else
		//Fetching the required Field Value
   		 runSQLQuery_WithWarning_WithoutExit = rs.Fields(requiredFieldName)	
	rs.Close
    conn.Close 
    //if Query Does not Return Any Result
    if GetErrorCount()>0 
		 writeReportLog("DB column Name " & requiredFieldName & " which you are looking is not available in the query Result; Query : " & query ,"Warning", Err.Description,"")		

//**********************************************************************************************
//@methodName: get_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB(query_Path, AccountStatus, AccountTypeCode, DelinquencyStatus)
//@Description: This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status.
//@Author: Chandra
//@Date 21 Mar 2019
//@Returning the Loan Number
//Ex:  get_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB(query_Path,"ACTIVE", "55", "Current")
//***********************************************************************************************
get_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB(String query_Path,String AccountStatus,String AccountTypeCode,String DelinquencyStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Last Year Date from Current system Date
	ContractFromDate = addDays_for_SepecifiedDate("yyyy", -1,Date)
	found = False
	for itr = 1 To 100
		//get the Loan Number from DB
		loanNumber = get_LoanNumber_FromAppDB(AccountStatus, AccountTypeCode, DelinquencyStatus)
		//get the Loan Number from DB
		//loanNumber = get_LoanNumber_FromDB_BasedOn_ContractDate(AccountStatus,AccountTypeCode,DelinquencyStatus,ContractFromDate,Date)
		//Get Entire File Content from text file
		query = get_Entire_File_Content(query_Path)
		//Replaceing the LoanNumber
		query = Replace(query,"@LoanNumber",loanNumber)
		//Get the Due To Day Amount from DB
		DueTodayAmt = runSQLQuery(query, "Amount Due Today")
		//Comparing the Due Today Amount is 
		if Ccur(DueTodayAmt) <= Ccur("0") 
			found = True
			get_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB = loanNumber
			Exit for
	if found = False 
		 writeReportLog("Current Accounts which you are looking is not available in the DB and for Account Type: "&AccountTypeCode&" and Delinquency Status: "&DelinquencyStatus&"","Failed", Err.Description,"")		
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB","Failed", Err.Description ,"")

//*********************************************************************************************
//@methodName: get_BranchMailingAddress_FromDB()
//@Author Chandra
//@Date 25 Feb 2019
//@Description This is get the Branch Address Name from App DB
//@Returing the Branch Address
//Ex  get_BranchMailingAddress_FromDB()
//*********************************************************************************************
get_BranchMailingAddress_FromDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Branch Name form DB 
	get_BranchMailingAddress_FromDB = getvalue_From_AppDB("bp_location_tbl where loc_type = //BRANCH// and loc_class=//MAILING//","addr1")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_BranchMailingAddress_FromDB","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_BranchName_FromDB()()
//@Author Chandra
//@Date 25 Feb 2019
//@Description This is get the Branch Name from App DB
//@Returing the Branch Name
//Ex  get_BranchName_FromDB()()
//*********************************************************************************************
get_BranchName_FromDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Branch Name form DB 
 	get_BranchName_FromDB = getvalue_From_AppDB("bp_branch_setup_tbl","branch_name")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_BranchName_FromDB","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: verify_ReportDocumentTbl_FromDB_AfterRunNightlyJob(reportID,requiredFiledName)
//@Author Chandra
//@Date 07 Mar 2019
//@Description This is get the Field Values based on reportID, filepath is Not NULL and Document is NULLin bp_report_document_tbl from DB
//@Returing the return the cell value of fieldName specified
//Ex  verify_ReportDocumentTbl_FromDB_AfterRunNightlyJob("159000023584"","filepath")
//*********************************************************************************************
verify_ReportDocumentTbl_FromDB_AfterRunNightlyJob(String reportID,String requiredFiledName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Null value from receipt notification table from DB 
	//requiredFieldValue = runSQLQuery_WithWarning_WithoutExit("select * from bp_document_tbl where document_id = (select document_id from bp_document_record_affil_tbl where record_id = //"& reportID & "//) and filepath is not NULL and Document is NULL",requiredFiledName)
	requiredFieldValue = runSQLQuery_WithWarning_WithoutExit("select * from bp_document_tbl where document_id = (select document_id from bp_document_record_affil_tbl where record_id = //"& reportID & "//) and filepath is not NULL",requiredFiledName)
	if requiredFieldValue = "0" 
		 writeReportLog("//"& requiredFiledName &"// value is not availble in //bp_document_tbl// DB, Please Run Nightly Job","Failed", "","")
	verify_ReportDocumentTbl_FromDB_AfterRunNightlyJob = requiredFieldValue
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in verify_ReportDocumentTbl_FromDB_AfterRunNightlyJob","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_BranchID_FromDB()
//@Author Chandra
//@Date 25 Feb 2019
//@Description This is get the Branch ID from App DB
//@Returing the Branch ID
//Ex  get_BranchID_FromDB()
//*********************************************************************************************
get_BranchID_FromDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get value from DB Query
	get_BranchID_FromDB = getvalue_From_AppDB("bp_branch_setup_tbl", "branch_id")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_BranchID_FromDB","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob(reportID,requiredFiledName)
//@Author Chandra
//@Date 07 Mar 2019
//@Description This is get the Field Values based on reportID, filepath is NULL and Document is Not NULLin bp_report_document_tbl from DB
//@Returing the return the cell value of fieldName specified
//Ex  verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob("159000023584"","filepath")
//*********************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																							//verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob(reportID,requiredFiledName)
//	
//	//Get Null value from receipt notification table from DB 
//	requiredValue = runSQLQuery("select * from bp_document_tbl where rpt_id = //"& reportID &"// and filename is NULL and Document is Not NULL order by entry_dt desc",requiredFiledName)
//	verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob = requiredValue
//	//Error handling
//	if GetErrorCount()>0 
//		 writeReportLog("Failed in verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob","Failed", Err.Description,"")
//	
////RemoveFunction
verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob(String reportID,String requiredFiledName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Fetching App Version
	appVersionWithoutDot = Trim(Replace(Environment.Value("appVersion"),".",""))
	//########
	//Release Specified Handling - Handled for the Changes Made in 9.6 Release
	//########
	if appVersionWithoutDot >= 960 
		//Get Null value from receipt notification table from DB 
		//requiredValue = runSQLQuery("select * from bp_document_tbl where document_id = (select document_id from bp_document_record_affil_tbl where record_id = //"& reportID & "//) and filepath is NULL and Document is Not NULL",requiredFiledName)
	   // requiredValue = runSQLQuery("select * from bp_document_tbl where document_id = (select document_id from bp_document_record_affil_tbl where document_id = //"& reportID & "//) and filepath is NULL",requiredFiledName)
		requiredValue = runSQLQuery("select * from bp_document_tbl where document_id = (select document_id from bp_document_record_affil_tbl where record_id = //"& reportID & "//) and filepath is NULL" ,requiredFiledName)	   
	else
		//Get Null value from receipt notification table from DB 
		requiredValue = runSQLQuery("select * from bp_report_document_tbl where rpt_id = //"& reportID &"// and filename is NULL and Document is Not NULL order by entry_dt desc",requiredFiledName)
	verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob = requiredValue
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_valueFrom_FeatureTable()
//@Author Karthik
//@Date 8 May 2019
//@Description This is get the value column specified from the Feature  table for the feature name specified
//Ex  get_valueFrom_FeatureTable("CENTRALIZED MAILING","feature_yn")
//*********************************************************************************************
get_valueFrom_FeatureTable(String featureName,String columnName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Branch Name form DB 
 	get_valueFrom_FeatureTable =  runSQLQuery("select * from bp_feature_tbl where feature = //" & featureName & "//", columnName)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_valueFrom_FeatureTable","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName:  enableOrDisableFeatureInDB()
//@Author Karthik
//@Date 25 Feb 2019
//@Description This will enable/disable the Feature in App DB i.e.,  updating the feature_yn to "Y"  or "N" in bp_Feature_tbl
//             based on Input/Parameter
//Ex  enableOrDisableFeatureInDB("CENTRALIZED MAILING","Enable")
//Ex  enableOrDisableFeatureInDB("CENTRALIZED MAILING","Disable")
//*********************************************************************************************
enableOrDisableFeatureInDB(String featureName,String statusToSet)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	if ToUpper(statusToSet) = "ENABLE" or ToUpper(statusToSet) = "Y" 
		featureYn = "Y"
	else if ToUpper(statusToSet) = "DISABLE" or ToUpper(statusToSet) = "N" 
		featureYn = "N"
	else
		 writeReportLog("Please Pass Proper Input to enableOrDisableFeatureInDB","Failed","Either Y Or N","")
	//Run update Query
	featureQuery =  "update bp_feature_tbl set feature_yn = //"& featureYn & "// where feature = //" & featureName & "//"
	 LogSuccessMessage("Query>>" &  featureQuery,"")
 	runUpdateSQLQuery(featureQuery)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in enableFeatureInDB","Failed", Err.Description,"")

//*******************************************************************************************************
//@Author Karthik
//@MethodName getLoanNumberBasedOnCriteriaSpecified
//@Description this method will return the Loan Number based on the Affiliation type, account type, account Status and account Class
//NOTE: for this function if you pass Empty("") or null or "ANY" it will ignore that condition 
//(for Example, if we pass accountType as null or "ANY" then this function will get loans for all types)
//Examples
//msgbox getLoanNumberBasedOnCriteriaSpecified("PRIMARY","AUTO","ACTIVE","NEW_LOAN")
//msgbox getLoanNumberBasedOnCriteriaSpecified("JOINT","AUTO","ACTIVE","NEW_LOAN")
//for Reference
//actStatus Codes/Values = //ACTIVE//,//APPROVED//,//CANCELLD//,//CHRG_OFF//,//CHRGBANK//,//CHRGSKIP//,//PAID_OUT//,//REDEEMED//,//REPO//,//REPOSOLD//,//REVERSED//,//SKIP//,//SOLDIER//
//acctClass Codes/Value = //NEW_LOAN//,//FMR_BRWR//,//BR_INT//
//***********************************************************************************************************
getLoanNumberBasedOnCriteriaSpecified(String affiType,String accountType,String acctStatus,String acctClass)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Constructing the base Query
	if ToUpper(affiType) = "PRIMARY" 
		baseQuery =  "select * from bp_account_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
	else if ToUpper(affiType) = "COSIGN" or ToUpper(affiType) = "JOINT" 	
	   baseQuery = "select * from bp_account_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" & ToUpper(affiType) & "//)"
	//Constructing based on Account Type
	if ToUpper(accountType) = "MOTOR" or  accountType = "56" 
		baseQuery = baseQuery & " and int_type = //INT_BRNG// and acct_type = //56//"
	else if ToUpper(accountType) = "AUTO" or  accountType = "55" 
		baseQuery = baseQuery & " and int_type = //INT_BRNG// and acct_type = //55//"
	else if ToUpper(accountType) = "DIRECT" or  accountType = "31" 
		baseQuery = baseQuery & " and int_type = //INT_BRNG// and acct_type = //31//"
	else//if ToUpper(accountType) = "ANY" or Trim(accountType) = "" or IsNull(accountType) 
	 	baseQuery = baseQuery & " and int_type = //INT_BRNG//"
	//Constructing based on Account Status
	if not(ToUpper(acctStatus) = "ANY" or Trim(acctStatus) = "" or IsNull(acctStatus)) 
		baseQuery = baseQuery & " and acct_status = //" & acctStatus & "//"
	//Constructing based on Account Status
	if not(ToUpper(acctClass) = "ANY" or Trim(acctClass) = "" or IsNull(acctClass)) 
		baseQuery = baseQuery & " and acct_class = //" & acctClass & "//"
	//Appending the Order by
	baseQuery = baseQuery & " order by rand()"
	//Logging the Query Generated in UFT Report
	  LogSuccessMessage("Query Generated in getLoanNumberBasedOnCriteriaSelected",baseQuery)
	//Running the SQL Query and returning the value
	getLoanNumberBasedOnCriteriaSpecified = runSQLQuery_WithWarning_WithoutExit(baseQuery,"loan_nbr")
Remove
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//*************************************************************************************
//@MethodName getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl
//@Description this function will get the value from the ReportDocumentTable for the latest document which got printed
//@Author Karthik
//@Param colName --> Table ColumnName 
//@Return value Of the specified column name
//Ex: msgbox getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl("entry_dt")
//****************************************************************************************
getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl(String colName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//	getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl = runSQLQuery("select * from bp_report_document_tbl order by entry_dt desc",colName)
//	########
	//Release Specified Handling - Handled for the Changes Made in 9.6 Release
	//########
	if Trim(Replace(Environment.Value("appVersion"),".","")) >= 960 
		getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl = runSQLQuery("select * from bp_document_tbl order by entry_dt desc",colName)
	else
		getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl = runSQLQuery("select * from bp_report_document_tbl order by entry_dt desc",colName)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl","Failed", Err.Description ,"")

//***********************************************************************************************************************
//@methodName: get_CustomerDetails_Based_On_AccountID_And_AffilType_FromDB(accountID,affilType,requiredFileds)
//@Author: Chandra
//@Date 23 May 2018
//@Description This will get the Customer Details based on Account ID and Affiliation Type from DB
//@Returing the Customer Details
//Ex:  get_CustomerDetails_Based_On_AccountID_And_AffilType_FromDB("137700013584"","Primary","first_name:last_name:middle_name:credit_score)
//***********************************************************************************************************************
get_CustomerDetails_Based_On_AccountID_And_AffilType_FromDB(String accountID,String affilType,String requiredFileds)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query
	query = "select * from bp_account_customer_affil_tbl inner join bp_customer_tbl where bp_customer_tbl.cust_id = bp_account_customer_affil_tbl.cust_id and acct_id = //" & accountID & "// and affil_type = //" & affilType & "//"
   //Executing the Query Generated
	customerDetails = runSQLQuery_FetchMultipleValues(query, requiredFileds)
	get_CustomerDetails_Based_On_AccountID_And_AffilType_FromDB = customerDetails
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_CustomerDetails_Based_On_AccountID_AffilType_FromDB","Failed", Err.Description ,"")

//************************************************************************************************************************************************************
//@methodName : get_CustomerDetails_BasedOn_LoanNum_And_AffilType_FromDB(loanNum, affilType, requiredFileds)
//@Author : Chandra
//@Date 24 May 2018
//@Description This function will Get the customer details based on Loan number and Affiliation type from App DB
//@Returing the Customer Details
//Ex:  get_CustomerDetails_BasedOn_LoanNum_And_AffilType_FromDB("137700137124", "Primary", "first_name:last_name:middle_name:credit_score")
//************************************************************************************************************************************************************ 
get_CustomerDetails_BasedOn_LoanNum_And_AffilType_FromDB(String loanNum,String affilType,String requiredFileds)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query
	query = "select * from bp_customer_tbl where cust_id in (select cust_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_tbl where loan_nbr = //" & loanNum & "//) and affil_type = //" & affilType & "//)"
   //Executing the Query Generated
	customerDetails = runSQLQuery_FetchMultipleValues(query, requiredFileds)
	get_CustomerDetails_BasedOn_LoanNum_And_AffilType_FromDB = customerDetails
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/get_CustomerDetails_BasedOn_LoanNum_And_AffilType_FromDB","Failed", Err.Description ,"")

//***************************************************************************************************************************
//@Method: get_SumOfCharges_BasedOn_WaivedOff_FromDB(lonNum,chgType,waiveOffYN)
//@Author: Sumithra
//@Date 10th may 2019
//@Description: This function is to get Sum of charges based on waive off Y or N
//Ex:  get_SumOfCharges_BasedOn_WaivedOff_FromDB("9652","COLL_EXP","N")
//***************************************************************************************************************************
get_SumOfCharges_BasedOn_WaivedOff_FromDB(String lonNum,String chgType,String waiveOffYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
     query = "select sum(charge_amt) from bp_account_charge_tbl where acct_id in (select acct_id from bp_account_tbl where loan_nbr =//"& lonNum &"//) and charge_type in (//"&ChgType&"//) and waived_yn =//"&waiveOffYN&"//"     
    //run query to fetch loan number
	 result = runSQLQuery_WithWarning_WithoutExit(query, "sum(bp_account_charge_tbl.charge_amt)")
	 if result <> "" 
	 	get_SumOfCharges_BasedOn_WaivedOff_FromDB = result
 	else
	 	get_SumOfCharges_BasedOn_WaivedOff_FromDB = "0"
   if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_SumOfCharges_BasedOn_WaivedOff_FromDB","Failed", Err.Description,"")

//******************************************************************************************************************************************
//@Method getChargeDetails_BasedOnLoanCreationDate_FromAppDB
//@Author Karthik
//@Description this method will retuns the values(Can Return Multiple Values) from the Charge Calculation Table based on the Parameters Passed
//@Param
//	stateID --> pass the State ID
//	loanCreationDate --> Specify the Loan Creation Data so that it can identify the Correct Data required
//	accountType --> Pass the accoutn type 31, 55,56
// 	 opt --> Pass the Value "LATE_CHG" or "NSF_CHRG" based on the value required for you
//	requiredFieldValues --> specify the DB Column names. if multiple values are required then specify using the seperator ":"
 //msgbox 	("SC","5/7/2019","31","LATE_CHG","min_amt:max_amt") --> Direct Loan
 //msgbox getChargeDetails_BasedOnLoanCreationDate_FromAppDB("SC","5/7/2019","55","NSF_CHRG","min_amt:max_amt") --> Auto Loan
 //***************************************************************************************************************************************
 getChargeDetails_BasedOnLoanCreationDate_FromAppDB(stateID,loanCreationDate,accountType,opt,requiredFieldValues)
 	cnvtDate = formatDateWithSpecifiedDelimeter(loanCreationDate,"YYYYMMDD","-")
 	sqlGenerated = "select * from bp_charge_calc_tbl where state = //" & stateID & "// and start_dt <= //" & cnvtDate & "// and end_Dt >= //" & cnvtDate & "// and acct_type = //"& accountType & "// and opt = //"& opt & "//"
 	//Run SQL Query and return values
 	getChargeDetails_BasedOnLoanCreationDate_FromAppDB = runSQLQuery_FetchMultipleValues(sqlGenerated,requiredFieldValues)
 	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in method getChargeDetails_BasedOnLoanCreationDate_FromAppDB","Failed", Err.Description,"")
 RemoveFunction
//*******************************************************************************************************
//@Author Chandra
//@MethodName get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB
//@Date 07 Aug 2019
//@Description this method will return the Loan Number based on the Affiliation type, account type, account Status and account Class where Cease is not marked 
//NOTE: for this function if you pass Empty("") or null or "ANY" it will ignore that condition 
//(for Example, if we pass accountType as null or "ANY" then this function will get loans for all types)
//Examples
//msgbox get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB("PRIMARY","AUTO","ACTIVE","NEW_LOAN")
//msgbox get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB("JOINT","AUTO","ACTIVE","NEW_LOAN")
//for Reference
//actStatus Codes/Values = //ACTIVE//,//APPROVED//,//CANCELLD//,//CHRG_OFF//,//CHRGBANK//,//CHRGSKIP//,//PAID_OUT//,//REDEEMED//,//REPO//,//REPOSOLD//,//REVERSED//,//SKIP//,//SOLDIER//
//acctClass Codes/Value = //NEW_LOAN//,//FMR_BRWR//,//BR_INT//
//***********************************************************************************************************
get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB(String affiType,String accountType,String acctStatus,String acctClass)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Constructing the base Query
	if ToUpper(affiType) = "PRIMARY" 
		baseQuery =  "select * from bp_account_tbl where acct_id Not in (select acct_id from bp_do_not_contact_tbl) and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
	else if ToUpper(affiType) = "COSIGN" or ToUpper(affiType) = "JOINT" 	
	   baseQuery = "select * from bp_account_tbl where acct_id Not in (select acct_id from bp_do_not_contact_tbl) and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" & ToUpper(affiType) & "//)"
	//Constructing based on Account Type
	if ToUpper(accountType) = "MOTOR" or  accountType = "56" 
		baseQuery = baseQuery & " and int_type = //INT_BRNG// and acct_type = //56//"
	else if ToUpper(accountType) = "AUTO" or  accountType = "55" 
		baseQuery = baseQuery & " and int_type = //INT_BRNG// and acct_type = //55//"
	else if ToUpper(accountType) = "DIRECT" or  accountType = "31" 
		baseQuery = baseQuery & " and int_type = //INT_BRNG// and acct_type = //31//"
	else//if ToUpper(accountType) = "ANY" or Trim(accountType) = "" or IsNull(accountType) 
	 	baseQuery = baseQuery & " and int_type = //INT_BRNG//"
	//Constructing based on Account Status
	if not(ToUpper(acctStatus) = "ANY" or Trim(acctStatus) = "" or IsNull(acctStatus)) 
		baseQuery = baseQuery & " and acct_status = //" & acctStatus & "//"
	//Constructing based on Account Status
	if not(ToUpper(acctClass) = "ANY" or Trim(acctClass) = "" or IsNull(acctClass)) 
		baseQuery = baseQuery & " and acct_class = //" & acctClass & "//"
	//Appending the Order by
	baseQuery = baseQuery & " order by rand()"
	//Logging the Query Generated in UFT Report
	  LogSuccessMessage("Query Generated in get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB",baseQuery)
	//Running the SQL Query and returning the value
	get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB = runSQLQuery_FetchMultipleValues(baseQuery,"loan_nbr")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB","Failed", Err.Description ,"")

//**************************************************************************
//@methodName getTotalAmtPaidToOthersOnYourBehalf_FromAppDB
//@Author Karthik
//@Description this method will be get the Amount Paid to Others on Your Behalf from bank Detail Tbl 
//@Return the Sum of Amount Paid to Others
//EX: msgbox getTotalAmtPaidToOthersOnYourBehalf_FromAppDB("087400009192")
//*************************************************************************
getTotalAmtPaidToOthersOnYourBehalf_FromAppDB(String lnNbr)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	sqlQuery = "select isnull(sum(amt), 0) from bp_bank_detail_tbl where trans_id in (select trans_id from bp_account_tbl where loan_nbr = //" & lnNbr & "//) and check_type <> //CUSTOMER//"
	//UFT Logger
	 LogSuccessMessage("Query", sqlQuery)
	getTotalAmtPaidToOthersOnYourBehalf_FromAppDB = runSQLQuery(sqlQuery,"sum(bp_bank_detail_tbl.amt)")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in getTotalAmtPaidToOthersOnYourBehalf_FromAppDB","Failed", Err.Description ,"")

//*************************************************************************************************************************************************
//@Method: get_TCIFundedLoanNumber_FromDB(accountStatus)
//@Author: GG
//@Date: 7 Mar 2019
//@Description This function is to TCI Funded Loan Number from App DB based on Account Status
//Ex: get_TCIFundedLoanNumber_FromDB("ACTIVE")
//*************************************************************************************************************************************************
get_TCIFundedLoanNumber_FromDB(String accountStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//To fetch the TCI Funded Loans from DB
	query = "select * from bp_account_tbl where funded_deal_source <> //// and acct_status = //" & accountStatus & "// order by rand();"
	//To run the query to get required value 
	get_TCIFundedLoanNumber_FromDB = runSQLQuery(query,"loan_nbr")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_TCIFundedLoanNumber_FromDB","Failed", Err.Description,"")

//10 APR 2019
toSetDate_EmployeeDeliquencyTracker(String todayDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//to set the date
	toSetDate_EmployeeDeliquencyTracker = SetValueInPBDataWindow_DP("w_search","dw_search","#1","start_date",todayDate)
	//To click on OK Button
	 clickButtonInPBWindow("Employee Delinquency Tracker","Ok")
	Sleep (10)
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: toSetDate_EmployeeDeliquencyTracker","Failed", Err.Description ,"")

//**********************************************************************************************
//@methodName: get_LoanNumber_BasedOnOrderBy_FromAppDB(AccountStatus, AccountTypeCode, UI_Del_Status, orderBy)
//@Description: This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status order by rand()/ procd_dt desc.
//@Author: Chandra
//modified by: Sumithra -  the function with/without account type
//@Date 06 Sep 2019
//@Returning the Loan Number
//Ex:  get_LoanNumber_BasedOnOrderBy_FromAppDB("ACTIVE", "55", "Current", "rand")
  	// get_LoanNumber_BasedOnOrderBy_FromAppDB("ACTIVE", "", "Current", "rand")
//*********************************************************************************************** 
get_LoanNumber_BasedOnOrderBy_FromAppDB(String AccountStatus,String AccountTypeCode,String UI_Del_Status,String orderBy)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get ID Based on Delinquency Status and Contractual status
	 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	//SHP -  Append account type if it is not empty
	if AccountTypeCode <> "" 
 		 AccountType_Code = "and acct_type=//" & AccountTypeCode &"//"
	//query to run
	if UI_Del_Status = ">90" 
		query = "Select * from support.bp_account_tbl where acct_status = //" & AccountStatus & "//" & AccountType_Code &" and del_status = //"& delinqStatus  &"// and contractual_status > //"& contractual_status  &"// order by"
	else
		query = "Select * from support.bp_account_tbl where acct_status = //" & AccountStatus & "//" & AccountType_Code & " and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// order by"
	//Constructing the Expected Query (Adding Order by Rand()/ procd_dt)
	if ToUpper(orderBy) = "RAND" 
		query = query & " rand()"
	else
		query = query & " procd_dt desc"
	//Fetching the loan number from DB
	loanNumber = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	//if Loan are not available 
	if loanNumber = "0" 
		 writeReportLog("<b> <font color=//orange//> No Loans found for Account Type Code: " & AccountTypeCode & " and Delinquency Status: " & UI_Del_Status & "</font> </b>" ,"Passed",FailComments,"")
	get_LoanNumber_BasedOnOrderBy_FromAppDB = loanNumber
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_BasedOnOrderBy_FromAppDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: getRepossessionDetailsYTD_FromDB(yearValue,monthValue,byref reposedYTB,byref redeemedYTB,byref soldYTB,byref lossYTB)
//@Description: This function is to get Repossession details from DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  getRepossessionDetailsYTD_FromDB("2019","6",reposedYTB,redeemedYTB,soldYTB,lossYTB)
//*****************************************************************************************************************************************
getRepossessionDetailsYTD_FromDB(String yearValue,String monthValue,String byref reposedYTB,String byref redeemedYTB,String byref soldYTB,String byref lossYTB)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
		reposedYTB = 0
    	redeemedYTB = 0
      	soldYTB = 0
        lossYTB = 0
	for itr = 1 To monthValue 
		if itr = monthValue 
			today_Date = Right("0" & Month(Now), 2) & "/" & Right("0" & Day(Now), 2) & "/" & yearValue
			reposed  = get_DataInStaticsReport_FromDB(today_Date,"repos_nbr_additions")
				reposedYTB = reposedYTB + reposed
			redeemed  = get_DataInStaticsReport_FromDB(today_Date,"repos_nbr_redeemed")
			 	redeemedYTB = redeemedYTB + redeemed
			Sold  = get_DataInStaticsReport_FromDB(today_Date,"repos_nbr_sold")
			 	soldYTB = soldYTB + Sold
			loss  = get_DataInStaticsReport_FromDB(today_Date,"bnkrpt_nbr_cnsdr_for_loss")
			  lossYTB = lossYTB + loss
		else
			endDateOfMonth = formatDateWithSpecifiedDelimeter(DateSerial(yearValue, 1 + itr, 0),"MMDDYYYY","-")		
			reposed  = get_DataInStaticsReport_FromDB(endDateOfMonth,"repos_nbr_additions")
				reposedYTB = reposedYTB + reposed
			redeemed  = get_DataInStaticsReport_FromDB(endDateOfMonth,"repos_nbr_redeemed")
			 	redeemedYTB = redeemedYTB + redeemed
			Sold  = get_DataInStaticsReport_FromDB(endDateOfMonth,"repos_nbr_sold")
			 	soldYTB = soldYTB + Sold
			loss  = get_DataInStaticsReport_FromDB(endDateOfMonth,"bnkrpt_nbr_cnsdr_for_loss")
			  lossYTB = lossYTB + loss
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/getRepossessionDetailsYTD_FromDB","Failed", Err.Description ,"")

//*****************************************************************************************************************************************
//@methodName: get_DataInStaticsReport_FromDB(recordDate,columnName)
//@Description: This function is to get Stats details from DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  get_DataInStaticsReport_FromDB("2019/06/23","nbr_accts")
//*****************************************************************************************************************************************
get_DataInStaticsReport_FromDB(String recordDate,String columnName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
	 recordDate = formatDateWithSpecifiedDelimeter(recordDate,"YYYYMMDD","-")
     query = "select sum("&columnName&") from bp_branch_ops_summ_tbl where record_dt = //"&recordDate&"// and acct_type in (//55//,//56//,//31//) and date_type=//DAILY// and data_type  = //ACTUAL//"     
    //run query to fetch loan number
	  Reporter.ReportEvent micDone,"Query to get Data In Statics Report From DB ",query
	 result = runSQLQuery_WithWarning_WithoutExit(query,"sum(bp_branch_ops_summ_tbl."&columnName&")")
	 if result <> "" 
	 	get_DataInStaticsReport_FromDB = result
 	else
	 	get_DataInStaticsReport_FromDB = "0"
   if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_DataInStaticsReport_FromDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName:get_LoanNumberCount_InWeeklyLonProgressReport_FromDB(startProcessDate,EndProcessDate,AutoActType,MotorActType,DirectActType)
//@Description: This function is to get weekly loan progress details from DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  get_LoanNumberCount_InWeeklyLonProgressReport_FromDB("2019-07-01","2019-07-31","55","","")
//*****************************************************************************************************************************************
get_LoanNumberCount_InWeeklyLonProgressReport_FromDB(String startProcessDate,String EndProcessDate,String AutoActType,String MotorActType,String DirectActType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
	 startProcessDate = formatDateWithSpecifiedDelimeter(startProcessDate,"YYYYMMDD","-")
	 EndProcessDate = formatDateWithSpecifiedDelimeter(EndProcessDate,"YYYYMMDD","-")
    // query = "select sum("&columnName&") from bp_account_summary_tbl where record_dt >= //"&recordDate1&"// and record_dt <= //"&recordDate2&"// and acct_type in (//"&AutoActType&"//,//"&MotorActType&"//,//"&DirectActType&"//)"     
     query = "Select count(loan_nbr) from bp_account_tbl where procd_dt >= //"&startProcessDate&"// and procd_dt < //"&EndProcessDate&"// and acct_type in (//"&AutoActType&"//,//"&MotorActType&"//,//"&DirectActType&"//) and loan_nbr not in (select loan_nbr from bp_account_tbl where acct_status = //REVERSED// and procd_dt >= //"&startProcessDate&"// and procd_dt < //"&EndProcessDate&"// and datePart(yy, paid_out_dt) = datePart(yy, procd_dt) and datePart(mm, paid_out_dt) = datePart(mm, procd_dt))"
    Reporter.ReportEvent micDone,"Query to get LoanNumberCount In WeeklyLon ProgressReport From DB ",query
    //run query to fetch loan number
	 result = runSQLQuery_WithWarning_WithoutExit(query,"count(bp_account_tbl.loan_nbr)")
	 if result <> "" 
	 	get_LoanNumberCount_InWeeklyLonProgressReport_FromDB = result
 	else
	 	get_LoanNumberCount_InWeeklyLonProgressReport_FromDB = "0"
   if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumberCount_InWeeklyLonProgressReport_FromDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: get_TotalAcctsCount_From_StatsReport_FromDB(todaysDate,AutoActType,MotorActType,DirectActType)
//@Description: This function is to get total accounts count from stats report in DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  get_TotalAcctsCount_From_StatsReport_FromDB("2019-07-01","55","56","31")
//*****************************************************************************************************************************************
get_TotalAcctsCount_From_StatsReport_FromDB(String todaysDate,String AutoActType,String MotorActType,String DirectActType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	todaysDate =formatDateWithSpecifiedDelimeter(todaysDate,"yyyymmdd","-") 
    //query to run
    query = "select sum(nbr_accts) from bp_account_summary_tbl where record_dt >= //"&todaysDate&"// and record_dt <= //"&todaysDate&"// and acct_type in (//"&AutoActType&"//,//"&MotorActType&"//,//"&DirectActType&"//)"     
     result = runSQLQuery_WithWarning_WithoutExit(query, "sum(bp_account_summary_tbl.nbr_accts)")
	 if result <> "" 
	 	get_TotalAcctsCount_From_StatsReport_FromDB = result
 	else
	 	get_TotalAcctsCount_From_StatsReport_FromDB = "0"
    if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_TotalAcctsCount_From_StatsReport_FromDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: getLoanNumbersCount_InCollection_Report_FromDB(DelStatus,StartLetter,EndLetter,PromiseStartDate,PromiseEndDate)
//@Description: This function is to get Loan numbers count from collection report from DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  getLoanNumbersCount_InCollection_Report_FromDB("30","a","z","","")
//*****************************************************************************************************************************************
getLoanNumbersCount_InCollection_Report_FromDB(String DelStatus,String StartLetter,String EndLetter,String PromiseStartDate,String PromiseEndDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
    if ToUpper(DelStatus) = ToUpper("Current") 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (0) and a.acct_id in (select a.acct_id from bp_account_tbl a where a.del_status = //C// and a.contractual_status = 0) and a.acct_id not in (select a.acct_id from bp_account_tbl a where a.del_status = //P// and a.contractual_status = 0)"
	else if ToUpper(DelStatus) = ToUpper("Potential")  
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (0) and a.acct_id not in (select a.acct_id from bp_account_tbl a where a.del_status = //C// and a.contractual_status = 0) and a.acct_id in (select a.acct_id from bp_account_tbl a where a.del_status = //P// and a.contractual_status = 0)"
	else if DelStatus = "30" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (1)"
	else if DelStatus = "60" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (2)"
	else if DelStatus = "90"  
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (3)"
	else if DelStatus = ">90" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=999"
	else if DelStatus = "30+" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=1 and isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else if DelStatus = "60+"  
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=2 and isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else if DelStatus = "90+" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=3 and isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else
		 writeReportLog("Wrong arrguments passed: "& UI_Del_Status &" in getLoanNumbersCount_InCollection_Report_FromDB","Failed", Err.Description,"")
	if PromiseStartDate <> "" and PromiseEndDate <> "" 
	PromiseStartDate = formatDateWithSpecifiedDelimeter(PromiseStartDate,"YYYYMMDD","-")
	PromiseEndDate = formatDateWithSpecifiedDelimeter(PromiseEndDate,"YYYYMMDD","-")
	PromiseQuery = "and a.acct_id in (select c.acct_id from bp_account_activity_tbl c where c.promise_dt >=//"&PromiseStartDate&" 12:00 AM// and c.promise_dt <= //"&PromiseEndDate&" 11:59 PM// and c.promise_dt is not null and c.activity_type = //PROMISE// and c.activity_status = //ACTIVE//)"
	if PromiseStartDate <> "" and PromiseEndDate <> "" 
		query = "select count(loan_nbr) from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) and (acf.acct_id = a.acct_id) and (TrimLeft(c.last_name) between //"&StartLetter&"// and //"&EndLetter&"//||replicate (//Z//,30)) AND acF.affil_type = //PRIMARY// AND  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// and c.acct_code1  not in (//BANKRUPT// )) AND a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_yn   = //Y//) "&contractual_status & PromiseQuery
	else
		query = "select count(loan_nbr) from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) and (acf.acct_id = a.acct_id) and (TrimLeft(c.last_name) between //"&StartLetter&"// and //"&EndLetter&"//||replicate (//Z//,30)) AND acF.affil_type = //PRIMARY// AND  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// and c.acct_code1  not in (//BANKRUPT// )) AND a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_yn   = //Y//) "&contractual_status
     Reporter.ReportEvent micDone,"Query to get Data In Collection Report From DB ",query
    //run query to fetch loan number
	 result = runSQLQuery_WithWarning_WithoutExit(query,"count(a.loan_nbr)")
	if result <> "" 
	 	getLoanNumbersCount_InCollection_Report_FromDB = result
	else
	 	getLoanNumbersCount_InCollection_Report_FromDB = "0"
    if GetErrorCount()>0 
		 writeReportLog("Failed : getLoanNumbersCount_InCollection_Report_FromDB ","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: getLoanNumber_InCollection_Report_FromDB(DelStatus,StartLetter,EndLetter)
//@Description: This function is to get Loan number from collection report from DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  getLoanNumber_InCollection_Report_FromDB("30","a","z")
//*****************************************************************************************************************************************
getLoanNumber_InCollection_Report_FromDB(String DelStatus,String StartLetter,String EndLetter)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
    if ToUpper(DelStatus) = ToUpper("Current") 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (0) and a.acct_id in (select a.acct_id from bp_account_tbl a where a.del_status = //C// and a.contractual_status = 0) and a.acct_id not in (select a.acct_id from bp_account_tbl a where a.del_status = //P// and a.contractual_status = 0)"
	else if ToUpper(DelStatus) = ToUpper("Potential")  
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (0) and a.acct_id not in (select a.acct_id from bp_account_tbl a where a.del_status = //C// and a.contractual_status = 0) and a.acct_id in (select a.acct_id from bp_account_tbl a where a.del_status = //P// and a.contractual_status = 0)"
	else if DelStatus = "30" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (1)"
	else if DelStatus = "60" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (2)"
	else if DelStatus = "90"  
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (3)"
	else if DelStatus = ">90" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=999"
	else if DelStatus = "30+" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=1 and isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else if DelStatus = "60+"  
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=2 and isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else if DelStatus = "90+" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=3 and isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else
		 writeReportLog("Wrong arrguments passed: "& UI_Del_Status &" in getLoanNumbersCount_InCollection_Report_FromDB","Failed", Err.Description,"")
	PromiseQuery = "and a.acct_id in (select c.acct_id from bp_account_activity_tbl c where c.activity_type = //PROMISE// and c.activity_status = //COMPLETE//) order by rand()"
	query = "select loan_nbr from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) and (acf.acct_id = a.acct_id) and (TrimLeft(c.last_name) between //"&StartLetter&"// and //"&EndLetter&"//||replicate (//Z//,30)) AND acF.affil_type = //PRIMARY// AND  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// and c.acct_code1  not in (//BANKRUPT// )) AND a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_yn   = //Y//) "&contractual_status & PromiseQuery
    //run query to fetch loan number
	 result = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	if result <> "" 
	 	getLoanNumber_InCollection_Report_FromDB = result
	else
	 	getLoanNumber_InCollection_Report_FromDB = "0"
    if GetErrorCount()>0 
		 writeReportLog("Failed : getLoanNumber_InCollection_Report_FromDB ","Failed", Err.Description,"")

//***************************************************************************************************************************
//@Method: get_LoanNumber_FromDB_BasedOn_ContractDate(AccountStatus,AccountTypeCode,UI_Del_Status,ContractFromDate,ContractToDate)
//@Author: Sumithra
//@Date 21 march 2018
//@Description: This function will get the loan from DB based on contract From date and To date
//Ex:  get_LoanNumber_FromDB_BasedOn_ContractDate("Active","55","30","2018-12-01",null)
//***************************************************************************************************************************
get_LoanNumber_FromDB_BasedOn_ContractDate(String AccountStatus,String AccountTypeCode,String UI_Del_Status,String ContractFromDate,String ContractToDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    if ToUpper(AccountStatus) = "ACTIVE" 
     	 //Get ID Based on Delinquency Status and Contractual status
		  get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	     if contractFromDate <> ""  
			contractFromDate = formatDateWithSpecifiedDelimeter(contractFromDate,"YYYYMMDD","-")
			contract_FromDate = "and funding_dt >= //"&ContractFromDate&"// "
	 	 if ContractToDate <> "" 
	 		 ContractToDate = formatDateWithSpecifiedDelimeter(ContractToDate,"YYYYMMDD","-")
	 		 Contract_ToDate = "and funding_dt < //"&ContractToDate&"//"
	 			//query to run 
		  //Query
 		//query = "acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode &"// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// " & contract_FromDate & contract_ToDate & "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by loan_nbr desc"
 		query = "acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode &"// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// " & contract_FromDate & contract_ToDate & "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by rand()"
 	else
 		 query = "acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode &"//" & contract_FromDate & contract_ToDate & "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by loan_nbr desc"	
    //Query
 	//query = "acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode &"// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// " & contract_FromDate & contract_ToDate & "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by loan_nbr desc"
 	if Environment.Value("currentState") = "OH" 
		sqlQuery = "Select * from support.bp_account_tbl where acct_id not in (select distinct(acct_id) from bp_account_charge_tbl where charge_type = //COLL_EXP//) and " & query
	else
		sqlQuery = "Select * from support.bp_account_tbl where " & query
	//UFT Logger
	 LogSuccessMessage("get_LoanNumber_FromDB_BasedOn_ContractDate", sqlQuery)
    //run query to fetch loan number
	// get_LoanNumber_FromDB_BasedOn_ContractDate = runSQLQuery(sqlQuery, "loan_nbr")
	get_LoanNumber_FromDB_BasedOn_ContractDate = runSQLQuery_WithWarning_WithoutExit(sqlQuery, "loan_nbr")
    if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_FromDB_BasedOn_ContractDate","Failed", Err.Description,"")

//**********************************************************************************************************************
//@MethodName queryAndExportResultToExcel
//@Author Karthik Shekar
//@Description this method will run the Query and export the query result to excel sheet along with Column header
//@Creation Date: 10th Sep 2019
//@Param
	//QueryToExecute --> Pass the query or SP to be executed
	//excelFilePathToSave --> Specify the complete file path along with file extension
//@Return Nothing
//EX:  queryAndExportResultToExcel("exec sp_rpt_stats_acct_summary 2290,//2019-09-10//,//%//,//DAILY//", "c:\Sp1.xlsx")
//EX:   queryAndExportResultToExcel("select * from bp_branch_setup_tbl", "c:\BS1.xlsx")
//***********************************************************************************************************************
queryAndExportResultToExcel(String queryToExecute,String excelFilePathToSave)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Creating the Excel Object for Saving the Query Data
	 Set objExcel = CreateObject("Excel.Application")
	 //objExcel.Visible = True
	 Set XLDoc = objExcel.Workbooks.Add
	 Set XLSheet = XLDoc.Worksheets(1)
 	//Creating the DB Connection
     Set cnn1 = CreateObject("ADODB.Connection")
     Set mrs = CreateObject("ADODB.Recordset") 
     cnn1.ConnectionTimeout = 30
     cnn1.Open "Dsn=branch;Uid=support;Pwd=sql;" 
		//Query to Execute
     //SQry = "exec sp_rpt_stats_acct_summary 2290,//2019-09-10//,//%//,//DAILY//"
	//Execute the Query
      mrs.Open queryToExecute, cnn1
	 //Fetching the Header details and updating in Excel Sheet
     for iCols = 0 To mrs.Fields.Count - 1
        XLSheet.Cells(1, iCols + 1).Value = mrs.Fields(iCols).Name
	//Exporting the Query Output to Excel Sheet
     XLSheet.Range("A2").CopyFromRecordset mrs
	//Saving the Excel WorkBook
	 objExcel.ActiveWorkbook.SaveAs excelFilePathToSave
	//Quitting and Closing Objects
	 objExcel.Quit
	 Set objExcel = Nothing
     mrs.Close
     cnn1.Close
Remove
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//**********************************************************************************************
//@methodName: get_LoanNumber_BasedOnDealerType_FromAppDB(AccountStatus, AccountTypeCode, UI_Del_Status, orderBy)
//@Description: This is to get the Loan Number from App DB based on Account status, Account Type Code, Dealer Type(Holdback TYpe) and Delinquency Status.
//@Author: Chandra
//@Date 26 Feb 2019
//@Returning the Loan Number
//Ex:  get_LoanNumber_BasedOnDealerType_FromAppDB("ACTIVE", "55", "DISCOUNT", "Current", "RAND")
//     get_LoanNumber_BasedOnDealerType_FromAppDB("ACTIVE", "55", "RESERVE", "Current", "RAND")
//*********************************************************************************************** 
get_LoanNumber_BasedOnDealerType_FromAppDB(String AccountStatus,String AccountTypeCode,String DealerType,String UI_Del_Status,String orderBy)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get ID Based on Delinquency Status and Contractual status
	 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	//query to run
	if UI_Del_Status = ">90" 
		query = "Select * from support.bp_account_tbl where dealer_id in (select dealer_id from bp_dealer_tbl where holdback_type = //" & DealerType & "//) and acct_status = //" & AccountStatus & "//" & " and acct_type= //" & AccountTypeCode & "// and del_status = //"& delinqStatus  &"// and contractual_status > //"& contractual_status  &"// order by rand()"
	else
		query = "Select * from support.bp_account_tbl where dealer_id in (select dealer_id from bp_dealer_tbl where holdback_type = //" & DealerType & "//) and acct_status = //" & AccountStatus & "//" & " and acct_type= //" & AccountTypeCode & "// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// order by rand()"
	//Constructing the Expected Query (Adding Order by Rand()/ procd_dt)
	if ToUpper(orderBy) = "RAND" 
		query = query & " rand()"
	else
		query = query & " procd_dt desc"
	//Fetching the loan number from DB
	loanNumber = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	//if Loan are not available 
	if loanNumber = "0" 
		 writeReportLog("<b> <font color=//orange//> No Loans found for Account Type Code: " & AccountTypeCode & " and Delinquency Status: " & UI_Del_Status & " and holdback_type = //" & DealerType & "//</font> </b>" ,"Passed",FailComments,"")
	get_LoanNumber_BasedOnDealerType_FromAppDB = loanNumber
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_BasedOnDealerType_FromAppDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: getData_In_AccountTable_FromDB(loanNumber,fieldName)
//@Description: This function is to get data from Account table in DB
//@Author: Sumithra
//@Date 01 Aug 2019
//Ex:  getData_In_AccountTable_FromDB("08740008226","acct_status")
//***************************************************************************************************************************************** 
getData_In_AccountTable_FromDB(String loanNumber,String fieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	fieldID = getFieldID_AccountTab(fieldName)
	//query	
	query = "select * from bp_account_tbl where loan_nbr =//"&loanNumber&"//"
   //Executing the Query Generated
	getData_In_AccountTable_FromDB = runSQLQuery_WithWarning_WithoutExit(query,fieldID)
	 //error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/getData_In_AccountTable_FromDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: verify_LoanNumExists_InCollection_Report_FromDB(loanNumber)
//@Description: This function is to verify if the loan exists in the Collection report from DB
//@Author: Sumithra
//@Date 01 Aug 2019
//Ex:  verify_LoanNumExists_InCollection_Report_FromDB("087400009897")
//*****************************************************************************************************************************************
verify_LoanNumExists_InCollection_Report_FromDB(String loanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//	query = "select loan_nbr from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) and (acf.acct_id = a.acct_id) AND acF.affil_type = //PRIMARY// AND  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// and c.acct_code1  not in (//BANKRUPT// )) AND a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_yn   = //Y//) and loan_nbr = //"&loanNumber&"//"
	if Trim(Replace(Environment.Value("appVersion"),".","")) <= "970" 
		query = "select loan_nbr from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) and (acf.acct_id = a.acct_id) AND acF.affil_type = //PRIMARY// AND  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// and c.acct_code1  not in (//BANKRUPT// )) AND a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_yn   = //Y//) and loan_nbr = //"&loanNumber&"//"
	else
		query = "select loan_nbr from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) and (acf.acct_id = a.acct_id) AND acF.affil_type = //PRIMARY// AND  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// and c.acct_code1  not in (//BANKRUPT// )) AND a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_status   = //PENDING//) and loan_nbr = //"&loanNumber&"//"
   //Executing the Query Generated
	verify_LoanNumExists_InCollection_Report_FromDB = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	if verify_LoanNumExists_InCollection_Report_FromDB = 0 
		 writeReportLog("Loan number with active claim (Total Loss) is not present in Collection report","Passed","","")
	else
		 writeReportLog("Loan number with active claim (Total Loss) is present in Collection report","Failed", Err.Description,"")
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/verify_LoanNumExists_InCollection_Report_FromDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: get_PendingId_for_InsClaim_FromDB(ClaimType,claimID,loanNumber)
//@Description: This function is to get the Pending Id for Insurance from DB
//@Author: Sumithra
//@Date 01 Aug 2019
//Ex:  get_PendingId_for_InsClaim_FromDB("TOTLLOSS","1","087400009897")
//*****************************************************************************************************************************************
get_PendingId_for_InsClaim_FromDB(String ClaimType,String claimID,String loanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select * from bp_account_ins_claim_pend_tbl icpt, bp_account_tbl act where icpt.acct_id = act.acct_id and claim_type = //"&ClaimType&"// and ins_claim_id = //"&claimID&"// and loan_nbr =//"&loanNumber&"//"
   //Executing the Query Generated
	get_PendingId_for_InsClaim_FromDB = runSQLQuery_WithWarning_WithoutExit(query,"ins_pend_id")
	 //error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_PendingId_for_InsClaim_FromDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: get_EntryDate_And_LastChangedDate_for_InsClaim_FromDB(ClaimType,claimID,loanNumber,requiredFieldNames)
//@Description: This function is to get the entry date and last changed date for insurance claims from DB
//@Author: Sumithra
//@Date 01 Aug 2019
//Ex:  get_EntryDate_And_LastChangedDate_for_InsClaim_FromDB("TOTLLOSS","1","087400009897",requiredFieldNames)
//*****************************************************************************************************************************************
get_EntryDate_And_LastChangedDate_for_InsClaim_FromDB(String ClaimType,String claimID,String loanNumber,String requiredFieldNames)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select icpt.entry_userid as InsTable_EntryID, icpt.entry_dt as InsTable_EntryDate,icpt.last_chg_dt as InsTable_lastEntryDate ,icpt.last_chg_userid as InsTable_lastEntryID from bp_account_ins_claim_pend_tbl icpt, bp_account_tbl act where icpt.acct_id = act.acct_id and claim_type = //"&ClaimType&"// and ins_claim_id = //"&claimID&"// and loan_nbr =//"&loanNumber&"//"
   //Executing the Query Generated
   get_EntryDate_And_LastChangedDate_for_InsClaim_FromDB = runSQLQuery_FetchMultipleValues_WithWarning(query,requiredFieldNames)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_EntryDate_And_LastChangedDate_for_InsClaim_FromDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: get_LoanNumber_FromAppDB_WhereActiveClaimNotExists(AccountStatus,AccountTypeCode,accountClass,affiType,UI_Del_Status)
//@Description: This function is to get loan number from DB where where active claim is not exist
//@Author: Sumithra
//@Date 01 Aug 2019
//Ex:  get_LoanNumber_FromAppDB_WhereActiveClaimNotExists("Active","55","NEW_LOAN","PRIMARY","Current")
//*****************************************************************************************************************************************
get_LoanNumber_FromAppDB_WhereActiveClaimNotExists(String AccountStatus,String AccountTypeCode,String accountClass,String affiType,String UI_Del_Status)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get ID Based on Delinquency Status and Contractual status
	 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	if accountClass <> "" 
		Account_Class = "and acct_class = //" & accountClass & "//"
	if AccountTypeCode <> "" 
		Account_Type = "and acct_type= //" & AccountTypeCode & "//"
	if affiType <> "" 
		if ToUpper(affiType) = "PRIMARY" 
			affi_Type =  "and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
		else if ToUpper(affiType) = "COSIGN" or ToUpper(affiType) = "JOINT" 	
		    affi_Type = "and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" & ToUpper(affiType) & "//)"
	//query to run
	if UI_Del_Status = ">90" 
		query = "Select * from support.bp_account_tbl where acct_status = //" & AccountStatus & "//" & Account_Class & Account_Type &" and del_status = //"& delinqStatus  &"// and contractual_status > //"& contractual_status  &"// and not acct_id = any(select acct_id from bp_account_ins_claim_pend_tbl as a where a.claim_type = //TOTLLOSS// and a.claim_yn = //Y//) "& affi_Type &" order by rand()"
	else
		query = "Select * from support.bp_account_tbl where acct_status = //" & AccountStatus & "//" & Account_Class & Account_Type &" and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// and not acct_id = any(select acct_id from bp_account_ins_claim_pend_tbl as a where a.claim_type = //TOTLLOSS// and a.claim_yn = //Y//) "& affi_Type &" order by rand()"
	//Fetching the loan number from DB
	loanNumber = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	//if Loan are not available 
	if loanNumber = "0" 
		 writeReportLog("<b> <font color=//orange//> No Loans found for Delinquency Status: " & UI_Del_Status & "</font> </b>" ,"Passed",FailComments,"")
	get_LoanNumber_FromAppDB_WhereActiveClaimNotExists = loanNumber
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_FromAppDB_WhereActiveClaimNotExists","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: get_OrganizationId_FromAppDB(StateName)
//@Description: This function is to get Organization id from DB
//@Author: Sumithra
//@Date 10 September 2019
//Ex:  get_OrganizationId_FromAppDB("SC")
//*****************************************************************************************************************************************
get_OrganizationId_FromAppDB(String StateName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
    query = "select * from Branch_setup_tbl where BRANCH_SETUP_STATE = //"&StateName&"//"
    get_OrganizationId_FromAppDB = runSQLQuery(query, "organization_id")
    if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_OrganizationId_FromAppDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: get_DataFromSP_In_StatisticsReport(SPName,orgId,recordDate,AccountType,DataType,requredColumnNames)
//@Description: This function is to get data from SP in Statistics report
//@Author: Sumithra
//@Date 22 Aug 2019
//Ex:  get_DataFromSP_In_StatisticsReport("StatsDelinquencySummary",//792//,today_Date,"%","DAILY",StatsColumnNames)
//*****************************************************************************************************************************************
get_DataFromSP_In_StatisticsReport(String SPName,String orgId,String recordDate,String AccountType,String DataType,String requredColumnNames)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	recordDate = formatDateWithSpecifiedDelimeter(recordDate,"yyyymmdd","-")
	if SPName = "StatsDelinquencySummary" 
		query = "exec sp_rpt_stats_del_summary //"&orgId&"//,//"&recordDate&"//,//"&AccountType&"//,//"&DataType&"//"
	else if SPName= "StatsBranchOperation" 
		query = "exec sp_rpt_stats_branch_ops //"&orgId&"//,//"&recordDate&"//,//"&AccountType&"//,//"&DataType&"//"
	else if SPName = "StatsAccountSummary" 
		query = "exec sp_rpt_stats_acct_summary //"&orgId&"//,//"&recordDate&"//,//"&AccountType&"//,//"&DataType&"//"
	else	
		 writeReportLog("SP name your searching is not exist","Failed", Err.Description,"")
   //Executing the Query Generated
	//get_DataFromSP_In_StatisticsReport = runSQLQuery_FetchMultipleValues_WithWarning(query,requredColumnNames)
	get_DataFromSP_In_StatisticsReport = runSQLQuery_FetchMultipleValues_WithoutExit(query,requredColumnNames)
	 //error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_DataFromSP_In_StatisticsReport","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: getLoanNumber_FromDB_where_CPINotExist(AccountTypeCode)
//@Description: This functionis to get the loan number where CPI is not exist
//@Author: Sumithra
//@Date 15 June 2019
//Ex:  getLoanNumber_FromDB_where_CPINotExist("55")
//***************************************************************************************************************************************** 
getLoanNumber_FromDB_where_CPINotExist(String AccountTypeCode)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run 
	 query = "select loan_nbr from bp_account_component_tbl,bp_account_pmt_schedule_tbl,bp_account_tbl where bp_account_component_tbl.acct_id =bp_account_pmt_schedule_tbl.acct_id and bp_account_pmt_schedule_tbl.acct_id = bp_account_tbl.acct_id and bp_account_pmt_schedule_tbl.pmt_type = //CONTRACT//  and bp_account_component_tbl.descr <> //Collateral Protection// and bp_account_component_tbl.descr <> //deleted// and bp_account_pmt_schedule_tbl.pmt_dt > GETDATE() and bp_account_tbl.acct_status = //ACTIVE// and acct_type=//" & AccountTypeCode &"// order by rand()"
    //run query to fetch loan number
	 getLoanNumber_FromDB_where_CPINotExist = runSQLQuery(query, "loan_nbr")
    if GetErrorCount()>0 
		 writeReportLog("Failed in step/getLoanNumber_FromDB_where_CPINotExist","Failed", Err.Description,"")

//*****************************************************************************************
//@methodName: get_Bankrupt_Account_LockedYN_Status_FromDB(accountType,loanNumber)
//@Author Chandra
//@Date 11 Oct 2019
//@Description This will get the Bankrupt Account Loacked YN Status from DB based on account type and Loan number
//Ex: get_Bankrupt_Account_LockedYN_Status_FromDB("ACCOUNT","087400009553")
//*****************************************************************************************
get_Bankrupt_Account_LockedYN_Status_FromDB(String accountType,String loanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Run SQL query 
	get_Bankrupt_Account_LockedYN_Status_FromDB = runSQLQuery("select uf_is_locked(//"& accountType &"//,//"& loanNumber &"//) as Locked_yn","Locked_yn")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_Bankrupt_Account_LockedYN_Status_FromDB","Failed", Err.Description,"Y")

//*****************************************************************************************
//@methodName: get_DealerDetails_AfterLoanModification_FromDB(accountID,requiredFileds,queryPath)
//@Author Chandra
//@Date 16 Oct 2019
//@Description This will get the Dealer Details from DB after loan modification
//Ex: get_DealerDetails_AfterLoanModification_FromDB(accountID,requiredFileds,queryPath)
//*****************************************************************************************
get_DealerDetails_AfterLoanModification_FromDB(String accountID,String requiredFileds,String queryPath)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get SQL Query form text file
	baseQuery = get_Entire_File_Content(queryPath)
	//Replacing the Account ID
	baseQuery = Replace(baseQuery,"@acct_id",accountID)
	//Logging the Query Generated in UFT Report
	  LogSuccessMessage("Query Generated in get_DealerDetails_AfterLoanModification_FromDB",baseQuery)
	//Running the SQL Query and returning the value
	requiredValues = runSQLQuery_FetchMultipleValues(baseQuery,requiredFileds)
	get_DealerDetails_AfterLoanModification_FromDB = requiredValues
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerDetails_AfterLoanModification_FromDB","Failed", Err.Description ,"")

//***********************************************************************************************************************
//@methodName: get_GracePeriod_From_DB(Currentstate,CountryName)
//@Author: Sumithra
//@Date 29 Nov 2018
//@Description This will give the Grace period from DB
//Ex:  get_GracePeriod_From_DB("SC","USA")
//***********************************************************************************************************************
get_GracePeriod_From_DB(String Currentstate,String CountryName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query to fetch the grace period based on state
	query = "select * from bp_charge_calc_tbl where start_dt <= today() and end_dt >= today() and state = //"&Currentstate&"// and country=//"&CountryName&"// and opt = //LATE_CHG//"
	get_GracePeriod_From_DB = runSQLQuery(query, "grace_days")
	 writeReportLog("Grace period for State: " & Currentstate & " is "& get_GracePeriod_From_DB &" days" ,"Passed",FailComments,"")
	//Error handing
	 if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/get_GracePeriod_From_DB","Failed", Err.Description ,"")

//***********************************************************************************************************************
//@methodName: validate_LastLateChargeAppliedDate_in_AppDB(ExpLateChgAppliedDate)
//@Author: Sumithra
//@Date 29 Nov 2018
//@Description This will validate last late cahrge applied date in branch_setup table
//EX:  validate_LastLateChargeAppliedDate_in_AppDB("29/11/2018")
//***********************************************************************************************************************
validate_LastLateChargeAppliedDate_in_AppDB(String ExpLateChgAppliedDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//get late charge applied date from DB
	lastLateChgAppliedDate = Trim(getvalue_From_AppDB("BRANCH_SETUP_TBL","last_late_charge_applied"))
	//validate
	 validateDataAndReport(cdate(lastLateChgAppliedDate),cdate(ExpLateChgAppliedDate),"Validating last late charge applied date in Branch Setup Table: " &lastLateChgAppliedDate)
	//Error handling
	if Error.Number <> 0 
		 writeReportLog("Failed in validate_LastLateChargeAppliedDate_in_AppDB","Failed",Error.Description,"")

//*********************************************************************************************
//@methodName: calculate_LateChargeAmount_BasedOn_CalcMethod_FromDB(stateName,emiAmount,loanCreationDate,accountType)
//@Author Sumithra HP
//@Date 11 October 2019
//@Description This is to calculate the late charge amount based on Calculation method from DB
//Ex  calculate_LateChargeAmount_BasedOn_CalcMethod_FromDB("SC","342","2019-10-30","55")
//*********************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																										//calculate_LateChargeAmount_BasedOn_CalcMethod_FromDB(stateName,emiAmount,loanCreationDate,accountType)
//	
//	loanCreationDate = formatDateWithSpecifiedDelimeter(loanCreationDate,"YYYYMMDD","-")
//	
//	if accountType <> "" 
//		account_Type = "and acct_type = //"&accountType&"//"
//	
//	//query	
//	query = "select * from bp_charge_calc_tbl where state = //"&stateName&"// and opt = //LATE_CHG// and date(start_dt) <= //"&loanCreationDate&"// and date(end_dt) >= //"&loanCreationDate&"// "& account_Type &" order by start_dt desc"
//	
//	//Updating the Query in the UFT Log
//	Reporter.ReportEvent micDone,"Query to get Calc Method to calculate Late Charge from DB",query
//	
//	//Executing the Query Generated
//	result = runSQLQuery_FetchMultipleValues_WithWarning(query,"calc_method;amt")
//	result =Split(result,";")
//	calcMethod =result(0)
//	lateChgAmount = result(1)
//	
//	if UCASE(calcMethod) = UCASE("Amount") 
//		calculate_LateChargeAmount_BasedOn_CalcMethod_FromDB = lateChgAmount
//	else
//		calculate_LateChargeAmount_BasedOn_CalcMethod_FromDB = round(emiAmount * lateChgAmount / 100.00, 2)
//	
//	//error handling
//	if GetErrorCount()>0  			
//		 writeReportLog("Failed in step/calculate_LateChargeAmount_BasedOn_CalcMethod_FromDB","Failed", Err.Description ,"Y")
//	
//
 //*********************************************************************************************
//@methodName: get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB(LoanNumber,ChargeType)
//@Author Sumithra HP
//@Date 19 September 2019
//@Description This is for get the Diffrence Amount for Charge Amount and Paid Amount From DB
//Ex  get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB("08740008879","")
//Ex  get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB("08740008879","LATE_CHG")
//*********************************************************************************************
get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB(String LoanNumber,String ChargeType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	recordDate = formatDateWithSpecifiedDelimeter(Date,"yyyymmdd","-")
	//charge type
	if ChargeType <> "" 
		charge_Type = "and charge_type=//"&ChargeType&"//"	
	//query	
	query = "select chargeAmount = sum(charge_amt)-sum(paid_amt) from bp_account_tbl a ,bp_account_charge_tbl b where a.acct_id=b.acct_id and waived_yn =//N// and adj_princ_yn =//N// and loan_nbr=//"&LoanNumber&"//" &charge_Type	
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get Difference of charge amount and Paid amount from DB",query
	//Executing the Query Generated
	get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB = runSQLQuery_FetchMultipleValues_WithWarning(query,"chargeAmount")
	if GetErrorCount()>0  			
		 writeReportLog("Failed in step/get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB","Failed", Err.Description ,"Y")

//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_Eligible_for_LateCharges(sinceLastPaymentDays,fundingDate,fundingDateOperator)
//@Author Sumithra HP
//@Date 10 Oct 2019
//@Description This function is to get the Loan number from DB where late charge is applicable
//NOTE: for this function if you pass Empty("") it will ignore that condition 
// get_LoanNumberFromDB_Eligible_for_LateCharges("","2019-08-01",">=")
// get_LoanNumberFromDB_Eligible_for_LateCharges("45","2019-08-01",">=")
// get_LoanNumberFromDB_Eligible_for_LateCharges("45","","")
//***********************************************************************************************************************************************
get_LoanNumberFromDB_Eligible_for_LateCharges(String sinceLastPaymentDays,String fundingDate,String fundingDateOperator)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	if sinceLastPaymentDays <> "" 
		startDate = formatDateWithSpecifiedDelimeter(DateSerial(Year(Date),Month(Date)-cint(1),1),"YYYYMMDD","-")
		endDate = formatDateWithSpecifiedDelimeter(DateSerial(Year(Date), 1 + Month(Date)-cint(1), 0),"YYYYMMDD","-")
		endDate = formatDateWithSpecifiedDelimeter(dateadd("d",-1,endDate),"YYYYMMDD","-")
		sinceLast_PaymentDays = "and acct_id in(select acct_id from bp_account_charge_tbl where charge_type=//LATE_CHG// group by acct_id  having max(due_dt) >=//"&startDate&"// and max(due_dt) <=//"&endDate&"//) and days_since_last_pay >=//"&sinceLastPaymentDays&"//"
	if fundingDate <> "" 
		fundingDate = formatDateWithSpecifiedDelimeter(fundingDate,"YYYYMMDD","-")
		funding_Date = "and funding_dt "&fundingDateOperator&" //"&fundingDate&"//"
	//query
	query = "select * from bp_account_tbl where acct_status=//Active// " & sinceLast_PaymentDays & funding_Date & "  and not acct_id = any(select acct_id from bp_account_ins_claim_pend_tbl as a where a.claim_type = //TOTLLOSS// and a.claim_yn = //Y//) and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by rand()"	
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get loan number from DB where Late Charge is applicable",query
	//Returing the loan number  
    get_LoanNumberFromDB_Eligible_for_LateCharges = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumberFromDB_Eligible_for_LateCharges","Failed", Err.Description,"")

//************************************************************************************************************************************************
//@Method: get_Latest_LateChargeAmount_And_StartDate_FromDB(stateName,LateChargeAmount,StartDate)
//@Author karthik
//@Date 10 Oct 2019
//@Description This function is to get the Latecharge amount and Startdate from DB
// get_Latest_LateChargeAmount_And_StartDate_FromDB("IN",LateChargeAmount,StartDate)
//**************************************************************************************************************************************************
get_Latest_LateChargeAmount_And_StartDate_FromDB(String stateName,String LateChargeAmount,String StartDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query
	query = "select * from bp_charge_calc_tbl where state =//"&stateName&"// and opt =//LATE_CHG// order by start_dt desc"
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get latest Late Charge amount and Start date from DB",query
	//Returing the start date and late charge amount
    result = runSQLQuery_FetchMultipleValues_WithWarning(query,"start_dt;amt")	
    StartDate = Split(result,";")(0)
    LateChargeAmount = Split(result,";")(1)
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_Latest_LateChargeAmount_And_StartDate_FromDB ","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_DealerName_BasedOnCriteriaSpecified_FromDB(dealerName,requiredField)
//@Author Chandra
//@Date 28 OCT 2019
//@Description This is get the Sum of Dealer Discount and Reserve Amount based on Dealer Name from App DB
//@Returing the Dealer Name
//Ex  get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB("All Tech Auto Sales LLC","087400000017","short_name;sumReserveAmt;sumDiscountAmt")
// get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB("All Tech Auto Sales LLC","087400000017","short_name;sumReserveAmt;sumDiscountAmt")
// get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB("All Tech Auto Sales LLC","087400000017","short_name;sumReserveAmt;sumDiscountAmt")
// get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB("All Tech Auto Sales LLC","087400000017","short_name;sumReserveAmt;sumDiscountAmt")
//*********************************************************************************************
get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB(String dealerID,String requiredField)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Initial Query
	baseQuery = "select DRT.dealer_id,sum(DRT.reserve_amt) as sumReserveAmt,sum(DRT.discount_amt) as sumDiscountAmt from bp_dealer_tbl BDT inner join bp_dealer_reserve_tbl DRT on BDT.dealer_Id = DRT.dealer_id where BDT.active_yn = //Y// and DRT.dealer_id = //"& dealerID &"// group by DRT.dealer_id"
	get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB = runSQLQuery_FetchMultipleValues(baseQuery,requiredField)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB","Failed", Err.Description,"")

//********************************************************************************************************************************************
//@methodName: getRowNumber_BasedOnDealerName_FromDB(dealerID)
//@Description: This function is to get Row Number based on Dealer Number from DB
//@Author: Chandra
//@Date 30-10-2019
//Ex:  getRowNumber_BasedOnDealerName_FromDB("0874125602002")
//*********************************************************************************************************************************************
getRowNumber_BasedOnDealerName_FromDB(String dealerID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	DealerName_query = "with resultsTable as (select row_number() over(order by short_name asc,dealer_id desc) as RowNo, short_name,dealer_id  from bp_dealer_tbl where active_yn = //Y//) select RowNo,dealer_id from resultsTable where dealer_id = //"& dealerID &"//"
	rowNumber = runSQLQuery(DealerName_query,"RowNo")
	getRowNumber_BasedOnDealerName_FromDB = rowNumber
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getRowNumber_BasedOnDealerName_FromDB","Failed", Err.Description ,"")

//********************************************************************************************************************************************
//@methodName: getRepresentativeName_BasedOnDealerName_FromDB(requiredFields,dealerID)
//@Description: This function is to get Representative Name based on Dealer Name from DB
//@Author: Chandra
//@Date 30-10-2019
//Ex:  getRepresentativeName_BasedOnDealerName_FromDB("first_name","087400000015")
//*********************************************************************************************************************************************
getRepresentativeName_BasedOnDealerName_FromDB(String requiredFields,String dealerID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	repName_query = "select dr.first_name from bp_dealer_tbl d, bp_dealer_rep_tbl dr where d.dealer_id = dr.dealer_id and d.active_yn = //Y// and d.dealer_id = //"& dealerID &"//"
	represantativeName = runSQLQuery(repName_query,requiredFields)
	getRepresentativeName_BasedOnDealerName_FromDB = represantativeName
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getRepresentativeName_BasedOnDealerName_FromDB","Failed", Err.Description ,"")

//*************************************************************************************************************************************************
//@Method: runSQLQuery_FetchMultipleValues_WithoutExit(query, requiredFieldName)   
//@Author Chandra
//@Date 24 Oct 2019
//@Description This function is run the SQL query to fetch multiple values with out exist test
//Ex: runSQLQuery_FetchMultipleValues_WithoutExit(query, "loan_nbr;trans_id")   
//*************************************************************************************************************************************************
runSQLQuery_FetchMultipleValues_WithoutExit(String query,String requiredFieldNames)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //Variable declaration
    String conn, rs
     LogSuccessMessage("Test Data Get Query",query)
    //Object declaration
    Set conn= createobject("adodb.connection")
    set rs = createobject("adodb.recordset")
    //Connection string
    conn.Open =  "Dsn=branch;Uid=support;Pwd=sql;"
    //Executing the Query
    rs.open query, conn
    //Validating for Query No Results
	if rs.EOF 
		runSQLQuery_FetchMultipleValues_WithoutExit = ""
	else
		 //splitting the name
	    arr = Split(requiredFieldNames,";")
		for i = 0 To UBound(arr)
	     if i <> 0 
	     	outputString = outputString & ";"
	     requiredFieldNames = rs.Fields(arr(i))
		 outputString = outputString & requiredFieldNames
		//Returing the Value
		runSQLQuery_FetchMultipleValues_WithoutExit = outputString 
	rs.Close
    conn.Close 	  
	  //if Query Does not Return Any Result
    if GetErrorCount()>0 
		Reporter.ReportEvent micWarning,"runSQLQuery_FetchMultipleValues_WithoutExit"," Query " & query & " Did not give any results" 
		Err.GenKeyEvents("<Ctrl-A>"+"<Delete">)
		// writeReportLog("DB column Names " & requiredFieldName & " which you are looking is not available in the query Result; Query : " & query ,"Warning", Err.Description,"")		

//*****************************************************************************************
//@methodName: get_CashDrawerUser_BasedOnCriteriaSpecified(employeType,securityLevel)
//@Author Chandra
//@Date 04 Oct 2019
//@Description This will get the existing cash drawer Manager user from DB
//Ex: get_CashDrawerUser_BasedOnCriteriaSpecified("14A","400")
//*****************************************************************************************
get_CashDrawerUser_BasedOnCriteriaSpecified(String employeType,String securityLevel)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get the Cash Drawer from the Shared Location 
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath")&"CashDrawer_User_BasedOnSpecifiedCriteria_SQLQuery.txt")
	query = Replace(query,"@empl_type",employeType)
	query = Replace(query,"@security_level",securityLevel)
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to Identify the Cash Drawer & Set Pwd",query
	//Returing the 1st User ID with Cash Drawer    
    get_CashDrawerUser_BasedOnCriteriaSpecified = runSQLQuery(query,"userid")		
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_CashDrawerUser_BasedOnCriteriaSpecified","Failed", Err.Description,"")

//***********************************************************************************************************************
//@methodName: get_NonMatured_LoanNumber_FromDB(accountType)
//@Author: Sumithra
//@Date 30 Oct 2019
//@Description This is to get loan number from DB which are not matured
//Ex:  get_NonMatured_LoanNumber_FromDB("55")
//***********************************************************************************************************************
get_NonMatured_LoanNumber_FromDB(String accountType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	query =	"Select * from support.bp_account_tbl where acct_status =//Active// and acct_type=//"&accountType&"// and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) > getdate(*)) order by rand()"
//	query =	"Select * from support.bp_account_tbl where acct_status =//Active// and acct_type=//"&accountType&"// and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) < getdate(*)) order by loan_nbr asc"
	//run query
	get_NonMatured_LoanNumber_FromDB = runSQLQuery_WithWarning_WithoutExit(query, "loan_nbr")
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_NonMatured_LoanNumber_FromDB","Failed", Err.Description,"")

//***********************************************************************************************************************
//@methodName: getMaturedLoanNumber_FromDB(accountType)
//@Author: Sumithra
//@Date 30 Oct 2019
//@Description This is to get loan number from DB which are matured
//Ex:  getMaturedLoanNumber_FromDB("55")
//***********************************************************************************************************************
getMaturedLoanNumber_FromDB(String accountType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	stateName = Environment.Value("currentState")
	if stateName ="NC" and accountType ="31" 
//		query = "select aa.acct_id,a.loan_nbr,aa.activity_code, aa.activity_descr from bp_account_activity_tbl aa inner join bp_account_tbl a where aa.activity_code = //ADJ_INT// and a.acct_status = //ACTIVE// order by aa.entry_dt desc"
		query = "select aa.acct_id,a.loan_nbr,aa.activity_code, aa.activity_descr from bp_account_activity_tbl aa inner join bp_account_tbl a where aa.activity_code = //ADJ_INT// and a.acct_status <> //PAID_OUT// and a.acct_status <> //CHRG_OFF// order by aa.entry_dt desc"
	else
//		query =	"Select * from support.bp_account_tbl where acct_status =//Active// and acct_type=//"&accountType&"// and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >= getdate(*)) order by loan_nbr desc"
		query =	"Select * from support.bp_account_tbl where acct_status =//Active// and acct_type=//"&accountType&"// and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) <= getdate(*)) order by rand()"
	//run sql query
	getMaturedLoanNumber_FromDB = runSQLQuery_WithWarning_WithoutExit(query, "loan_nbr")
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/getMaturedLoanNumber_FromDB","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_DealerName_BasedOnCriteriaSpecified_FromDB(holdBackType,principlaBal,requiredField)
//@Author Chandra
//@Date 24 OCT 2019
//@Description This is get the Dealer Name based on criteria specified from App DB
//@Returing the Dealer Name
//Ex  get_DealerName_BasedOnCriteriaSpecified_FromDB("DISCOUNT","12000","short_name")
// get_DealerName_BasedOnCriteriaSpecified_FromDB("RESERVE","12000","short_name")
// get_DealerName_BasedOnCriteriaSpecified_FromDB("Both","12000","short_name")
// get_DealerName_BasedOnCriteriaSpecified_FromDB("Zero","12000","short_name")
//*********************************************************************************************
get_DealerName_BasedOnCriteriaSpecified_FromDB(String holdBackType,String orginal_principlaBal,String requiredField)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Initial Query
	//baseQuery = "select BDT.short_name,DRT.dealer_id,sum(isnull(DRT.reserve_amt,0)) as sumReserveAmt,sum(isnull(DRT.discount_amt,0)) as sumDiscountAmt from bp_dealer_tbl BDT inner join bp_dealer_reserve_tbl DRT on BDT.dealer_Id = DRT.dealer_id where BDT.active_yn = //Y//"
	baseQuery = "select BDT.short_name,DRT.dealer_id,sum(isnull(DRT.reserve_amt,0)) as sumReserveAmt,sum(isnull(DRT.discount_amt,0)) as sumDiscountAmt, MIN(BDT.RESERVE_AMT) DL_RES,MIN(BDT.DISCOUNT_AMT) DL_DIS from bp_dealer_tbl BDT inner join bp_dealer_reserve_tbl DRT on BDT.dealer_Id = DRT.dealer_id where BDT.active_yn = //Y//"
	//New Principal Bal
	new_principlaBal = Round(((orginal_principlaBal * 5)/100),2)
	principlaBal = orginal_principlaBal - new_principlaBal 
	//Appending the Query based hold back type
	if ToUpper(holdBackType) = "DISCOUNT" 
		//Dealer Reserve is zero and Discount amount is not equal to zero
		//baseQuery = baseQuery & " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt <> 0 and sumDiscountAmt < " & principlaBal & " and sumReserveAmt = 0 AND DL_RES = 0 AND DL_DIS = 0 order by DRT.dealer_id "
//Modified on 6th Jan 2020
        baseQuery = baseQuery & " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt <> 0 and sumDiscountAmt < " & principlaBal & " and sumReserveAmt = 0 AND DL_RES = 0 AND DL_DIS <> 0 order by DRT.dealer_id "
	else if ToUpper(holdBackType) = "RESERVE" 
		//Dealer Reserve is not equal to zero and Discount amount is zero
//		baseQuery = baseQuery & " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt = 0 and sumReserveAmt <> 0 and sumReserveAmt < " & principlaBal & " AND DL_RES = 0 AND DL_DIS <> 0 order by DRT.dealer_id "
		baseQuery = baseQuery & " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt = 0 and sumReserveAmt <> 0 and sumReserveAmt < " & principlaBal & " AND DL_RES <> 0 AND DL_DIS = 0 order by DRT.dealer_id "
	else if ToUpper(holdBackType) = "BOTH" 
		//Dealer Reserve and Discount amount both not equal to zero
		//baseQuery = baseQuery & " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt <> 0 and sumReserveAmt <> 0 and sumReserveAmt < " & principlaBal & " AND DL_RES = 0 AND DL_DIS <> 0  order by DRT.dealer_id "	
		baseQuery = baseQuery & " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt <> 0 and sumReserveAmt <> 0 and sumReserveAmt < " & principlaBal & " order by DRT.dealer_id "	
	else if ToUpper(holdBackType) = "ZERO" 
		//Dealer Reserve and Discount amount both is equal to zero
		baseQuery = baseQuery & " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt = 0 and sumReserveAmt = 0 and DL_RES=0 and DL_DIS=0 order by rand()"
	else
		//Pick an active dealer
		baseQuery = baseQuery & " group by BDT.short_name,DRT.dealer_id order by rand()"
	get_DealerName_BasedOnCriteriaSpecified_FromDB = runSQLQuery_FetchMultipleValues(baseQuery,requiredField)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerName_BasedOnCriteriaSpecified_FromDB","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB(dealerType,accountType,acctStatus,contractFromDate,requiredFileds, queryPath)
//@Author Chandra
//@Date 24 Sep 2019
//@Description This will Set the Field Value for the Field Name specified In Modify To Section from Loan Modification Window
//@Retruning the DB values
//Ex 1.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("DISCOUNT","AUTO","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"")
//   2.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("RESERVE","AUTO","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"")
//   3.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("BOTH","AUTO","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"Current")
//   4.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("DISCOUNT","Motor","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"")
//   5.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("RESERVE","Motor","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"30")
//   6.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("BOTH","Motor","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"")
//*********************************************************************************************
get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB(String dealerType,String accountType,String acctStatus,String contractFromDate,String requiredFileds,String queryPath,String UI_Del_Status)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get SQL Query form text file
	baseQuery = get_Entire_File_Content(queryPath)
	//Constructing based on Dealer DISCOUNT/RESERVE/BOTH(RESERVE and DISCOUNT) Amount 
	if ToUpper(dealerType) = "DISCOUNT" 
//		baseQuery = baseQuery & " and d.total_discount <> 0 and d.total_reserve = 0 and (a.princ_bal - round(((a.princ_bal *5) /100),2)) > d.total_discount" 
		baseQuery = baseQuery & " and d.total_discount <> 0 and d.total_reserve = 0 " 
	else if ToUpper(dealerType) = "RESERVE" 
//		baseQuery = baseQuery & " and d.total_reserve <> 0 and d.total_discount = 0 and (a.princ_bal - round(((a.princ_bal *5) /100),2)) > d.total_reserve" 
		baseQuery = baseQuery & " and d.total_reserve <> 0 and d.total_discount = 0 " 
	else if ToUpper(dealerType) = "BOTH" 
		baseQuery = baseQuery & " and a.princ_bal > d.total_reserve and d.total_reserve <> 0 and d.total_discount <> 0"
	//Constructing based on Account Type
	if ToUpper(accountType) = "MOTOR" or  accountType = "56" 
		baseQuery = baseQuery & " and acct_type in (//56//)"
	else if ToUpper(accountType) = "AUTO" or  accountType = "55" 
		baseQuery = baseQuery & " and acct_type in (//55//)"
	//Constructing based on UI_Del_Status
	if UI_Del_Status <> "" 
		//Get ID Based on Delinquency Status and Contractual status
		 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
		//append delinquency status
		baseQuery = baseQuery & "and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"//"
	//Constructing based on Account Status
	if not(ToUpper(acctStatus) = "ANY" or Trim(acctStatus) = "" or IsNull(acctStatus)) 
		baseQuery = baseQuery & " and a.acct_status = //" & acctStatus & "//"
//	//Constructing based on Processed Date
//	 if contractFromDate <> ""  
//	 	
//		ContractFromDate = formatDateWithSpecifiedDelimeter(contractFromDate,"YYYYMMDD","-")
//		//query to run 
//		baseQuery = baseQuery & " and procd_dt < //" & contractFromDate & "//"
//    
    //Constructing based on Processed Date
	 if contractFromDate <> ""  
	 	if IndexOf(contractFromDate,">") > 0 
	 		contractFromDate = Replace(contractFromDate,">","")
	 		ContractFromDate = formatDateWithSpecifiedDelimeter(contractFromDate,"YYYYMMDD","-")
			ContractToDate = addDays_for_SepecifiedDate("d","-45",Date)
			ContractToDate = formatDateWithSpecifiedDelimeter(ContractToDate,"YYYYMMDD","-")
 		 	//query to run 
 		 	baseQuery = baseQuery & " and funding_dt > //" & contractFromDate & "// and funding_dt < //"&ContractToDate&"//"
	 	else
			ContractFromDate = formatDateWithSpecifiedDelimeter(contractFromDate,"YYYYMMDD","-")
			//query to run 
			baseQuery = baseQuery & " and procd_dt < //" & contractFromDate & "//"
	//Appending the Order by
	baseQuery = baseQuery & " order by rand()"
	//Logging the Query Generated in UFT Report
	  LogSuccessMessage("Query Generated in getLoanNumberBasedOnCriteriaSelected",baseQuery)
	//Running the SQL Query and returning the value
	loanNumber_DB = runSQLQuery_FetchMultipleValues_WithoutExit(baseQuery,requiredFileds)
	get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB = loanNumber_DB
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB","Failed", Err.Description ,"")

//***********************************************************************************************************
//@methodName: updateSQLQuery_InHomeOffice(query)
//@Description: This will update the data to home office
//@Author:Karthik 
//@Date 16 Oct 2019
//Ex:  updateSQLQuery_InHomeOffice("update e_app_tbl set status =//NOTVIEW// where ssn = //248291507//"))
//***********************************************************************************************************
updateSQLQuery_InHomeOffice(String query)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
 	loginSheetPath = Environment.Value("BranchPlusSharedPath") & "LoginDetails.xlsx"
	DataTable.AddSheet("Login")
	DataTable.ImportSheet loginSheetPath,"Login","Login"
 	homeOffice_Username = DataTable.Value("NetworkUsername","Login")
	homeOffice_Passcode = DataTable.Value("NetworkPasscode","Login")
    //Create ADODB connection object
    Set objConnection = CreateObject("ADODB.Connection") 
    //Create Recordsetobject
    Set objRecordSet = CreateObject("ADODB.Recordset")
    //Connect to DB using provider and server
    //objConnection.open "provider=sqloledb;Server=s1-sql-brgqa1\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"
    objConnection.open "provider=sqloledb;Server=s1-sql-brgdev1\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"    
    //Write the SQL Query
    sqlQuery=query
    //Open the recordset object executing the SQL statement and update records 
    objRecordSet.Open sqlQuery,objConnection
    //Recordset.Close
    Set objRecordSet=nothing
    objConnection.Close
    Set objConnection=nothing    
    //Error handling 
     if GetErrorCount()>0              
         writeReportLog("Failed to updateSQLQuery_InHomeOffice","Failed", Err.Description ,"")

//EX: updateSQLQuery_InSQLServer_HO_BasedOnServer("QA",query)--> This will run the query in the QA Environment (SQL Server)
//EX: updateSQLQuery_InSQLServer_HO_BasedOnServer("DEV",Query) --> This will run the query in the Dev Environment (SQL Server)
updateSQLQuery_InSQLServer_HO_BasedOnServer(String serverType,String query)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
 	loginSheetPath = Environment.Value("BranchPlusSharedPath") & "LoginDetails.xlsx"
	DataTable.AddSheet("Login")
	DataTable.ImportSheet loginSheetPath,"Login","Login"
 	homeOffice_Username = DataTable.Value("NetworkUsername","Login")
	homeOffice_Passcode = DataTable.Value("NetworkPasscode","Login")
    Reporter.ReportEvent micDone,"Electronic Payments Insert Query",query
    //Create ADODB connection object
    Set objConnection = CreateObject("ADODB.Connection") 
    //Create Recordsetobject
    Set objRecordSet = CreateObject("ADODB.Recordset")
    //Connect to DB using provider and server
    if serverType = "QA" 
    	// objConnection.open "provider=sqloledb;Server=s1-sql-brgqa1\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"
//    	serverName = "s1-sql-brgqa1"
		serverName = "SQL-DB-D3"
    else if serverType = "DEV" 
    	 //objConnection.open "provider=sqloledb;Server=s1-sql-brgdev1\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"    
    	serverName = "s1-sql-brgdev1"
    else
    	 writeReportLog("Wrong Value passed to serverType argument || : updateSQLQuery_InSQLServer_HO_BasedOnServer","Failed","","")
    //Connect to DB
//     objConnection.open "provider=sqloledb;Server="& serverName &"\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"    
	objConnection.open "provider=sqloledb;Server="& serverName &";User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"    
    //Write the SQL Query
    sqlQuery=query
    //Open the recordset object executing the SQL statement and update records 
    objRecordSet.Open sqlQuery,objConnection
    //Recordset.Close
    Set objRecordSet=nothing
    objConnection.Close
    Set objConnection=nothing    
    //Error handling 
     if GetErrorCount()>0              
         writeReportLog("Failed to updateSQLQuery_InHomeOffice","Failed", Err.Description ,"")

//***********************************************************************************************************
//@methodName: runQuery_InHomeoffice_FetchMultipleValues(query,requiredFieldName)
//@Description: This will fetch the data from home office
//@Author:Karthik
//@Return : Return the column details from DB
//@Date 16 Oct 2019
//Ex:  runQuery_InHomeoffice_FetchMultipleValues("select * from e_app_tbl","ssn"))
//***********************************************************************************************************
runQuery_InHomeoffice_FetchMultipleValues(String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    loginSheetPath = Environment.Value("BranchPlusSharedPath") & "LoginDetails.xlsx"
	DataTable.AddSheet("Login")
	DataTable.ImportSheet loginSheetPath,"Login","Login"
    homeOffice_Username = DataTable.Value("NetworkUsername","Login")
	homeOffice_Passcode = DataTable.Value("NetworkPasscode","Login")
    //Create ADODB connection object
    Set objConnection = CreateObject("ADODB.Connection") 
    //Create Recordsetobject
    Set objRecordSet = CreateObject("ADODB.Recordset")
    //Connect to DB using provider and server
    objConnection.open "provider=sqloledb;Server=s1-sql-brgqa1\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"
    //Write the SQL Query
    sqlQuery=query
    //Execute the query
    objRecordSet.open sqlQuery, objConnection 
    //Validating for Query No Results
    if objRecordSet.EOF 
         writeReportLog("Looks Like Query >> " & query &  " did not found any record","Failed", Err.Description,"")
        ExitTest
    else
    //splitting the column values
        arr = Split(requiredFieldName,":")
        for i = 0 To UBound(arr)
        if i <> 0 
        outputString = outputString & ":"
    requiredFieldName = objRecordSet.Fields(arr(i))
    outputString = outputString & requiredFieldName
    //Returing the Value
    runQuery_InHomeoffice_FetchMultipleValues = outputString 
    objRecordSet.Close
    objConnection.Close
    Set objConnection = Nothing
    Set objRecordSet = Nothing
    //Error handling
    if GetErrorCount()>0              
         writeReportLog("Failed in Step/: runQuery_InHomeoffice_FetchMultipleValues","Failed", Err.Description ,"")

//***********************************************************************************************************************
//@methodName: insert_ElectronicPayment_InHomeOfficeDB(branchId,LoanNumber,appliedAmount)
//@Author: Sumithra
//@Date 12 Dec 2018
//@Description This will insert the electronic payment from home office DB
//Ex:  insert_ElectronicPayment_InHomeOfficeDB("0881","088100002224","10")
//***********************************************************************************************************************
insert_ElectronicPayment_InHomeOfficeDB(String branchId,String LoanNumber,String appliedAmount)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//get query from shared path
	insertDataQuery = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath")&"BRP-1571_script_for_HO_Insert_ElectronicPayments.sql")
	insertDataQuery = Replace(insertDataQuery,"//BRANCH//","//"&branchId&"//")
	insertDataQuery = Replace(insertDataQuery,"//LOAN_NBR//","//"&LoanNumber&"//")
	insertDataQuery = Replace(insertDataQuery,"appliedAmount",appliedAmount)
	//upadted query
	 updateSQLQuery_InHomeOffice(insertDataQuery)
	Sleep (3)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in insert_ElectronicPayment_InHomeOfficeDB","Failed", Err.Description,"")

insert_ElectronicPayment_InSQLServer_HODB(String serverType,String branchId,String LoanNumber,String appliedAmount)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//get query from shared path
	insertDataQuery = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath")&"BRP-1571_script_for_HO_Insert_ElectronicPayments.sql")
	insertDataQuery = Replace(insertDataQuery,"//BRANCH//","//"&branchId&"//")
	insertDataQuery = Replace(insertDataQuery,"//LOAN_NBR//","//"&LoanNumber&"//")
	insertDataQuery = Replace(insertDataQuery,"appliedAmount",appliedAmount)
	//as part of year end regression script failures maintainted the script with inserting payment date as system date
	PaymentDate = getTodaysDate_mmddyyyy_format()
	insertDataQuery = Replace(insertDataQuery,"PAYMENT_DATE",PaymentDate)
	//Fetching Account_id -- for the New Changes Made as part of 9.4.1 Fix
	acct_id = getAccountID_From_DB_basedOnLoanNumber(LoanNumber)
	insertDataQuery = Replace(insertDataQuery,"ACCT_ID",acct_id)
	//upadted query
	 updateSQLQuery_InSQLServer_HO_BasedOnServer(serverType,insertDataQuery)
	Sleep (3)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in insert_ElectronicPayment_InHomeOfficeDB","Failed", Err.Description,"")

//***********************************************************************************************************************
//@methodName: update_Domain_In_BP_Website_Table_FromDB
//@Author: Sumithra
//@Date 30 Oct 2019
//@Description This is to update domian in website table
//Ex:  update_Domain_In_BP_Website_Table_FromDB("ONLINE PMTS TEST","http://sfc-api-qa201")
//***********************************************************************************************************************
update_Domain_In_BP_Website_Table_FromDB(String website,String domain)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query 
	query = "Update bp_website_tbl set domain =//"&domain&"// where website =//"&website&"//"
	//upadted query
	 runUpdateSQLQuery(query)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in update_Domain_In_BP_Website_Table_FromDB","Failed", Err.Description,"")

//*****************************************************************************************
//@methodName: get_DealerTotalAmount_FromDB(dealerID,requiredField)
//@Author Chandra
//@Date 27 Sep 2019
//@Description This will get the existing cash drawer Superviosr user from DB
//Ex: get_DealerTotalAmount_FromDB("08810234762378","total_discount")
//*****************************************************************************************
get_DealerTotalAmount_FromDB(String dealerID,String requiredField)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select * from bp_dealer_reserve_tbl where dealer_id = //"&  dealerID & "// order by entry_dt desc"
	get_DealerTotalAmount_FromDB = runSQLQuery(query,requiredField)
	 //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_DealerTotalAmount_FromDB ","Failed", Err.Description,"")

//*********************************************************************************************
//@MEthodName getCountOfBusinessAgents_FromDB
//@Author Karthik.Shekar
//@Description This function will get the count of Business agents from App DB based on criteria specified
//@Return count
//@Date 13 Nov 2019
//EX:  msgbox getCountOfBusinessAgents_FromDB("Repossession","Y")
//     msgbox getCountOfBusinessAgents_FromDB("","Y")
 //********************************************************************************************** 
 getCountOfBusinessAgents_FromDB(agentType,activeYN)
  //Query
  query = "select count(*) from bp_business_agent_tbl where active_yn = //" & activeYN & "//"
  //Constructing the Query based on Criteria
  if ToUpper(agentType) = ToUpper("Repossession") 
  	dbAgentType = "REPOAGNT"
  	query = query & " and agent_type = //" & dbAgentType & "//" 
  else if ToUpper(agentType) = ToUpper("Garnishment") 
  	dbAgentType = "GARNAGNT"
  	query = query & " and agent_type = //" & dbAgentType & "//" 
  else if ToUpper(agentType) = ToUpper("Others") 
  	dbAgentType = "OTHERAGENT"
  	query = query & " and agent_type = //" & dbAgentType & "//" 
  else if ToUpper(agentType) = ToUpper("ALL") or  Length(Trim(agentType)) = 0 
  	query = query
  else
  	 writeReportLog("AgentType " & agentType &  " passed to function getCountOfBusinessAgents_FromDB is not corect","Passed","","")
     //Returning 
  getCountOfBusinessAgents_FromDB = runSQLQuery(query,"count(*)") 
  //Error Handling
   if GetErrorCount()>0 
		 writeReportLog("Failed in step/getCountOfBusinessAgents_FromDB","Failed", Err.Description,"")
 RemoveFunction
//********************************************************************************************
//@Method get_random_DealerNameAndID_FromAppDB
//@Author Karthik.Shekar
//@Date 21 Nov 2019
//@Description this function will get the Dealer Name and ID based on the Dealer Status Passed
//@Return DealerName;DealerID
//msgbox get_random_DealerNameAndID_FromAppDB("y")
//msgbox get_random_DealerNameAndID_FromAppDB("y")
//********************************************************************************************
get_random_DealerNameAndID_FromAppDB(String dealerStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query
	query = "select * from bp_dealer_tbl where active_yn = //"& ToUpper(dealerStatus) &"//" & " order by rand()"		
	 //Returing the Value
	 get_random_DealerNameAndID_FromAppDB = runSQLQuery_FetchMultipleValues_WithWarning(query,"short_name;dealer_id")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerDetails_FromAppDB","Failed", Err.Description,"")

//***********************************************************************************************************************************
//@Method: get_DealerAddress_BasedOnDealerID_FromAppDB(dealerID,dealerType,addrType,requiredField)
//@Author Karthik
//@Date 18 Oct 2019
//@Description This function is to get the Dealer Address based on dealer Id from DB
//Ex:  getValue_CheckbookPayment_window("087400000001","DEALER","MAILING","addr1;addr2;addr3;zipcode;city;state")
//************************************************************************************************************************************
get_DealerAddress_BasedOnDealerID_FromAppDB(String dealerID,String dealerType,String addrType,String requiredField)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query
	query = "select * from bp_location_tbl where loc_id = //"& dealerID &"// and loc_type = //"& dealerType &"// and loc_class = //"& addrType &"//"
	get_DealerAddress_BasedOnDealerID_FromAppDB = runSQLQuery_FetchMultipleValues_WithWarning(query,requiredField)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerAddress_BasedOnDealerID_FromAppDB","Failed", Err.Description,"")

//***********************************************************************************************************************************
//@Method: update_DealerAddress_BasedOnDealerID_FromAppDB
//@Author Karthik
//@Date 06 Sep 2019
//@Description This function will update the dealer Address 2 field value and Phone Number in Location Table
//Ex:  update_DealerAddress_BasedOnDealerID_FromAppDB("106000000003","DEALER","MAILING","addr2","Latke View")
//Ex:  update_DealerAddress_BasedOnDealerID_FromAppDB("106000000003","DEALER","MAILING","addr1","#28987")
//************************************************************************************************************************************
update_DealerAddress_BasedOnDealerID_FromAppDB(String dealerID,String dealerType,String addrType,String colName,String valueToSet)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query
	query = "update bp_location_tbl Set " & colName & " = //" & valueToSet & "// where loc_id = //"& dealerID &"// and loc_type = //"& dealerType &"// and loc_class = //"& addrType &"//"
	//running the SQL Querys
	  runUpdateSQLQuery(query)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerAddress_BasedOnDealerID_FromAppDB","Failed", Err.Description,"")

//***********************************************************************************************************************
//@methodName: get_BusinessAgentCount_BasedOn_AgentType_FromDB(agentType)
//@Author: Karthik.Shekar
//@Date 24 Oct 2019
//@Description This will get Business Agent count based on agent type from DB
//Ex:  get_BusinessAgentCount_BasedOn_AgentType_FromDB("GARNAGNT")
//Ex:  get_BusinessAgentCount_BasedOn_AgentType_FromDB("REPOAGNT")
//***********************************************************************************************************************
get_BusinessAgentCount_BasedOn_AgentType_FromDB(String agentType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //run query to fetch loan number
	 result = runSQLQuery_WithWarning_WithoutExit("select Count(dba_name) from bp_business_agent_tbl where agent_type = //"&agentType&"//","count(bp_business_agent_tbl.dba_name)")
	 if result <> "" 
	 	get_BusinessAgentCount_BasedOn_AgentType_FromDB = result
 	else
	 	get_BusinessAgentCount_BasedOn_AgentType_FromDB = "0"
   if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_BusinessAgentCount_BasedOn_AgentType_FromDB","Failed", Err.Description,"")

//***********************************************************************************************************************************
//@Method: getPaymentType_BasedOnTransID_FromDB(transID,requiredFields)
//@Author Chandra
//@Date 25 Nov 2019
//@Description This function is to get the Value from Payment Account table based trans ID from DB
//Ex:  getPaymentType_BasedOnTransID_FromDB(transID,requiredFields)
//************************************************************************************************************************************
getPaymentType_BasedOnTransID_FromDB(String transID,String requiredFields)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	getPaymentType_BasedOnTransID_FromDB = runSQLQuery("select * from  bp_account_payment_tbl where trans_id = //"& transID &"//",requiredFields)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: getPaymentType_BasedOnTransID_FromDB","Failed", Err.Description ,"")

//msgbox getDealerStateBasedOnLoanNumber("088100009483")
getDealerStateBasedOnLoanNumber(String loanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	getDealerStateBasedOnLoanNumber = runSQLQuery("select state from bp_dealer_tbl where dealer_id = (select dealer_id from bp_account_tbl where loan_nbr = //" & loanNumber & "//)","state")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: getPaymentType_BasedOnTransID_FromDB","Failed", Err.Description ,"")

//***********************************************************************************************************************
//@methodName: get_BusinessAgent_FromAppDB
//@Author: Karthik
//@Date 28 Aug 2019
//@Description This will get Business Agent from DB
//Ex:  get_BusinessAgent_FromAppDB("Y","Repossession","dba_name")
//     get_BusinessAgent_FromAppDB("N,"Garnishment","agent_id")
//***********************************************************************************************************************
get_BusinessAgent_FromAppDB(String activeYN,String agentType,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//	//run SQL Query
//	requiredValue = runSQLQuery_WithWarning_WithoutExit("select * from bp_business_agent_tbl", requiredFieldName)
//	//Returning the value
//	get_BusinessAgent_FromAppDB = requiredValue
//	//Error handling
//	if GetErrorCount()>0  			
//		 writeReportLog("Failed in Step/: get_BusinessAgent_FromAppDB","Failed", Err.Description ,"")
//	
	//Query
	  query = "select * from bp_business_agent_tbl where active_yn = //" & activeYN & "//" 
	  //Constructing the Query based on Criteria
	  if ToUpper(agentType) = ToUpper("Repossession") 
	  	dbAgentType = "REPOAGNT"
	  	query = query & " and agent_type = //" & dbAgentType & "//" 
	  else if ToUpper(agentType) = ToUpper("Garnishment") 
	  	dbAgentType = "GARNAGNT"
	  	query = query & " and agent_type = //" & dbAgentType & "//" 
	  else if ToUpper(agentType) = ToUpper("Others") 
	  	dbAgentType = "OTHERAGENT"
	  	query = query & " and agent_type = //" & dbAgentType & "//" 
	  else if ToUpper(agentType) = ToUpper("ALL") or  Length(Trim(agentType)) = 0 
	  	query = query
	  else
	  	 writeReportLog("AgentType " & agentType &  " passed to function get_BusinessAgent_FromAppDB is not corect","Failed","","")
	  query = query & " order by rand()"
	  //Returning 
	  get_BusinessAgent_FromAppDB = runSQLQuery(query,requiredFieldName) 
	  //Error Handling
	   if GetErrorCount()>0 
			 writeReportLog("Failed in step/get_BusinessAgent_FromAppDB","Failed", Err.Description,"")

//***********************************************************************************************************************
//@methodName: get_MailingAddress_FromAppDB(requiredFieldName)
//@Author: Karthik
//@Date 28 Aug 2019
//@Description This will get Business Agent from DB
//Ex:  get_MailingAddress_FromAppDB("addr1:addr2:city:state:zipcode")
//***********************************************************************************************************************
get_MailingAddress_FromAppDB(String requiredFieldNames)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//run SQL Query
	requiredValue = runSQLQuery_FetchMultipleValues_WithWarning("select * from bp_location_tbl where loc_type = //BRANCH// and loc_class = //MAILING//",requiredFieldNames)
	//Returning the value
	get_MailingAddress_FromAppDB = requiredValue
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_MailingAddress_FromAppDB","Failed", Err.Description ,"")

//***********************************************************************************************************************************
//@Method: get_GLDescription_BasedOnTransID_FromDB(colName)
//@Author Chandra
//@Date 19 Aug 2019
//@Description This function is get the GL Description based on Transaction ID from DB
//@Returning the GL Description
//Ex:  get_GLDescription_BasedOnTransID_FromDB("0000087854564")
//************************************************************************************************************************************
get_GLDescription_BasedOnTransID_FromDB(String transactionID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	GL_Descr = ""
	rowCount = ""
	//Get Row Count from General Ledger details tbl in DB
	rowCount = get_COA_RowCount_BasedOnTransactionID_FromDB(transactionID)
	//Getting GL Description based on Transaction ID 
	for RowCount_DB = 1 To rowCount
		//COA number getting based on row and Trans ID
		Coa_Details = get_Data_In_GeneralLedgerDetailTbl_FromDB(RowCount_DB,transactionID,"coa")
		//Get GL Description from chart account tble from DB based on COA number
		GL_Descr = get_GLDescription_In_ChartAccountTbl_FromDB(Coa_Details)
		//Getting all the GL Description additng to variable
		GL_All_Description = Coa_Details & " " & GL_Descr & "||" & GL_All_Description
	get_GLDescription_BasedOnTransID_FromDB = GL_All_Description
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_GLDescription_BasedOnTransID_FromDB","Failed", Err.Description,"Y")

//***********************************************************************************************************************************
//@Method: get_GLDescription_BasedOnTransID_FromDB(transactionID)
//@Author Chandra
//@Date 19 Aug 2019
//@Description This function is get the Row Count based on Transaction ID from DB (Chart account tbl & genral ledger details tbl)
//@Returning the Row Count
//Ex:  get_COA_RowCount_BasedOnTransactionID_FromDB("000001237845")
//************************************************************************************************************************************
get_COA_RowCount_BasedOnTransactionID_FromDB(String transactionID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Data from Bank Details Table based Last Entry Date record
	requiredValue = runSQLQuery("select Count(*) from bp_chart_accounts_tbl where coa in (select coa from bp_general_ledger_detail_tbl where trans_id = //"& transactionID &"//)","count(*)")
	get_COA_RowCount_BasedOnTransactionID_FromDB = requiredValue
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_COA_RowCount_BasedOnTransactionID_FromDB","Failed", Err.Description,"Y")

//***********************************************************************************************************************************
//@Method: get_Data_In_GeneralLedgerDetailTbl_FromDB(rowNumber,transactionID,requiredFields)
//@Author Chandra
//@Date 19 Aug 2019
//@Description This function is get the Data in Genral ledger details tbl based on row number, Transaction ID and like coa, account id from DB (Chart account tbl & genral ledger details tbl)
//@Returning the Row Count
//Ex:  get_Data_In_GeneralLedgerDetailTbl_FromDB("1","00000214586","coa")
//************************************************************************************************************************************
get_Data_In_GeneralLedgerDetailTbl_FromDB(String rowNumber,String transactionID,String requiredFields)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Data from Bank Details Table based Last Entry Date record
	requiredValue = runSQLQuery("select TOP 1 START AT "& rowNumber &" * from bp_chart_accounts_tbl where coa in (select coa from bp_general_ledger_detail_tbl where trans_id = //"& transactionID &"//)",requiredFields)
	get_Data_In_GeneralLedgerDetailTbl_FromDB = requiredValue
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_Data_In_GeneralLedgerDetailTbl_FromDB","Failed", Err.Description,"Y")

//***********************************************************************************************************************************
//@Method: get_GLDescription_In_ChartAccountTbl_FromDB(coa_ID)
//@Author Chandra
//@Date 19 Aug 2019
//@Description This function is get the GL description from DB based on COA number (Chart account tbl)
//@Returning the Row Count
//Ex:  get_GLDescription_In_ChartAccountTbl_FromDB("1002")
//************************************************************************************************************************************
get_GLDescription_In_ChartAccountTbl_FromDB(String coa_ID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Data from bp_chart_accounts_tbl based on COA number
	requiredValue = runSQLQuery("select * from bp_chart_accounts_tbl where coa = //"& coa_ID &"//","descr")
	get_GLDescription_In_ChartAccountTbl_FromDB = requiredValue
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_GLDescription_In_ChartAccountTbl_FromDB","Failed", Err.Description,"Y")

//*********************************************************************************************
//@methodName: update_CashDrawerUserSecurityLevel_BasedOnUser(securiyLevel,cashDrawerUserID)
//@Author Chandra
//@Date 27 Aug 2019
//@Description This is to Update the Security level less than 400 based on User Id in DB
//Ex: Result = update_CashDrawerUserSecurityLevel_BasedOnUser("300","csw")
//*********************************************************************************************
update_CashDrawerUserSecurityLevel_BasedOnUser(String securiyLevel,String cashDrawerUserID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") &"Update_CashDrawerUser_SecurityLevel_SQLQuery.txt")
	//Replace the UserID 
	query = Replace(query,"@UserID@",cashDrawerUserID)
	//Replace the Security Level
	query = Replace(query,"@securityLevel@",securiyLevel)
	//Run Sql Query
	 runUpdateSQLQuery(query)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: update_CashDrawerUserSecurityLevel_BasedOnUser","Failed", Err.Description,"Y")

//*********************************************************************************************
//@methodName: get_DealerDetails_FromAppDB(holdback_Type,discountAmount,requiredField)
//@Author Chandra
//@Date 07 May 2019
//@Description This is get the Dealer Name from App DB
//@Returing the Dealer Name
//Ex  get_DealerDetails_FromAppDB("Y","DISCOUNT","100","short_name")
//	 get_DealerDetails_FromAppDB("N","RESERVE","200","short_name")
//*********************************************************************************************
get_DealerDetails_FromAppDB(String dealerStatus,String holdback_Type,String discountAmount,String requiredField)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query
	query = "select * from bp_dealer_tbl where active_yn = //"& ToUpper(dealerStatus) &"// and holdback_type = //"& ToUpper(holdback_Type) &"//"
	//if Discount Amount is empty ignore
	if ToUpper(dealerStatus) = "Y" 
		query = query & " and discount_amt <= //"& discountAmount &"//"
	get_DealerDetails_FromAppDB = runSQLQuery(query,requiredField)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerDetails_FromAppDB","Failed", Err.Description,"")

//************************************************************************************************************************************************
//@Method: get_ChargeFromDB(stateName,acct_type,opt_type,order,effectiveDate)
//@Author Deepthi
//@Date 17 Jan 2020
//@Description This function is to get the NSF amount from DB
// get_ChargeFromDB("IN",//55//,//NSF_CHRG//,//2020-01-01//)
//**************************************************************************************************************************************************
get_ChargeFromDB(String stateName,String acct_type,String opt_type,String order,String effectiveDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query
	//query = "select * from bp_charge_calc_tbl where state =//"&stateName&"// and opt = //NSF_CHRG// order by start_dt "&order&""
	query="select * from bp_charge_calc_tbl where state = //"&stateName&"// and acct_type = //"&acct_type&"// and opt = //"&opt_type&"// and date(start_dt) "&order&" //"&effectiveDate&"//"
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get latest Late Charge amount and Start date from DB",query
	//Returing the start date and late charge amount
    result = runSQLQuery_FetchMultipleValues_WithWarning(query,"start_dt;amt")	
    //StartDate = Split(result,";")(0)
    get_ChargeFromDB = Split(result,";")(1)
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_ChargeFromDB ","Failed", Err.Description,"")

//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate(dealerState,stateoperator,fundingDate,fundingDateOperator,accounttype)
//@Author Deepthi
//@Date 16 Jan 2020
//@Description This function is to get the Loan number from DB based on the selected dealer
//Example:  get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate("NC","=",01-01-2020",">","55")
//***********************************************************************************************************************************************
get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate(String dealerState,String stateoperator,String fundingDate,String fundingDateOperator,String accounttype)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query
	query = "select * from bp_account_tbl where dealer_id in (select dealer_id from bp_dealer_tbl where state "&stateoperator&"//"&dealerState&"//) and acct_status= //ACTIVE// and acct_type=//"&accounttype&"// and funding_dt "&fundingDateOperator&" //"&fundingDate&"//  order by rand()"	
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get loan number from DB where Late Charge is applicable",query
	//Returing the loan number  
  	get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate","Failed", Err.Description,"")

//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate
//@Author Deepthi
//@Date 20 Jan 2020
//@Description This function is to get the loan number form DB based on the Payment Type passed to method along with Loan Functing Date and Account Type
//@Return Loan Number
//Example:get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate("CHECKPAY","N","01-01-2020,">","55")
//        get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate("CASH","N","01-01-2020,"<","56)
//***********************************************************************************************************************************************
get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate(String paymentType,String reversedYn,String fundingDate,String fundingDateOperator,String accounttype)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query
	query = "select * from bp_account_tbl where acct_id in(select acct_id from bp_account_payment_tbl where  pmt_type=//"&paymentType&"// and reversed_yn=//"&reversedYn&"//) and acct_status= //ACTIVE// and acct_type=//"&accounttype&"// and funding_dt "&fundingDateOperator&" //"&fundingDate&"// order by rand()"
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get loan number from DB where Late Charge is applicable",query
	//Returing the loan number  
  	get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate","Failed", Err.Description,"")

//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_BasedOnFundingDate(fundingDate,fundingDateOperator,accounttype)
//@Author Deepthi
//@Date 16 Jan 2020
//@Description This function is to get the Loan number from DB based on the selected dealer
//Example:  get_LoanNumberFromDB_BasedOnFundingDate("2020-01-01",">","55")
//***********************************************************************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																//get_LoanNumberFromDB_BasedOnFundingDate(fundingDate,fundingDateOperator,accounttype)
//		
//	//query
//	query = "select * from bp_account_tbl  where acct_status= //ACTIVE// and acct_type=//"&accounttype&"// and funding_dt "&fundingDateOperator&" //"&fundingDate&"//  order by rand()"
//	//Updating the Query in the UFT Log
//	Reporter.ReportEvent micDone,"Query to get loan number from DB where Late Charge is applicable",query
//	//Returing the loan number  
//  	get_LoanNumberFromDB_BasedOnFundingDate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
//    
//    //Error Handling
//	if GetErrorCount()>0 
//		 writeReportLog("get_LoanNumberFromDB_BasedOnFundingDate","Failed", Err.Description,"")
//	
//
//###MOdified by Karthik
//MOdification Description : added affiliationType --> PRIMARY , JOINT or COSIGN
//EX: msgbox get_LoanNumberFromDB_BasedOnFundingDate("PRIMARY","2020-01-01","<","31")
get_LoanNumberFromDB_BasedOnFundingDate(String affiliationType,String fundingDate,String fundingDateOperator,String accounttype)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query
	query = "select * from bp_account_tbl  where acct_status= //ACTIVE// and acct_type=//"&accounttype&"// and funding_dt "&fundingDateOperator&" //"&fundingDate&"//"	
	if ToUpper(affiliationType) = "PRIMARY" 
		query =  query & " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
	else if ToUpper(affiliationType) = "COSIGN" or ToUpper(affiliationType) = "JOINT" 	
	   query =  query & " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" & ToUpper(affiliationType) & "//)"
	//Appending Order by
	query = query & " order by rand()"
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get loan number from DB where Late Charge is applicable",query
	//Returing the loan number  
  	get_LoanNumberFromDB_BasedOnFundingDate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("get_LoanNumberFromDB_BasedOnFundingDate","Failed", Err.Description,"")

//
////************************************************************************************************************************************************
////@Method: get_ChargeFromDB(stateName,acct_type,opt_type,order,effectiveDate)
////@Author Deepthi
////@Date 17 Jan 2020
////@Description This function is to get the NSF amount from DB
//
//// get_Latest_NSFAmount_And_StartDate_FromDB("IN",//55//,//NSF_CHRG//,//2020-01-01)
////**************************************************************************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													//get_ChargeFromDB(stateName,acct_type,opt_type,order,effectiveDate)
//	
//	//query
//	//query = "select * from bp_charge_calc_tbl where state =//"&stateName&"// and opt = //NSF_CHRG// order by start_dt "&order&""
//	query="select * from bp_charge_calc_tbl where state = //"&stateName&"// and acct_type = //"&acct_type&"// and opt = //"&opt_type&"// and date(start_dt) "&order&" //"&effectiveDate&"//"
//
//	//Updating the Query in the UFT Log
//	Reporter.ReportEvent micDone,"Query to get latest Late Charge amount and Start date from DB",query
//	
//	//Returing the start date and late charge amount
//    result = runSQLQuery_FetchMultipleValues_WithWarning(query,"start_dt;amt")	
//    //StartDate = Split(result,";")(0)
//    get_ChargeFromDB = Split(result,";")(1)
//    
//    //Error Handling
//	if GetErrorCount()>0 
//		 writeReportLog("Failed : get_ChargeFromDB ","Failed", Err.Description,"")
//	
//
//
//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate(dealerState,stateoperator,fundingDate,fundingDateOperator,accounttype,LoanNumer,DealerID)
//@Author Deepthi
//@Date 16 Jan 2020
//@Description This function is to get the Loan number from DB based on the selected dealer
//Example:  get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate("NC","=",01-01-2020",">","55",LoanNumer,DealerID)
//***********************************************************************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																//get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate(dealerState,stateoperator,fundingDate,fundingDateOperator,accounttype)
//	
//	
//	//query
//	query = "select * from bp_account_tbl where dealer_id in (select dealer_id from bp_dealer_tbl where state "&stateoperator&"//"&dealerState&"//) and acct_status= //ACTIVE// and acct_type=//"&accounttype&"// and funding_dt "&fundingDateOperator&" //"&fundingDate&"//  order by rand()"	
//	//Updating the Query in the UFT Log
//	Reporter.ReportEvent micDone,"Query to get loan number from DB where Late Charge is applicable",query
//	//Returing the loan number  
//  	get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
//	
//    
//    //Error Handling
//	if GetErrorCount()>0 
//		 writeReportLog("Failed : get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate","Failed", Err.Description,"")
//	
//
//EX: msgbox get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate("PRIMARY","30","NC","=","2020-01-01","<","55")
//EX: msgbox get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate("PRIMARY",">90","NC","=","2020-01-01","<","55")
//EX: msgbox get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate("PRIMARY","Current","NC","=","2020-01-01","<","55")
//NOTE: affiType & UI_DEL_Status are non Mandatory Fields
get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate(String affiType,String UI_Del_Status,String dealerState,String stateoperator,String fundingDate,String fundingDateOperator,String accounttype)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query
	query = "select * from bp_account_tbl where dealer_id in (select dealer_id from bp_dealer_tbl where state "&stateoperator&"//"&dealerState&"//) and acct_status= //ACTIVE// and acct_type=//"&accounttype&"// and funding_dt "&fundingDateOperator&" //"&fundingDate&"//"	
	if ToUpper(affiType) = "PRIMARY" 
		query = query & " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
	else if ToUpper(affiType) = "COSIGN" or ToUpper(affiType) = "JOINT" 	
	   query = query & " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" & ToUpper(affiType) & "//)"
	if Len(Trim(UI_Del_Status)) > 0 
		//Get ID Based on Delinquency Status and Contractual status			
		if UI_Del_Status <> ">=30" 
			 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
		//Based on Account Status
		if UI_Del_Status = ">90" 
			query = query & " and del_status = //" &  delinqStatus  &"// and contractual_status > //"& contractual_status & "//"
		else if UI_Del_Status = ">=30" 
			query = query & " and del_status = //// and contractual_status <> 0"
		else
			query = query & " and del_status = //" &  delinqStatus  &"// and contractual_status = //"& contractual_status & "//"
	 //Appendign Order by
	 //query = query & " order by rand()"
	 query = query & " order by contractual_status desc"
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get loan number Based On Dealer State and Funding Date",query
	//Returing the loan number  
  	get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate","Failed", Err.Description,"")

//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate(paymentType,reversedYn,dealerState,stateoperator,fundingDate,fundingDateOperator,accounttype)
//@Author Deepthi
//@Date 20 Jan 2020
//@Description This function is to get the loan form DB which has check payment
//Example:get_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate("CHECKPAY//,"N","NC","=","2020-01-01",">","55")
//***********************************************************************************************************************************************
get_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate(String paymentType,String reversedYn,String dealerState,String stateoperator,String fundingDate,String fundingDateOperator,String accounttype)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query
	query = "select * from bp_account_tbl where acct_id in (select acct_id from bp_account_payment_tbl where  pmt_type=//"&paymentType&"// and reversed_yn=//"&reversedYn&"// and entry_dt "&fundingDateOperator&" //"&fundingDate&"//) and dealer_id in (select dealer_id from bp_dealer_tbl where state=//"&dealerState&"//) and acct_status= //ACTIVE// and acct_type=//"&accounttype&"// and funding_dt "&fundingDateOperator&" //"&fundingDate&"// order by rand()"	
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get loan number from DB Based on Payment Type and Funding Date ",query
	//Returing the loan number  
  	get_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
   //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate","Failed", Err.Description,"")

//********************************************************************************************
//@Method get_random_DealerName_BasedOnDealerState_FromAppDB(stateOperator,state,dealerStatus)
//@Author Deepthi 
//@Date 23 Jan 2020
//@Description this function will get the Dealer Name D based on the Dealer Status and dealer state Passed
//@Return DealerName
//Example:  get_random_DealerName_BasedOnDealerState_FromAppDB("=","NC","Y")
//********************************************************************************************
get_random_DealerName_BasedOnDealerState_FromAppDB(String stateOperator,String state,String dealerStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query
	query = "select * from bp_dealer_tbl where state "&stateOperator&" //"&state&"// and active_yn = //"& ToUpper(dealerStatus) &"//" & " order by rand()"		
	 //Returing the Value
	 get_random_DealerName_BasedOnDealerState_FromAppDB = runSQLQuery_WithWarning_WithoutExit(query,"short_name")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("get_random_DealerName_BasedOnDealerState_FromAppDB","Failed", Err.Description,"")

//********************************************************************************************
//@Method get_DealerName_BasedOnLoanNumber_FromAppDB(LoanNumber)
//@Author Deepthi 
//@Date 23 Jan 2020
//@Description this function will get the dealer ID based on the Loan Number
//@Return DealerName
//Example:  get_DealerName_BasedOnLoanNumber_FromAppDB("LoanNumber")
//********************************************************************************************
get_DealerName_BasedOnLoanNumber_FromAppDB(String LoanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query
	query = "select short_name from bp_dealer_tbl where dealer_id = (select dealer_id from bp_account_tbl where loan_nbr = //"&LoanNumber&"//)"		
	 //Returing the Value
	 get_DealerName_BasedOnLoanNumber_FromAppDB = runSQLQuery_WithWarning_WithoutExit(query,"short_name")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("get_DealerName_BasedOnLoanNumber_FromAppDB","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_LoanNumber_FromDB_Where_SettlementNotExists_BasedOnComponentsRequired(AccountStatus,AccountTypeCode,UI_Del_Status,CPIAndPFSRequired)
//@Author Sumithra
//@Date 12 Nov 2019
//@Description This return the loan number where settlement not exist based on components presents
//Ex  get_LoanNumber_FromDB_Where_SettlementNotExists_BasedOnComponentsRequired(AccountStatus,AccountTypeCode,UI_Del_Status,CPIAndPFSRequired)
// get_LoanNumber_FromDB_Where_SettlementNotExists_BasedOnComponentsRequired("Active","","","N")
// get_LoanNumber_FromDB_Where_SettlementNotExists_BasedOnComponentsRequired("Active","55","","","N","N")
//EX: get_LoanNumber_FromDB_Where_SettlementNotExists_BasedOnComponentsRequired("CHARGEDOFF","55","PRIMARY","","N","N")
//*********************************************************************************************
get_LoanNumber_FromDB_Where_SettlementNotExists_BasedOnComponentsRequired(String AccountStatus,String AccountTypeCode,String affiType,String UI_Del_Status,String CPIAndPFSRequired,String VSCComponentRequired)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	if UI_Del_Status <> "" 
	   //Get ID Based on Delinquency Status and Contractual status
		 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
		delinquencyStatus = "and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"//"
	if AccountTypeCode <> ""  		
		AccountType_Code = " and acct_type=//" & AccountTypeCode &"// "
	if affiType <> "" 
		 if ToUpper(affiType) = "PRIMARY" 
			affiliation_Type =  " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
		else if ToUpper(affiType) = "COSIGN" or ToUpper(affiType) = "JOINT" 	
	   		affiliation_Type = " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" & ToUpper(affiType) & "//)"
		// affiliation_Type = " and acct_id in (select acct_id from bp_account_customer_affil_tbl where affil_type = //"&affiType&"//)"
			//query to run 
	if Trim(CPIAndPFSRequired) = "" or Length(Trim(CPIAndPFSRequired)) = 0 
		//Ignore		
	else if CPIAndPFSRequired = "N" 
		//Components = "and acct_id not in (select acct_id from bp_account_component_tbl where opt in(//GAP//,//CPI//)  group by acct_id)"
		Components = "and acct_id not in (select distinct(acct_id) from bp_account_Component_tbl where descr like //%GAP%// or opt = //CPI//)"
	else if CPIAndPFSRequired = "Y" 
		Components = "and acct_id  in (select acct_id from bp_account_component_tbl where opt =//GAP// or opt = //CPI// and end_dt >= getdate(*) group by acct_id)"
	else
		 writeReportLog("Wrong Parameter passed for Component","Failed", Err.Description,"")	
	if Trim(VSCComponentRequired) = "" or Length(Trim(VSCComponentRequired)) = 0 
		//Ignore		
	else if VSCComponentRequired = "N" 
		VSCComponents = "and acct_id not in (select acct_id from bp_account_component_tbl where opt like //WAR%// group by acct_id)"
	else if VSCComponentRequired = "Y" 
		VSCComponents = "and acct_id in (select acct_id from bp_account_component_tbl where opt = //WAR36// and end_dt >= getdate(*) group by acct_id)"
	else
		 writeReportLog("Wrong Parameter passed for VSC Component","Failed", Err.Description,"")	
	query = "Select * from support.bp_account_tbl where acct_status =//" & AccountStatus & "//" &AccountType_Code & delinquencyStatus & affiliation_Type & " and acct_id not in (select acct_id from bp_account_settlement_tbl)  " & Components & VSCComponents &" order by rand()"
	//UFT Logger
	 LogSuccessMessage("Settlement query", query)
    //Fetching the loan number from DB
	loanNumber = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	//if Loan are not available 
	if loanNumber = "0" 
		// writeReportLog("<b> <font color=//orange//> No Loans found for Criteria " & AccountStatus & "|" & AccountTypeCode & "|" & affiType &"|"& UI_Del_Status & "</font> </b>" ,"Passed",FailComments,"")
		 LogWarningMessage("No Loans found for Criteria " & AccountStatus & " | " & AccountTypeCode & " | " & affiType &" | "& UI_Del_Status ,"")
	get_LoanNumber_FromDB_Where_SettlementNotExists_BasedOnComponentsRequired = loanNumber
    if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_FromDB_Where_SettlementNotExists_BasedOnComponentsRequired","Failed", Err.Description,"")

//*************************************************************************************************************
//@methodName : get_DailyMangrActivityDescription_FromDB(rowId,currentState,todayDate,branchID,ChartAcctType,colName)
//@Author     : GG
//@Date       : 13 FEB 2019
//@Description: This will select/Unselect the checkbox in Daily Closing Window
//Ex:  get_DailyMangrActivityDescription_FromDB(1,"SC","02-13-2018","ASSETCUR","0874","chart_account_id")
//*************************************************************************************************************
get_DailyMangrActivityDescription_FromDB(String rowId,String currentState,String todayDate,String ChartAcctType,String branchID,String colName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get the Cash Drawer from the Shared Location
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "Daily_Managers_ReportSQLQuery.txt")
	//Replace the Current State, branchId and Row number Dynamicaly
	query = Replace(query,"$currentState$",currentState)
	query = Replace(query,"$rowId$",rowId)
	query = Replace(query,"$branchID$",branchID)
	//Replace the Today//s Date Dynamicaly
	query = Replace(query,"$todayDate$",todayDate)
	//Replace the Chart of Account Type Dynamicaly
	query = Replace(query,"$ChartAcctType$",ChartAcctType)
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to Identify the Total Description Count of Daily manager report table Based on State,Date and Chart of Account Type:",query
	//Returing the Descrition Field name of Assets/Liability,Income,Expense from DB
	get_DailyMangrActivityDescription_FromDB = runSQLQuery(query,colName)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_DailyMangrActivityDescription_FromDB","Failed", Err.Description ,"")

//*****************************************************************************************************************************************
//@methodName: get_TotalPriceAndBeginAmt_Asset_Liability_Income_Expense_FromDB(str_FilePath,reportType,nodeTreeName,nodeName)
//@Description: This function is to get the Total Amount of Income, Expense,Liability and Assets Section in Daily Managers Report
//@Author: GG
//@Date 20 FEB 2019
//Ex:  get_TotalPriceAndBeginAmt_Asset_Liability_Income_Expense_FromDB("02/12/2019","CR","ASSETCUR","0874")
//*****************************************************************************************************************************************
get_TotalPriceAndBeginAmt_Asset_Liability_Income_Expense_FromDB(String todayDate,String creditType,String ChartAcctType,String branchID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get the Cash Drawer from the Shared Location
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "DailyManagesReport_TotalAmount_Asset_Expense_Income_Liability_SQLQuery.txt")
	//Replace the Current State, branchId and Row number Dynamicaly
	query = Replace(query,"$branchID$",branchID)
	//Replace the Today//s Date Dynamicaly
	query = Replace(query,"$todayDate$",todayDate)
	//Replace the Chart of Account Type Dynamicaly
	query = Replace(query,"$ChartAcctType$",ChartAcctType)
	//Replace the Chart of Account Type Dynamicaly
	query = Replace(query,"$creditType$",creditType)
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to Identify the Total Description Count of Daily manager report table Based on State,Date and Chart of Account Type:",query
	//Returing the Descrition Field name of Assets/Liability,Income,Expense from DB
	get_TotalPriceAndBeginAmt_Asset_Liability_Income_Expense_FromDB = runSQLQuery_FetchMultipleValues(query,"begin income:period income")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_TotalPriceAndBeginAmt_Asset_Liability_Income_Expense_FromDB","Failed", Err.Description ,"")

//*****************************************************************************************
//@methodName : get_DailyMangrActivityCount_FromDB(branchID,todayDate,ChartAcctType)
//@Author     : GG
//@Date       : 13 FEB 2019
//@Description: This will select/Unselect the checkbox in Daily Closing Window
//Ex:  get_DailyMangrActivityCount_FromDB("0874","02-13-2019","ASSETCUR")
//*****************************************************************************************
 get_DailyMangrActivityCount_FromDB(branchID,todayDate,ChartAcctType)
	//Get the Daily Managers Report query from the Shared Location	
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "DailyManagerReportCount_SQLQuery.txt")
	//Replace the BranchID Dynamicaly
	query = Replace(query,"$branchID$",branchID)
	//Replace the Today//s Date Dynamicaly
	query = Replace(query,"$todayDate$",todayDate)
	//Replace the Chart of Account Type Dynamicaly
	query = Replace(query,"$ChartAcctType$",ChartAcctType)
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to Identify the Total Count of Daily manager report table Based on State,Date and Chart of Account Type:",query
	//Returing the total count of Assets/Liability,Income,Expense fields from DB
	get_DailyMangrActivityCount_FromDB = runSQLQuery(query,"Count(*)")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_DailyMangrActivityCount_FromDB","Failed", Err.Description ,"")

runSQLQuery_FetchMultipleValues(String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //Variable declaration
    String conn, rs
    //Object declaration
    Set conn= createobject("adodb.connection")
    set rs = createobject("adodb.recordset")
    //Connection string
    conn.Open =  "Dsn=branch;Uid=support;Pwd=sql;"
    //Executing the Query
    rs.open query, conn
   //Validating for Query No Results
	if rs.EOF 
		 writeReportLog("Looks Like Query >> " & query &  " did not found any record","Failed", Err.Description,"")
		ExitTest
	else
		 //splitting the name
	    arr = Split(requiredFieldName,":")
		for i = 0 To UBound(arr)
	     if i <> 0 
	     	outputString = outputString & ":"
	     requiredFieldName = rs.Fields(arr(i))
		 outputString = outputString & requiredFieldName
		//Returing the Value
		runSQLQuery_FetchMultipleValues = outputString 
	rs.Close
    conn.Close 	  
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: runSQLQuery_FetchMultipleValues","Failed", Err.Description ,"")

//****************************************************************
//@Method set_ONLINE_PMTS_TEST_URL_InLocalDB
//@Description this method will update the Domain in BP_Website_Tbl for "Online PMTS Test" field
//@Param serverType --> QA Or DEV
//@Author Karthik.Shekar
//
//@EX: set_ONLINE_PMTS_TEST_URL_InLocalDB("QA")
//********************************************************************
set_ONLINE_PMTS_TEST_URL_InLocalDB(String serverType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	if serverType = "QA" 
		 update_Domain_In_BP_Website_Table_FromDB("ONLINE PMTS TEST",Environment.Value("QAServerURL"))
	else if serverType = "DEV" 
		 update_Domain_In_BP_Website_Table_FromDB("ONLINE PMTS TEST",Environment.Value("DevSQLServerURL"))
	else
		 writeReportLog("Wrong Value " & serverType &  "Passed to set_HO_Domain_InLocalDB ","","","")

//************************************************************************************************
//@MethodName enableOrDisableFeature_In_SQLServer_HODB
//@Description This Method will Enable or Disable the Featrue in SQL HO DB for the Specified Feature and Branch ID
//@Param serverType --> QA OR DEV
//		branchID --> Pass the Branch ID for which you want to make changes
//		featureName --> Specify the Feature Name
//		statusToSet --> Pass Y or N or Enable or Disable
//@Author Karthik.SHekar
//@Date 14 Feb 2019
//EX: enableOrDisableFeature_In_SQLServer_HODB("DEV","0881","AutoPayments","DISABLE")
//EX: enableOrDisableFeature_In_SQLServer_HODB("QA","0881","AutoPayments","Y")
//****************************************************************************************************
enableOrDisableFeature_In_SQLServer_HODB(String serverType,String branchID,String featureName,String statusToSet)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	if ToUpper(statusToSet) = "ENABLE" or ToUpper(statusToSet) = "Y" 
		featureYn = "Y"
	else if ToUpper(statusToSet) = "DISABLE" or ToUpper(statusToSet) = "N" 
		featureYn = "N"
	else
		 writeReportLog("Please Pass Proper Input to enableOrDisableFeature_In_SQLServer_HODB","Failed","Either Y Or N","")
	//Run update Query
	featureQuery =  "update bp_feature_tbl set feature_yn = //" & featureYn & "// where feature = //"& featureName & "// and branch_id = //"& branchID &"//"
	//Logger
	 LogSuccessMessage("Feature update Query (HO DB) >>" &  featureQuery,"")
 	//Run Update Query
 	 updateSQLQuery_InSQLServer_HO_BasedOnServer(serverType,featureQuery)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in enableFeatureInDB","Failed", Err.Description,"")

//******************************************************
//@Method getAccountID_From_DB_basedOnLoanNumber
//@Description This method will get the Accoutn ID from DB based on Loan Number
//@Return Acct_ID 
//@Author Karthik.Shekar
//@Data 14 Feb 2020
//EX:getAccountID_From_DB_basedOnLoanNumber("088100001456")
//**********************************************************
getAccountID_From_DB_basedOnLoanNumber(String loanNum)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	getAccountID_From_DB_basedOnLoanNumber = runSQLQuery("select acct_id from bp_account_tbl where loan_nbr = //"& loanNum &"//","acct_id")
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getAccountID_From_DB_basedOnLoanNumber","Failed", Err.Description ,"")

//*****************************************************************************************************************************************
//@methodName: get_ApprovedDate_EntryDate_And_LastChangedDate_for_Settlements_FromDB(loanNumber,requiredFieldNames)
//@Description: This function is to get the approved date,entry date and last changed date for settlement from DB
//@Author: Sumithra
//@Date 18 Nov 2019
//Ex:  get_ApprovedDate_EntryDate_And_LastChangedDate_for_Settlements_FromDB("106000008435","approved_userid;approved_dt;entry_userid;entry_dt;last_chg_dt;last_chg_userid")
//*****************************************************************************************************************************************
get_ApprovedDate_EntryDate_And_LastChangedDate_for_Settlements_FromDB(String loanNumber,String requiredFieldNames)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select stlmnt.approved_userid as Settlement_ApprovedID, stlmnt.approved_dt as Settlement_ApprovedDate,stlmnt.entry_userid as Settlement_EntryID, stlmnt.entry_dt as Settlement_EntryDate,stlmnt.last_chg_dt as Settlement_lastEntryDate ,stlmnt.last_chg_userid as Settlement_lastEntryID from bp_account_settlement_tbl stlmnt, bp_account_tbl act where stlmnt.acct_id = act.acct_id and active_yn = //Y// and loan_nbr =//"&loanNumber&"//"
   //Executing the Query Generated
   get_ApprovedDate_EntryDate_And_LastChangedDate_for_Settlements_FromDB = runSQLQuery_FetchMultipleValues_WithWarning(query,requiredFieldNames)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_ApprovedDate_EntryDate_And_LastChangedDate_for_Settlements_FromDB","Failed", Err.Description,"")

//***************************************************************************************
//@MethodName getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB
//@Description this method will get the Latest Transaction ID based on the conditions passed to method i.e., Loan number, Payment type
//			 reversedYN, transactionDateOperatior and transaction Date
//@author Karthik.Shekar
//@return TransactionID
//Ex: msgbox getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB("088100007553", "CHECKPAY", "N", "<", "2020-01-01")
//***************************************************************************************
getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB(String loanNumber,String paymentType,String reversedYN,String transactionDateOperator,String transactionDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select trans_id from bp_account_payment_tbl where  pmt_type=//"& paymentType & "// and reversed_yn=//" & reversedYN & "// and entry_dt "& transactionDateOperator & " //" & transactionDate &"// and acct_id in (select acct_id from bp_account_tbl where loan_nbr =//" & loanNumber & "//) order by trans_id desc"
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB ", query
	//Returing the loan number  
  	getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB = runSQLQuery(query,"trans_id")
   //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB","Failed", Err.Description,"")

//****************************************************************************************
//@Method Name getCurrentStateName_FullName_DB
//@Author Karthik.Shekar
//@Description this fuction will get the Full name of Current State from DB
//@Return Full State name
//@Date 10 April 2020
//Ex: msgbox getCurrentStateName_FullName_DB()
//******************************************************************************************
getCurrentStateName_FullName_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	currentState = getCurrentStateName_From_DB()
	query = "select * from bp_state_country_tbl where state = //" & currentState & "//"
	//Run query
	fullName = runSQLQuery(query,"state_name")
	getCurrentStateName_FullName_DB = fullName
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getCurrentStateName_FullName_DB","Failed", Err.Description ,"")

//*****************************************************************************************
//@methodName: set_TestURL_DebitOrCreditCard_Payment_InDB()
//@Author Ambika
//@Date 09 oct 2019
//@Description This is to set the test url before debit/credit Payment
//Ex: set_TestURL_DebitOrCreditCard_Payment_InDB()
//*****************************************************************************************
set_TestURL_DebitOrCreditCard_Payment_InDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    version = getAppVersionNumber_From_DB()
    if Trim(Replace(version,".","")) >= 950 
        //Get the query from the Shared Location 
        query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath")&"DebitOrCredit_SQLQuery_9.5.txt")
    else
        //Get the query from the Shared Location 
        query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath")&"DebitOrCredit_Repay_SQLQuery_9.4.txt")
    //run Sql  query   
     runUpdateSQLQuery(query)
    //Error Handling
    if GetErrorCount()>0 
         writeReportLog("Failed : set_TestURL_DebitOrCreditCard_Payment_InDB ","Failed", Err.Description,"")

//******************************************************************************************************************************************************
//@Method: getValueFromComponentTable_AppDB(acctId,valueToFetch,CompOption)
//@Author Ambika
//@Date 05 Mar 2020
//@Description: This function is to get value in component table from DB
//Ex:  getValueFromComponentTable_AppDB("106000020711","CPI","CANCEL")
//******************************************************************************************************************************************************
getValueFromComponentTable_AppDB(String acctId,String CompOption,String valueToFetch)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//fetching column name from db
	if ToUpper(valueToFetch) = "CANCEL" 
		colName = "cancel_yn"
	else if ToUpper(valueToFetch) = "REFUNDABLE" 
		colName = "refundable_yn"
	else if ToUpper(valueToFetch) = "COMPONENT_ID" 
		colName = "cmpnt_id"
	else
		 writeReportLog("Please pass the Proper parameter value to method getValueFromComponentTable_AppDB","Failed","","")
	//query
	query = "select * from bp_account_component_tbl where acct_id = //"& acctId &"// and opt = //"& CompOption &"// order by entry_dt desc" 
   //Executing the Query Generated
   getValueFromComponentTable_AppDB = runSQLQuery(query,colName)
   //error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getValueFromComponentTable_AppDB","Failed", Err.Description ,"")

////****************************************************************************************************
////@method getLoanNumber_Basedon_AlliedInsuranceDate
////@Author Karthik.Shekar
////@Description This will get the Loan Number based on Allied Insurance Details Paramters which has been passed.
////				NOTE: You can Ignore a Paramter by passing Empty value ""
////@Date 12 May 2020
////@Return Loan number based on criteria specified. 
//
////ex: msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",True,True,"","",">","05/12/2020") //Fetching for Active Insurance
////	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","CHRG_OFF",True,True,"","","<","05/12/2020")//Fetching for Expired Insurance
////	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",True,True,"<","05/12/2020","","") //Fetching for already Canceled Insurance
////	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",True,True,">","05/12/2020","","")//Fetching for Future Cancel Date
////	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",False,"","","","","") // Fetching for Empty Compnay Name
////	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE","",False,"","","","") // Fetching for Empty Poliicy Number
////	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("","","ACTIVE",True,True,"","","","") // if we want to ignore the Loan Type
//
////for Reference
////actStatus Codes/Values = //ACTIVE//,//APPROVED//,//CANCELLD//,//CHRG_OFF//,//CHRGBANK//,//CHRGSKIP//,//PAID_OUT//,//REDEEMED//,//REPO//,//REPOSOLD//,//REVERSED//,//SKIP//,//SOLDIER//
////************************************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													//getLoanNumber_Basedon_AlliedInsuranceDate(accountType, affiType, acctStatus, isInsCompanyName, isInsPolicyNum, insCancelOperator, insCancelDate, insExpOperator, inExpirationDate)
//	
//	//
//	//Base Query
//	baseQuery = "select * from bp_account_tbl BAT inner join bp_account_ins_allied_tbl AIAT on BAT.acct_id = AIAT.acct_id where BAT.int_type = //INT_BRNG//"
//	
//	//Constructing based on Affi Type
//	if ToUpper(affiType) = "PRIMARY" 
//		baseQuery =  baseQuery & " and BAT.BAT.acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
//	else if ToUpper(affiType) = "COSIGN" or ToUpper(affiType) = "JOINT" 	
//	   baseQuery = baseQuery & " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" & ToUpper(affiType) & "//)"
//	
//	
//	//Constructing based on Account Type
//	if ToUpper(accountType) = "MOTOR" or  accountType = "56" 
//		baseQuery = baseQuery & " and BAT.acct_type = //56//"
//	else if ToUpper(accountType) = "AUTO" or  accountType = "55" 
//		baseQuery = baseQuery & " and BAT.acct_type = //55//"
//	else if ToUpper(accountType) = "DIRECT" or  accountType = "31" 
//		baseQuery = baseQuery & " and BAT.acct_type = //31//"
//	//else
//		// writeReportLog("Wrong Value passed to Account Type Parameter in function getLoanNumber_Basedon_AlliedInsuranceDate","Failed","","")
//	
//	
//	//Constructing based on Account Status
//	if not(ToUpper(acctStatus) = "ANY" or Trim(acctStatus) = "" or IsNull(acctStatus)) 
//		baseQuery = baseQuery & " and BAT.acct_status = //" & acctStatus & "//"
//	
//	
//	//Constructing based on Insurance Company Name ( Ignore if other Values are Passed )
//	if isnull(isInsCompanyName) or isInsCompanyName = False 
//		baseQuery = baseQuery & " and InsurerInsuranceCompanyNam is null" 
//	else if (isnull(isInsCompanyName) = False and Length(Trim(isInsCompanyName)) > 0 ) or isInsCompanyName = True 
//		baseQuery = baseQuery & " and InsurerInsuranceCompanyNam is not null"
//	
//	
//	//Constructing based on Insurance Policy Number ( Ignore if other Values are Passed )
//	if isnull(isInsPolicyNum) or isInsPolicyNum = False 
//		baseQuery = baseQuery & " and InsurancePolicyNumber is null" 
//	else if (isnull(isInsPolicyNum) = False and Length(Trim(isInsPolicyNum)) > 0 ) or isInsPolicyNum = True 
//		baseQuery = baseQuery & " and InsurancePolicyNumber is not null"
//	
//	
//	//Constructing query based on Ins Cancel Date ( Ignore Only if Empty String is Passed )
//	if Length(Trim(insCancelDate)) > 0 
//		baseQuery = baseQuery & " and convert(date,InsuranceCancel,101) "& insCancelOperator &" convert(date, //"& insCancelDate & "//, 101)"		
//	
//	
//	//Constructing query based on Ins Expiration Date( Ignore Only if Empty String is Passed )
//	if Length(Trim(inExpirationDate)) > 0 
//		baseQuery = baseQuery & " and convert(date, InsuranceExpiration,101) "& insExpOperator & " convert(date,//"& inExpirationDate &"//, 101)"
//	
//	
//	//Appending the Order by
//	baseQuery = baseQuery & " order by rand()"
//	
//	//Logging the Query Generated in UFT Report
//	  LogSuccessMessage("Query Generated in getLoanNumber_Basedon_AlliedInsuranceDate",baseQuery)
//	 	
//	//Running the SQL Query and returning the value
//	getLoanNumber_Basedon_AlliedInsuranceDate = runSQLQuery_FetchMultipleValues(baseQuery,"loan_nbr")
//	
//	
//	//Error Handling
//	if GetErrorCount()>0 
//		 writeReportLog("Failed in getLoanNumber_Basedon_AlliedInsuranceDate","Failed", Err.Description ,"")
//	
//
//****************************************************************************************************
//@method getLoanNumber_Basedon_AlliedInsuranceDate
//@Author Karthik.Shekar
//@Description This will get the Loan Number based on Allied Insurance Details Paramters which has been passed.
//				NOTE: You can Ignore a Paramter by passing Empty value ""
//@Date 12 May 2020
//@Return Loan number based on criteria specified. 
//@Modified by Deepthi
//@Modified Date 15 june 2020
//@ modified to retrieve the data based on coverage status
//ex: msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",True,True,"","",">","05/12/2020") //Fetching for Active Insurance
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","CHRG_OFF",True,True,"","","<","05/12/2020")//Fetching for Expired Insurance
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",True,True,"<","05/12/2020","","") //Fetching for already Canceled Insurance
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",True,True,">","05/12/2020","","")//Fetching for Future Cancel Date
//	msgbox c // Fetching for Empty Compnay Name
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE","",False,"","","","") // Fetching for Empty Poliicy Number
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("","","ACTIVE",True,True,"","","","") // if we want to ignore the Loan Type
//ex: for modified method
//   msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",True,True,"","",">","05/12/2020","") //Fetching for Active Insurance irrespective of coverage status
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","CHRG_OFF",True,True,"","","<","05/12/2020","Active")//Fetching for Expired Insurance where coverage status is active
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",True,True,"<","05/12/2020","","","Waive") //Fetching for already Canceled Insurance where coverage status is waive
//for Reference
//actStatus Codes/Values = //ACTIVE//,//APPROVED//,//CANCELLD//,//CHRG_OFF//,//CHRGBANK//,//CHRGSKIP//,//PAID_OUT//,//REDEEMED//,//REPO//,//REPOSOLD//,//REVERSED//,//SKIP//,//SOLDIER//
//************************************************************************************************************
getLoanNumber_Basedon_AlliedInsuranceDate(String accountType,String affiType,String acctStatus,String isInsCompanyName,String isInsPolicyNum,String insCancelOperator,String insCancelDate,String insExpOperator,String inExpirationDate,String coverageStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//
	//Base Query
	baseQuery = "select * from bp_account_tbl BAT inner join bp_account_ins_allied_tbl AIAT on BAT.acct_id = AIAT.acct_id where BAT.int_type = //INT_BRNG//"
	//Constructing based on Affi Type
	if ToUpper(affiType) = "PRIMARY" 
		baseQuery =  baseQuery & " and BAT.BAT.acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
	else if ToUpper(affiType) = "COSIGN" or ToUpper(affiType) = "JOINT" 	
	   baseQuery = baseQuery & " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" & ToUpper(affiType) & "//)"
	//Constructing based on Account Type
	if ToUpper(accountType) = "MOTOR" or  accountType = "56" 
		baseQuery = baseQuery & " and BAT.acct_type = //56//"
	else if ToUpper(accountType) = "AUTO" or  accountType = "55" 
		baseQuery = baseQuery & " and BAT.acct_type = //55//"
	else if ToUpper(accountType) = "DIRECT" or  accountType = "31" 
		baseQuery = baseQuery & " and BAT.acct_type = //31//"
	//else
		// writeReportLog("Wrong Value passed to Account Type Parameter in function getLoanNumber_Basedon_AlliedInsuranceDate","Failed","","")
	//Constructing based on Account Status
	if not(ToUpper(acctStatus) = "ANY" or Trim(acctStatus) = "" or IsNull(acctStatus)) 
		baseQuery = baseQuery & " and BAT.acct_status = //" & acctStatus & "//"
	//Constructing based on Insurance Company Name ( Ignore if other Values are Passed )
	if isnull(isInsCompanyName) or isInsCompanyName = False 
		baseQuery = baseQuery & " and InsurerInsuranceCompanyNam is null" 
	else if (isnull(isInsCompanyName) = False and Length(Trim(isInsCompanyName)) > 0 ) or isInsCompanyName = True 
		baseQuery = baseQuery & " and InsurerInsuranceCompanyNam is not null"
	//Constructing based on Insurance Policy Number ( Ignore if other Values are Passed )
	if isnull(isInsPolicyNum) or isInsPolicyNum = False 
		baseQuery = baseQuery & " and InsurancePolicyNumber is null" 
	else if (isnull(isInsPolicyNum) = False and Length(Trim(isInsPolicyNum)) > 0 ) or isInsPolicyNum = True 
		baseQuery = baseQuery & " and InsurancePolicyNumber is not null"
	//Constructing query based on Ins Cancel Date ( Ignore Only if Empty String is Passed )
	if Length(Trim(insCancelDate)) > 0 
		baseQuery = baseQuery & " and convert(date,InsuranceCancel,101) "& insCancelOperator &" convert(date, //"& insCancelDate & "//, 101)"		
	//Constructing query based on Ins Expiration Date( Ignore Only if Empty String is Passed )
	if Length(Trim(inExpirationDate)) > 0 
		baseQuery = baseQuery & " and convert(date, InsuranceExpiration,101) "& insExpOperator & " convert(date,//"& inExpirationDate &"//, 101)"
	//Constructing query based on Required Coverage Status and Required Coverage Ins Status
	if Length(Trim(coverageStatus)) > 0 
		baseQuery = baseQuery & " and RequiredCoverageStatus = //" & coverageStatus & "//"
	//Appending the Order by
	baseQuery = baseQuery & " order by rand()"
	//Logging the Query Generated in UFT Report
	  LogSuccessMessage("Query Generated in getLoanNumber_Basedon_AlliedInsuranceDate",baseQuery)
	//Running the SQL Query and returning the value
	getLoanNumber_Basedon_AlliedInsuranceDate = runSQLQuery_FetchMultipleValues_WithoutExit(baseQuery,"loan_nbr")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in getLoanNumber_Basedon_AlliedInsuranceDate","Failed", Err.Description ,"")

//****************************************************************************************************************
//@Method getData_From_AlliedInsuranceTbl_AppDb
//@Date 13 May 2020
//@Author Karthik.Shekar
//@Description this funcntion will get the Data from Allied Insurance Tbl which is there in App(ASA) DB
//EX: msgbox getData_From_AlliedInsuranceTbl_AppDb("count","") --> To get Cnt of Records
//	msgbox getData_From_AlliedInsuranceTbl_AppDb("count","088100028892") --> to get Count of Records for a Particular Account
//	msgbox getData_From_AlliedInsuranceTbl_AppDb("rec_id:rec_date:acct_id","") --> Fetches value of 1st Record
//	msgbox getData_From_AlliedInsuranceTbl_AppDb("rec_id:rec_date:acct_id","088100028236") --> Filters data based on Account iD
//****************************************************************************************************************
getData_From_AlliedInsuranceTbl_AppDb(String requiredFields,String accountId)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select * from bp_account_ins_allied_tbl"
	//Special Conditon	
	if Length(Trim(accountId)) > 0 
		query = query & " where acct_id = " & accountId		
	//Count
	if ToUpper(requiredFields) = ToUpper("Count") 
		query = Replace(query,"*","count(*)")
		requiredFields = "count(*)"	
//	if ToUpper(requiredFields) = ToUpper("Count") 
//		query = "select count(*) from bp_account_ins_allied_tbl"
//		requiredFields = "count(*)"	
//	else if Length(Trim(accountId)) > 0 
//		query = query & " where acct_id = " & accountId		
//	
	//Logger
	// LogSuccessMessage("query ; getData_From_AlliedInsuranceTbl_AppDb",query)
	//Executing the Query Generated
	alliedDetails = runSQLQuery_FetchMultipleValues(query, requiredFields)
	getData_From_AlliedInsuranceTbl_AppDb = alliedDetails
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: getData_From_AlliedInsuranceTbl_AppDb","Failed", Err.Description ,"")

//********************************************************************************************************
//@Method getValue_InSQLServer_HO_BasedOnServer
//@Date 19 May 2020
//@Author Karthik.Shekar
//@Description This function will query the HO DB and return the Value for the field Values specified.
//@Return Values for the Column name specified
//EX: msgbox getValue_InSQLServer_HO_BasedOnServer("DEV","0881","select * from bp_feature_tbl where feature = //AutoPayments//","feature:feature_yn")
//    msgbox getValue_InSQLServer_HO_BasedOnServer("QA","1524","select * from bp_feature_tbl where feature = //AutoPayments//","feature_yn")
//********************************************************************************************************
getValue_InSQLServer_HO_BasedOnServer(String serverType,String branchID,String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
 	loginSheetPath = Environment.Value("BranchPlusSharedPath") & "LoginDetails.xlsx"
	DataTable.AddSheet("Login")
	DataTable.ImportSheet loginSheetPath,"Login","Login"
 	homeOffice_Username = DataTable.Value("NetworkUsername","Login")
	homeOffice_Passcode = DataTable.Value("NetworkPasscode","Login")
    //appending the Branch ID
    query = query & " and branch_id = //" & branchID & "//" 
    //Logger
    Reporter.ReportEvent micDone,"query generated to getSQLQuery_InSQLServer_HO_BasedOnServer",query
    //Create ADODB connection object
    Set objConnection = CreateObject("ADODB.Connection") 
    //Create Recordsetobject
    Set objRecordSet = CreateObject("ADODB.Recordset")
    //Connect to DB using provider and server
    if serverType = "QA" 
    	// objConnection.open "provider=sqloledb;Server=s1-sql-brgqa1\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"
    	serverName = "s1-sql-brgqa1"
    else if serverType = "DEV" 
    	 //objConnection.open "provider=sqloledb;Server=s1-sql-brgdev1\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"    
    	serverName = "s1-sql-brgdev1"
    else
    	 writeReportLog("Wrong Value passed to serverType argument || : getValue_InSQLServer_HO_BasedOnServer","Failed","","")
    //Connect to DB
     objConnection.open "provider=sqloledb;Server="& serverName &"\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"    
    //Write the SQL Query
    sqlQuery=query
    //Open the recordset object executing the SQL statement and update records 
    objRecordSet.Open sqlQuery,objConnection
    //Validating for Query No Results
	if objRecordSet.EOF 
		 writeReportLog("Looks Like Query >> " & query &  " did not found any record","Failed", Err.Description,"")
		ExitTest
	else
		 //splitting the name
	    arr = Split(requiredFieldName,":")
		for i = 0 To UBound(arr)
	     if i <> 0 
	     	outputString = outputString & ":"
	     requiredFieldName = objRecordSet.Fields(arr(i))
		 outputString = outputString & requiredFieldName
		//Returing the Value
		getValue_InSQLServer_HO_BasedOnServer = outputString 
    //Recordset.Close
    Set objRecordSet=nothing
    objConnection.Close
    Set objConnection=nothing    
    //Error handling 
     if GetErrorCount()>0              
         writeReportLog("Failed to getValue_InSQLServer_HO_BasedOnServer","Failed", Err.Description ,"")

//*********************************************************************
//@Method getLoanNumber_WithOut_AlliedInsuranceDate
//@Author Karthik.Shekar
//@Date 18 May 2020
//Description This function will get the Loan Number which does not Contain Allied Insurance Based based on accountType and Account Status
//@Return Loan Number	
//Modified by deepthi 
//Modified Date 15 june 2020
//Modified method to retreive null when the query result is empty
//EX: msgbox getLoanNumber_WithOut_AlliedInsuranceDate("Auto","Active")
//    msgbox getLoanNumber_WithOut_AlliedInsuranceDate("","")
//**********************************************************************
getLoanNumber_WithOut_AlliedInsuranceDate(String accountType,String acctStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //Base query
	baseQuery = "select * from bp_account_tbl where acct_id not in (select distinct(acct_id) from bp_account_ins_allied_tbl) and length(loan_nbr) > 3"
	//Constructing based on Account Type
	if ToUpper(accountType) = "MOTOR" or  accountType = "56" 
		baseQuery = baseQuery & " and acct_type = //56//"
	else if ToUpper(accountType) = "AUTO" or  accountType = "55" 
		baseQuery = baseQuery & " and acct_type = //55//"
	else if ToUpper(accountType) = "DIRECT" or  accountType = "31" 
		baseQuery = baseQuery & " and acct_type = //31//"	
	//Constructing based on Account Status
	if not(ToUpper(acctStatus) = "ANY" or Trim(acctStatus) = "" or IsNull(acctStatus)) 
		baseQuery = baseQuery & " and acct_status = //" & acctStatus & "//"
	//Writer Report Log
	  LogSuccessMessage("Query Generated in getLoanNumber_WithOut_AlliedInsuranceDate",baseQuery)
	 //Running the SQL Query and returning the value
	//getLoanNumber_WithOut_AlliedInsuranceDate = runSQLQuery_FetchMultipleValues(baseQuery,"loan_nbr")	
	getLoanNumber_WithOut_AlliedInsuranceDate = runSQLQuery_FetchMultipleValues_WithoutExit(baseQuery,"loan_nbr")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in getLoanNumber_WithOut_AlliedInsuranceDate","Failed", Err.Description ,"")

//*********************************************************************************************************
//@Method insertRowIn_bpAlliedInsuranceDataTbl
//@Date 21 May 2020
//@Description This function will insert the new row of Data into the bp_account_ins_allied_tbl
//@Input Parameter passs the Filed Name & Field Values which needs to be replaced from Standard Data using seperator ":"
//NOTE: Rec_ID value should be unique
//	   branch_id should be replaced
//EX:  insertRowIn_bpAlliedInsuranceDataTbl("rec_id:branch_id:acct_id:InsuranceExpiration",Generate_RandomNumber_UserDefind("0123456789","12") & "//0881//://088100028569//://08/13/2022//")
//    insertRowIn_bpAlliedInsuranceDataTbl("rec_id:acct_id:InsuranceExpiration",Generate_RandomNumber_UserDefind("0123456789","12") & "://088100028569//://08/13/2022//")
//	 insertRowIn_bpAlliedInsuranceDataTbl("rec_id:acct_id",Generate_RandomNumber_UserDefind("0123456789","12") & "://088100028569//")
//********************************************************************************************************
insertRowIn_bpAlliedInsuranceDataTbl(String fieldNamestoReplace,String fieldValuesToReplace)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Field Value that needs to be replaced with Standard Data
	eachFieldnameToRepalce = Split(fieldNamestoReplace,":")
	eachFieldValuesToReplace = Split(fieldValuesToReplace,":")
	//Reading Test Standard Test Data from excel sheet 
	testScriptListPath = Environment.Value("BranchPlusSQLPath") & "newDataRow_bpAlliedInsuTableData.xlsx"
	//msgbox testScriptListPath
	//Create the excel object
	Set objExcel = CreateObject("Excel.Application") 
	//objExcel.Visible = True
	Set objWorkbook = objExcel.Workbooks.Open(testScriptListPath)
	fieldNameArrary = ""
	fieldValuesArrary= ""
	for itr = 1 To 48 Step 1
		fieldNameArrary = fieldNameArrary & "," & objExcel.Cells(1,itr).Value
		//Replace the Value
		ifFieldPrest = getIndex(eachFieldnameToRepalce,objExcel.Cells(1,itr).Value)
		if ifFieldPrest > 0 
			//msgbox objExcel.Cells(1,itr).Value			
			fieldValuesArrary = fieldValuesArrary & "," & eachFieldValuesToReplace(ifFieldPrest-1)			
		else
			fieldValuesArrary = fieldValuesArrary & "," & objExcel.Cells(2,itr).Value
	fieldNameArrary = Right(fieldNameArrary,Length(fieldNameArrary)-1)
	fieldValuesArrary = Right(fieldValuesArrary,Length(fieldValuesArrary)-1)
	//close the workbook
	objWorkbook.Close
	//exit the excel program
	objExcel.Quit
	//Query
	query = "INSERT INTO bp_account_ins_allied_tbl (" & fieldNameArrary & ") VALUES ("& fieldValuesArrary &")"
	//Log Query
	 LogSuccessMessage("query to Insert Record into bp_account_Ins_allied_tbl",query)
	//Running the update Query
	 runUpdateSQLQuery(query)

//**********************************************************************************
//arryObe = "Test:Karthik:Shekar:Marlabs"
//msgbox getIndex(Split(arryObe,":"),"Marlabs")
//NOTE: THis is more of a Supporting reusable function to insertRowIn_bpAlliedInsuranceDataTbl
//*************************************************************************************
getIndex(String arraryObject,String fieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	found = false
	for itr = 0 To ubound(arraryObject) Step 1
		if arraryObject(itr) = fieldName 
			getIndex =  itr+1
			found = true
			Exit for
	if found = false 
		getIndex = 0

//****************************************************************************************************************
//@Method run_VSC_RefundAmount_Query_FetchValue_FromDB
//@Author Karthik.SHekar
//@Date 10 Jun 2020
//@Description this function will run the Query to Fetch the Refund Amount/Milage Refund Amt / DProRefunAmt for the details passed
//EX: run_VSC_RefundAmount_Query_FetchValue_FromDB("2020-07-13","166500004190","166500012390","74000","RefundAmt;MileageRefundAmt")
//    msgbox run_VSC_RefundAmount_Query_FetchValue_FromDB("2020-07-15","166500019436","166500057464","74000","RefundAmt")
//for Reference: Filed/Column Names in Db --> ChargeAmt,TotalDays, EarnedDays,DProRefundAmt, MileageRefundAmt, RefundAmt
//****************************************************************************************************************
run_VSC_RefundAmount_Query_FetchValue_FromDB(String refundDate,String acctID,String compID,String currentMiles,String fieldNameToget)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	vscRefundQuery = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath")&"VSC_refund_query.sql")	
	vscRefundQuery = Replace(vscRefundQuery,"@refundDate@",refundDate)
	vscRefundQuery = Replace(vscRefundQuery,"@acctID@",acctID)
	vscRefundQuery = Replace(vscRefundQuery,"@compID@",compID)
	vscRefundQuery = Replace(vscRefundQuery,"@currentMiles@",currentMiles)
	 LogSuccessMessage("VSC Refund Query Generated",vscRefundQuery)
	//Returning the Value
	run_VSC_RefundAmount_Query_FetchValue_FromDB = runSQLQuery_FetchMultipleValues_WithoutExit(vscRefundQuery, fieldNameToget)  	
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: run_VSC_RefundAmount_Query_FetchValue_FromDB","Failed", Err.Description ,"")

 //***********************************************************************************
 //@Mthoe getDealerName_BasedOnHoldBackType_ACH
 //@Description This will get the Dealer name based on the Dealer Status, Holdback Type, ACH Eanbled and Dealer State
 //@Author Karthik.SHekar
 //@Date 12 June 2020
//EX:  msgbox getDealerName_BasedOnHoldBackType_ACH_FromAppDB("Y","Reserve","N","")
	// msgbox getDealerName_BasedOnHoldBackType_ACH_FromAppDB("Y","Discount","N","SC")
	// msgbox getDealerName_BasedOnHoldBackType_ACH_FromAppDB("Y","RESERVE","Y","")
	// msgbox getDealerName_BasedOnHoldBackType_ACH_FromAppDB("Y","DISCOUNT","Y","AL")
	// msgbox getDealerName_BasedOnHoldBackType_ACH_FromAppDB("Y","RESERVE","","NC")
 //************************************************************************************** 
 getDealerName_BasedOnHoldBackType_ACH_FromAppDB(dealerStatus, holdback_Type, achEnabled, dealerState)
	//Query
	query = "select * from bp_dealer_tbl where active_yn = //"& ToUpper(dealerStatus) &"// and holdback_type = //"& ToUpper(holdback_Type) &"//"
	if ToUpper(holdback_Type) = "RESERVE" 
		query = query & " and reserve_amt <> 0.00"
	else if ToUpper(holdback_Type) = "DISCOUNT" 
		query = query & " and discount_amt <> 0.00"
	if ToUpper(achEnabled) = "Y" 
		query = query & " and dealer_id in (select tbl_id from bp_banking_tbl where active_yn = //Y//)"
	else if ToUpper(achEnabled) = "N" 
		query = query & " and dealer_id not in (select tbl_id from bp_banking_tbl where active_yn = //Y//)"
	if Length(Trim(dealerState)) > 0 
		query = query & " and state =//" & dealerState & "//"	
	//Appending Order By
	query = query & " order by rand()"
	//Returning the Value
	 dealerFetched = runSQLQuery_WithWarning_WithoutExit(query,"short_name")
	  writeReportLog("Dealer Identified is " & dealerFetched,"Passed","","")
	 getDealerName_BasedOnHoldBackType_ACH_FromAppDB = dealerFetched
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in getDealerName_BasedOnHoldBackType_ACH_FromAppDB","Failed", Err.Description,"")
 RemoveFunction
//*********************************************************************
//@Method get_DealerRepresentative_BasedOn_DealerName_FromDB
//@Date 19 July 2020
//@Author Karthik.Shekar
//@Description This fucntion will get the Dealer Representative Name Based on Dealer Name from App DB
//@Return DealerName ( Firstname LastName )
//EX: get_DealerRepresentative_BasedOn_DealerName_FromDB("Flexi ford")
//**********************************************************************
get_DealerRepresentative_BasedOn_DealerName_FromDB(String dealerName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select * from bp_dealer_rep_tbl where active_yn = //Y// and dealer_id in (select dealer_id from bp_dealer_tbl where short_name =//"& dealerName &"//)"
	//Dealer Rep Fetched from DB
	dealRep = runSQLQuery_FetchMultipleValues_WithoutExit(query,"first_name;last_name")
	//Returning the Value	
	get_DealerRepresentative_BasedOn_DealerName_FromDB = Split(dealRep,";")(0) & " " & Split(dealRep,";")(1) 
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to get_DealerRepresentative_BasedOn_DealerName_FromDB","Failed", Err.Description ,"")

//**********************************************************************************
//@Method getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB
//@Author Karthik.Shekar
//@Date 25 June 2020
//@Description THis Fucntion will get the count of Charge type based on Loan Number, ChargeType and waivedYN Status from APP DB
//msgbox getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB("087400009608","CPI_CHG","Y")
//msgbox getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB("087400009608","CPI_CHG","N")
//*******************************************************************************************
getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB(String loanNumber,String chargeType,String waivedYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
     query = "select count(*) from bp_account_charge_tbl where acct_id in (select acct_id from bp_account_tbl where loan_nbr =//"& loanNumber &"//) and charge_type in (//"&chargeType&"//) and waived_yn =//"&waivedYN&"//"     
    //run query to fetch loan number
	 getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB = runSQLQuery_WithWarning_WithoutExit(query, "count(*)")
   if GetErrorCount()>0 
		 writeReportLog("Failed in step/getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB","Failed", Err.Description,"")

//******************************************************************
//@MEthod run_Query_To_Skip_DealerStats_NightlyRun_AppDB
//@AUthor Karthik.Shekar
//@Description This will update the Stored Procedure in App DB to Skip the updating Dealer Stats during Nightly Batch Process which is going to spead up the Nightly Process
//@Date 30 June 2020
//Ex: run_Query_To_Skip_DealerStats_NightlyRun_AppDB()
//******************************************************************
run_Query_To_Skip_DealerStats_NightlyRun_AppDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	//	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "Skip_DealerStats_During_NightlyRun.sql")	
	filePath = Environment.Value("BranchPlusSQLPath") & "Skip_DealerStats_During_NightlyRun.sql"
	filePath = Replace(filePath,"\","/")
	//Run Sql Query
	 runUpdateSQLQuery("read //" & filePath & "//")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: run_Query_To_Skip_DealerStats_NightlyRun_AppDB","Failed", Err.Description,"Y")

//******************************************************************
//@MEthod run_Query_To_Skip_SmallBalance_NightlyRun_AppDB
//@AUthor Karthik.Shekar
//@Description This will update the Stored Procedure in App DB to Skip the updating Small Balance Data during Nightly Batch Process which is going to spead up the Nightly Process
//@Date 30 June 2020
//Ex: run_Query_To_Skip_SmallBalance_NightlyRun_AppDB()
//******************************************************************
run_Query_To_Skip_SmallBalance_NightlyRun_AppDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "Skip_SmallBalance_During_NightlyRun.sql")	
	//Run Sql Query
	 runUpdateSQLQuery(query)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: run_Query_To_Skip_SmallBalance_NightlyRun_AppDB","Failed", Err.Description,"Y")

//*****************************************************************************************************
//@Method add_AllKindOfCharges_toAccount_FromAppDB
//@Author Karthik.Shekar
//@Date 21 July 2020
//@Description This function will add all Kind of Charges to Account 
//@Paramters loanNumber --> Loan Number to which charges needs to be added
//			processDate --> This is more of a Transaction Date which needs to be set (yyyy-mm-dd)
//EX:  add_AllKindOfCharges_toAccount_FromAppDB("088100009734","2020-09-07")
//EX:  add_AllKindOfCharges_toAccount_FromAppDB("088100009734","2020-12-08")
//******************************************************************************************************
add_AllKindOfCharges_toAccount_FromAppDB(String loanNumber,String processDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Fetching the Last Trans ID
    //lastTransId= runSQLQuery("select max(trans_id) as trans_id from bp_account_charge_tbl","trans_id")
	//lastTransId= runSQLQuery("select trans_id from bp_account_charge_tbl order by trans_id desc","trans_id")
	lastTransId = runSQLQuery("select next_value from bp_next_value_tbl where key_name = //trans_id//","next_value")
	//Account ID
	acctId = getAccountID_From_DB_basedOnLoanNumber(loanNumber)
	//Fetch Branch ID
	branchId = getBranchID_From_DB()
	//#####
	//STATE VARIATION
	//#######
	if Environment.Value("currentState") = "OH" 
		//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
		baseQuery = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "add_AllKindOfCharges_toAccount_OH.txt")	
	else
		//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
		baseQuery = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "add_AllKindOfCharges_toAccount.txt")	
	//Replacing the Account ID
	baseQuery = Replace(baseQuery,"@AcctId@",acctId)
	baseQuery = Replace(baseQuery,"@BranchID@",branchId)
	baseQuery = Replace(baseQuery,"@ProcessDate@",processDate)
	baseQuery = Replace(baseQuery,"@TransID@",lastTransId)
	//Logger
	 LogSuccessMessage("Query generated add_AllKindOfCharges_toAccount",baseQuery)
	//Run Sql Query to Insert all Charges
	 runUpdateSQLQuery(baseQuery)
	//Updating the next_Value in Transaction Table
	 nextTransID = lastTransId + 5
	 nextTransID =  Right("000000000000" & nextTransID, 12)	 
	 updateQuery = "update bp_next_value_tbl set next_value = //"& nextTransID & "// where key_name = //trans_id//"	 
	  runUpdateSQLQuery(updateQuery)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: add_AllKindOfCharges_toAccount_FromAppDB","Failed", Err.Description,"Y")

//***************************************************************************************************
//@Method getCurrentPrincipalBalanceAndInterest_for_Account
//Author Karthik.SHkear
//@Description This method willl get the Current Principal and Current Interest of the Account.
//@Date 27 Aug 2020
//  getCurrentPrincipalBalanceAndInterest_for_Account("088100029251", expPrinc, expInt )
//msgbox expPrinc
//msgbox expInt
//***************************************************************************************************
getCurrentPrincipalBalanceAndInterest_for_Account(String accountID,String ByRef expCurPrinc,String ByRef expCurInt)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "getCurrentPrincipalBalanceAndInterest_for_Account.txt")	
	//Replacing the Acct Id in Query
	query = Replace(query,"@acctID@",Trim(accountID))
	//Logger
	// writeReportLog("Query generated as part of getCurrentPrincipalBalanceAndInterest_for_Account","Passed",query,"")
	 LogSuccessMessage("Query generated as part of getCurrentPrincipalBalanceAndInterest_for_Account",query)
	//Returning the Values
	queryOutput = runSQLQuery_FetchMultipleValues_WithoutExit(query,"pend_princ_till_today;pend_int")
	//ByRef Returning the Values
	expCurPrinc = Split(queryOutput,";")(0)
	expCurInt = Split(queryOutput,";")(1)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getCurrentPrincipalBalanceAndInterest_for_Account","Failed", Err.Description ,"")

//********************************************************************************************
//@Method get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB
//@Author Karthik.Shekar
//@Description This fucntion will get teh Waived Stats from Charges Table of Payment Tab if we pass the Account ID and Transaction Number
//
//msgbox get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB("176400010993","182301")
//msgbox get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB("176400010993","182286")
//********************************************************************************************
get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB(String acctID,String transId)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select waived_yn from bp_account_charge_tbl where acct_id = //"& acctID & "// and trans_id = //"& transId & "//"
	//Returning the Value
	get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB = runSQLQuery(query,"waived_yn")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB","Failed", Err.Description,"Y")

//****************************************************************************************************************
//@Method getData_From_AlliedInsuranceTbl_BasedOnRecID_AppDb
//@Date 13 May 2020
//@Author Karthik.Shekar
//@Description this funcntion will get the Data from Allied Insurance Tbl which is there in App(ASA) DB
//@Modified By: Deepthi
//Modified to get data from the Allied Insurnace Tbl based on the rec_id 
//EX: msgbox getData_From_AlliedInsuranceTbl_AppDb("count","","") --> To get Cnt of Records
//    msgbox getData_From_AlliedInsuranceTbl_AppDb("count","088100028892","") --> to get Count of Records for a Particular Account
//    msgbox getData_From_AlliedInsuranceTbl_AppDb("rec_id:rec_date:acct_id","","") --> Fetches value of 1st Record
//    msgbox getData_From_AlliedInsuranceTbl_AppDb("rec_id:rec_date:acct_id","088100028236","rec_id") --> Filters data based on Account ID and rec_id
//****************************************************************************************************************
getData_From_AlliedInsuranceTbl_BasedOnRecID_AppDb(String requiredFields,String accountId,String rec_ID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    query = "select * from bp_account_ins_allied_tbl"
    //Special Conditon    
    if Length(Trim(accountId)) > 0 
        query = query & " where acct_id = " & accountId        
    //Count
    if ToUpper(requiredFields) = ToUpper("Count") 
        query = Replace(query,"*","count(*)")
        requiredFields = "count(*)"    
    //Special Conditon    
    if Length(Trim(rec_ID)) > 0 
        query = query & " and rec_id = " & rec_ID        
    //Logger
     LogSuccessMessage("query ; getData_From_AlliedInsuranceTbl_BasedOnRecID_AppDb",query)
    //Executing the Query Generated
    alliedDetails = runSQLQuery_FetchMultipleValues(query, requiredFields)
    getData_From_AlliedInsuranceTbl_BasedOnRecID_AppDb = alliedDetails
    //Error handling
    if GetErrorCount()>0              
         writeReportLog("Failed in Step/: getData_From_AlliedInsuranceTbl_BasedOnRecID_AppDb","Failed", Err.Description ,"")

//*****************************************************************************************
//@methodName: getAndValidate_TestURL_DebitOrCreditCard_Payment_InDB(ExpTestUrl)
//@Author Ambika
//@Date 27 May 2020
//@Description This is to get the web url from bp_credit_card_setup_tbl and validte web url
//Ex: getAndValidate_TestURL_DebitOrCreditCard_Payment_InDB()
//***********t******************************************************************************
getAndValidate_TestURL_DebitOrCreditCard_Payment_InDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	version = getAppVersionNumber_From_DB()
	ExpTestUrl = "https://qa-cardpayments-api.security-finance.com/qa/CardService/Services/CardService.svc"
	//handling based on version
	if Trim(Replace(version,".","")) >= 950 
		//fetching required values from db
		PmtProdUrl = runSQLQuery_FetchMultipleValues("select web_url from bp_credit_card_setup_tbl where cc_type = //PMTPROD//","web_url")
		PmtTestUrl = runSQLQuery_FetchMultipleValues("select web_url from bp_credit_card_setup_tbl where cc_type = //PMTTEST//","web_url")
		RvsProdUrl = runSQLQuery_FetchMultipleValues("select web_url from bp_credit_card_setup_tbl where cc_type = //RVSPROD//","web_url")
		RvsTestUrl = runSQLQuery_FetchMultipleValues("select web_url from bp_credit_card_setup_tbl where cc_type = //RVSTEST//","web_url")
		//validating test url
		 validateDataAndReport(PmtProdUrl,ExpTestUrl,"Validation of PMTPROD web url")
		 validateDataAndReport(PmtTestUrl,ExpTestUrl,"Validation of PMTTEST web url")
		 validateDataAndReport(RvsProdUrl,ExpTestUrl,"Validation of RVSPROD web url")
		 validateDataAndReport(RvsTestUrl,ExpTestUrl,"Validation of RVSTEST web url")
	else
		//fetching required values from db
		TestUrl = runSQLQuery_FetchMultipleValues("select web_url from bp_credit_card_setup_tbl where cc_type = //CREDIT//","web_url")
		//validating test url
		 validateDataAndReport(TestUrl,ExpTestUrl,"Validation of Credit web url")
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : getAndValidate_TestURL_DebitOrCreditCard_Payment_InDB ","Failed", Err.Description,"")

//********************************************************************************************
//@Author Karthik.Shekar
//@Description This Fucntion will set the date in Bath Process Table
//@Date 20 Aug 2020
//Ex: set_EndDate_In_Bp_Batch_Process_Tbl("ue_dealer_statistics_summ", "2000-12-31")
//********************************************************************************************
set_EndDate_In_Bp_Batch_Process_Tbl_AppDB(String eventName,String endDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	Query =  "update bp_batch_process_tbl set end_dt =//" & endDate & " 00:00:00.000// where event_name = //"& eventName & "//"
	 LogSuccessMessage("Query set_EndDate_In_Bp_Batch_Process_Tbl_AppDB >>" &  Query,"")
 	 runUpdateSQLQuery(Query)
 	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/set_EndDate_In_Bp_Batch_Process_Tbl_AppDB","Failed", Err.Description,"")

//**********************************************************************************************************************************
//@Method get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal
//@Author Karthik.Shekar
//@Description This Method will fetch the Loan number which will have the current Interest and Current principal in it for current system date based on input paramteres passed.
//			  NOTE: THis will Fail the Script if it does not find any account with above mentioned criteria
//EX: msgbox get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal("Active","55","Current","2020-01-01","2020-07-01")
//    msgbox get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal("REPO","31","Current","2020-01-01","2020-07-01")
//********************************************************************************************************************************************
get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal(String AccountStatus,String AccountTypeCode,String UI_Del_Status,String ContractFromDate,String ContractToDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Flag
	found = false
	//Iterating and Validating
	for itr = 1 To 50 Step 1
		loanNum = get_LoanNumber_FromDB_BasedOn_ContractDate(AccountStatus,AccountTypeCode,UI_Del_Status,ContractFromDate,ContractToDate)
		accntID = getAccountID_From_DB_basedOnLoanNumber(loanNum)
		 getCurrentPrincipalBalanceAndInterest_for_Account(accntID, currentPrinc, currentInt)
		//Identifying account with Current Principal and CurrInt		
		if ccur(currentPrinc) > ccur(1) and ccur(currentInt) > ccur(0) 
			found = true
//			msgbox itr
//			msgbox currentPrinc
//			msgbox currentInt
			get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal = loanNum
			Exit for
	//Validating if no loan Found
	if found = false 
		get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal = 0
		// writeReportLog("Not able to find any Loan for Current Date " & date() & " Which Contains Current Interest and Current Principal in it. Please try for different date","Failed","Looking for --> "  & AccountStatus & "," & AccountTypeCode& "," & UI_Del_Status & "," & ContractFromDate & "," &ContractToDate,"")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal ","Failed", Err.Description,"")

//*********************************************************************************************************
//@Author: Karthik Shekar
//@Method: get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB
//@Date: 09 Sep 2020
//This function is intended to get the total chargeamount from Charge Table irrespective of waive status and charge type
//CharteTYpe (for Ref) --> //LATE_CHG//	//PRINCPAL//	//COLL_CHG//	//NSF_CHRG//	//DEFERMNT//	//INTEREST//	//INT_DUE//	//LOANCONV//	//MISC_CHG//	//NSF_CHNG//	//EXCESS//	//COLL_EXP//	//CPI_CHG//
//EX: msgbox get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","")
//	msgbox get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","LATE_CHG","Y")
//	msgbox get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","LATE_CHG","N")
//	msgbox get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","Y")
//	msgbox get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","N")
//*********************************************************************************************************
get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB(String acctID,String chargeType,String waivedYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select isnull(sum(charge_amt), 0) as Sum_Chrg_Amt from bp_account_charge_tbl where charge_type not in (//INTEREST//,//PRINCPAL//) and acct_id = //"& acctID & "//"
	//Handling for Charge Type
	if Length(Trim(chargeType)) > 0 and chargeType <> "" 
		query = query & " and charge_type = //"&  chargeType &"//"
	//Handling for Waived YN
	if Length(Trim(waivedYN)) > 0 and waivedYN <> "" 
		query = query & " and waived_yn = //"&  waivedYN &"//"
	//UFT Logger
	 LogSuccessMessage("Query generated get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB",query)
	//Returning the Value
	get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB = runSQLQuery(query,"Sum_Chrg_Amt")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB","Failed", Err.Description,"Y")

//*********************************************************************************************************
//@Author: Karthik Shekar
//@Method: get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB
//@date: 09 Sep 2020
//@Description This function is intended to get the total paid charge from Charge Table irrespective of waive status and charge type
//CharteTYpe (for Ref) --> //LATE_CHG//	//PRINCPAL//	//COLL_CHG//	//NSF_CHRG//	//DEFERMNT//	//INTEREST//	//INT_DUE//	//LOANCONV//	//MISC_CHG//	//NSF_CHNG//	//EXCESS//	//COLL_EXP//	//CPI_CHG//
//EX: msgbox get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","")
//	msgbox get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","LATE_CHG","Y")
//	msgbox get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","LATE_CHG","N")
//	msgbox get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","Y")
//	msgbox get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","N")
//*********************************************************************************************************
get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB(String acctID,String chargeType,String waivedYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select isnull(sum(paid_amt), 0) as Paid_Chrg_Amt from bp_account_charge_tbl where charge_type not in (//INTEREST//,//PRINCPAL//) and acct_id = //"& acctID & "//"
	//Handling for Charge Type
	if Length(Trim(chargeType)) > 0 and chargeType <> "" 
		query = query & " and charge_type = //"&  chargeType &"//"
	//Handling for Waived YN
	if Length(Trim(waivedYN)) > 0 and waivedYN <> "" 
		query = query & " and waived_yn = //"&  waivedYN &"//"
	//UFT Logger
	 LogSuccessMessage("Query generated get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB",query)
	//Returning the Value
	get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB = runSQLQuery(query,"Paid_Chrg_Amt")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB","Failed", Err.Description,"Y")

//*******************************************************
//@MethodName is_AgentAvailable_In_DB
//@Author Karthik.Shekar
//@Description This function wil Valdiate if the Agent is available in System or not based on its Active Status.
//@Date 11 Sep 2020
//EX: msgbox is_AgentAvailable_In_DB("Automation Tester","")
//msgbox is_AgentAvailable_In_DB("Automation Tester","N")
//msgbox is_AgentAvailable_In_DB("Karthik Shekar","Y")
//**********************************************************
is_AgentAvailable_In_DB(String agentName,String activeYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select count(*) from bp_business_agent_tbl where dba_name = //"& agentName & "//"
	if Trim(activeYN) <> "" 
		query = query & " and active_yn = //"& activeYN & "//"
	//Run the query
	cnt = runSQLQuery_WithWarning_WithoutExit(query,"count(*)")
	//Returning the Value
	if cnt = 0 
		is_AgentAvailable_In_DB = false
	else
		is_AgentAvailable_In_DB = true
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: is_AgentAvailable_In_DB","Failed", Err.Description,"")

//*******************************************************************************
//@Method get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB
//@Name Karthik.Shekar
//@Description This will get the Loan Based on Existing Payment Type(Which are not Reversed) and account Status
//@Values: PaymentTYpe --> //PAYMENT//	//DEFERMNT//	//PRINCPAL//	//CHRG_OFF//	//SETTLEMT//	//PRINCADJ//	//SMALLBAL//	//INTRNLPY//	//ADJSTMNT//
//         acctStatus --> //ACTIVE//	//APPROVED//	//APPRVCND//	//BANKRUPT//	//CANCELLD//	//CHRG_OFF//	//CHRGBANK//	//CHRGSKIP//	//DENIED//	//PAID_OUT//	//PENDING//	//REDEEMED//	//REPO//	//REVERSED//
//EX: get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB("DEFERMNT","ACTIVE")
//  get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB("SETTLEMT","CHRG_OFF")
//********************************************************************************
get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB(String paymentType,String acctStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Reading Entire File Content
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "get_LoanNumber_With_Existing_PaymentType_AppDB.txt")
	query = Replace(query,"@PMT_CLASS@",paymentType)
	query = Replace(query,"@ACCT_STATUS@",acctStatus)
	//Logger
	 LogSuccessMessage("Query get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB",query)
	//Returning the Value
	get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB","Failed", Err.Description,"Y")

//**************************************************************
//@Method checkAndUpdate_MaxCheckNumber_Disbursement
//@Author Karthik.Shekar
//@Date 16 Sep 2020
//@Description This fucntion will update the Maximum Check Number Value in Disbursement account if  Check Number is less than 500
//EX:  checkAndUpdate_MaxCheckNumber_Disbursement()
//************************************************************
checkAndUpdate_MaxCheckNumber_Disbursement()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Fetching existing Check Number
	nextCheckNBR = runSQLQuery_WithWarning_WithoutExit("select next_check_nbr from bp_branch_banking_tbl where bank_type = //CHCKDISB//","next_check_nbr")
	//Fetching Max check Number
	max_check_nbr = runSQLQuery_WithWarning_WithoutExit("select max_check_nbr from bp_branch_banking_tbl where bank_type = //CHCKDISB//","max_check_nbr")
	//Validating and updating		
	if max_check_nbr < (nextCheckNBR + 500) 
		max_check_nbr = nextCheckNBR + 700
		 runUpdateSQLQuery("update bp_branch_banking_tbl set max_check_nbr = //"& max_check_nbr & "// where bank_type = //CHCKDISB//")
	 //Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in checkAndUpdate_MaxCheckNumber_Disbursement","Failed", Err.Description,"")

//*******************************************************************************
//@Method get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB
//@Name Shelma Joseph
//@Date 16 Sep 2020
//@Description //This function is intended to get the total count of charges from Charge Table irrespective of waive status and charge type
//CharteTYpe (for Ref) --> //LATE_CHG//    //PRINCPAL//    //COLL_CHG//    //NSF_CHRG//    //DEFERMNT//    //INTEREST//    //INT_DUE//    //LOANCONV//    //MISC_CHG//    //NSF_CHNG//    //EXCESS//    //COLL_EXP//    //CPI_CHG//
//EX: msgbox get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100028926","","")
//    msgbox get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100028926","CPI_CHG","Y")
//    msgbox get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100028926","CPI_CHG","N")
//    msgbox get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100028926","","Y")
//    msgbox get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100028926","","N")
//*********************************************************************************************************
get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB(String acctID,String chargeType,String waivedYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    query = "select count(*) as Count_chrg_Amt from bp_account_charge_tbl where charge_type not in (//INTEREST//,//PRINCPAL//) and acct_id = //"& acctID & "//"
    //Handling for Charge Type
    if Length(Trim(chargeType)) > 0 and chargeType <> "" 
        query = query & " and charge_type = //"&  chargeType &"//"
    //Handling for Waived YN
    if Length(Trim(waivedYN)) > 0 and waivedYN <> "" 
        query = query & " and waived_yn = //"&  waivedYN &"//"
    //UFT Logger
     LogSuccessMessage("Query generated get_Suf_CountOfChargeAmt_ChargesTbl_PaymentTab_FromAppDB",query)
    //Returning the Value
    get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB = runSQLQuery(query,"Count_chrg_Amt")    
    //Error Handling
    if GetErrorCount()>0 
         writeReportLog("Failed Step/Function: get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB","Failed", Err.Description,"Y")

//***************************************************************************************************
//@Method getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate
//Author Karthik.SHkear
//@Description This method willl get the Current Principal and Current Interest of the Account.
//@Date 22 Sep 2020
//EX:  getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate("088100029258", "2020-09-30", actCurPrinc, actCurInt)
//	msgbox actCurPrinc & " - " & actCurInt
//
//***************************************************************************************************
getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate(String accountID,String actDate,String ByRef actCurPrinc,String ByRef actCurInt)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate.txt")	
	//query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "getCurrentPrincipalBalanceAndInterest_for_Account_New.txt")	
	//Replacing the Acct Id in Query
	query = Replace(query,"@acctID@",Trim(accountID))
	query = Replace(query,"@date@",actDate)
	//Logger
	// writeReportLog("Query generated as part of getCurrentPrincipalBalanceAndInterest_for_Account","Passed",query,"")
	 LogSuccessMessage("Query generated as part of getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate",query)
	//Returning the Values
	queryOutput = runSQLQuery_FetchMultipleValues_WithoutExit(query,"pend_princ_till_today;pend_int")
	//ByRef Returning the Values
	actCurPrinc = Split(queryOutput,";")(0)
	actCurInt = Split(queryOutput,";")(1)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate","Failed", Err.Description ,"")

//***************************************************************
//EX: msgbox get_RepoDate_From_AppDB("088100029258")
//***************************************************************
get_RepoDate_From_AppDB(String acctID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select date(repo_dt) as repodate,* from bp_account_tbl where acct_id = //" & acctID & "//"
	//Returning the Value
	get_RepoDate_From_AppDB = runSQLQuery(query,"repodate")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_RepoDate_From_AppDB","Failed", Err.Description,"")

//***************************************************************
//EX: msgbox get_AccountStatus_From_AppDB("088100029258")
//***************************************************************
get_AccountStatus_From_AppDB(String acctID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select acct_status as repodate,* from bp_account_tbl where acct_id = //" & acctID & "//"
	//Returning the Value
	get_AccountStatus_From_AppDB = runSQLQuery(query,"acct_status")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_RepoDate_From_AppDB","Failed", Err.Description,"")

//***************************************************************************************************************************
//@Method: get_LoanNumber_FromDB_BasedOn_ContractDate(AccountStatus,AccountTypeCode,UI_Del_Status,ContractFromDate,ContractToDate)
//@Author: Karthik
//@Date 23 Sep 2020
//@Description: This function will get the loan from DB based on contract From Date, Contract To Date, Account Status and DealerState
//Ex:  get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState("Active","55","30","NC", "2018-12-01","")
//Ex:  get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState("Active","55","30","SC", "","")
//***************************************************************************************************************************
get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState(String AccountStatus,String AccountTypeCode,String UI_Del_Status,String dealerState,String ContractFromDate,String ContractToDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    if ToUpper(AccountStatus) = "ACTIVE" 
     	 //Get ID Based on Delinquency Status and Contractual status
		  get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	     if contractFromDate <> ""  
			contractFromDate = formatDateWithSpecifiedDelimeter(contractFromDate,"YYYYMMDD","-")
			contract_FromDate = "and funding_dt >= //"&ContractFromDate&"// "
	 	if ContractToDate <> "" 
	 		 ContractToDate = formatDateWithSpecifiedDelimeter(ContractToDate,"YYYYMMDD","-")
	 		 Contract_ToDate = "and funding_dt < //"&ContractToDate&"//"
	 			//query to run 
		  //Query
 		//query = "acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode &"// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// " & contract_FromDate & contract_ToDate & "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by loan_nbr desc"
 		query = "acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode &"// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// " & contract_FromDate & contract_ToDate & "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*))"
 	else
 		 query = "acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode &"//" & contract_FromDate & contract_ToDate & "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*))"	
    //Handling for the Dealer State    
    if dealerState <> "" 
    	query =  query & " and  dealer_id in (select dealer_id from bp_dealer_tbl where state = //"& dealerState &"//)"
    //Query
 	//query = "acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode &"// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// " & contract_FromDate & contract_ToDate & "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by loan_nbr desc"
 	if Environment.Value("currentState") = "OH" 
		sqlQuery = "Select * from support.bp_account_tbl where acct_id not in (select distinct(acct_id) from bp_account_charge_tbl where charge_type = //COLL_EXP//) and " & query & " order by rand()"
	else
		sqlQuery = "Select * from support.bp_account_tbl where " & query & " order by rand()"
	//UFT Logger
	 LogSuccessMessage("Query generated get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState", sqlQuery)
    //run query to fetch loan number
	// get_LoanNumber_FromDB_BasedOn_ContractDate = runSQLQuery(sqlQuery, "loan_nbr")
	get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState = runSQLQuery_WithWarning_WithoutExit(sqlQuery, "loan_nbr")
    if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState","Failed", Err.Description,"")

//**********************************************************************************************************************************
//@Method get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState
//@Author Karthik.Shekar
//@Description This Method will fetch the Loan number which will have the current Interest and Current principal in it for current system date based on input paramteres passed.
//	NOTE: it will Return 0 if we don//t find any loans for Specified Criteria
//			  
//EX: msgbox get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState("Active","55","Current","NC","2020-01-01","2020-07-01")
//    msgbox get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState("REPO","31","Current","SC","2020-01-01","2020-07-01")
//********************************************************************************************************************************************
get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState(String AccountStatus,String AccountTypeCode,String UI_Del_Status,String dealerState,String ContractFromDate,String ContractToDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Flag
	found = false
	//Iterating and Validating
	for itr = 1 To 20 Step 1
		loanNum = get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState(AccountStatus,AccountTypeCode,UI_Del_Status,dealerState,ContractFromDate,ContractToDate)
		accntID = getAccountID_From_DB_basedOnLoanNumber(loanNum)
		 getCurrentPrincipalBalanceAndInterest_for_Account(accntID, currentPrinc, currentInt)
		//Identifying account with Current Principal and CurrInt		
		if ccur(currentPrinc) > ccur(1) and ccur(currentInt) > ccur(0) 
			found = true
//			msgbox itr
//			msgbox currentPrinc
//			msgbox currentInt
			get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState = loanNum
			Exit for
	//Validating if no loan Found
	if found = false 
		get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState = 0
		// writeReportLog("Not able to find any Loan for Current Date " & date() & " Which Contains Current Interest and Current Principal in it. Please try for different date","Failed","Looking for --> "  & AccountStatus & "," & AccountTypeCode& "," & UI_Del_Status & "," & ContractFromDate & "," &ContractToDate,"")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal ","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: update_CustomPaymentProcessingOrder_In_AppDB
//@Author Karthik
//@Date 24 Sep 2020
//@Description This is to Update the Security level less than 400 based on User Id in DB
//Ex: update_CustomPaymentProcessingOrder_In_AppDB("NC","55", "ZZZZZZZZ") ---> Active Account
//    update_CustomPaymentProcessingOrder_In_AppDB("SC","31", "REPO") ---> REP Account
//*********************************************************************************************
update_CustomPaymentProcessingOrder_In_AppDB(String state,String loanType,String accountStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") &"query_To_Update_AppDB_With_CustomPaymentOrder.txt")
	//Replace the UserID 
	query = Replace(query,"@state@",state)
	//Replace the Security Level
	query = Replace(query,"@loanType@",loanType)
	//Replace the Security Level
	query = Replace(query,"@accountStatus@",accountStatus)
	//Run Sql Query
	 runUpdateSQLQuery(query)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: update_CashDrawerUserSecurityLevel_BasedOnUser","Failed", Err.Description,"Y")

//*****************************************************************************************************
//@Method add_AllKindOfCharges_toAccount_FromAppDB
//@Author Karthik.Shekar
//@Date 08 Oct 2020
//@Description This function will add Specific Charge to Account 
//@Paramters loanNumber --> Loan Number to which charges needs to be added
//			processDate --> This is more of a Transaction Date which needs to be set (yyyy-mm-dd)
//			chargeType --> Pass the Charge Type To Insert the value
//EX:  add_SpecificCharge_toAccount_FromAppDB("088100009734","2020-09-07", "DEFERMNT")
//EX:  add_SpecificCharge_toAccount_FromAppDB("088100009734","2020-12-08","NSF_CHNG")
//******************************************************************************************************
add_SpecificCharge_toAccount_FromAppDB(String loanNumber,String processDate,String chargeType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Fetching the Last Trans ID    
	lastTransId = runSQLQuery("select next_value from bp_next_value_tbl where key_name = //trans_id//","next_value")
	//Account ID
	acctId = getAccountID_From_DB_basedOnLoanNumber(loanNumber)
	//Fetch Branch ID
	branchId = getBranchID_From_DB()
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	baseQuery = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "add_SpecificCharge_ToAccount.txt")	
	//Replacing the Account ID
	baseQuery = Replace(baseQuery,"@AcctId@",acctId)
	baseQuery = Replace(baseQuery,"@BranchID@",branchId)
	baseQuery = Replace(baseQuery,"@ProcessDate@",processDate)
	baseQuery = Replace(baseQuery,"@TransID@",lastTransId)
	baseQuery = Replace(baseQuery,"@ChargeType@",chargeType)
	//Logger
	 LogSuccessMessage("Query generated add_SpecificCharge_toAccount_FromAppDB",baseQuery)
	//Run Sql Query to Insert all Charges
	 runUpdateSQLQuery(baseQuery)
	//Updating the next_Value in Transaction Table
	 nextTransID = lastTransId + 1
	 nextTransID =  Right("000000000000" & nextTransID, 12)	 
	 updateQuery = "update bp_next_value_tbl set next_value = //"& nextTransID & "// where key_name = //trans_id//"	 
	  runUpdateSQLQuery(updateQuery)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: add_SpecificCharge_toAccount_FromAppDB","Failed", Err.Description,"Y")

//******************************************************************************************************************************************************
//@MethodName: getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable()
//@Author Karthik
//@Date 12 Oct 2020
//@Description This will get the loan number from the account which contains the charges like "NSF Change// and //Collectin Charge" in it. 
//msgbox getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable("Active")
//msgbox getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable("CHRG_OFF")
//msgbox getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable("") --> Can Give Empty Value as well. That time it will not filter for acc status
//******************************************************************************************************************************************************
getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable(String accStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run 
    query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "getLoanNumber_FromAcc_With_ChargesNotPresntIn_OrderTable.txt")
    //Additional Condition only when Acc Status is not null
    if Length(Trim(accStatus)) > 0 
    	query = query & " and a.acct_status =//" & accStatus & "//"
    //Appending Order by
    query = query & " order by rand()" 
    //Logger
     LogSuccessMessage("Query generated getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable",query)
    //run query to fetch loan number
	 getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable = runSQLQuery(query, "loan_nbr")
    if GetErrorCount()>0 
		 writeReportLog("Failed in step/getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable","Failed", Err.Description,"")

//************************************************************************
//@Method getLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday
//@Date 19 Oct 2020
//@Author Karthik.Shekar
//@Description This fucntion will get the Loan number from DB for the accounts which contains the Charges which are not defined in
//			Payment Processing Order Table also this will filter for account based on AccStatus and DueTodayAmt 
//EX: msgbox getLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday("Active","=", "0")
//    msgbox getLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday("Active",">", "100")
//************************************************************************
getLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday(String accStatus,String dueTodayAmtOperator,String dueTodayAmt)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	found = false
	for itr = 1 To 30 Step 1
		loanNUmber = getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable(accStatus)
		//Fetching Due TOday Amount
		actdueTodayAmt = get_TotalDueToday_Amount_FromAppDB(loanNumber)
		//msgbox actdueTodayAmt
		//Validating for Condition
		//if ccur(actdueTodayAmt) = ccur(dueTodayAmt) 
		 if eval(ccur(actdueTodayAmt) & dueTodayAmtOperator & ccur(dueTodayAmt)) 
			found = true
			getLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday = loanNUmber
			Exit for
	//Returning zero if we don//t find any loan
	if found = false 
		getLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday = 0
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable","Failed", Err.Description ,"")

//***************************************************************************************************************
//@MEthod get_TotalDueToday_Amount_FromAppDB
//@Author Karthik.Shekar
//@Date 19 OCt 2020
//@DEscription this method will return "Total Due Today" Amount if we pass the Loan number to it. 
//EX: msgbox get_TotalDueToday_Amount_FromAppDB("088100009734")
//***************************************************************************************************************
get_TotalDueToday_Amount_FromAppDB(String loanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run 
    query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "get_TotalDueTodayAmount_BasedOnLoanNumber_SQLQuery.txt")
	//Replaceing the LoanNumber
	query = Replace(query,"@LoanNumber",loanNumber)
	//Logger
	 LogSuccessMessage("Query Generated get_TotalDueToday_Amount_FromAppDB",query)
	//Get the Due To Day Amount from DB
	get_TotalDueToday_Amount_FromAppDB = runSQLQuery(query, "Amount Due Today")
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_TotalDueToday_Amount_FromAppDB","Failed", Err.Description ,"")

//****************************************************************
//@Method isCreditBureauAvailable_AppDB
//@Description this method will Return Ture or False after checking if the Required Credit Bureau is Available in that State are not
//@Date 07 dec 2020
//@Author karthik.SHekar
//EX: msgbox 	isCreditBureauAvailable_AppDB("TRANSUN") --> Use this  to check for TRANSUNION
	//msgbox 	isCreditBureauAvailable_AppDB("EQUIFAX") --> Use this  to check for EQUIFAX
	//msgbox  isCreditBureauAvailable_AppDB("MLA_EQ") --> for MLA EQUIFAX
	//msgbox 	isCreditBureauAvailable_AppDB("TR45") --> Negative Try
//******************************************************************
isCreditBureauAvailable_AppDB(String reqBureauName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	output = runSQLQuery("select count(*) as cnt from bp_credit_bureau_tbl where service = //"& reqBureauName &"//","cnt")
	if output = 0 
		isCreditBureauAvailable_AppDB = false
	else
		isCreditBureauAvailable_AppDB = true
	//Error
	if GetErrorCount()>0  			
		 writeReportLog("Failed to isCreditBureauAvailable_AppDB","Failed", Err.Description ,"")

//**********************************************************************************
//@Method get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType
//@Author Karthik.Shekar
//@Description
//@Date 23 Dec 2020
//EX: msgbox get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType("31") --> for Direct Loan
//	msgbox get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType("55") --> for Auto Loan
//******************************************************************************************
get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType(String accType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run 
    query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "CPI_SQLQuery_BasedOnloan.txt")
    //Replace the account Type
    query = Replace(query,"@account_type@",accType)
    //Logger
     LogSuccessMessage("Query generated get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType",query)
    //run query to fetch loan number
	 get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType = runSQLQuery_WithWarning_WithoutExit(query, "loan_nbr")
   if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType","Failed", Err.Description,"")

//**********************************************************************************
//@Method get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndRequestUserId_CreditTable
//@Author Ritu Tripathi
//@Description
//@Date 16 Aug 2021
//EX: get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndRequestUserId_CreditTable(Bureau,RequestUserID)
//******************************************************************************************
get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndRequestUserId_CreditTable(String Bureau,String RequestUserID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query to run
		query = "Select top 1 * from credit_report_request_tbl where credit_bureau = //"&Bureau&"// and request_userid = //"&RequestUserID&"// and customer_id IN (Select customer_id from credit_report_request_tbl where customer_id not in(0) group by customer_id having count(customer_id) = 1 order by RAND()) order by RAND()"
	requiredFieldName = "org_id:customer_id:customer_original_owner:request_userid:credit_bureau:credit_score:credit_score_type:cr_userid:output_type:account_original_owner:account_id"
	//get details from DB
	get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndRequestUserId_CreditTable = runSQLQuery_FetchMultipleValues(query, requiredFieldName)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndRequestUserId_CreditTable","Failed", Err.Description,"")

//**********************************************************************************
//@Method get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable
//@Author Ritu Tripathi
//@Description
//@Date 23 Aug 2021
//EX: get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable(Bureau,CustomerID)
//******************************************************************************************
get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable(String Bureau,String CustomerID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	query = "Select top 1 * from credit_report_request_tbl where credit_bureau = //"&Bureau&"// and customer_id = //"&CustomerID&"// order by record_dt desc"
	requiredFieldName = "org_id:customer_id:customer_original_owner:request_userid:credit_bureau:credit_score:credit_score_type:cr_userid:output_type:account_original_owner:account_id"
	//get details from DB
	get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable = runSQLQuery_FetchMultipleValues(query, requiredFieldName)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable","Failed", Err.Description,"")

//**********************************************************************************
//@Method get_BranchSetupDetails
//@Author Ritu Tripathi
//@Description This function is used to fetch the current branch and organization id from DB
//@Date 18 Aug 2021
//EX: get_BranchSetupDetails()
//******************************************************************************************
get_BranchSetupDetails()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	query = "Select * from branch_setup_tbl;"
	requiredFieldName = "branch_id:organization_id"
	//get branch id and organization id from DB
	get_BranchSetupDetails = runSQLQuery_FetchMultipleValues(query, requiredFieldName)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_BranchSetupDetails","Failed", Err.Description,"")

//**********************************************************************************
//@Method pullNewCreditScore
//@Author Ritu Tripathi
//@Description This function is used to fetch the latest credit score based on credit bureau, Customer ID and Reference id
//@Date 20 Aug 2021
//EX: pullNewCreditScore("Equifax","167500035687","167500035685")
//******************************************************************************************
pullNewCreditScore(String RequiredBureau,String CustomerID,String RefID_App)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	query = "Select top 1 * from credit_report_request_tbl where credit_bureau = //"&RequiredBureau&"// and customer_id = //"&CustomerID&"// and account_id = //"&RefID_App&"// order by record_dt desc"
	requiredFieldName = "credit_score"
	//get latest pulled credit score from DB
	pullNewCreditScore = runSQLQuery(query, requiredFieldName)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/pullNewCreditScore","Failed", Err.Description,"")

//***********************************************************************************************************************
//@methodName: update_TestURL_bp_credit_service_ref_tbl
//@Author: Ritu
//@Date 15 September 2021
//@Description This is to updat API TEST URL in Credit Service table
//Ex:  update_TestURL_bp_credit_service_ref_tbl("ONLINE PMTS TEST","http://sfc-api-qa201")
//***********************************************************************************************************************
update_TestURL_bp_credit_service_ref_tbl(String state,String bureau,String ref_type,String ref_value)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query 
	//update bp_credit_service_ref_tbl set ref_value=//https://qa-creditreport-api.security-finance.com/v6/api/CreditPull// where state=//GA// and service=//EQUIFAX// and ref_type = //API URL TEST//
	query = "Update bp_credit_service_ref_tbl set ref_value =//"&ref_value&"// where state=//"&state&"// and service=//"&bureau&"// and ref_type = //"&ref_type&"//"
	//upadted query
	 runUpdateSQLQuery(query)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in update_TestURL_bp_credit_service_ref_tbl","Failed", Err.Description,"")

//*****************************************************************************************
//@methodName: validate_TestURL_bp_credit_service_ref_tbl
//@Author Ritu
//@Date 16 September 2021
//@Description This is to get the test url from bp_credit_service_ref_tbl and validte it
//Ex: validate_TestURL_bp_credit_service_ref_tbl()
//***********t******************************************************************************
validate_TestURL_bp_credit_service_ref_tbl(String state,String bureau,String ref_type,String expected_URL)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select ref_value from bp_credit_service_ref_tbl where state=//"&state&"// and service=//"&bureau&"// and ref_type = //"&ref_type&"//"
	//fetching URL from DB
	URL_InDB = runSQLQuery_FetchMultipleValues(query,"ref_value")
	//validating url
	 validateDataAndReport(URL_InDB,expected_URL,"Validation of API Test URL")
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : validate_TestURL_bp_credit_service_ref_tbl ","Failed", Err.Description,"")

