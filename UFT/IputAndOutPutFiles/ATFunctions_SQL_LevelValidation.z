//*****************************************************************************************
//@methodName : open_F7_Credit_Decision_Window()
//@Author     : Chandra
//@Date       : 26 July 2018
//@Description: This will get the Credit Decision Window
//Ex: open_F7_Credit_Decision_Window()
//*****************************************************************************************
open_F7_Credit_Decision_Window()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	PbWindow("pbname:=w_bp_frame").SetActive()
	//Navigate to choose loan type window
	 sendKeys("{F7}")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: open_F7_Credit_Decision_Window","Failed", Err.Description,"Y")

//*****************************************************************************************
//@methodName : ClickOn_CancelButton_CreditDecisionWindow()
//@Author     : Chandra
//@Date       : 27 July 2018
//@Description: This will Click on Cancel Button the Credit Decision Window
//Ex: ClickOn_CancelButton_CreditDecisionWindow()
//*****************************************************************************************
ClickOn_CancelButton_CreditDecisionWindow()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 clickButton_InWindow("w_wiz_new_cust","Cancel")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: open_F7_Credit_Decision_Window","Failed", Err.Description,"Y")

//*****************************************************************************************
//@methodName : Validate_CreditDecision_Step_Reference_Number()
//@Author     : Chandra
//@Date       : 27 July 2018
//@Description: This will Validate Step Number and Reference Number Credit Decision Window
//Ex: Validate_CreditDecision_Step_Reference_Number()
//*****************************************************************************************
Validate_CreditDecision_Step_Reference_Number()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").GetAttr( "visible",true
	Step_Reference_Number = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").GetAttr(("regexpwndtitle")
	 writeReportLog("Validation Credit Decision Title: "&Step_Reference_Number,"Passed","","")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed Step/Function: Validate_CreditDecision_Step_Reference_Number","Failed", Err.Description ,"")

////*****************************************************************************************
////@methodName : clickOn_HelpButton_InWindow()
////@Author     : Chandra
////@Date       : 27 July 2018
////@Description: This will Validate Help Button in Credit Decision Window
//
////Ex: clickOn_HelpButton_InWindow("Help")
////*****************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																		//clickOn_HelpButton_InWindow(buttonName)	
//	 
//	if  Pbwindow("pbname:=" & "w_bp_frame").Pbwindow("pbname:=w_wiz_new_cust").PbButton("text:=&" & buttonName).WaitWhileExists 
//		Pbwindow("pbname:=" & "w_bp_frame").Pbwindow("pbname:=w_wiz_new_cust").PbButton("text:=&" & buttonName).Click()
//		 writeReportLog("Display of Help web page was successful","Passed","","Y")
//	else if  Pbwindow("pbname:=" & "w_bp_frame").Pbwindow("pbname:=w_wiz_new_cust").PbButton("text:=" & buttonName).WaitWhileExists 
//		 Pbwindow("pbname:=" & "w_bp_frame").Pbwindow("pbname:=w_wiz_new_cust").PbButton("text:=" & buttonName).Click()
//		  writeReportLog("Display of Help web page was successful","Passed","","Y")
//	else
//		 writeReportLog("Failed to Click on Button : " & buttonName & " in window: " & windowName,"Failed",FailComments,"Button not found")
//	
//	//Error Handling
//	if GetErrorCount()>0  			
//		 writeReportLog("Failed in Step/clickOn_HelpButton_InWindow","Failed", Err.Description ,"")
//	
//
//*****************************************************************************************
//@methodName : chooseLoanType_CreditDecision_Window()
//@Author     : Chandra
//@Date       : 27 July 2018
//@Description: This will Choose a Loan Type in Credit Decision Window
//Ex: chooseLoanType_CreditDecision_Window("Automobile Loan- Interest Bearing")
//*****************************************************************************************
chooseLoanType_CreditDecision_Window(String loanType)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Choosing the Type of Loan
	PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").WinButton("pbname:=cb_next").GetAttr( "visible",true
	Set crdDecision = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_step")
	 SetValue_PBDataWindow(crdDecision,"#1","acct_type",loanType)	
	 writeReportLog("Validation of Choose a Loan Type: "&loanType,"Passed","","")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed Step/Function: chooseLoanType_CreditDecision_Window","Failed", Err.Description ,"")

//*****************************************************************************************
//@methodName : Validate_AutoLoan_RelevantImage_CreditDecisionWindow()
//@Author     : Chandra
//@Date       : 27 July 2018
//@Description: This will Validate Auto Loan Relevant Image in Credit Decision Window
//Ex: Validate_AutoLoan_RelevantImage_CreditDecisionWindow()
//*****************************************************************************************
Validate_AutoLoan_RelevantImage_CreditDecisionWindow()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Validate AutoLoan Relevant Image
	if PbWindow("BranchPlus").InsightObject("AutoLoan_RelevantImage").WaitWhileExists 
		 writeReportLog("Validation of Credit Decision Relevant Image","Passed","","")
	else
		 writeReportLog("Failed Credit Decision Relevant Image","Failed", Err.Description ,"Y")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed Step/Function: Validate_AutoLoan_RelevantImage_CreditDecisionWindow","Failed", Err.Description ,"")

//*****************************************************************************************
//@methodName : Validate_CONFIRM_Message_Window()
//@Author     : Chandra
//@Date       : 27 July 2018
//@Description: This will Validate CONFIRM Dailog Popup message YES, NO, Cancel and Print Buttons in Credit Decision Window
//Ex: Validate_CONFIRM_Message_Window("Yes") 
//*****************************************************************************************
Validate_CONFIRM_Message_Window(String ConfirmButton)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_message").WaitWhileExists 
		if ConfirmButton = "Yes" 
			PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_message").PbButton("regexpwndtitle:=&Yes").Click()
			//Validate Error popup message
			 Validate_ErrorPopup_Title_Message()
		else if ConfirmButton = "No" 
			PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_message").PbButton("regexpwndtitle:=&No").Click()
		else if ConfirmButton = "Cancel" 
			PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_message").PbButton("regexpwndtitle:=Cancel").Click()
		else if ConfirmButton = "Print" 
			PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_message").PbButton("regexpwndtitle:=, Print").Click()
			 writeReportLog("Validation of Printer was successful","Passed","","Y")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Validate_CONFIRM_Message_Window","Failed", Err.Description,"Y")

//*****************************************************************************************
//@methodName : Validate_ErrorPopup_Title_Message()
//@Author     : Chandra
//@Date       : 27 July 2018
//@Description: This will Validate Error Popup Title, message and Click on OK Button in Credit Decision Window
//Ex: Validate_ErrorPopup_Title_Message() 
//*****************************************************************************************
Validate_ErrorPopup_Title_Message()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_message").WinEditor("regexpwndclass:=Edit").WaitWhileExists 
		//Get the Error Popup Title
		ErrorPopupTitle = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_message").GetAttr(("regexpwndtitle")
		//Get the Error Popup Message
		ErrorPopupMessage = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_message").WinEditor("regexpwndclass:=Edit").GetAttr(("text")
		 writeReportLog("Validation of Error Title: "& ErrorPopupTitle &" with Popup Message: "&ErrorPopupMessage,"Passed","","Yes")
		//Click OK Button
		PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_message").PbButton("regexpwndtitle:=OK").Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Validate_ErrorPopup_Title_Message","Failed", Err.Description,"Y")

//*****************************************************************************************
//@methodName : get_InterestType_CreditDecision()
//@Author     : Ranjitha
//@Date       : 27 July 2018
//@Description: This will fetch Interest type value in Credit Decision Window
//Ex:  get_InterestType_CreditDecision()
//*****************************************************************************************
 get_InterestType_CreditDecision()
	//Get Interest type
	PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_step").GetAttr( "visible",True,10000
	Set crdDecision = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_step")
	get_InterestType_CreditDecision = GetValue_PBDataWindow(crdDecision,"#1","int_type")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to get_InterestType_CreditDecision","Failed", Err.Description ,"")
 RemoveFunction
//*****************************************************************************************
//@methodName : selectDealerInfo_CreditDecisionWindow(dealerInfo)
//@Author     : Ranjitha
//@Date       : 27 July 2018
//@Description: This will select Dealer value in Credit Decision Window
//Ex:  selectDealerInfo_CreditDecisionWindow(dealerInfo)
//***************************************************************************************** 
selectDealerInfo_CreditDecisionWindow1(String dealerInfo)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//select dealer
	PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_step").GetAttr( "visible",True,10000
	Set crdDecision = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_step")
	 SetValue_PBDataWindow(crdDecision,"#1","dealer_id",dealerInfo)	
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to selectDealerInfo_CreditDecisionWindow","Failed", Err.Description ,"")

//*****************************************************************************************
//@methodName : select_Representative_CreditDecisionWindow(representName)
//@Author     : Ranjitha
//@Date       : 27 July 2018
//@Description: This will select representative value in Credit Decision Window
//Ex: select_Representative_CreditDecisionWindow("Finance  Dept")
//*****************************************************************************************
select_Representative_CreditDecisionWindow(String representName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set PbTable = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_step")
	 TypeText_PBDataWindow(PbTable,"#1","dealer_rep_id",representName)
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/select_Representative_CreditDecisionWindow","Failed", Err.Description,"")

//*****************************************************************************************
//@methodName : validate_WindowName_CreditDecision(windowName)
//@Author     : Ranjitha
//@Date       : 27 July 2018
//@Description: This will validate the window name in Credit Decision Window
//Ex: validate_WindowName_CreditDecision("dealer")
//*****************************************************************************************
validate_WindowName_CreditDecision(String windowName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbObject("pbname:=u_wiz_cust_"&windowName).WaitWhileExists 
		//Getting Step Number for validation purpose
		Step_Reference_Number = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").GetAttr(("regexpwndtitle")
		split_StepNum = Split(Step_Reference_Number," ")
		for itr = 0 to 5
			StepNum = split_StepNum(itr)
			Step_Number = Step_Number &" "& StepNum
		 writeReportLog("Validation of "& Step_Number & " window is displayed","Passed","","")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to validate_WindowName_CreditDecision","Failed", Err.Description ,"")

//*****************************************************************************************
//@methodName : clickOnBackButton_CreditDecisionWindow()
//@Author     : Ranjitha
//@Date       : 27 July 2018
//@Description: This will Click on Back button in Credit Decision Window
//Ex: clickOnBackButton_CreditDecisionWindow()
//*****************************************************************************************
clickOnBackButton_CreditDecisionWindow()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//click on next
	PbWindow("BranchPlus").PbWindow("CreditDecision").WinButton("pbname:=cb_back").Click()
	Sleep (2)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to clickOnBackButton_CreditDecisionWindow","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: enter_ApplicantZipCode_CreditDecision(zipcode)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter zip code value in Applicant Address window
//Ex:  enter_ApplicantZipCode_CreditDecision(zipcode)
//*****************************************************************************************************************
enter_ApplicantZipCode_CreditDecision(String zipcode)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Applicant Address
	 SleepTillCreditDecisionLoads("STEP 6")
	Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
	//Set Address 1
	 SetValue_PBDataWindow(crdDecision,"#1","zipcode",zipcode)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enter_ApplicantZipCode_CreditDecision","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: enter_ApplicantCity_CreditDecision(city)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter city name in Applicant Address window
//Ex:  enter_ApplicantCity_CreditDecision(city)
//*****************************************************************************************************************
enter_ApplicantCity_CreditDecision(String city)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Applicant Address
	 SleepTillCreditDecisionLoads("STEP 6")
	Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
	//Set Address 1
	 SetValue_PBDataWindow(crdDecision,"#1","city",city)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enter_ApplicantCity_CreditDecision","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: enter_ApplicantAddress1_CreditDecision(add3Name)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter Address1 in Applicant Address window
//Ex:  enter_ApplicantAddress1_CreditDecision(add3Name)
//*****************************************************************************************************************
enter_ApplicantAddress1_CreditDecision(String add1Name)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Applicant Address
	 SleepTillCreditDecisionLoads("STEP 6")
	Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
	//Set Address 1
	 SetValue_PBDataWindow(crdDecision,"#1","addr1",add1Name)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enter_ApplicantAddress1_CreditDecision","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: enter_ApplicantAddress2_CreditDecision(add3Name)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter Address2 in Applicant Address window
//Ex:  enter_ApplicantAddress2_CreditDecision(add3Name)
//*****************************************************************************************************************
enter_ApplicantAddress2_CreditDecision(String add2Name)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Applicant Address
	 SleepTillCreditDecisionLoads("STEP 6")
	Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
	//Set Address 1
	 SetValue_PBDataWindow(crdDecision,"#1","addr2",add2Name)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enter_ApplicantAddress2_CreditDecision","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: enter_ApplicantAddress3_CreditDecision(add3Name)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter Address3 in Applicant Address window
//Ex:  enter_ApplicantAddress3_CreditDecision(add3Name)
//*****************************************************************************************************************
enter_ApplicantAddress3_CreditDecision(String add3Name)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Applicant Address
	 SleepTillCreditDecisionLoads("STEP 6")
	Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
	//Set Address 1
	 SetValue_PBDataWindow(crdDecision,"#1","addr3",add3Name)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enter_ApplicantAddress3_CreditDecision","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: enter_StreetAdd_USPSWindow_CreditDecision(streetadd1)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter street address in USPS Address window
//Ex:  enter_StreetAdd_USPSWindow_CreditDecision(streetadd1)
//*****************************************************************************************************************
enter_StreetAdd_USPSWindow_CreditDecision(String streetadd)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=w_usps_addressverification").WaitWhileExists(5) 
		PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=w_usps_addressverification").PbEdit("pbname:=sle_street").SetValue( streetadd
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enter_StreetAdd_USPSWindow_Credit","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: enter_StreetAdd1_USPSWindow_CreditDecision(streetadd1)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter street address1 in USPS Address window
//Ex:  enter_StreetAdd1_USPSWindow_CreditDecision(streetadd1)
//*****************************************************************************************************************
enter_StreetAdd1_USPSWindow_CreditDecision(String streetadd1)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=w_usps_addressverification").WaitWhileExists(5) 
		PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=w_usps_addressverification").PbEdit("pbname:=sle_street_1").SetValue( streetadd1
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enter_StreetAdd1_USPSWindow_CreditDecision","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: enter_City_USPSWindow_CreditDecision(city)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter city name in USPS Address window
//Ex:  enter_City_USPSWindow_CreditDecision(city)
//*****************************************************************************************************************
enter_City_USPSWindow_CreditDecision(String city)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=w_usps_addressverification").WaitWhileExists(5) 
		PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=w_usps_addressverification").PbEdit("pbname:=sle_city").SetValue( city
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enter_City_USPSWindow_CreditDecision","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: get_FieldValue_USPSwindow(fieldName)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will fetch field value in USPS Address window
//Ex:  get_FieldValue_USPSwindow("sle_street")
//*****************************************************************************************************************
get_FieldValue_USPSwindow(String fieldName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=w_usps_addressverification").PbEdit("pbname:="&fieldName).WaitWhileExists(5) 
		get_FieldValue_USPSwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=w_usps_addressverification").PbEdit("pbname:="&fieldName).GetAttr(("text")
		get_FieldValue_USPSwindow = get_FieldValue_USPSwindow
	 //Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_FieldValue_USPSwindow","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: enter_Homephone_CreditDecision(phone1)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter Home phone  in Applicant Address window
//Ex:  enter_Homephone_CreditDecision(phone1)
//*****************************************************************************************************************
enter_Homephone_CreditDecision(String phone1)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 SetValue_In_PBDataWindow_DP("dw_step","#1","phone1",phone1)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: enter_Homephone_CreditDecision","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: enter_Cellphone_CreditDecision(phone2)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter Cell phone  in Applicant Address window
//Ex:  enter_Cellphone_CreditDecision(phone2)
//*****************************************************************************************************************
enter_Cellphone_CreditDecision(String phone2)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 SetValue_In_PBDataWindow_DP("dw_step","#1","phone2",phone2)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: enter_Cellphone_CreditDecision","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: enter_Otherphone_CreditDecision(phone3)
//@Author Ranjitha
//@Date 30 July 2018
//@Description This will enter Otehr phone  in Applicant Address window
//Ex:  enter_Otherphone_CreditDecision(phone3)
//*****************************************************************************************************************
enter_Otherphone_CreditDecision(String phone3)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 SetValue_In_PBDataWindow_DP("dw_step","#1","phone3",phone3)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: enter_Otherphone_CreditDecision","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: Verification_of_Address1_ApplicantAddressWindow(ID)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Address1 field in Applicant Address window
//Ex:  Verification_of_Address1_ApplicantAddressWindow(ID)
//*****************************************************************************************************************
Verification_of_Address1_ApplicantAddressWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Validate the Error pop to choose auto dealer
		 Validate_ErrorPopup_Title_Message()
		//Enter Address1 with more than 30 chraracters
		 enter_ApplicantAddress1_CreditDecision(random_AlphaNumeric_SplCharacter_String(12))
	//	//Get the Length of Entered value in Address1 field
	//	getValueLength = Len(getValue_In_PBDataWindow_DP("dw_step","#1","addr1"))
	//	//Comparing the Length of accepting characters 
	//	if Length(getValueLength) = 40 
	//		 writeReportLog("Validation of Address1 field is not Accepting Alphabets and Special characters","Passed","","")
	//	else
	//		 writeReportLog("Failed : Address1 is Accepting Alphabets and Special characters: "&getValueLength,"Failed", Err.Description ,"")
	//	
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter Address1 with less than 30 chraracters with only alphabets
		 enter_ApplicantAddress1_CreditDecision(random_AlphaNumeric_String(42))
		//Get the Length of Entered value in Address1 field
		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "addr1")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 40 
			 writeReportLog("Validation of Address1 field is Accepting only 40 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : Address1 field is Accepting More than 40 characters","Failed", Err.Description ,"")
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Click on Reset button
		 Click_Reset_ApplicantAddresswindow()
	//*********************
	//Work Flow
	//*********************
	//Enter Address1 with valid data
	Address1 = random_AlphaCharacter_String(40)
	 enter_ApplicantAddress1_CreditDecision(Address1)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "addr1"))
	//Updated Address1 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "addr1","branchplusqa.bp_applicantaddress","address1",ID)
	 writeReportLog("Entered Address1 value: "& Address1 &" in Applicant Address window (UI-"&getValueLength&",DB-40)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Address1_ApplicantAddressWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Address2_ApplicantAddressWindow(ID)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Address2 field in Applicant Address window
//Ex:  Verification_of_Address2_ApplicantAddressWindow(ID)
//*****************************************************************************************************************
Verification_of_Address2_ApplicantAddressWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter Address2 with more than 30 chraracters
		 enter_ApplicantAddress2_CreditDecision(random_AlphaNumeric_SplCharacter_String(42))
	//	//Get the Length of Entered value in Address2 field
	//	getValueLength = Len(getValue_In_PBDataWindow_DP("dw_step","#1", "addr2"))
	//	//Comparing the Length of accepting characters 
	//	if Length(getValueLength) = 40 
	//		 writeReportLog("Validation of Address2 field is is not Accepting Alphabets and Special characters","Passed","","")
	//	else
	//		 writeReportLog("Failed : Address2 is Accepting Alphabets and Special characters: "&getValueLength,"Failed", Err.Description ,"")
	//	
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter Address2 with less than 30 chraracters with only alphabets
		 enter_ApplicantAddress2_CreditDecision(random_AlphaNumeric_String(42))
		//Get the Length of Entered value in Address2 field
		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "addr2")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 40 
			 writeReportLog("Validation of Address2 field is Accepting only 40 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : Address2 field is not Accepting More than 40 characters","Failed", Err.Description ,"")
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Address2 with valid data
	Address2 = random_AlphaCharacter_String(40)
	 enter_ApplicantAddress2_CreditDecision(Address2)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "addr2"))
	//Updated Address2 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "addr2","branchplusqa.bp_applicantaddress","address2",ID)
	 writeReportLog("Entered Address2 value: "& Address2 &" in Applicant Address window (UI-"&getValueLength&",DB-40)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Address2_ApplicantAddressWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Address3_ApplicantAddressWindow(ID)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Address3 field in Applicant Address window
//Ex:  Verification_of_Address3_ApplicantAddressWindow(ID)
//*****************************************************************************************************************
Verification_of_Address3_ApplicantAddressWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter Address3 with more than 30 chraracters
		 enter_ApplicantAddress3_CreditDecision(random_AlphaNumeric_SplCharacter_String(42))
	//	//Get the Length of Entered value in Address3 field
	//	getValueLength = Len(getValue_In_PBDataWindow_DP("dw_step","#1", "addr3"))
	//	//Comparing the Length of accepting characters 
	//	if Length(getValueLength) = 40 
	//		 writeReportLog("Validation of Address3 field is Accepting only 30 characters: "&getValueLength,"Passed","","")
	//	else
	//		 writeReportLog("Failed : Address3 field is not Accepting More than 30 characters","Failed", Err.Description ,"")
	//	
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter Address3 with less than 30 chraracters with only alphabets
		 enter_ApplicantAddress3_CreditDecision(random_AlphaNumeric_String(42))
		//Get the Length of Entered value in Addres3 field
		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "addr3")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 40 
			 writeReportLog("Validation of Address3 field is Accepting only 40 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : Address3 field is not Accepting More than 40 characters","Failed", Err.Description ,"")
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//*************************
	//Work Flow
	//*************************
	//Enter Address3 with valid data
	Address3 = random_AlphaCharacter_String(40)
	 enter_ApplicantAddress3_CreditDecision(Address3)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "addr3"))
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "addr3","branchplusqa.bp_applicantaddress","address3",ID)
	 writeReportLog("Entered Address3 value: "& Address3 &" in Applicant Address window (UI-"&getValueLength&",DB-40)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Address3_ApplicantAddressWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_City_ApplicantAddressWindow(city)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the City field in Applicant Address window
//Ex:  Verification_of_City_ApplicantAddressWindow(city)
//*****************************************************************************************************************
Verification_of_City_ApplicantAddressWindow(String city)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter City with more than 6 chraracters
		 enter_ApplicantCity_CreditDecision(random_AlphaNumeric_SplCharacter_String(32))
	//	//Get the Length of Entered value in City field
	//	getValueLength = Len(getValue_In_PBDataWindow_DP("dw_step","#1", "city"))
	//	//Comparing the Length of accepting characters 
	//	if Length(getValueLength) = 30 
	//		 writeReportLog("Validation of City field is Accepting only 30 characters: "&getValueLength,"Passed","","")
	//	else
	//		 writeReportLog("Failed : City field is not Accepting More than 30 characters","Failed", Err.Description ,"")
	//	
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter City with more than 30 characters with only alphabets
		 enter_ApplicantCity_CreditDecision(random_AlphaNumeric_String(32))
		//Get the Length of Entered value in city field
		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "city")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 30 
			 writeReportLog("Validation of City field is Accepting only 30 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : City field is not Accepting More than 30 characters","Failed", Err.Description ,"")
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//******************************
	//Work Flow
	//******************************
	//Enter City with valid data
	 enter_ApplicantCity_CreditDecision(city)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_City_ApplicantAddressWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ZipCode_ApplicantAddressWindow(zipcode)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Zip Code field in Applicant Address window
//Ex:  Verification_of_ZipCode_ApplicantAddressWindow(zipcode)
//*****************************************************************************************************************
Verification_of_ZipCode_ApplicantAddressWindow(String zipcode)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//	//Enter Zip code with more than 6 chraracters
	//	 enter_ApplicantZipCode_CreditDecision(random_AlphaCharacter_String(5))
	//
	//	//Get the Length of Entered value in zip code field
	//	getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "zipcode")
	//	//Comparing the Length of accepting characters 
	//	if Length(getValueLength) = "" 
	//		 writeReportLog("Validation of Zip Code field is not Accepting characters","Passed","","")
	//	else
	//		 writeReportLog("Failed : Zip Code field is Accepting characters: "&getValueLength,"Failed", Err.Description ,"")
	//	
	//	
	//	//Click on  button
	//	 clickOnButton_CreditDecisionWindow()
	//	 handleUSPSWindow()
	//	
	//	//Click on back button
	//	 clickOnBackButton_CreditDecisionWindow()
		//Enter Zip Code with 10 digits 
		 enter_ApplicantZipCode_CreditDecision(Generate_RandomNumber(10))
		//Get the Length of Entered value in zip code field
		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "zipcode")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 9 
			 writeReportLog("Validation of Zip Code field is Accepting only 9 digits","Passed","","")
		else
			 writeReportLog("Failed : Zip Code field is not Accepting more than 9 digits: "&getValueLength,"Failed", Err.Description ,"")
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
	//	//Click on back button
	//	 clickOnBackButton_CreditDecisionWindow()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//********************
	//Work Flow
	//*********************
	//Enter Zip Code with valid data
	 enter_ApplicantZipCode_CreditDecision(zipcode)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ZipCode_ApplicantAddressWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_HomePhone_ApplicantAddressWindow(ID)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Home Phone field in Applicant Address window
//Ex:  Verification_of_HomePhone_ApplicantAddressWindow(ID)
//*****************************************************************************************************************
Verification_of_HomePhone_ApplicantAddressWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//*********************
//		//Field Validation
//		//*********************
//		//Click on  button
//	//	 clickOnButton_CreditDecisionWindow()
//	//	 handleUSPSWindow()
//	//	 handleUSPSWindow_CoApplicant()
//	//	 handleUSPSWindow_CoApplicant()
//	//	
//	//	//Click on back button
//	//	 clickOnBackButton_CreditDecisionWindow()
//		
//	//	//Enter Home Phone with chraracters
//	//	 enter_Homephone_CreditDecision(random_AlphaCharacter_String(10))
//	//	
//	//	//Get the Length of Entered value in home phone field
//	//	getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "phone1")
//	//	//Comparing the Length of accepting characters 
//	//	if Length(getValueLength) = "" 
//	//		 writeReportLog("Validation of Home Phone field is not Accepting characters","Passed","","")
//	//	else
//	//		 writeReportLog("Failed : Home Phone field is Accepting characters: "&getValueLength,"Failed", Err.Description ,"")
//	//	
//	//	
//	//	//Click on  button
//	//	 clickOnButton_CreditDecisionWindow()
//	//	 handleUSPSWindow()
//	//	
//	//	//Click on back button
//	//	 clickOnBackButton_CreditDecisionWindow()
//		
//		//Enter Home Phone with more than 10 digits
//		 enter_Homephone_CreditDecision(Generate_RandomNumber(11))
//		
//		//Get the Length of Entered value in home phone field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "phone1")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 10 
//			 writeReportLog("Validation of Home Phone field is Accepting only 10 digits","Passed","","")
//		else
//			 writeReportLog("Failed : Home Phone field is Accepting more than 10 digits: "&getValueLength,"Failed", Err.Description ,"")
//		
//		
//		//Click on  button
//	//	 clickOnButton_CreditDecisionWindow()
//	//	 handleUSPSWindow()
//	//	 handleUSPSWindow_CoApplicant()
//	//	 handleUSPSWindow_CoApplicant()
//	//	
//	//	//Click on back button
//	//	 clickOnBackButton_CreditDecisionWindow()
//	
	//******************
	//Work Flow
	//******************
	//Enter Home Phone with valid 10 digit characters
	phone1 = Generate_RandomNumber(10)
	 enter_Homephone_CreditDecision(phone1)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "phone1"))
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "phone1","branchplusqa.bp_applicantaddress","homephone",ID)
	 writeReportLog("Entered Home Phone value: "& phone1 &" in Applicant Address window (UI-"&getValueLength&",DB-10)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_HomePhone_ApplicantAddressWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_CellPhone_ApplicantAddressWindow(ID)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Cell Phone field in Applicant Address window
//Ex:  Verification_of_CellPhone_ApplicantAddressWindow(ID)
//*****************************************************************************************************************
Verification_of_CellPhone_ApplicantAddressWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//*********************
//		//Field Validation
//		//*********************
//		//Click on  button
//	//	 clickOnButton_CreditDecisionWindow()
//	//	 handleUSPSWindow()
//	//	 handleUSPSWindow_CoApplicant()
//	//	 handleUSPSWindow_CoApplicant()
//	//	
//	//	//Click on back button
//	//	 clickOnBackButton_CreditDecisionWindow()
//		
//	//	//Enter Cell Phone with chraracters
//	//	 enter_Cellphone_CreditDecision(random_AlphaCharacter_String(10))
//	//	
//	//	//Get the Length of Entered value in cell phone field
//	//	getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "phone2")
//	//	//Comparing the Length of accepting characters 
//	//	if Length(getValueLength) = "" 
//	//		 writeReportLog("Validation of Cell Phone field is not Accepting characters","Passed","","")
//	//	else
//	//		 writeReportLog("Failed : Cell Phone field is Accepting characters: "&getValueLength,"Failed", Err.Description ,"")
//	//	
//	//	
//	//	//Click on  button
//	//	 clickOnButton_CreditDecisionWindow()
//	//	 handleUSPSWindow()
//	//	
//	//	//Click on back button
//	//	 clickOnBackButton_CreditDecisionWindow()
//		
//		//Enter Cell Phone with more than 10 digits
//		 enter_Cellphone_CreditDecision(Generate_RandomNumber(11))
//		
//		//Get the Length of Entered value in cell phone field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "phone2")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 10 
//			 writeReportLog("Validation of Cell Phone field is Accepting only 10 digits","Passed","","")
//		else
//			 writeReportLog("Failed : Cell Phone field is Accepting more than 10 digits: "&getValueLength,"Failed", Err.Description ,"")
//		
//		
//	//	//Click on  button
//	//	 clickOnButton_CreditDecisionWindow()
//	//	 handleUSPSWindow()
//	//	 handleUSPSWindow_CoApplicant()
//	//	 handleUSPSWindow_CoApplicant()
//	//	
//	//	//Click on back button
//	//	 clickOnBackButton_CreditDecisionWindow()
//	
	//**********************
	//Work Flow
	//**********************
	//Enter Cell Phone with valid 10 digit characters
	phone2 = Generate_RandomNumber(10)
	 enter_Cellphone_CreditDecision(phone2)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "phone2"))
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "phone2","branchplusqa.bp_applicantaddress","cellphone",ID)
	 writeReportLog("Entered Cell Phone value: "& phone2 &" in Applicant Address window (UI-"&getValueLength&",DB-10)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_CellPhone_ApplicantAddressWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_OtherPhone_ApplicantAddressWindow(ID)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Other Phone field in Applicant Address window
//Ex:  Verification_of_OtherPhone_ApplicantAddressWindow(ID)
//*****************************************************************************************************************
Verification_of_OtherPhone_ApplicantAddressWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//*********************
//		//Field Validation
//		//*********************
//		//Click on  button
//	//	 clickOnButton_CreditDecisionWindow()
//	//	 handleUSPSWindow()
//	//	 handleUSPSWindow_CoApplicant()
//	//	 handleUSPSWindow_CoApplicant()
//	//	
//	//	//Click on back button
//	//	 clickOnBackButton_CreditDecisionWindow()
//	//	
//	//	//Enter Other Phone with chraracters
//	//	 enter_Otherphone_CreditDecision(random_AlphaCharacter_String(10))
//	//	
//	//	//Get the Length of Entered value in Other phone field
//	//	getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "phone3")
//	//	//Comparing the Length of accepting characters 
//	//	if Length(getValueLength) = "" 
//	//		 writeReportLog("Validation of Other Phone field is not Accepting characters","Passed","","")
//	//	else
//	//		 writeReportLog("Failed : Other Phone field is Accepting characters: "&getValueLength,"Failed", Err.Description ,"")
//	//	
//	//	
//	//	//Click on  button
//	//	 clickOnButton_CreditDecisionWindow()
//	//	 handleUSPSWindow()
//	//	
//	//	//Click on back button
//	//	 clickOnBackButton_CreditDecisionWindow()
//		
//		//Enter Other Phone with more than 10 digits
//		 enter_Otherphone_CreditDecision(Generate_RandomNumber(11))
//			
//		//Get the Length of Entered value in other phone field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "phone3")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 10 
//			 writeReportLog("Validation of Other Phone field is Accepting only 10 digits","Passed","","")
//		else
//			 writeReportLog("Failed : Other Phone field is Accepting more than 10 digits: "&getValueLength,"Failed", Err.Description ,"")
//		
//			
//		//Click on  button
//	//	 clickOnButton_CreditDecisionWindow()
//	//	 handleUSPSWindow()
//	//	 handleUSPSWindow_CoApplicant()
//	//	 handleUSPSWindow_CoApplicant()
//	//	
//	//	//Click on back button
//	//	 clickOnBackButton_CreditDecisionWindow()
//	
	//*************************
	//Work Flow
	//*************************
	//Enter Other Phone with valid 10 digit characters
	phone3 = Generate_RandomNumber(10)
	 enter_Otherphone_CreditDecision(phone3)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "phone3"))
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "phone3","branchplusqa.bp_applicantaddress","otherphone",ID)
	 writeReportLog("Entered Other Phone value: "& phone3 &" in Applicant Address window (UI-"&getValueLength&",DB-10)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_OtherPhone_ApplicantAddressWindow","Failed", Err.Description,"Y")
Remove
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//*****************************************************************************************************************
//@methodName: Verification_of_data_USPSAddressWindow()
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will validate the data in USPS Address window
//Ex:  Verification_of_data_USPSAddressWindow()
//*****************************************************************************************************************
Verification_of_data_USPSAddressWindow()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Click on  button
	 clickOnButton_CreditDecisionWindow()
	 handleUSPSWindow()
	 handleUSPSWindow_CoApplicant()
	 handleUSPSWindow_CoApplicant()
	//Validate Error pop up
	 Validate_ErrorPopup_Title_Message()
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbObject("pbname:=u_wiz_cust_emplmt1").WaitWhileExists 
		//Click on back button
		 clickOnBackButton_CreditDecisionWindow()
//	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbObject("pbname:=dw_step").WaitWhileExists 
//		//Click on back button
//		 clickOnBackButton_CreditDecisionWindow()
//	
	Environment.Value("add1") = UCase(getValue_In_PBDataWindow_DP("dw_step","#1","addr1"))
	Environment.Value("add2") = ToUpper(getValue_In_PBDataWindow_DP("dw_step","#1","addr2"))
	Environment.Value("city") = ToUpper(getValue_In_PBDataWindow_DP("dw_step","#1","city"))
	Environment.Value("zip") = getValue_In_PBDataWindow_DP("dw_step","#1","zipcode")
	zipcode_UPSC_Wndw = Replace(Environment.Value("zip")," ","")
	Environment.Value("zip") = zipcode_UPSC_Wndw
	//Click on  button 
	 clickOnButton_CreditDecisionWindow()
	Environment.Value("streetadd1_USPS") = ToUpper(get_FieldValue_USPSwindow("sle_street") )
	Environment.Value("streetadd2_USPS") = ToUpper(get_FieldValue_USPSwindow("sle_street_1") )
	Environment.Value("city_USPS") = ToUpper(get_FieldValue_USPSwindow("sle_city"))
	Environment.Value("zip_USPS") = get_FieldValue_USPSwindow("em_zip5")
	zipcode_Wndw = Replace(Environment.Value("zip_USPS")," ","")
	Environment.Value("zip_USPS") = zipcode_Wndw
	 validateDataAndReport(Environment.Value("streetadd1_USPS"),Environment.Value("add1"),"Validation of Address1 field in USPS window :"&Environment.Value("streetadd1_USPS")& " and Applicant Address window :"&Environment.Value("add1"))
	 validateDataAndReport(Environment.Value("streetadd2_USPS"),Environment.Value("add2"),"Validation of Address2 field in USPS window :"&Environment.Value("streetadd2_USPS")& " and Applicant Address window :"&Environment.Value("add2"))
	 validateDataAndReport(Environment.Value("city_USPS"),Environment.Value("city"),"Validation of City field in USPS window :"&Environment.Value("city_USPS")& " and Applicant Address window :"&Environment.Value("city"))
	 validateDataAndReport(Environment.Value("zip_USPS"),Environment.Value("zip"),"Validation of Zip Code field in USPS window :"&Environment.Value("zip_USPS")& " and Applicant Address window :"&Environment.Value("zip"))
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_data_USPSAddressWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Validation_of_ShowOriginal_Button_USPSAddressWindow(buttonName)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will validate the Show Original button functionality in USPS Address window
//Ex:  Validation_of_ShowOriginal_Button_USPSAddressWindow(buttonName)
//*****************************************************************************************************************
Validation_of_ShowOriginal_Button_USPSAddressWindow(String buttonName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 enter_StreetAdd_USPSWindow_CreditDecision(random_AlphaNumeric_String(10))
	 enter_StreetAdd1_USPSWindow_CreditDecision(random_AlphaNumeric_String(10))
	 enter_City_USPSWindow_CreditDecision(random_AlphaNumeric_String(10))
	 click_Button_InWindow_DP("w_wiz_new_cust","w_usps_addressverification",buttonName)
	 validateDataAndReport(Environment.Value("streetadd1_USPS"),Environment.Value("add1"),"Validation of Address1 field in USPS window :"&Environment.Value("streetadd1_USPS")& " and Applicant Address window :"&Environment.Value("add1"))
	 validateDataAndReport(Environment.Value("streetadd2_USPS"),Environment.Value("add2"),"Validation of Address2 field in USPS window :"&Environment.Value("streetadd2_USPS")& " and Applicant Address window :"&Environment.Value("add2"))
	 validateDataAndReport(Environment.Value("city_USPS"),Environment.Value("city"),"Validation of City field in USPS window :"&Environment.Value("city_USPS")& " and Applicant Address window :"&Environment.Value("city"))
	//Click on Use Address Above button
	 handleUSPSWindow()
	 handleUSPSWindow_CoApplicant()
	 handleUSPSWindow_CoApplicant()
	 Validate_ErrorPopup_Title_Message()
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbObject("pbname:=u_wiz_cust_emplmt1").WaitWhileExists 
		//Click on back button
		 clickOnBackButton_CreditDecisionWindow()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Validation_of_ShowOriginal_Button_USPSAddressWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Validation_of_CreditCheck_Window(outputType)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will validate the data in Credit Check window
//Ex  Validation_of_CreditCheck_Window("Persona Plus")
//******************************************************************************************************************
Validation_of_CreditCheck_Window(String outputType)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Click on Credit OK button
	 Click_Applicant_Credit_Check()
	//Select bureau id and output type
	 select_CreditBureau_CreditCheckWindow("EQUIFAX")
	 select_OutputType_CreditCheckWindow(outputType)
	//Validate data in credit Check window
	lName = UCase(getValue_CreditCheckWindow("last_name"))
	fName = UCase(getValue_CreditCheckWindow("first_name"))
	ssn_crdtwndw = getValue_CreditCheckWindow("ssn")
	city_crdtwndw = UCase(getValue_CreditCheckWindow("city"))
	zipcode_crdtwndw = getValue_CreditCheckWindow("zipcode")
	 validateDataAndReport(lName,Environment.Value("lastName"),"Validation of Last Name in Credit Check window :"&lName& " and in Applicant Address window :"&Environment.Value("lastName"))
	 validateDataAndReport(fName,Environment.Value("firstName"),"Validation of First Name in Credit Check window :"&fName& " and in Applicant Address window :"&Environment.Value("firstName"))
	 validateDataAndReport(ssn_crdtwndw,Environment.Value("SSN"),"Validation of SSN in Credit Check window :"&"xxxxx"&Right(ssn_crdtwndw,4)& " and in Applicant Address window :"&"xxxxx"&Right(Environment.Value("SSN"),4))
	 validateDataAndReport(city_crdtwndw,Environment.Value("city"),"Validation of City in Credit Check window :"&city_crdtwndw& " and in Applicant Address window :"&Environment.Value("city"))
	 validateDataAndReport(zipcode_crdtwndw,Environment.Value("zip"),"Validation of Zip Code in Credit Check window :"&zipcode_crdtwndw& " and in Applicant Address window :"&Environment.Value("zip"))
	//Click on Get Report button
	 click_Button_InWindow_DP("w_wiz_new_cust","w_creditcheck","Get Report")
	Set repObj = PbWindow("BranchPlus").PbWindow("CreditDecision").PbWindow("Creditcheck").PbWindow("CreditReport").PbDataWindow("Reportdetails")
	//Fetching Report Content
	verifytitlecreditReport = GetValue_PBDataWindow(repObj,"#1","text_line")
	verifyalertsCreditReport = GetValue_PBDataWindow(repObj,"#4","text_line")
	//Validating for Credit Report Generation
	 validatePartialDataAndReport(verifytitlecreditReport,"THIS FORM PRODUCED BY EQUIFAX","Validate Title in Credit Report "&verifytitlecreditReport)
	// validatePartialDataAndReport(verifyalertsCreditReport,"IDENTITY SCAN .*","Validate Alert text in Credit Report "&verifyalertsCreditReport)
	if outputType = "Persona Plus" 
	else
		verifyvalue1CreditReport = GetValue_PBDataWindow(repObj,"#10","text_line")
		verifyvalue2CreditReport = GetValue_PBDataWindow(repObj,"#12","text_line")
		verifyvalue3CreditReport = GetValue_PBDataWindow(repObj,"#14","text_line")
		//Validating for Credit Report
//		 validatePartialDataAndReport(verifyvalue1CreditReport,"COMPLIANCE DATA CENTER, INC. ","Validate Report in Credit Report "&verifyvalue1CreditReport)
//		 validatePartialDataAndReport(verifyvalue2CreditReport,"*NO MATCH FOUND IN CDC//S OFAC DATABASE ","Validate Report in Credit Report "&verifyvalue2CreditReport)
//		 validatePartialDataAndReport(verifyvalue3CreditReport,"*   END OF REPORT, COMPLIANCE DATA CENTER, INC.","Validate Report in Credit Report "&verifyvalue3CreditReport)
	//Click on Close button
	PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_creditcheck").PbWindow("pbname:=w_view_report").PbButton("pbname:=cb_close").Click()
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to Validation_of_CreditCheck_Window","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: select_CreditBureau_CreditCheckWindow(valueToSelect)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will select the credit bureau id in Credit Check window
//Ex  select_CreditBureau_CreditCheckWindow("EQUIFAX")
//******************************************************************************************************************
select_CreditBureau_CreditCheckWindow(String valueToSelect)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set crdtwndw = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_creditcheck").PbDataWindow("pbname:=dw_creditcheck")
	Sleep (2)
	 TypeText_PBDataWindow(crdtwndw,"#1","#21",valueToSelect)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to select_CreditBureau_CreditCheckWindow","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: select_OutputType_CreditCheckWindow(valueToSelect)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will select the output value in Credit Check window
//Ex  select_OutputType_CreditCheckWindow("Acrofile Plus Directory")
//******************************************************************************************************************
select_OutputType_CreditCheckWindow(String valueToSelect)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set crdtwndw = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_creditcheck").PbDataWindow("pbname:=dw_creditcheck")
	 TypeText_PBDataWindow(crdtwndw,"#1","#4",valueToSelect)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to select_OutputType_CreditCheckWindow","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: getValue_CreditCheckWindow(ColName)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will fetch the value in Credit Check window
//Ex  getValue_CreditCheckWindow("zipcode")
//******************************************************************************************************************
getValue_CreditCheckWindow(String ColName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_creditcheck").PbDataWindow("pbname:=dw_creditcheck").WaitWhileExists 
		CellValue = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_creditcheck").PbDataWindow("pbname:=dw_creditcheck").GetCellData("#1",ColName)
	getValue_CreditCheckWindow = CellValue
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: getValue_CreditCheckWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Address1_CoApplicantAddressWindow(Address1)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Address1 field of Co Applicant in Applicant window
//Ex  Verification_of_Address1_CoApplicantAddressWindow(Address1)
//******************************************************************************************************************
Verification_of_Address1_CoApplicantAddressWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Validate the Error pop to choose auto dealer
		// Validate_ErrorPopup_Title_Message()
		//Enter Address1 with more than 30 chraracters
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr1",random_AlphaNumeric_SplCharacter_String(12))
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Click on Copy button 
		 Click_Copy_CoApplicantwindow()
		//Clcik on reset Button 
		 Click_Reset_CoApplicantwindow()
		//Enter Address1 with less than 30 chraracters with only alphabets
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr1",random_AlphaNumeric_String(32))
		//Get the Length of Entered value in Address1 field
		getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "addr1")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 30 
			 writeReportLog("Validation of Address1 field is Accepting only 40 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : Address1 field is Accepting More than 40 characters","Failed", Err.Description ,"")
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Address1 with valid data
	Address1 = random_AlphaCharacter_String(40)
	 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr1",Address1)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_coapp","#1", "addr1"))
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_coapp", "#1", "addr1","branchplusqa.bp_applicantaddress","joint_address1",Environment.Value("ID"))
	 writeReportLog("Entered Co Applicant Address1 value: "& Address1 &" in Applicant Address window (UI-"&getValueLength&",DB-40)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Address1_CoApplicantAddressWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Address2_CoApplicantAddressWindow(Address2)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Address2 field of Co Applicant in Applicant window
//Ex  Verification_of_Address2_CoApplicantAddressWindow(Address2)
//******************************************************************************************************************
Verification_of_Address2_CoApplicantAddressWindow(String Address2)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Validate the Error pop to choose auto dealer
		// Validate_ErrorPopup_Title_Message()
		//Enter Address2 with more than 30 chraracters
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr2",random_AlphaNumeric_SplCharacter_String(12))
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter Address2 with less than 30 chraracters with only alphabets
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr2",random_AlphaNumeric_String(42))
		//Get the Length of Entered value in Address2 field
		getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "addr2")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 30 
			 writeReportLog("Validation of Address2 field is Accepting only 30 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : Address2 field is Accepting More than 30 characters","Failed", Err.Description ,"")
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Address2 with valid data
	Address2 = random_AlphaCharacter_String(40)
	 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr2",Address2)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_coapp","#1", "addr2"))
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_coapp", "#1", "addr2","branchplusqa.bp_applicantaddress","joint_address2",Environment.Value("ID"))
	 writeReportLog("Entered Co Applicant Address2 value: "& Address2 &" in Applicant Address window (UI-"&getValueLength&",DB-40)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Address2_CoApplicantAddressWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Address3_CoApplicantAddressWindow(Address3)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Address3 field of Co Applicant in Applicant window
//Ex  Verification_of_Address3_CoApplicantAddressWindow(Address3)
//******************************************************************************************************************
Verification_of_Address3_CoApplicantAddressWindow(String Address3)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Validate the Error pop to choose auto dealer
		// Validate_ErrorPopup_Title_Message()
		//Enter Address3 with more than 30 chraracters
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr3",random_AlphaNumeric_SplCharacter_String(12))
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter Address3 with less than 30 chraracters with only alphabets
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr3",random_AlphaNumeric_String(42))
		//Get the Length of Entered value in Address3 field
		getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "addr3")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 30 
			 writeReportLog("Validation of Address3 field is Accepting only 40 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : Address3 field is Accepting More than 40 characters","Failed", Err.Description ,"")
		//Click on next button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Address3 with valid data
	Address3 = random_AlphaCharacter_String(40)
	 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "addr3",Address3)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_coapp","#1", "addr3"))
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_coapp", "#1", "addr3","branchplusqa.bp_applicantaddress","joint_address3",Environment.Value("ID"))
	 writeReportLog("Entered Co Applicant Address3 value: "& Address2 &" in Applicant Address window (UI-"&getValueLength&",DB-40)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Address3_CoApplicantAddressWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ZipCode_CoApplicant_ApplicantAddressWindow(zipcode)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the zip code field of Co Applicant in Applicant window
//Ex  Verification_of_ZipCode_CoApplicant_ApplicantAddressWindow(zipcode)
//******************************************************************************************************************
Verification_of_ZipCode_CoApplicant_ApplicantAddressWindow()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter Zip Code with 10 digits 
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "zipcode",Generate_RandomNumber(10))
		//Get the Length of Entered value in zip code field
		getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "zipcode")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 9 
			 writeReportLog("Validation of Zip Code field is Accepting only 9 digits","Passed","","")
		else
			 writeReportLog("Failed : Zip Code field is not Accepting more than 9 digits: "&getValueLength,"Failed", Err.Description ,"")
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
	//	//Click on back button
	//	 clickOnBackButton_CreditDecisionWindow()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//********************
	//Work Flow
	//*********************
	//Enter Zip Code with valid data
	 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "zipcode",Environment.Value("Joint_CoApp_zipcode"))
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ZipCode_CoApplicant_ApplicantAddressWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_City_CoApplicant_ApplicantAddressWindow(city)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the city field of Co Applicant in Applicant window
//Ex  Verification_of_City_CoApplicant_ApplicantAddressWindow(city)
//******************************************************************************************************************
Verification_of_City_CoApplicant_ApplicantAddressWindow(String city)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter City with more than 6 chraracters
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1","city",random_AlphaNumeric_SplCharacter_String(32))
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
		//Enter City with more than 30 characters with only alphabets
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1","city",random_AlphaNumeric_String(32))
		//Get the Length of Entered value in city field
		getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "city")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 30 
			 writeReportLog("Validation of City field is Accepting only 30 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : City field is not Accepting More than 30 characters","Failed", Err.Description ,"")
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		 handleUSPSWindow()
		 handleUSPSWindow_CoApplicant()
		 handleUSPSWindow_CoApplicant()
		//Validate the Error pop up
		 Validate_ErrorPopup_Title_Message()
	//******************************
	//Work Flow
	//******************************
	//Enter City with valid data
	 SetValue_In_PBDataWindow_DP("dw_coapp","#1","city",city)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_City_CoApplicant_ApplicantAddressWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_HomePhone_CoApplicant_ApplicantAddressWindow(phone1)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Home Phone field of Co Applicant in Applicant window
//Ex  Verification_of_HomePhone_CoApplicant_ApplicantAddressWindow(phone1)
//******************************************************************************************************************
Verification_of_HomePhone_CoApplicant_ApplicantAddressWindow(String phone1)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//*********************
//		//Field Validation
//		//*********************
//		//Click on  button
//		 clickOnButton_CreditDecisionWindow()
//		 handleUSPSWindow()
//		 handleUSPSWindow_CoApplicant()
//		 handleUSPSWindow_CoApplicant()
//		
//		//Click on back button
//		 clickOnBackButton_CreditDecisionWindow()
//		
//		//Enter Home Phone with more than 10 digits
//		 SetValue_In_PBDataWindow_DP("dw_coapp","#1","phone1",Generate_RandomNumber(11))
//		
//		//Click on  button
//		 clickOnButton_CreditDecisionWindow()
//		 handleUSPSWindow()
//		 handleUSPSWindow_CoApplicant()
//		 handleUSPSWindow_CoApplicant()
//		
//		//Click on back button
//		 clickOnBackButton_CreditDecisionWindow()
//		
//		//Get the Length of Entered value in home phone field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "phone1")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 10 
//			 writeReportLog("Validation of Home Phone field is Accepting only 10 digits","Passed","","")
//		else
//			 writeReportLog("Failed : Home Phone field is Accepting more than 10 digits: "&getValueLength,"Failed", Err.Description ,"")
//		
//	
	//******************
	//Work Flow
	//******************
	//Enter Home Phone with valid 10 digit characters
	phone1 = Generate_RandomNumber(10)
	 SetValue_In_PBDataWindow_DP("dw_coapp","#1","phone1",phone1)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_coapp","#1", "phone1"))
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_coapp", "#1", "phone1","branchplusqa.bp_applicantaddress","joint_homephone",Environment.Value("ID"))
	 writeReportLog("Entered Co Applicant Home Phone value: "& phone1 &" in Applicant Address window (UI-"&getValueLength&",DB-10)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_HomePhone_CoApplicant_ApplicantAddressWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_CellPhone_CoApplicant_ApplicantAddressWindow(phone2)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Cell Phone field of Co Applicant in Applicant window
//Ex  Verification_of_CellPhone_CoApplicant_ApplicantAddressWindow(phone2)
//******************************************************************************************************************
Verification_of_CellPhone_CoApplicant_ApplicantAddressWindow(String phone2)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//*********************
//		//Field Validation
//		//*********************
//		//Click on  button
//		 clickOnButton_CreditDecisionWindow()
//		 handleUSPSWindow()
//		 handleUSPSWindow_CoApplicant()
//		 handleUSPSWindow_CoApplicant()
//		
//		//Click on back button
//		 clickOnBackButton_CreditDecisionWindow()
//		
//		//Enter Cell Phone with more than 10 digits
//		 SetValue_In_PBDataWindow_DP("dw_coapp","#1","phone2",Generate_RandomNumber(11))
//		
//		//Get the Length of Entered value in Cell phone field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "phone2")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 10 
//			 writeReportLog("Validation of Cell Phone field is Accepting only 10 digits","Passed","","")
//		else
//			 writeReportLog("Failed : Cell Phone field is Accepting more than 10 digits: "&getValueLength,"Failed", Err.Description ,"")
//		
//		
//		//Click on  button
//		 clickOnButton_CreditDecisionWindow()
//		 handleUSPSWindow()
//		 handleUSPSWindow_CoApplicant()
//		 handleUSPSWindow_CoApplicant()
//		
//		//Click on back button
//		 clickOnBackButton_CreditDecisionWindow()
//	
	//******************
	//Work Flow
	//******************
	//Enter Cell Phone with valid 10 digit characters
	phone2 = Generate_RandomNumber(10)
	 SetValue_In_PBDataWindow_DP("dw_coapp","#1","phone2",phone2)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_coapp","#1", "phone2"))
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_coapp", "#1", "phone2","branchplusqa.bp_applicantaddress","joint_cellphone",Environment.Value("ID"))
	 writeReportLog("Entered Co Applicant Cell Phone value: "& phone2 &" in Applicant Address window (UI-"&getValueLength&",DB-10)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_CellPhone_CoApplicant_ApplicantAddressWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_OtherPhone_CoApplicant_ApplicantAddressWindow(phone3)
//@Author Ranjitha
//@Date 31 July 2018
//@Description This will verify the Other Phone field of Co Applicant in Applicant window
//Ex  Verification_of_OtherPhone_CoApplicant_ApplicantAddressWindow(phone3)
//******************************************************************************************************************
Verification_of_OtherPhone_CoApplicant_ApplicantAddressWindow(String phone3)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//*********************
//		//Field Validation
//		//*********************
//		//Click on  button
//		 clickOnButton_CreditDecisionWindow()
//		 handleUSPSWindow()
//		 handleUSPSWindow_CoApplicant()
//		 handleUSPSWindow_CoApplicant()
//		
//		//Click on back button
//		 clickOnBackButton_CreditDecisionWindow()
//		
//		//Enter Other Phone with more than 10 digits
//		 SetValue_In_PBDataWindow_DP("dw_coapp","#1","phone3",Generate_RandomNumber(11))
//		
//		//Get the Length of Entered value in Other phone field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "phone3")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 10 
//			 writeReportLog("Validation of Other Phone field is Accepting only 10 digits","Passed","","")
//		else
//			 writeReportLog("Failed : Other Phone field is Accepting more than 10 digits: "&getValueLength,"Failed", Err.Description ,"")
//		
//		
//		//Click on  button
//		 clickOnButton_CreditDecisionWindow()
//		 handleUSPSWindow()
//		 handleUSPSWindow_CoApplicant()
//		 handleUSPSWindow_CoApplicant()
//		
//		//Click on back button
//		 clickOnBackButton_CreditDecisionWindow()
//	
	//******************
	//Work Flow
	//******************
	//Enter Other Phone with valid 10 digit characters
	phone3 = Generate_RandomNumber(10)
	 SetValue_In_PBDataWindow_DP("dw_coapp","#1","phone3",phone3)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_coapp","#1", "phone3"))
	//Updated Address3 random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_coapp", "#1", "phone3","branchplusqa.bp_applicantaddress","joint_otherphone",Environment.Value("ID"))
	 writeReportLog("Entered Co Applicant Other Phone value: "& phone3 &" in Applicant Address window (UI-"&getValueLength&",DB-10)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_OtherPhone_CoApplicant_ApplicantAddressWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : Verification_CoApplicant_Adding_Existing_CustomerDetails()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will verification of existing customer adding in Co-Applicant Credit Decision Window
//Ex: Verification_CoApplicant_Adding_Existing_CustomerDetails("Path","10/02/1968") 
//*******************************************************************************************************************
 Verification_CoApplicant_Adding_Existing_CustomerDetails(ID,DOB)
 	//Add New row 
 	 AddNewRow_DeleteRow_Search_CoApplicantWindow("Search")
	//Search customer with last name
	 Search_Existing_Customer_CoApplicantWindow("first_name","B")
	//Get the Existing customers Details
	Sleep (2)
	Search_LastName = getValue_AddApplicant_Search_CoApplicantWindow("last_name")
	Search_FirstName = getValue_AddApplicant_Search_CoApplicantWindow("first_name")
	Search_SSN = getValue_AddApplicant_Search_CoApplicantWindow("ssn")
	Search_ZipCode = getValue_AddApplicant_Search_CoApplicantWindow("zipcode")
	//Updating Data sheet
	 Update_Individual_Column_Data("bp_loantype_dealer_primaryapplicant","CoApplicant_LastName",Search_LastName,Environment.Value("ID"))
	 Update_Individual_Column_Data("bp_loantype_dealer_primaryapplicant","CoApplicant_FirstName",Search_FirstName,Environment.Value("ID"))
	 Update_Individual_Column_Data("bp_loantype_dealer_primaryapplicant","CoApplicant_ZipCode",Search_ZipCode,Environment.Value("ID"))
	 Update_Individual_Column_Data("bp_loantype_dealer_primaryapplicant","CoApplicant_SSN",Search_SSN,Environment.Value("ID"))
//	DataTable.Value("CoApplicant_LastName","Joint") = Search_LastName
//	DataTable.Value("CoApplicant_FirstName","Joint") = Search_FirstName
//	DataTable.Value("CoApplicant_ZipCode","Joint") = Search_ZipCode
	//Updating the result sheet	
	// exportSpecificSheet(testDataPath,"Joint")
	//Click on COSIGN button
	 ClickOn_Add_COSIGN_JOINT_Search_CoApplicantWindow("Add CO&SIGN")
	//Validate added existing customer details
	// Validation_Existing_CustomerDetails_CoApplicantWindow(Search_LastName,Search_FirstName,Search_SSN,DOB)
 	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Search_Existing_Customer_CoApplicantWindow","Failed", Err.Description,"Y")
 RemoveFunction
//*******************************************************************************************************************
//@methodName : Search_Existing_Customer_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will validate last name, first name and ssn Co-Applicant Credit Decision Window
//Ex: Search_Existing_Customer_CoApplicantWindow("last_name","D") 
//*******************************************************************************************************************
Search_Existing_Customer_CoApplicantWindow(String ColumnName,String valueToSet)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_search_coapplicant").PbWindow("pbname:=w_search").PbDataWindow("pbname:=dw_search").WaitWhileExists 
		Set tblPBDataWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_search_coapplicant").PbWindow("pbname:=w_search").PbDataWindow("pbname:=dw_search")
		//Set data for last name
		 TypeText_PBDataWindow(tblPBDataWindow,"#1",ColumnName,valueToSet)
		//Click on Ok Button
		PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_search_coapplicant").PbWindow("pbname:=w_search").PbButton("text:=Ok").Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Search_Existing_Customer_CoApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : Validation_Existing_CustomerDetails_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will validate last name, first name and ssn Co-Applicant Credit Decision Window
//Ex: Validation_Existing_CustomerDetails_CoApplicantWindow("last_name") 
//*******************************************************************************************************************
 Validation_Existing_CustomerDetails_CoApplicantWindow(Search_LastName,Search_FirstName,Search_SSN,DOB)
	//get Type value and validate
	Type_Name = getValue_In_PBDataWindow_DP("dw_coapp","#2","#2")
	 validateDataAndReport(Trim(Type_Name),Trim("Cosigner") , "Validation of Co-Applicant Type: ExpCoApplicantType: " & Type_Name & " and ActCoApplicantType: Cosigner")
	//get last name value and validate
	lastName = getValue_In_PBDataWindow_DP("dw_coapp","#2", "last_name")
	 validateDataAndReport(Trim(lastName),Trim(Search_LastName) , "Validation of Co-Applicant Last Name: ExpLastName: " & lastName & " and ActLastName: "& Search_LastName)
	//get first Name value and validate
	firstName = getValue_In_PBDataWindow_DP("dw_coapp","#2", "first_name")
	 validateDataAndReport(Trim(firstName),Trim(Search_FirstName) , "Validation of Co-Applicant First Name: ExpFirstName: " & firstName & " and ActFirstName: "& Search_FirstName)
	//get SSN Number and validate
	SSN_number = getValue_In_PBDataWindow_DP("dw_coapp","#2", "ssn")
	 validateDataAndReport(Trim(SSN_number),Trim(Search_SSN) , "Validation of Co-Applicant SSN Number: ExpSSNnumber: " &"xxxxx"&Right(SSN_number,4) & " and ActSSNnumber: "&"xxxxx"&Right(Search_SSN,4))
	//Validate DOB 
	DOB_Existing_Customer = getValue_In_PBDataWindow_DP("dw_coapp","#2", "dob_dt")
	if DOB_Existing_Customer = "" 
		 clickOnButton_CreditDecisionWindow()
		//if DOB is not exist enter New DOB //Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		 SetValue_In_PBDataWindow_DP("dw_coapp","#2", "dob_dt", DOB)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Validation_Existing_CustomerDetails_CoApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : ClickOn_Add_COSIGN_JOINT_Search_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will click on Add Joint adn Add Cosigner Buttons Search Co-Applicant Credit Decision Window
//Ex: ClickOn_Add_COSIGN_JOINT_Search_CoApplicantWindow("last_name") 
//*******************************************************************************************************************
ClickOn_Add_COSIGN_JOINT_Search_CoApplicantWindow(String buttonName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_search_coapplicant").PbButton("text:="& buttonName).WaitWhileExists 
//		click on Add Cosign or Joint button
		PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_search_coapplicant").PbButton("text:="& buttonName).Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: ClickOn_Add_COSIGN_JOINT_Search_CoApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : getValue_AddApplicant_Search_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will get the value in Add Applicant Search Co-Applicant Credit Decision Window
//Ex: getValue_AddApplicant_Search_CoApplicantWindow("last_name") 
//*******************************************************************************************************************
getValue_AddApplicant_Search_CoApplicantWindow(String ColName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_search_coapplicant").PbDataWindow("pbname:=dw_list").WaitWhileExists 
		//get cell value 
		CellValue = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_search_coapplicant").PbDataWindow("pbname:=dw_list").GetCellData("#1",ColName)
	getValue_AddApplicant_Search_CoApplicantWindow = CellValue
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: getValue_AddApplicant_Search_CoApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : AddNewRow_DeleteRow_Search_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will Add New Row, Delete Row and Search in Co Applicant Credit Decision Window
//Ex: AddNewRow_DeleteRow_Search_CoApplicantWindow() 
//*******************************************************************************************************************
AddNewRow_DeleteRow_Search_CoApplicantWindow(String buttonName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbButton("text:="& buttonName).WaitWhileExists 
		//click on AddRow or Delete or Search buttons
		PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbButton("text:="& buttonName).Click()	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: AddNewRow_DeleteRow_Search_CoApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : Verification_of_Type_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will verify Type Field in Co Applicant Credit Decision Window
//Ex: Verification_of_Type_CoApplicantWindow("Joint") 
//*******************************************************************************************************************
Verification_of_Type_CoApplicantWindow(String TypeValue)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Add New row
		// AddNewRow_CoApplicantWindow()
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	 SetValue_In_PBDataWindow_DP("dw_coapp","#1","#2",TypeValue)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Type_CoApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : Verification_of_LastName_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will verify Last Name Field in Co Applicant Credit Decision Window
//Ex: Verification_of_LastName_CoApplicantWindow("Devid") 
//*******************************************************************************************************************
Verification_of_LastName_CoApplicantWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		//Invalid Data
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "last_name", random_AlphaNumericSpecialChar_String(32))
		//Get the Length of Entered value in last name field
		getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "last_name")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 30 
			 writeReportLog("Validation of Last Name field is Accepting only 30 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed to Last Name is Accepting More than 30 characters","Failed", Err.Description ,"")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Valid Data
	Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_coapp")
	joint_lastName = generate_Name(30,"JointLastName")
	 TypeText_PBDataWindow(tblwindow,"#1", "last_name", joint_lastName)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_coapp","#1", "last_name"))
	//Updating lastname value to DB
	  Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_coapp","#1", "last_name","branchplusqa.bp_loantype_dealer_primaryapplicant","joint_lastname",ID)
	  writeReportLog("Entered lastname value: "& lastName &" in prinmary applicant window (UI-"&getValueLength&",DB-30)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_LastName_PrimaryApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : Verification_of_FirstName_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will verify First Name Field in Co Applicant Credit Decision Window
//Ex: Verification_of_FirstName_CoApplicantWindow("Thomos") 
//*******************************************************************************************************************
Verification_of_FirstName_CoApplicantWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		//Invalid Data
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "first_name", random_AlphaNumericSpecialChar_String(32))
		//Get the Length of Entered value in first name field
		getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "first_name")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 30 
			 writeReportLog("Validation of First Name field is Accepting only 30 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed First Name is Accepting More than 30 characters","Failed", Err.Description ,"")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Valid Data
	Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_coapp")
	firstName_Joint = generate_Name(30,"JointFirstName")
	 TypeText_PBDataWindow(tblwindow,"#1", "first_name", firstName_Joint)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_coapp","#1", "first_name"))
	//Updating firstname value generated to DB
     Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_coapp","#1", "first_name","branchplusqa.bp_loantype_dealer_primaryapplicant","joint_firstname",ID)
     writeReportLog("Entered  joint firstname value: "& firstName_Joint &" in primary applicant window (UI-"&getValueLength&",DB-30)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_FirstName_PrimaryApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : Verification_of_SSN_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will verify SSN Field in Co Applicant Credit Decision Window
//Ex: Verification_of_SSN_CoApplicantWindow("965896365") 
//*******************************************************************************************************************
 Verification_of_SSN_CoApplicantWindow(ssn)
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		//Invalid Data
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "ssn", random_AlphaSpecial_String(10))
		//Get the Length of Entered value in last name field
		getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "ssn")
		//Comparing the Length of accepting characters 
		if getValueLength = "" 
			 writeReportLog("Validation of SSN Number field is not Accepting Alphabets and Special characters","Passed","","")
		else
			 writeReportLog("Failed to SSN Number is Accepting Alphabets and Special characters: "&getValueLength,"Failed", Err.Description ,"")
		//Enter More than 10 Digits
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "ssn", Generate_RandomNumber(10))
		//Get the Length of Entered value in last name field
		getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "ssn")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) <> 10 
			 writeReportLog("Validation of SSN Number field is not Accepting more than 9 digits","Passed","","")
		else
			 writeReportLog("Failed to SSN Number is Accepting more than 9 digits: "&getValueLength,"Failed", Err.Description ,"")
		//Enter Invalide SSN
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "ssn", "000321546")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Valid SSN Data
	 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "ssn", ssn)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_SSN_CoApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : Verification_of_DOB_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will verify Date of Birth Field in Co Applicant Credit Decision Window
//Ex: Verification_of_DOB_CoApplicantWindow("10/02/1963") 
//*******************************************************************************************************************
Verification_of_DOB_CoApplicantWindow(String DOB)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		//Invalid Data
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "dob_dt", "10/02/1805")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Date Validation error popup 
		 Validate_DateDailog_ErrorPopup_Title_Message()
		//Enter Invalid Future Date
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "dob_dt", "10/02/2020")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Valid DOB Data
	 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "dob_dt", DOB)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_DOB_CoApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : Verification_of_MiddleName_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will verify Middle name field in Co-Applicant Credit Decision Window
//Ex: Verification_of_MiddleName_CoApplicantWindow("Divid") 
//*******************************************************************************************************************
Verification_of_MiddleName_CoApplicantWindow_Joint(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Invalid Data
		 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "middle_name", random_AlphaNumericSpecialChar_String(32))
		//Get the Length of Entered value in Middle name field
		getValueLength = getValue_In_PBDataWindow_DP("dw_coapp","#1", "middle_name")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 30 
			 writeReportLog("Validation of Middle Name field is Accepting only 30 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed to Middle Name is Accepting More than 30 characters","Failed", Err.Description ,"")
	//*********************
	//Work Flow
	//*********************
	//Enter Valid Middle Name Data
	Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_coapp")
	joint_MiddleName = generate_Name(30,"jointMiddleName")
	 TypeText_PBDataWindow(tblwindow,"#1", "middle_name", joint_MiddleName)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_coapp","#1", "middle_name"))
	//Updating joint middlename value to DB
	  Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_coapp","#1", "middle_name","branchplusqa.bp_loantype_dealer_primaryapplicant","joint_middlename",ID)
	  writeReportLog("Entered joint_middlename value: "& joint_MiddleName &" in prinmary applicant window (UI-"&getValueLength&",DB-30)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_MiddleName_PrimaryApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : Verification_of_Suffix_CoApplicantWindow()
//@Author     : Chandra
//@Date       : 31 July 2018
//@Description: This will verify Suffix field in Co-Applicant Credit Decision Window
//Ex: Verification_of_Suffix_CoApplicantWindow("first") 
//*******************************************************************************************************************
 Verification_of_Suffix_CoApplicantWindow(Suffix)
	//*********************
	//Field Validation
	//*********************
	// SetValue_In_PBDataWindow_DP("dw_coapp","#1", "#7", Suffix)
	//*********************
	//Work Flow
	//*********************
	//Valid Data
	 SetValue_In_PBDataWindow_DP("dw_coapp","#1", "#6", Suffix)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Suffix_CoApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : Verification_of_FirstName_PrimaryApplicantWindow()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will verify First Name field in Primary Applicant Credit Decision Window
//Ex: Verification_of_FirstName_PrimaryApplicantWindow("Thomas") 
//*******************************************************************************************************************
 Verification_of_FirstName_PrimaryApplicantWindow(ID)
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		//Invalid Data
		 SetValue_In_PBDataWindow_DP("dw_step","#1", "first_name", random_AlphaNumericSpecialChar_String(32))
		//Get the Length of Entered value in first name field
		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "first_name")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 30 
			 writeReportLog("Validation of First Name field is Accepting only 30 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed First Name is Accepting More than 30 characters","Failed", Err.Description ,"")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Valid Data
	Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_step")
	firstName = generate_Name(30,"FirstName")
	 TypeText_PBDataWindow(tblwindow,"#1","first_name", firstName)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "first_name"))
	//Updating firstname value generated to DB
     Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step","#1", "first_name","branchplusqa.bp_loantype_dealer_primaryapplicant","firstname",ID)
     writeReportLog("Entered firstname value: "& firstName &" in primary applicant window (UI-"&getValueLength&",DB-30)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_FirstName_PrimaryApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : Verification_of_LastName_PrimaryApplicantWindow()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will verify Last Name field in Primary Applicant Credit Decision Window
//Ex: Verification_of_LastName_PrimaryApplicantWindow("Thomas") 
//*******************************************************************************************************************
 Verification_of_LastName_PrimaryApplicantWindow(ID)
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		//Invalid Data
		 SetValue_In_PBDataWindow_DP("dw_step","#1", "last_name", random_AlphaNumericSpecialChar_String(32))
		//Get the Length of Entered value in last name field
		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "last_name")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 30 
			 writeReportLog("Validation of Last Name field is Accepting only 30 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed to Last Name is Accepting More than 30 characters","Failed", Err.Description ,"")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Valid Data
	Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_step")
	lastName = generate_Name(30,"LastName")
	 TypeText_PBDataWindow(tblwindow,"#1", "last_name", lastName)
	 sendKeys("{Tab}")
	//Updating lastname value to DB
	  Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step","#1", "last_name","branchplusqa.bp_loantype_dealer_primaryapplicant","lastname",ID)
	   writeReportLog("Entered lastname value: "& lastName &" in prinmary applicant window (UI-"&getValueLength&",DB-30)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_LastName_PrimaryApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : Verification_of_SSN_PrimaryApplicantWindow()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will verify SSN field in Primary Applicant Credit Decision Window
//Ex: Verification_of_SSN_PrimaryApplicantWindow("9658745961") 
//*******************************************************************************************************************
 Verification_of_SSN_PrimaryApplicantWindow(ssn)
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		//Invalid Data
		 SetValue_In_PBDataWindow_DP("dw_step","#1", "ssn", random_AlphaSpecial_String(10))
		//Get the Length of Entered value in last name field
		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "ssn")
		//Comparing the Length of accepting characters 
		if getValueLength = "" 
			 writeReportLog("Validation of SSN Number field is not Accepting Alphabets and Special characters","Passed","","")
		else
			 writeReportLog("Failed to SSN Number is Accepting Alphabets and Special characters: "&getValueLength,"Failed", Err.Description ,"")
		//Enter More than 10 Digits
		 SetValue_In_PBDataWindow_DP("dw_step","#1", "ssn", Generate_RandomNumber(10))
		//Get the Length of Entered value in last name field
		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "ssn")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) <> 10 
			 writeReportLog("Validation of SSN Number field is not Accepting more than 9 digits","Passed","","")
		else
			 writeReportLog("Failed to SSN Number is Accepting more than 9 digits: "&getValueLength,"Failed", Err.Description ,"")
		//Enter Invalide SSN
		 SetValue_In_PBDataWindow_DP("dw_step","#1", "ssn", "000321546")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()	
	//*********************
	//Work Flow
	//*********************
	//Enter Valid SSN Data
	 SetValue_In_PBDataWindow_DP("dw_step","#1", "ssn", ssn)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_SSN_PrimaryApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : Verification_of_DOB_PrimaryApplicantWindow()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will verify Date of  Birth field in Primary Applicant Credit Decision Window
//Ex: Verification_of_DOB_PrimaryApplicantWindow("10/02/1965") 
//*******************************************************************************************************************
 Verification_of_DOB_PrimaryApplicantWindow(DOB)
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
		//Invalid Data
		 SetValue_In_PBDataWindow_DP("dw_step","#1", "dob_dt", "10/02/1805")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Date Validation error popup 
		 Validate_DateDailog_ErrorPopup_Title_Message()
		//Enter Invalid Future Date
		 SetValue_In_PBDataWindow_DP("dw_step","#1", "dob_dt", "10/02/2020")
		//Click on  Button
		 clickOnButton_CreditDecisionWindow()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message()
	//*********************
	//Work Flow
	//*********************
	//Enter Valid DOB Data
	 SetValue_In_PBDataWindow_DP("dw_step","#1", "dob_dt", DOB)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_DOB_PrimaryApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : Verification_of_MiddleName_PrimaryApplicantWindow()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will verify Middle name field in Primary Applicant Credit Decision Window
//Ex: Verification_of_MiddleName_PrimaryApplicantWindow("Divid") 
//*******************************************************************************************************************
 Verification_of_MiddleName_PrimaryApplicantWindow(ID)
	if Environment.value("FV_Flag") = "Y" 
		//*********************
		//Field Validation
		//*********************
		//Invalid Data
		 SetValue_In_PBDataWindow_DP("dw_step","#1", "middle_name", random_AlphaNumericSpecialChar_String(32))
		//Get the Length of Entered value in Middle name field
		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "middle_name")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 30 
			 writeReportLog("Validation of Middle Name field is Accepting only 30 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed to Middle Name is Accepting More than 30 characters","Failed", Err.Description ,"")
	//*********************
	//Work Flow
	//*********************
	//Enter Valid Middle Name Data
	Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_step")
	MiddleName = generate_Name(30,"MiddleName")
	 TypeText_PBDataWindow(tblwindow,"#1", "middle_name", MiddleName)
	 sendKeys("{Tab}")
	//Updating middlename value to DB
	  Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step","#1", "middle_name","branchplusqa.bp_loantype_dealer_primaryapplicant","middlename",ID)
	  writeReportLog("Entered middlename value: "& MiddleName &" in prinmary applicant window (UI-"&getValueLength&",DB-40)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_MiddleName_PrimaryApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : Verification_of_DriverLicence_PrimaryApplicantWindow()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will verify Driver Licence field in Primary Applicant Credit Decision Window
//Ex: Verification_of_DriverLicence_PrimaryApplicantWindow("95687456") 
//*******************************************************************************************************************
Verification_of_DriverLicence_PrimaryApplicantWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Commented as it is negative validation for non mandatory field
//	if Environment.value("FV_Flag") = "Y" 
//		//*********************
//		//Field Validation
//		//*********************
//		//Invalid Data
//		 SetValue_In_PBDataWindow_DP("dw_step","#1", "driverlic", random_AlphaNumericSpecialChar_String(23))
//		//Get the Length of Entered value in Driver Licence field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "driverlic")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 20 
//			 writeReportLog("Validation of Driver licence Number field is Accepting only 20 characters","Passed","","")
//		else
//			 writeReportLog("Failed to Driver licence Number field is Accepting more than 20 characters: "&getValueLength,"Failed", Err.Description ,"")
//		
//	
	//*********************
	//Work Flow
	//*********************
	//Enter Valid Driver Licence Data
	Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_step")
	DriverLicence = random_AlphaNumeric_String(20)
	 TypeText_PBDataWindow(tblwindow,"#1","driverlic", DriverLicence)
	 sendKeys("{Tab}")
	//Updating driver license value to DB
	  Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step","#1", "driverlic","branchplusqa.bp_loantype_dealer_primaryapplicant","driverlicense",ID)
	  writeReportLog("Entered driver license value: "& DriverLicence &" in prinmary applicant window (UI-"&getValueLength&",DB-20)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_DriverLicence_PrimaryApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : Verification_of_Suffix_PrimaryApplicantWindow()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will verify Suffix field in Primary Applicant Credit Decision Window
//Ex: Verification_of_Suffix_PrimaryApplicantWindow("first") 
//*******************************************************************************************************************
 Verification_of_Suffix_PrimaryApplicantWindow(Suffix)
	//*********************
	//Field Validation
	//*********************
	// SetValue_In_PBDataWindow_DP("dw_step","#1", "#7", Suffix)
	//*********************
	//Work Flow
	//*********************
	//Valid Data
	 SetValue_In_PBDataWindow_DP("dw_step","#1", "#7", Suffix)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Suffix_PrimaryApplicantWindow","Failed", Err.Description,"Y")

//*******************************************************************************************************************
//@methodName : random_AlphaNumeric_String()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will get random Alphabets and Numerics
//Ex:  random_AlphaNumeric_String(20)
//*******************************************************************************************************************
random_AlphaNumeric_String(String ByVal strLen )
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
    String str
    //Constant String
    LETTERS = "abcdefghijklmnopqrstuvwxyz0123456789"
    for i = 1 to strLen
    	//Generate Random Character and Concatenate
        str = str & Substring( LETTERS, RandomNumber( 1, Len( LETTERS ) ), 1 )
    random_AlphaNumeric_String = str
    //Error handling 
 	if GetErrorCount()>0  			
		 writeReportLog("Failed to generate random_AlphaNumeric_String","Failed", Err.Description ,"")

//*******************************************************************************************************************
//@methodName : random_AlphaSpecial_String()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will get random Alphabets and Special  charaters
//Ex:  random_AlphaSpecial_String(20)
//*******************************************************************************************************************
random_AlphaSpecial_String(String ByVal strLen)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
    String str
    //Constant String
    LETTERS = "abcdefghijklmnopqrstuvwxyz,//-"
    for i = 1 to strLen
    	//Generate Random Character and Concatenate
        str = str & Substring( LETTERS, RandomNumber( 1, Len( LETTERS ) ), 1 )
    random_AlphaSpecial_String = str
    //Error handling 
 	if GetErrorCount()>0  			
		 writeReportLog("Failed to generate random_AlphaSpecial_String","Failed", Err.Description ,"")

//*******************************************************************************************************************
//@methodName : random_AlphaNumericSpecialChar_String()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will get random Alphabets, Numarics and Special  charaters
//Ex:  random_AlphaNumericSpecialChar_String(20)
//*******************************************************************************************************************
random_AlphaNumericSpecialChar_String(String ByVal strLen )
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
    String str
    //Constant String
    LETTERS = "abcdefghijklmnopqrstuvwxyz0123456789,//-"
    for i = 1 to strLen
    	//Generate Random Character and Concatenate
        str = str & Substring( LETTERS, RandomNumber( 1, Len( LETTERS ) ), 1 )
    random_AlphaNumericSpecialChar_String = str
    //Error handling 
 	if GetErrorCount()>0  			
		 writeReportLog("Failed to generate random_AlphaNumericSpecialChar_String","Failed", Err.Description ,"")

//**********************************************************************************************************
//@methodName : Validate_DateDailog_ErrorPopup_Title_Message()
//@Author     : Chandra
//@Date       : 30 July 2018
//@Description: This will Validate Date Validation Error Popup Title, message and Click on OK Button in Credit Decision Window
//Ex: Validate_DateDailog_ErrorPopup_Title_Message() 
//**********************************************************************************************************
Validate_DateDailog_ErrorPopup_Title_Message()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").Dialog("regexpwndtitle:=Date Validation").WaitWhileExists 
		//Get the Error Popup Title
		ErrorPopupTitle = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").Dialog("regexpwndtitle:=Date Validation").GetAttr(("regexpwndtitle")
		//Get the Error Popup Message
		ErrorPopupMessage = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").Dialog("regexpwndtitle:=Date Validation").Static("regexpwndtitle:=.* on row number 1 is not a valid date.").GetAttr(("regexpwndtitle")
		 writeReportLog("Validation of Error Title: "& ErrorPopupTitle &" with Popup Message: "&ErrorPopupMessage,"Passed","","")
		//Click OK Button
		PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").Dialog("regexpwndtitle:=Date Validation").WinButton("text:=OK").Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Validate_DateDailog_ErrorPopup_Title_Message","Failed", Err.Description,"Y")

//******************************************************************************************************
//@methodName: clickOn_HelpButton_InWindow()
//@Author Chandra
//@Date 31 July 2018
//@Description This is click on Help button and Close the same tab
//Ex:  clickOn_HelpButton_InWindow("Help","scenet")
//********************************************************************************************************
clickOn_HelpButton_InWindow(String buttonName,String pageName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if  Pbwindow("pbname:=" & "w_bp_frame").Pbwindow("pbname:=w_wiz_new_cust").PbButton("text:=&" & buttonName).WaitWhileExists 
		Pbwindow("pbname:=" & "w_bp_frame").Pbwindow("pbname:=w_wiz_new_cust").PbButton("text:=&" & buttonName).Click()
		 writeReportLog("Display of Help web page was successful","Passed","","Y")
		//Close Tab of specific page displayed
		 close_SpecificTab_InBrowser_OpenURL(pageName)
	else if  Pbwindow("pbname:=" & "w_bp_frame").Pbwindow("pbname:=w_wiz_new_cust").PbButton("text:=" & buttonName).WaitWhileExists 
		 Pbwindow("pbname:=" & "w_bp_frame").Pbwindow("pbname:=w_wiz_new_cust").PbButton("text:=" & buttonName).Click()
		  writeReportLog("Display of Help web page was successful","Passed","","Y")
		 //Close Tab of specific page displayed
		 close_SpecificTab_InBrowser_OpenURL(pageName)
	else
		 writeReportLog("Failed to Click on Button : " & buttonName & " in window: " & windowName,"Failed",FailComments,"Button not found")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/clickOn_HelpButton_InWindow","Failed", Err.Description ,"")

//***********************************GENERIC FUNCTION*******************************************
//@methodName: close_SpecificTab_InBrowser(pageName)
//@Author Chandra
//@Date 31 July 2018
//@Description This is will close the tab of specifica page displayed in IE browser
//Ex:  close_SpecificTab_InBrowser("secnet")
//********************************************************************************************************
close_SpecificTab_InBrowser_OpenURL(String pageName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Wait(3)
	if Browser("application version:=internet explorer 11","openurl:=.*"& pageName &".*").WinObject("regexpwndclass:=DirectUIHWND").WinButton("acc_name:=Close Tab.*").WaitWhileExists(2) 
		Browser("application version:=internet explorer 11","openurl:=.*"& pageName &".*").WinObject("regexpwndclass:=DirectUIHWND").WinButton("acc_name:=Close Tab.*").Click()
	else if Browser("application version:=Chrome"&".*").WaitWhileExists(3) 
		 KillProcess("chrome.exe")
	else
		writeReportLog "Closing "& pageName & " tab in IE Browser is NOT successful","Failed","",""
	if GetErrorCount()>0  			
		 writeReportLog("Failed in close_SpecificTab_InBrowser_OpenURL","Failed", Err.Description ,"")
	Sleep(2)

//*******************************************************************************************************
//@methodName: Verification_Deleting_CoApplicant_Details()
//@Author Chandra
//@Date 1 Aug 2018
//@Description This is will delete the Co applicant details in Primary Applicant window
//Ex:  Verification_Deleting_CoApplicant_Details()
//********************************************************************************************************
Verification_Deleting_CoApplicant_Details()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Click on Back button
	 clickOnBackButton_CreditDecisionWindow()
	//Validation of window name in Credit Decision Window
	// validate_WindowName_CreditDecision("name")
	 SetValue_In_PBDataWindow_DP("dw_coapp","#2","middle_name","")
	 AddNewRow_DeleteRow_Search_CoApplicantWindow("Delete Row")
	 Handle_Dailog_Popup_CreditDecision_Window("w_message", "Yes")
//	 AddNewRow_DeleteRow_Search_CoApplicantWindow("Delete Row")
//	
//	 Handle_Dailog_Popup_CreditDecision_Window("w_message", "Yes")
	//Click on  Button
	 clickOnButton_CreditDecisionWindow()
	//Validation of window name in Credit Decision Window
	// validate_WindowName_CreditDecision("home_addr")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to Verification_Deleting_CoApplicant_Details","Failed", Err.Description ,"")

//*******************************************************************************************************
//@methodName: Handle_Dailog_Popup_CreditDecision_Window(windowName, buttonName)
//@Author Chandra
//@Date 1 Aug 2018
//@Description This is will handle the dialog pop up
//Ex:  Handle_Dailog_Popup_CreditDecision_Window("w_message", "Yes")
//********************************************************************************************************
Handle_Dailog_Popup_CreditDecision_Window(String windowName,String buttonName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=" & windowName).PbButton("text:=&" & buttonName).WaitWhileExists 
		PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=" & windowName).PbButton("text:=&" & buttonName).Click()
	else if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=" & windowName).PbButton("text:=" & buttonName).WaitWhileExists 
		PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=" & windowName).PbButton("text:=" & buttonName).Click()
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to Handle_Dailog_Popup_CreditDecision_Window","Failed", Err.Description ,"")

//*******************************************************************************************************
//@methodName: Validation_of_CreditCheck_CoApplicant_Window(outputType)
//@Author Chandra
//@Date 1 Aug 2018
//@Description This is validate credit check window for Co Applicant user
//Ex:  Validation_of_CreditCheck_CoApplicant_Window("Persona Plus")
//********************************************************************************************************
Validation_of_CreditCheck_CoApplicant_Window(String outputType)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Sleep (3)
	 MouseWheel(3,True)
	Sleep (2)
	//Click on Credit OK button
	 Click_CrdtChk_CoApplicantwindow()
	//Select bureau id and output type
	 select_CreditBureau_CreditCheckWindow("EQUIFAX")
	 select_OutputType_CreditCheckWindow(outputType)
	//Validate data in credit Check window
	lName = UCase(getValue_CreditCheckWindow("last_name"))
	fName = UCase(getValue_CreditCheckWindow("first_name"))
	ssn_crdtwndw = getValue_CreditCheckWindow("ssn")
	zipcode_crdtwndw_concate = Replace(getValue_CreditCheckWindow("zipcode")," ","")
	zipcode_crdtwndw = zipcode_crdtwndw_concate
	 validateDataAndReport(lName,Environment.Value("Joint_CoApp_LastName"),"Validation of Last Name in Credit Check window :"&lName& " and in Applicant Address window :"&Environment.Value("Joint_CoApp_LastName"))
	 validateDataAndReport(fName,Environment.Value("Joint_CoApp_FirstName"),"Validation of First Name in Credit Check window :"&fName& " and in Applicant Address window :"&Environment.Value("Joint_CoApp_FirstName"))
	 validateDataAndReport(ssn_crdtwndw,Environment.Value("Joint_CoApp_SSN"),"Validation of SSN in Credit Check window :"&"xxxxx"&Right(ssn_crdtwndw,4)& " and in Applicant Address window :"&"xxxxx"&Right(Environment.Value("Joint_CoApp_SSN"),4))
	 validateDataAndReport(zipcode_crdtwndw,Environment.Value("Joint_CoApp_zipcode"),"Validation of Zip Code in Credit Check window :"&zipcode_crdtwndw& " and in Applicant Address window :"&Environment.Value("Joint_CoApp_zipcode"))
	//Click on Get Report button
	 click_Button_InWindow_DP("w_wiz_new_cust","w_creditcheck","Get Report")
	Set repObj = PbWindow("BranchPlus").PbWindow("CreditDecision").PbWindow("Creditcheck").PbWindow("CreditReport").PbDataWindow("Reportdetails")
	//Fetching Report Content
	verifycreditReport = GetValue_PBDataWindow(repObj,"#1","#2")
	//Validating for Credit Report Generation
	 validatePartialDataAndReport(verifycreditReport,"THIS FORM PRODUCED BY EQUIFAX","Validate Credit Report")
	//Click on Close button
	PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbWindow("pbname:=w_creditcheck").PbWindow("pbname:=w_view_report").PbButton("pbname:=cb_close").Click()
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to Validation_of_CreditCheck_CoApplicant_Window","Failed", Err.Description ,"")

//*******************************************************************************************************
//@methodName: getValue_CoApplicantWindow(rowNum,colName)
//@Author Chandra
//@Date 1 Aug 2018
//@Description This is fetch the value of Co Applicant user
//Ex:  getValue_CoApplicantWindow(rowNum,colName)
//********************************************************************************************************
getValue_CoApplicantWindow(String rowNum,String colName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	getValue_CoApplicantWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_coapp").GetCellData(rowNum,colName)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getValue_CoApplicantWindow","Failed", Err.Description ,"")

//*******************************************************************************************************
//@methodName: Verification_CoApplicant_Joint_Cosign_ApplicantWindow(cosign_CoApp_ZipCode)
//@Author Chandra
//@Date 1 Aug 2018
//@Description This will verify the details of Co Applicant users
//Ex:  Verification_CoApplicant_Joint_Cosign_ApplicantWindow("23111")
//********************************************************************************************************
Verification_CoApplicant_Joint_Cosign_ApplicantWindow(String cosign_CoApp_ZipCode,String cosign_CoApp_FirstName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Get the value in Joint Co Applicant window
	Joint_First_Last_Name = getValue_In_PBDataWindow_DP("dw_coapp","#1", "compute_1")
	if IndexOf(ToUpper(Joint_First_Last_Name),ToUpper(Environment.Value("Joint_CoApp_FirstName"))) > 0 and IndexOf(ToUpper(Joint_First_Last_Name),ToUpper("Joint")) > 0 
		 writeReportLog("Validation of Co-Applicant First Name for Joint Type : "&ToUpper(Environment.Value("Joint_CoApp_FirstName")),"Passed","","")
		 writeReportLog("Validation of Co-Applicant Window Type: JOINT","Passed","","")
	//Get the value in Cosign Co Applicant window
	Cosign_First_Last_Name = getValue_In_PBDataWindow_DP("dw_coapp","#2", "compute_1")
	if IndexOf(ToUpper(Cosign_First_Last_Name),ToUpper(cosign_CoApp_FirstName)) > 0 and IndexOf(ToUpper(Cosign_First_Last_Name),ToUpper("Cosign")) > 0 
		 writeReportLog("Validation of Co-Applicant First Name for Cosign Type: "&ToUpper(cosign_CoApp_FirstName),"Passed","","")
		 writeReportLog("Validation of Co-Applicant Window Type: COSIGN","Passed","","")
	//Get the value in Cosign Co Applicant window
	Cosign_ZipCode = getValue_In_PBDataWindow_DP("dw_coapp","#2", "zipcode")
	if IndexOf(ToUpper(Cosign_ZipCode),ToUpper(cosign_CoApp_ZipCode)) > 0 
		 writeReportLog("Validation of Co-Applicant Joint Window ZIP Code: "&ToUpper(Cosign_ZipCode),"Passed","","")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to Verification_CoApplicant_Joint_Cosign_ApplicantWindow","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: Verification_of_TradeinDescription_CollateralWindow(tradeDesc)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Trade in Description field in Collateral window
//Ex  Verification_of_TradeinDescription_CollateralWindow(tradeDesc)
//******************************************************************************************************************
Verification_of_TradeinDescription_CollateralWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//	 	//Field Validation
//	 	//**************************
//	 	 //Enter Trade in Description field with invalid data more than 100 characters
//		Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
//		 SetValue_PBDataWindow(crdDecision,"#1","trade_in_descr",random_AlphaNumeric_String(102))
//	
//		//Get the Length of Entered value in Trade in Description field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "trade_in_descr")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 100 
//			 writeReportLog("Validation of Trade in Description field is Accepting only 100 characters: "&getValueLength,"Passed","","")
//		else
//			 writeReportLog("Failed : Trade in Description field is Accepting More than 100 characters","Failed", Err.Description ,"")
//		
//	
	//***************
	//Work Flow
	//***************
	Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
	tradeDesc = random_AlphaCharacter_String(100)
	 SetValue_PBDataWindow(crdDecision,"#1","trade_in_descr",tradeDesc)
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "other"))
	//Updated Make random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "trade_in_descr","bp_collateral","tradedesc",Environment.Value("ID"))
	 writeReportLog("Entered Trade in Description value: "& tradeDesc &" in Collateral window (UI-"&getValueLength&",DB-100)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_TradeinDescription_CollateralWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Other_CollateralWindow(other)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Other field in Collateral window
//Ex  Verification_of_Other_CollateralWindow(other)
//******************************************************************************************************************
Verification_of_Other_CollateralWindow(String other)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//	 	//Field Validation
//	 	//**************************
//	 	 //Enter Other field with invalid data more than 20 characters
//		Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
//		 SetValue_PBDataWindow(crdDecision,"#1","other",random_AlphaNumeric_String(22))
//	
//		//Get the Length of Entered value in Other field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "other")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 20 
//			 writeReportLog("Validation of Other field is Accepting only 20 characters: "&getValueLength,"Passed","","")
//		else
//			 writeReportLog("Failed : Other field is Accepting More than 20 characters","Failed", Err.Description ,"")
//		
//	
	//***************
	//Work Flow
	//***************
	Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
	other = random_AlphaCharacter_String(20)
	 SetValue_PBDataWindow(crdDecision,"#1","other",other)
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "other"))
	//Updated Make random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "other","bp_collateral","other",Environment.Value("ID"))
	 writeReportLog("Entered Other value: "& other &" in Collateral window (UI-"&getValueLength&",DB-20)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Other_CollateralWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Cylinders_CollateralWindow(cylinder)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Cylinders field in Collateral window
//Ex  Verification_of_Cylinders_CollateralWindow(cylinder)
//******************************************************************************************************************
Verification_of_Cylinders_CollateralWindow(String cylinder)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//	 	//Field Validation
//	 	//**************************
//	 	 //Enter Cylinders field with invalid data more than 20 characters
//		Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
//		 SetValue_PBDataWindow(crdDecision,"#1","cylinder",random_AlphaNumeric_String(22))
//	
//		//Get the Length of Entered value in Cylinders field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "cylinder")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 20 
//			 writeReportLog("Validation of Cylinders field is Accepting only 20 characters: "&getValueLength,"Passed","","")
//		else
//			 writeReportLog("Failed : Cylinders field is Accepting More than 20 characters","Failed", Err.Description ,"")
//		
//	
	//***************
	//Work Flow
	//***************
	Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
	cylinder = random_AlphaCharacter_String(20)
	 SetValue_PBDataWindow(crdDecision,"#1","cylinder",cylinder)
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "cylinder"))
	//Updated Make random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "cylinder","bp_collateral","cylinder",Environment.Value("ID"))
	 writeReportLog("Entered Cylinder value: "& cylinder &" in Collateral window (UI-"&getValueLength&",DB-20)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Cylinders_CollateralWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Mileage_CollateralWindow(mileage)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Mileage field in Collateral window
//Ex  Verification_of_Mileage_CollateralWindow(mileage)
//******************************************************************************************************************
Verification_of_Mileage_CollateralWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//	 	//Field Validation
//	 	//**************************
//	 	 //Enter Mileage field with invalid data more than 6 digits
//		Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
//		 SetValue_PBDataWindow(crdDecision,"#1","mileage",Generate_RandomNumber(7))
//	
//		//Get the Length of Entered value in Mileage field
//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_step","#1", "mileage"))
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 6 
//			 writeReportLog("Validation of Mileage field is Accepting only 6 digits: "&getValueLength,"Passed","","")
//		else
//			 writeReportLog("Failed : Mileage field is Accepting More than 6 digits","Failed", Err.Description ,"")
//		
//	
	//***************
	//Work Flow
	//***************
	Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
	mileage = Generate_RandomNumber_UserDefind("9","6")
	 SetValue_PBDataWindow(crdDecision,"#1","mileage",mileage)
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "mileage"))
	//Updated Make random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "mileage","bp_collateral","mileage",Environment.Value("ID"))
	 writeReportLog("Entered Mileage value: "& mileage &" in Collateral window (UI-"&getValueLength&",DB-6)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Mileage_CollateralWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Color_CollateralWindow(color)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Color field in Collateral window
//Ex  Verification_of_Color_CollateralWindow(color)
//******************************************************************************************************************
Verification_of_Color_CollateralWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//	 	//Field Validation
//	 	//**************************
//	 	 //Enter Color field with invalid data more than 20 characters
//		Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
//		 SetValue_PBDataWindow(crdDecision,"#1","color",random_AlphaNumeric_String(22))
//	
//		//Get the Length of Entered value in Color field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "color")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 20 
//			 writeReportLog("Validation of Color field is Accepting only 20 characters: "&getValueLength,"Passed","","")
//		else
//			 writeReportLog("Failed : Color field is Accepting More than 20 characters","Failed", Err.Description ,"")
//		
//	
	//***************
	//Work Flow
	//***************
	Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
	color = random_AlphaCharacter_String(20)
	 SetValue_PBDataWindow(crdDecision,"#1","color",color)
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "color"))
	//Updated Make random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "color","bp_collateral","color",Environment.Value("ID"))
	 writeReportLog("Entered Color value: "& color &" in Collateral window (UI-"&getValueLength&",DB-20)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Color_CollateralWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Year_CollateralWindow(mfyear)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the year field in Collateral window
//Ex  Verification_of_Year_CollateralWindow(mfyear)
//******************************************************************************************************************
Verification_of_Year_CollateralWindow(String mfyear)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//	 	//Field Validation
//	 	//**************************
//	 	 //Enter Year field with invalid data more than 5 digits
//		Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
//		 SetValue_PBDataWindow(crdDecision,"#1","year",Generate_RandomNumber(5))
//	
//		//Get the Length of Entered value in Year field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "year")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 4 
//			 writeReportLog("Validation of Year field is Accepting only 4 digits: "&getValueLength,"Passed","","")
//		else
//			 writeReportLog("Failed : Year field is Accepting More than 4 digits","Failed", Err.Description ,"")
//		
//	
	//***************
	//Work Flow
	//***************
	Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
	 SetValue_PBDataWindow(crdDecision,"#1","year",mfyear)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Year_CollateralWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Style_CollateralWindow(style)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Style field in Collateral window
//Ex  Verification_of_Style_CollateralWindow(style)
//******************************************************************************************************************
Verification_of_Style_CollateralWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//	 	//Field Validation
//	 	//**************************
//	 	 //Enter Style field with invalid data more than 20 characters
//		Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
//		 SetValue_PBDataWindow(crdDecision,"#1","style",random_AlphaNumeric_String(22))
//	
//		//Get the Length of Entered value in Style field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "style")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 20 
//			 writeReportLog("Validation of Style field is Accepting only 20 characters: "&getValueLength,"Passed","","")
//		else
//			 writeReportLog("Failed : Style field is Accepting More than 20 characters","Failed", Err.Description ,"")
//		
//	
	//***************
	//Work Flow
	//***************
	Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
	style = random_AlphaCharacter_String(20)
	 SetValue_PBDataWindow(crdDecision,"#1","style",style)
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "style"))
	//Updated Make random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "style","bp_collateral","style",Environment.Value("ID"))
	 writeReportLog("Entered Style value: "& style &" in Collateral window (UI-"&getValueLength&",DB-20)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Style_CollateralWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Model_CollateralWindow(model)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Model field in Collateral window
//Ex  Verification_of_Model_CollateralWindow(model)
//******************************************************************************************************************
Verification_of_Model_CollateralWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//	 	//Field Validation
//	 	//**************************
//	 	 //Enter Model field with invalid data more than 20 characters
//		Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
//		 SetValue_PBDataWindow(crdDecision,"#1","model",random_AlphaNumeric_String(22))
//	
//		//Get the Length of Entered value in Model field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "model")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 20 
//			 writeReportLog("Validation of Model field is Accepting only 20 characters: "&getValueLength,"Passed","","")
//		else
//			 writeReportLog("Failed : Model field is Accepting More than 20 characters","Failed", Err.Description ,"")
//		
//	
	//***************
	//Work Flow
	//***************
	Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
	model = random_AlphaCharacter_String(20)
	 SetValue_PBDataWindow(crdDecision,"#1","model",model)
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "model"))
	//Updated Make random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "model","bp_collateral","model",Environment.Value("ID"))
	 writeReportLog("Entered Model value: "& model &" in Collateral window (UI-"&getValueLength&",DB-20)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Model_CollateralWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Make_CollateralWindow(make)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Make field in Collateral window
//Ex  Verification_of_Make_CollateralWindow(make)
//******************************************************************************************************************
Verification_of_Make_CollateralWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
// 	if Environment.value("FV_Flag") = "Y" 
// 		//**************************
//	 	//Field Validation
//	 	//**************************
//	 	 //Enter Make field with invalid data more than 20 characters
//		Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
//		 SetValue_PBDataWindow(crdDecision,"#1","make",random_AlphaNumeric_String(22))
//	
//		//Get the Length of Entered value in Make field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "make")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 20 
//			 writeReportLog("Validation of Make field is Accepting only 20 characters: "&getValueLength,"Passed","","")
//		else
//			 writeReportLog("Failed : Make field is Accepting More than 20 characters","Failed", Err.Description ,"")
//		
// 	
	//***************
	//Work Flow
	//***************
	Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
	make = random_AlphaCharacter_String(20)
	 SetValue_PBDataWindow(crdDecision,"#1","make",make)
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "make"))
	//Updated Make random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "make","bp_collateral","make",Environment.Value("ID"))
	 writeReportLog("Entered Make value: "& make &" in Collateral window (UI-"&getValueLength&",DB-20)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Make_CollateralWindow","Failed", Err.Description,"Y")
 RemoveFunction
//*****************************************************************************************************************
//@methodName: Verification_of_Desc_CollateralWindow(desc)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the Description field in Collateral window
//Ex  Verification_of_Desc_CollateralWindow(desc)
//******************************************************************************************************************
Verification_of_Desc_CollateralWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
// 	if Environment.value("FV_Flag") = "Y" 
// 		//**************************
//	 	//Field Validation
//	 	//**************************
//	 	 //Enter Description field with invalid data more than 40 characters
//		Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
//		 SetValue_PBDataWindow(crdDecision,"#1","descr",random_AlphaNumeric_String(42))
//	
//		//Get the Length of Entered value in Description field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "descr")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 40 
//			 writeReportLog("Validation of Description field is Accepting only 40 characters: "&getValueLength,"Passed","","")
//		else
//			 writeReportLog("Failed : Description field is Accepting More than 40 characters","Failed", Err.Description ,"")
//		
// 	
	//***************
	//Work Flow
	//***************
	Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
	desc = random_AlphaCharacter_String(40)
	 SetValue_PBDataWindow(crdDecision,"#1","descr",desc)
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "descr"))
	//Updated Description random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step", "#1", "descr","bp_collateral","descr",Environment.Value("ID"))
	 writeReportLog("Entered Decription value: "& descr &" in Collateral window (UI-"&getValueLength&",DB-40)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Desc_CollateralWindow","Failed", Err.Description,"Y")
 RemoveFunction
//*****************************************************************************************************************
//@methodName: Verification_of_vin_CollateralWindow(vin)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will verify the VIN field in Collateral window
//Ex  Verification_of_vin_CollateralWindow(vin)
//******************************************************************************************************************
 Verification_of_vin_CollateralWindow(vin)
 	if Environment.value("FV_Flag") = "Y" 
 		//**************************
	 	//Field Validation
	 	//**************************
	 	 //Enter VIN field with invalid data more than 17 characters
		Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
		 SetValue_PBDataWindow(crdDecision,"#1","vin",random_AlphaNumeric_String(19))
		//Get the Length of Entered value in VIN field
		getValueLength = getValue_In_PBDataWindow_DP("dw_step","#1", "vin")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 17 
			 writeReportLog("Validation of VIN field is Accepting only 17 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : VIN field is Accepting More than 17 characters","Failed", Err.Description ,"")
	//***************
	//Work Flow
	//***************
	 SetValue_PBDataWindow(crdDecision,"#1","vin",vin)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_vin_CollateralWindow","Failed", Err.Description,"Y")
 RemoveFunction
//*****************************************************************************************************************
//@methodName: get_LoanType_CreditDecision()
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will fetch the Loan type in Collateral window
//Ex: get_LoanType_CreditDecision()
//*****************************************************************************************************************
get_LoanType_CreditDecision()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	get_LoanType_CreditDecision = GetValue_In_PBDataWindow_DP("dw_step","#1","coll_type")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_LoanType_CreditDecision","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: select_Radiobutton_NewCollateral_CreditDecision(radiobuttonName)
//@Author Ranjitha
//@Date 6th Aug 2018
//@Description This will select the New Collateral radiobutton in Collateral window
//Ex:  select_Radiobutton_NewCollateral_CreditDecision("Yes")
//*****************************************************************************************************************
select_Radiobutton_NewCollateral_CreditDecision(String radiobuttonName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 SetValue_In_PBDataWindow_DP("dw_step","#1","new_yn",radiobuttonName)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: select_Radiobutton_NewCollateral_CreditDecision","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_InterestRate_FinanceDetailWindow(intrate)
//@Author Ranjitha
//@Date 7th Aug 2018
//@Description This will verify Interest rate in Finance Detail window
//Ex:  Verification_of_InterestRate_FinanceDetailWindow("0.16")
//*****************************************************************************************************************
Verification_of_InterestRate_FinanceDetailWindow(String intrate)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//**************************
		//Field Validation
		//**************************
		//Enter Interest Rate field with invalid data more than 3 digits
		 SetValue_In_PBDataWindow_DP("dw_step", "#1","int_rate",Generate_RandomNumber(8))
		//Validate the warning pop up
		 Validate_ErrorPopup_Title_Message()
		//Click on  button
		 clickOnButton_CreditDecisionWindow()
		//Validate the warning pop up
		 Validate_ErrorPopup_Title_Message()
		//Validate the error pop up
		 Validate_ErrorPopup_Title_Message()
		//Click on Back button
		 clickOnBackButton_CreditDecisionWindow()
		//Validate the error pop up
		 Validate_ErrorPopup_Title_Message()
	//	//Get the Length of Entered value in Interest Rate field
	//	getValueLength = int(getValue_In_PBDataWindow_DP("dw_step","#1","int_rate"))
	//	//Comparing the Length of accepting characters 
	//	if Length(getValueLength) = 7 
	//		 writeReportLog("Validation of Interest Rate field is Accepting only 7 digits","Passed","","")
	//	else
	//		 writeReportLog("Failed : Interest Rate field is Accepting more than 7 digits: "&getValueLength,"Failed", Err.Description ,"")
	//	 
	//***************
	//Work Flow
	//***************
	 SetValue_In_PBDataWindow_DP("dw_step","#1","int_rate",intrate)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_InterestRate_FinanceDetailWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Terms_FinanceDetailWindow(terms)
//@Author Ranjitha
//@Date 7th Aug 2018
//@Description This will verify Terms in Finance Detail window
//Ex:  Verification_of_Terms_FinanceDetailWindow("60")
//*****************************************************************************************************************
Verification_of_Terms_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//		//Field Validation
//		//**************************
//		//Enter Terms field with invalid data more than 3 digits
//		 SetValue_In_PBDataWindow_DP("dw_step", "#1","nbr_of_months",Generate_RandomNumber(5))
//			 
//		//Get the Length of Entered value in Terms field
//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_step","#1","nbr_of_months"))
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 3 
//			 writeReportLog("Validation of Terms field is Accepting only 3 digits","Passed","","")
//		else
//			 writeReportLog("Failed : Terms field is Accepting more than 3 digits: "&getValueLength,"Failed", Err.Description ,"")
//		 
//	
	//***************
	//Work Flow
	//***************
	terms = Generate_RandomNumber_UserDefind("9","3")
	 SetValue_In_PBDataWindow_DP("dw_step","#1","nbr_of_months",terms)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "nbr_of_months"))
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "nbr_of_months","bp_financedetails","loanterm",ID)
	 writeReportLog("Entered Term value: "& terms &" in Finance Detail window (UI-"&getValueLength&",DB-3)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Terms_FinanceDetailWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_LoanAmount_FinanceDetailWindow(loanamt)
//@Author Ranjitha
//@Date 7th Aug 2018
//@Description This will verify Loan Amount in Finance Detail window
//Ex:  Verification_of_LoanAmount_FinanceDetailWindow("12000")
//*****************************************************************************************************************
Verification_of_LoanAmount_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//		//Field Validation
//		//**************************
//		//Enter Loan Amount field with invalid data more than 8 digits
//		 SetValue_In_PBDataWindow_DP("dw_step", "#1","purch_amt",Generate_RandomNumber(10))
//			 
//		//Get the Length of Entered value in Loan Amount field
//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_step","#1","purch_amt"))
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 8 
//			 writeReportLog("Validation of Loan Amount field is Accepting only 8 digits","Passed","","")
//		else
//			 writeReportLog("Failed : Loan Amount field is Accepting more than 8 digits: "&getValueLength,"Failed", Err.Description ,"")
//		 
//	
	//***************
	//Work Flow
	//***************
	loanamt = Generate_RandomNumber_UserDefind("9","8")
	 SetValue_In_PBDataWindow_DP("dw_step","#1","purch_amt",loanamt)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "purch_amt"))
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "purch_amt","bp_financedetails","loanamount",ID)
	 writeReportLog("Entered Loan Amount value: "& loanamt &" in Finance Detail window (UI-"&getValueLength&",DB-8)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_LoanAmount_FinanceDetailWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Payment_FinanceDetailWindow(payamt)
//@Author Ranjitha
//@Date 7th Aug 2018
//@Description This will verify Payment  in Finance Detail window
//Ex:  Verification_of_Payment_FinanceDetailWindow("400")
//*****************************************************************************************************************
Verification_of_Payment_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//		//Field Validation
//		//**************************
//		//Enter payment  field with invalid data more than 8 digits
//		 SetValue_In_PBDataWindow_DP("dw_step", "#1","payment_",Generate_RandomNumber(10))
//			 
//		//Get the Length of Entered value in payment  field
//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_step","#1","payment_"))
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 8 
//			 writeReportLog("Validation of Payment  field is Accepting only 8 digits","Passed","","")
//		else
//			 writeReportLog("Failed : Payment  field is Accepting more than 8 digits: "&getValueLength,"Failed", Err.Description ,"")
//		 
//	
	//***************
	//Work Flow
	//***************
	payamt = Generate_RandomNumber_UserDefind("9","8")
	 SetValue_In_PBDataWindow_DP("dw_step","#1","payment_",payamt)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "payment_"))
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "payment_","bp_financedetails","payment",ID)
	 writeReportLog("Entered payment  Amount value: "& payamt &" in Finance Detail window (UI-"&getValueLength&",DB-8)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Payment_FinanceDetailWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_DealerDiscount_FinanceDetailWindow(discamt)
//@Author Ranjitha
//@Date 7th Aug 2018
//@Description This will verify Dealer Discount in Finance Detail window
//Ex:  Verification_of_DealerDiscount_FinanceDetailWindow("750")
//*****************************************************************************************************************
Verification_of_DealerDiscount_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//		//Field Validation
//		//**************************
//		//Enter Dealer Discount field with invalid data more than 8 digits
//		 SetValue_In_PBDataWindow_DP("dw_step", "#1","discount_amt",Generate_RandomNumber(10))
//			 
//		//Get the Length of Entered value in Dealer Discount field
//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_step","#1","discount_amt"))
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 8 
//			 writeReportLog("Validation of Dealer Discount field is Accepting only 8 digits","Passed","","")
//		else
//			 writeReportLog("Failed : Dealer Discount field is Accepting more than 8 digits: "&getValueLength,"Failed", Err.Description ,"")
//		 
//	
	//***************
	//Work Flow
	//***************
	//Enter Discount Amt with valid data
	discamt = Generate_RandomNumber_UserDefind("9","8")
	 SetValue_In_PBDataWindow_DP("dw_step","#1","discount_amt",discamt)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#1", "discount_amt"))
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_step", "#1", "discount_amt","bp_financedetails","dealerdiscount",ID)
	 writeReportLog("Entered Discount Amount value: "& discamt &" in Finance Detail window (UI-"&getValueLength&",DB-8)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_DealerDiscount_FinanceDetailWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: validateContractDate_CreditDecisionWindow()
//@Author Ranjitha
//@Date 7th Aug 2018
//@Description This will validate Contract Date in Finance Detail window
//Ex:  validateContractDate_CreditDecisionWindow()
//*****************************************************************************************************************
validateContractDate_CreditDecisionWindow()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set crdDecision = PbWindow("BranchPlus").PbWindow("CreditDecision").PbDataWindow("tbldwStep")
	//Verify Contract date validation 
	loanDate = GetValue_PBDataWindow(crdDecision,"#1","funding_dt")
	//Validating the Data
	 validateDataAndReport(Cdate(loanDate),date,"Validate Contract date: " & Cdate(loanDate))	
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to validateContractDate_CreditDecisionWindow","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: Verification_of_OtherFee_ChargeAmt_FinanceDetailWindow(otherFee)
//@Author Ranjitha
//@Date 8th Aug 2018
//@Description This will verify Service Point VSC Charge Amt in Finance Detail window
//Ex:  Verification_of_OtherFee_ChargeAmt_FinanceDetailWindow(otherFee)
//*****************************************************************************************************************
Verification_of_OtherFee_ChargeAmt_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//add component description: OTHER
	 click_AddRow_Button_CreditDecisionWindow("Add Row")
	//select component description
	 Select_ComponentDescription_FinanceDetail_CreditDecision_Window("3","OTHER")
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//		//Field Validation
//		//**************************
//		//Enter Other Fee - Charge Amt field with invalid data more than 8 digits
//		 enter_ChargeAmount_CreditDecision_window("3",Generate_RandomNumber(10))
//		
//		//Get the Length of Entered value in Other Fee - Charge Amt field
//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_component","#3","charge_amt"))
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 6 
//			 writeReportLog("Validation of Other Fee - Charge Amt field is Accepting only 6 digits","Passed","","")
//		else
//			 writeReportLog("Failed : Other Fee - Charge Amt field is Accepting more than 6 digits: "&getValueLength,"Failed", Err.Description ,"")
//		 
//	
	//***************
	//Work Flow
	//***************
	//enter charge amount
	otherFee = Generate_RandomNumber_UserDefind("9","8")
	 enter_ChargeAmount_CreditDecision_window("3",otherFee)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_component","#3", "charge_amt"))
	//Updated Repo comm Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#3", "charge_amt","bp_financedetails","otherfee_fdw",ID)
	 writeReportLog("Entered Other Fee Amount value: "& otherFee &" in Finance Detail window (UI-"&getValueLength&",DB-6)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_OtherFee_ChargeAmt_FinanceDetailWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ServicePointVSC_RepoComm_FinanceDetailWindow(RepoComm)
//@Author Ranjitha
//@Date 8th Aug 2018
//@Description This will verify Service Point VSC Repo Comm in Finance Detail window
//Ex:  Verification_of_ServicePointVSC_RepoComm_FinanceDetailWindow(RepoComm)
//*****************************************************************************************************************
Verification_of_ServicePointVSC_RepoComm_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//		//Field Validation
//		//**************************
//		//Enter Service Point VSC - Repo Comm field with invalid data more than 6 digits
//		 enter_RepoComm_CreditDecision_window("2",Generate_RandomNumber(10))
//		
//		//Get the Length of Entered value in Service Point VSC - Repo Comm field
//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_component","#2","rep_comm"))
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 6 
//			 writeReportLog("Validation of Service Point VSC - Repo Comm field is Accepting only 6 digits","Passed","","")
//		else
//			 writeReportLog("Failed : Service Point VSC - Repo Comm field is Accepting more than 6 digits: "&getValueLength,"Failed", Err.Description ,"")
//		 
//	
	//***************
	//Work Flow
	//***************
	//enter Repo comm
	RepoComm = Generate_RandomNumber_UserDefind("9","8")
	 enter_RepoComm_CreditDecision_window("2",RepoComm)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_component","#2", "rep_comm"))
	//Updated Repo comm Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#2", "rep_comm","bp_financedetails","repocomm_vsc_fdw",ID)
	 writeReportLog("Entered Repo Comm Amount value: "& RepoComm &" in Finance Detail window (UI-"&getValueLength&",DB-6)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ServicePointVSC_RepoComm_FinanceDetailWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ServicePointVSC_DealerComm_FinanceDetailWindow(DealerComm)
//@Author Ranjitha
//@Date 8th Aug 2018
//@Description This will verify Service Point VSC Dealer Comm in Finance Detail window
//Ex:  Verification_of_ServicePointVSC_DealerComm_FinanceDetailWindow(DealerComm)
//*****************************************************************************************************************
Verification_of_ServicePointVSC_DealerComm_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//		//Field Validation
//		//**************************
//		//Enter Service Point VSC - Dealer Comm field with invalid data more than 6 digits
//		 enter_DealerComm_CreditDecision_window("2",Generate_RandomNumber(10))
//		
//		//Get the Length of Entered value in Service Point VSC - Dealer Comm field
//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_component","#2","dealer_comm"))
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 6 
//			 writeReportLog("Validation of Service Point VSC - Dealer Comm field is Accepting only 6 digits","Passed","","")
//		else
//			 writeReportLog("Failed : Service Point VSC - Dealer Comm field is Accepting more than 6 digits: "&getValueLength,"Failed", Err.Description ,"")
//		 	
//	
	//***************
	//Work Flow
	//***************
	//enter dealer comm
	DealerComm = Generate_RandomNumber_UserDefind("9","8")
	 enter_DealerComm_CreditDecision_window("2",DealerComm)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_component","#2", "dealer_comm"))
	//Updated Dealer comm Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#2", "dealer_comm","bp_financedetails","dealercomm_vsc_fdw",ID)
	 writeReportLog("Entered Dealer Comm Amount value: "& DealerComm &" in Finance Detail window (UI-"&getValueLength&",DB-6)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ServicePointVSC_DealerComm_FinanceDetailWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ServicePointVSC_SurChrgAmt_FinanceDetailWindow(SurAmt)
//@Author Ranjitha
//@Date 8th Aug 2018
//@Description This will verify Service Point VSC SurChrg Amt in Finance Detail window
//Ex:  Verification_of_ServicePointVSC_SurChrgAmt_FinanceDetailWindow(SurAmt)
//*****************************************************************************************************************
Verification_of_ServicePointVSC_SurChrgAmt_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//		//Field Validation
//		//**************************
//		//Enter Service Point VSC - SurChrg Amt field with invalid data more than 8 digits
//		 enter_SurchargeAmount_CreditDecision_window("2",Generate_RandomNumber(10))
//		
//		//Get the Length of Entered value in Service Point VSC - SurChrg Amt field
//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_component","#2","surcharge_amt"))
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 6 
//			 writeReportLog("Validation of Service Point VSC - SurChrg Amt field is Accepting only 6 digits","Passed","","")
//		else
//			 writeReportLog("Failed : Service Point VSC - SurChrg Amt field is Accepting more than 6 digits: "&getValueLength,"Failed", Err.Description ,"")
//		 
//	
	//***************
	//Work Flow
	//***************
	//enter surcharge amount
	SurAmt = Generate_RandomNumber_UserDefind("9","8")
	 enter_SurchargeAmount_CreditDecision_window(2,SurAmt)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_component","#2", "surcharge_amt"))
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#2", "surcharge_amt","bp_financedetails","suramount_fdw",ID)
	 writeReportLog("Entered Sur Charge Amount value: "& SurAmt &" in Finance Detail window (UI-"&getValueLength&",DB-6)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ServicePointVSC_SurChrgAmt_FinanceDetailWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ServicePointVSC_ChargeAmt_FinanceDetailWindow(ChrgeAmt)
//@Author Ranjitha
//@Date 8th Aug 2018
//@Description This will verify Service Point VSC Charge Amt in Finance Detail window
//Ex:  Verification_of_ServicePointVSC_ChargeAmt_FinanceDetailWindow(ChrgeAmt)
//*****************************************************************************************************************
Verification_of_ServicePointVSC_ChargeAmt_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//		//Field Validation
//		//**************************
//		//Enter Service Point VSC - Charge Amt field with invalid data more than 8 digits
//		 enter_ChargeAmount_CreditDecision_window("2",Generate_RandomNumber(10))
//		
//		//Get the Length of Entered value in Service Point VSC - Charge Amt field
//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_component","#2","charge_amt"))
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 6 
//			 writeReportLog("Validation of Service Point VSC - Charge Amt field is Accepting only 6 digits","Passed","","")
//		else
//			 writeReportLog("Failed : Service Point VSC - Charge Amt field is Accepting more than 6 digits: "&getValueLength,"Failed", Err.Description ,"")
//		 
//	
	//***************
	//Work Flow
	//***************
	//enter charge amount
	ChrgeAmt = Generate_RandomNumber_UserDefind("9","8")
	 enter_ChargeAmount_CreditDecision_window("2",ChrgeAmt)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_component","#1", "charge_amt"))
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#1", "charge_amt","bp_financedetails","chargeamount_fdw",ID)
	 writeReportLog("Entered Charge Amount value: "& ChrgeAmt &" in Finance Detail window (UI-"&getValueLength&",DB-6)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ServicePointVSC_ChargeAmt_FinanceDetailWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_PFSGAP_RepoComm_FinanceDetailWindow(RepoComm)
//@Author Ranjitha
//@Date 8th Aug 2018
//@Description This will verify PFS GAP Repo Comm in Finance Detail window
//Ex:  Verification_of_PFSGAP_RepoComm_FinanceDetailWindow(RepoComm)
//*****************************************************************************************************************
Verification_of_PFSGAP_RepoComm_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//		//Field Validation
//		//**************************
//		//Enter PFS GAP - Repo Comm field with invalid data more than 6 digits
//		 enter_RepoComm_CreditDecision_window("1",Generate_RandomNumber(10))
//		
//		//Get the Length of Entered value in PFS GAP - Repo Comm field
//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_component","#1","rep_comm"))
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 6 
//			 writeReportLog("Validation of PFS GAP - Repo Comm field is Accepting only 6 digits","Passed","","")
//		else
//			 writeReportLog("Failed : PFS GAP - Repo Comm field is Accepting more than 6 digits: "&getValueLength,"Failed", Err.Description ,"")
//		 
//	
	//***************
	//Work Flow
	//***************
	//enter Repo comm
	RepoComm = Generate_RandomNumber_UserDefind("9","8")
	 enter_RepoComm_CreditDecision_window("1",RepoComm)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_component","#1", "rep_comm"))
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#1", "rep_comm","bp_financedetails","repocomm_fdw",ID)
	 writeReportLog("Entered Repo comm Amount value: "& RepoComm &" in Finance Detail window (UI-"&getValueLength&",DB-6)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_PFSGAP_RepoComm_FinanceDetailWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_PFSGAP_DealerComm_FinanceDetailWindow(DealerComm)
//@Author Ranjitha
//@Date 8th Aug 2018
//@Description This will verify PFS GAP Dealer Comm in Finance Detail window
//Ex:  Verification_of_PFSGAP_DealerComm_FinanceDetailWindow(DealerComm)
//*****************************************************************************************************************
Verification_of_PFSGAP_DealerComm_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//		//Field Validation
//		//**************************
//		//Enter PFS GAP - Dealer Comm field with invalid data more than 6 digits
//		 enter_DealerComm_CreditDecision_window("1",Generate_RandomNumber(10))
//		
//		//Get the Length of Entered value in PFS GAP - Dealer Comm field
//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_component","#1","dealer_comm"))
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 6 
//			 writeReportLog("Validation of PFS GAP - Dealer Comm field is Accepting only 6 digits","Passed","","")
//		else
//			 writeReportLog("Failed : PFS GAP - Dealer Comm field is Accepting more than 6 digits: "&getValueLength,"Failed", Err.Description ,"")
//		 
//	
	//***************
	//Work Flow
	//***************
	//enter dealer comm
	DealerComm = Generate_RandomNumber_UserDefind("9","8")
	 enter_DealerComm_CreditDecision_window("1",DealerComm)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_component","#1", "dealer_comm"))
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#1", "dealer_comm","bp_financedetails","dealercomm_fdw",ID)
	 writeReportLog("Entered Dealer comm Amount value: "& DealerComm &" in Finance Detail window (UI-"&getValueLength&",DB-8)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_PFSGAP_DealerComm_FinanceDetailWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_PFSGAP_ChargeAmt_FinanceDetailWindow(GapChrgAmt)
//@Author Ranjitha
//@Date 8th Aug 2018
//@Description This will verify PFS GAP Charge Amount in Finance Detail window
//Ex:  Verification_of_PFSGAP_ChargeAmt_FinanceDetailWindow(GapChrgAmt)
//*****************************************************************************************************************
Verification_of_PFSGAP_ChargeAmt_FinanceDetailWindow(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//		//Field Validation
//		//**************************
//		//Enter PFS GAP - Charge Amt field with invalid data more than 8 digits
//		 enter_ChargeAmount_CreditDecision_window("1",Generate_RandomNumber(10))
//		
//		//Get the Length of Entered value in PFS GAP - Charge Amt field
//		getValueLength = int(getValue_In_PBDataWindow_DP("dw_component","#1","charge_amt"))
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) = 6 
//			 writeReportLog("Validation of PFS GAP - Charge Amt field is Accepting only 6 digits","Passed","","")
//		else
//			 writeReportLog("Failed : PFS GAP - Charge Amt field is Accepting more than 6 digits: "&getValueLength,"Failed", Err.Description ,"")
//		 
//	
	//***************
	//Work Flow
	//***************
	if currentState = "FL" 
	    //get DocStamp amount
		DocStampAmtBefore = get_ChgAmt_CreditDecision_window("1")
		//enter charge amount
		GapChrgAmt = Generate_RandomNumber_UserDefind("9","8")
		 enter_ChargeAmount_CreditDecision_window("1",GapChrgAmt)
		 sendKeys("{Tab}")
		getValueLength = Length(getValue_In_PBDataWindow_DP("dw_component","#1", "charge_amt"))
		//Updated Discount Amt random data in DB
		 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#1", "charge_amt","bp_financedetails","gapchargeamount_fdw",ID)
		 writeReportLog("Entered charge Amount value: "& GapChrgAmt &" in Finance Detail window (UI-"&getValueLength&",DB-6)","Passed",FailComments,"")
	else
    	//enter charge amount
		GapChrgAmt = Generate_RandomNumber_UserDefind("9","8")
		 enter_ChargeAmount_CreditDecision_window("1",GapChrgAmt)
		 sendKeys("{Tab}")
		getValueLength = Length(getValue_In_PBDataWindow_DP("dw_component","#1", "charge_amt"))
		//Updated Discount Amt random data in DB
		 Update_ColumnValue_Into_DB("w_wiz_new_cust", "dw_component", "#1", "charge_amt","bp_financedetails","gapchargeamount_fdw",ID)
		 writeReportLog("Entered charge Amount value: "& GapChrgAmt &" in Finance Detail window (UI-"&getValueLength&",DB-6)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_PFSGAP_ChargeAmt_FinanceDetailWindow","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Judgment_Checkbox_AccountTab(value)
//@Author Ranjitha
//@Date 10th Aug 2018
//@Description This will verify Judgment checkbox in Account tab
//Ex:  Verification_of_Judgment_Checkbox_AccountTab("No")
//*****************************************************************************************************************
Verification_of_Judgment_Checkbox_AccountTab(String value)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//**************************
		//Field Validation
		//**************************
		//Select Judgment checkbox
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct")
		 SetValue_PBDataWindow(tblwindow,"#1","judgment_yn","ON")
		 TypeText_PBDataWindow(tblwindow,"#1","judgment_dt",date)
	//***************
	//Work Flow
	//***************
 	//Unselect Judgment Checkbox
	 SetValue_PBDataWindow(tblwindow,"#1","judgment_yn",value)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Judgment_Checkbox_AccountTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Legal_Checkbox_AccountTab(value)
//@Author Ranjitha
//@Date 10th Aug 2018
//@Description This will verify Legal checkbox in Account tab
//Ex:  Verification_of_Legal_Checkbox_AccountTab("No")
//*****************************************************************************************************************
Verification_of_Legal_Checkbox_AccountTab(String value)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//**************************
		//Field Validation
		//**************************
		//Select legal checkbox
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct")
		 SetValue_PBDataWindow(tblwindow,"#1","legal_yn","ON")
		//Clickon Save button
		 clickOnSaveButon()
		//Validate label in Account tab
		Set tblwindow1 = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_account_status_display")
		label = GetValue_PBDataWindow(tblwindow1,"#1","account_msg")
		if label = "LEGAL" 
			writeReportLog "Legal checkbox is checked and Label : "&label&" is displayed","Passed","",""
	//***************
	//Work Flow
	//***************
 	//Unselect legal Checkbox
	 SetValue_PBDataWindow(tblwindow,"#1","legal_yn",value)
	//Clickon Save button
	 clickOnSaveButon()
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_account_status_display").WaitWhileExists 
	else
		writeReportLog "Legal checkbox is unchecked and Label is disappeared","Passed","",""
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Legal_Checkbox_AccountTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_PlusLoan_Checkbox_AccountTab(value)
//@Author Ranjitha
//@Date 10th Aug 2018
//@Description This will verify Plus Loan checkbox in Account tab
//Ex:  Verification_of_PlusLoan_Checkbox_AccountTab("No")
//*****************************************************************************************************************
Verification_of_PlusLoan_Checkbox_AccountTab(String value)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//**************************
		//Field Validation
		//**************************
		//Validate Plus loan checkbox
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct")
		plusloan = GetValue_PBDataWindow(tblwindow,"#1","plus_loan_yn")
		if plusloan = "ON" 
			writeReportLog "Plus Loan checkbox is checked","Passed","",""
	//***************
	//Work Flow
	//***************
 	//Unselect Plus Loan Checkbox
	 SetValue_PBDataWindow(tblwindow,"#1","plus_loan_yn",value)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_PlusLoan_Checkbox_AccountTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_BankDraft_Checkbox_AccountTab(value)
//@Author Ranjitha
//@Date 10th Aug 2018
//@Description This will verify Bank Draft checkbox in Account tab
//Ex:  Verification_of_BankDraft_Checkbox_AccountTab("No")
//*****************************************************************************************************************
Verification_of_BankDraft_Checkbox_AccountTab(String value)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//**************************
		//Field Validation
		//**************************
		//Select bank draft checkbox
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct")
		 SetValue_PBDataWindow(tblwindow,"#1","bank_draft_yn","ON")
	//***************
	//Work Flow
	//***************
 	//Unselect Bank Draft Checkbox
	 SetValue_PBDataWindow(tblwindow,"#1","bank_draft_yn",value)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_BankDraft_Checkbox_AccountTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Note_AccountTab(note)
//@Author Ranjitha
//@Date 10th Aug 2018
//@Description This will verify Note field in Account tab
//Ex:  Verification_of_Note_AccountTab("Automated Testing Note")
//*****************************************************************************************************************
Verification_of_Note_AccountTab(String note)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//**************************
		//Field Validation
		//**************************
		//Enter Note field with invalid data more than 255 digits
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct")
		 SetValue_PBDataWindow(tblwindow,"#1","note",random_AlphaNumeric_String(258))
		//Get the Length of Entered value in Note field
		getValueLength = getValue_In_PBDataWindow_DP("dw_acct","#1","note")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) <= 256 
			 writeReportLog("Validation of Note field is Accepting only 255 digits","Passed","","")
		else
			 writeReportLog("Failed : Note field is Accepting more than 255 digits: "&getValueLength,"Failed", Err.Description ,"")
	//***************
	//Work Flow
	//***************
 	//enter Note
	 SetValue_PBDataWindow(tblwindow,"#1","note",note)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Note_AccountTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_DeleteCoApplicant_details_CoapplicantTab()
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will Delete the coapplicants in Co Applicant tab
//Ex:  Verification_of_DeleteCoApplicant_details_CoapplicantTab()
//*****************************************************************************************************************
Verification_of_DeleteCoApplicant_details_CoapplicantTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Click on Delete button
	 clickButton_Delete()
	//Click on Yes button
	 clickButton_InWindow("w_message","Yes")
	//Click on Delete button
	 clickButton_Delete()
	//Click on Yes button
	 clickButton_InWindow("w_message","Yes")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_DeleteCoApplicant_details_CoapplicantTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_AddCoApplicant_details_CoapplicantTab(lastName,firstName,ssn,affilaion)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will add the coapplicant details in Search Co Applicant window
//Ex:  Verification_of_AddCoApplicant_details_CoapplicantTab(lastName,firstName,ssn,affilaion)
//*****************************************************************************************************************
Verification_of_AddCoApplicant_details_CoapplicantTab(String lastName,String firstName,String ssn,String affilaion)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//Field validation
		//Validation of Last Name field
		set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_search_coapplicant").PbWindow("pbname:=w_search").PbDataWindow("pbname:=dw_search")
		 SetValue_PBDataWindow(tblwindow,"#1","last_name",random_AlphaNumeric_String(32))
		//Get the Length of Entered value in last name field
		getValueLength = GetValue_PBDataWindow(tblwindow,"#1","last_name")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 30 
			 writeReportLog("Validation of Last Name field is Accepting only 30 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed to Last Name is Accepting More than 30 characters","Failed", Err.Description ,"")
	//Woek flow -Valid Data 
	 TypeText_PBDataWindow(tblwindow,"#1","last_name",lastName)
	//****************************************************************************************
	if Environment.value("FV_Flag") = "Y" 
		//Field validation
		//Validation of First Name field
		set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_search_coapplicant").PbWindow("pbname:=w_search").PbDataWindow("pbname:=dw_search")
		 SetValue_PBDataWindow(tblwindow,"#1","first_name",random_AlphaNumeric_String(32))
		//Get the Length of Entered value in last name field
		getValueLength = GetValue_PBDataWindow(tblwindow,"#1","first_name")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 30 
			 writeReportLog("Validation of First Name field is Accepting only 30 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed to First Name is Accepting More than 30 characters","Failed", Err.Description ,"")
	//Work Flow - Valid Data 
	 TypeText_PBDataWindow(tblwindow,"#1","first_name",firstName)
	//****************************************************************************************
	if Environment.value("FV_Flag") = "Y" 
		//Field validation
		//Validation of SSN field
		set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_search_coapplicant").PbWindow("pbname:=w_search").PbDataWindow("pbname:=dw_search")
		 SetValue_PBDataWindow(tblwindow,"#1","ssn",Generate_RandomNumber(10))
		//Get the Length of Entered value in last name field
		getValueLength = GetValue_PBDataWindow(tblwindow,"#1","ssn")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 9 
			 writeReportLog("Validation of SSN field is Accepting only 9 digits: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed to SSN is Accepting More than 9 digits","Failed", Err.Description ,"")
	//Work Flow - Valid Data 
	 TypeText_PBDataWindow(tblwindow,"#1","ssn",ssn)
	//********************************************************************************************
	//Select the affiliation
	 TypeText_PBDataWindow(tblwindow,"#1","affil_type",affilaion)
	//Click on OK button
	 click_Button_InWindow_DP("w_search_coapplicant","w_search","Ok")
	//Click on Close button
	 clickButton_InWindow("w_search_coapplicant","Close")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_AddCoApplicant_details_CoapplicantTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: verification_Of_Adding_ExistingCoapplicantDetails()
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will add existing applicant in Add Co Applicant window
//Ex:  verification_Of_Adding_ExistingCoapplicantDetails()
//*****************************************************************************************************************
verification_Of_Adding_ExistingCoapplicantDetails()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_search_coapplicant").PbWindow("pbname:=w_search").PbDataWindow("pbname:=dw_search")
	 SelectCell_PBDataWindow(tblwindow,"#1","first_name")
	 TypeText_PBDataWindow(tblwindow,"#1","first_name","B")
	//Click on OK button
	 click_Button_InWindow_DP("w_search_coapplicant","w_search","Ok")
	//Click on Add Cosign button
	 clickOnButton_InWindow("Add Coapplicant","Add CO&SIGN")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: verification_Of_Adding_ExistingCoapplicantDetails","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: createNewCoapplicant()
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will Create New coapplicant in Search Co Applicant window
//Ex:  createNewCoapplicant()
//*****************************************************************************************************************
createNewCoapplicant()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Click on Add Row button
	 ClickonAddRow_Button_F2Window()
	//Click on Cancel button
	 click_Button_InWindow_DP("w_search_coapplicant","w_search","Cancel")
	//Click on Create New button
	 clickButton_InWindow("w_search_coapplicant","Create &New")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: createNewCoapplicant","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_AddedCoApplicant_details_CoapplicantTab()
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will Verify the Newly added coapplicant details Co Applicant tab
//Ex:  Verification_of_AddedCoApplicant_details_CoapplicantTab()
//*****************************************************************************************************************
Verification_of_AddedCoApplicant_details_CoapplicantTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Get the data from CoApplicant tab
	set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_coapp")
	Sleep (2)
	lastName = GetValue_PBDataWindow(tblwindow,"#2","last_name")
	firstName = GetValue_PBDataWindow(tblwindow,"#2","first_name")
	SSN = GetValue_PBDataWindow(tblwindow,"#2","ssn")
	affiliation = ToUpper(GetValue_PBDataWindow(tblwindow,"#2","affil_type"))
	primaryLang = GetValue_PBDataWindow(tblwindow,"#2","primary_lang")
	expLang = "English"
	 validateDataAndReport(lastName,Environment.Value("Joint_lastName"),"Last Name in Add Applicant window : " & Joint_lastName & " and in CoApplicant tab: " & lastName)
	 validateDataAndReport(firstName,Environment.Value("Joint_firstName"),"First Name in Add Applicant window : " & Joint_firstName & " and in CoApplicant tab: " & firstName)
	 validateDataAndReport(SSN,Environment.Value("Joint_ssn"),"SSN in Add Applicant window : " & Joint_ssn & " and in CoApplicant tab: " & SSN)
	 validateDataAndReport(ToUpper(affiliation),ToUpper(Environment.Value("Joint_affilaion")),"Affiliation in Add Applicant window : " & Joint_affilaion & " and in CoApplicant tab: " & affiliation)
	 validateDataAndReport(primaryLang,expLang,"Primary Language in Add Applicant window : " & expLang & " and in CoApplicant tab: " & primaryLang)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_AddedCoApplicant_details_CoapplicantTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ExisitngCoApplicant_details_CoapplicantTab()
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will Verify the existing coapplicant details Co Applicant tab
//Ex:  Verification_of_ExisitngCoApplicant_details_CoapplicantTab()
//*****************************************************************************************************************
Verification_of_ExisitngCoApplicant_details_CoapplicantTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Get the data from CoApplicant tab
	set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_coapp")
	lastName = ToUpper(GetValue_PBDataWindow(tblwindow,"#1","last_name"))
	firstName = ToUpper(GetValue_PBDataWindow(tblwindow,"#1","first_name"))
	SSN = GetValue_PBDataWindow(tblwindow,"#1","ssn")
	affiliation = ToUpper(GetValue_PBDataWindow(tblwindow,"#1","affil_type"))
	primaryLang = ToUpper(GetValue_PBDataWindow(tblwindow,"#1","primary_lang"))
	DOB= GetValue_PBDataWindow(tblwindow,"#1","dob_dt")
	dob = cdate(DOB)
	custage = (Now()-dob)/365.2425
	Split_age = Split(custage,".")
	age = Split_age(0)
	expaffiliation = "JOINT"
	expLang = ToUpper("English")
	 validateDataAndReport(lastName,Environment.Value("Joint_lastName"),"Last Name in CreditDecision window : " & CoApp_LastName & " and in CoApplicant tab: " & lastName)
	 validateDataAndReport(firstName,Environment.Value("Joint_firstName"),"First Name in CreditDecision window : " & CoApp_FirstName & " and in CoApplicant tab: " & firstName)
	 validateDataAndReport(SSN,Environment.Value("Joint_ssn"),"SSN in CreditDecision window : " & CoApp_SSN & " and in CoApplicant tab: " & SSN)
	 validateDataAndReport(affiliation,expaffiliation,"Affiliation in CreditDecision window : " & expaffiliation & " and in CoApplicant tab: " & affiliation)
	 validateDataAndReport(primaryLang,expLang,"Primary Language in CreditDecision window : " & expLang & " and in CoApplicant tab: " & primaryLang)
	 writeReportLog("Validation of Co Applicant age :"&age,"Passed","","")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ExisitngCoApplicant_details_CoapplicantTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: ClickonAddRow_Button_F2Window()
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will Click on Add Row button in F2 window
//Ex:  ClickonAddRow_Button_F2Window()
//*****************************************************************************************************************
ClickonAddRow_Button_F2Window()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	PbWindow("BranchPlus").InsightObject("btnAddRow").Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: ClickonAddRow_Button_F2Window","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: validate_Verify_OtherStipulationFields()
//@Author Thirumal Reddy
//@Date 7th Aug 2018
//@Description This will validate Contract Date in Finance Detail window
//Ex:  validate_Verify_OtherStipulationFields()
//*****************************************************************************************************************
validate_Verify_OtherStipulationFields(String value)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
String rowName
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
String arrayLength
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 for rowName = 1 To 10 step 1
	 	arraylength = rowName-1
	 	//**************************
		//Field Validation
		//**************************
//		if Environment.value("FV_Flag") = "Y" 
//	 	Set tblPBDataWindow =PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_step")
//	 	//Select the value from Other Stipulated drop down
//		 TypeText_PBDataWindow(tblPBDataWindow, "#"&rowName,"other_stipulation",random_AlphaNumeric_String(55))
//		
//		//Get the Length of Entered value in Address1 field
//		 getValueLength = Length(getValue_In_PBDataWindow_DP("dw_step","#"&rowName,"other_stipulation"))
//		 descrValue = getValue_In_PBDataWindow_DP("dw_step","#"&rowName,"descr")
//		 
//			 if getValueLength < 60 
//			 	 writeReportLog("Maximum length of the field:"&descrValue& "is less than 60 characters","Passed","","")
//			 	
//			 	else 
//			 	 writeReportLog(descrValue&"Field is accepting more than 60 characters","Failed","","Y")
//			 
//		 	 
		 	//***************
			//Work Flow
			//***************
		 	//Entering valid data into the respective fields
			 if value(arraylength) <> "" 
			 	valueData  = value(arraylength)
				Set tblPBDataWindow =PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_step")
			 	// clear_Field_textBox("other_stipulation","#"&rowName)
			 	 TypeText_PBDataWindow(tblPBDataWindow, "#"&rowName,"other_stipulation",valueData)
			 	// Select_Individual_Column_Data_RandomValue_Other("branchplusqa.bp_dropdown_values","other_stipulated_dropdown",tblPBDataWindow,"#"&rowName,"other_stipulation")
			 //actvalue = getValue_In_PBDataWindow_DP("dw_step","#"&rowName,"other_stipulation")
			 else 
			 	 writeReportLog("Data array is empty","Failed","","Y")
	 //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: validate_Verify_OtherStipulationFields","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: clear_Field_textBox(column_Name,rowNum)
//@Author Thirumal Reddy
//@Date 7th Aug 2018
//@Description This will validate Contract Date in Finance Detail window
//Ex:  clear_Field_textBox(other_stipulation","#1")
//*****************************************************************************************************************
clear_Field_textBox(String column_Name,String rowNum)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Object for Data Window
	Set tblPBDataWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_step")
	tblPBDataWindow.SelectCell rowNum, column_Name
	//Click Cell
	tblPBDataWindow.Click()
	//Set Value
	tblPBDataWindow.SetValue(CellData rowNum, column_Name,""
		//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed to clear_Field_InBasicTab"&column_Name,"Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: handle_ErrorPopup_F2Window()
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will handle error pop up in F2 window
//Ex:  handle_ErrorPopup_F2Window()
//*****************************************************************************************************************
handle_ErrorPopup_F2Window()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_message").WaitWhileExists 
		//Get the Error Popup Title
		ErrorPopupTitle = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_message").GetAttr(("regexpwndtitle")
		//Click OK Button
		PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_message").PbButton("text:=OK").Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: handle_ErrorPopup_F2Window","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_MonthlyPayment_AccountTab()
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the Monthly payment in Account window
//Ex:  Verification_of_MonthlyPayment_AccountTab()
//*****************************************************************************************************************
Verification_of_MonthlyPayment_AccountTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//**************************
		//Field Validation
		//**************************
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct")
		//Before changing loan term 
		loanamt = GetValue_PBDataWindow(tblwindow,"#1","purch_amt")
		amtFinanced = GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")
		totalintrst = GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")
		totalfinanced = GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")
		//Select Override Payment checkbox 
		 SetValue_PBDataWindow(tblwindow, "#1","override_pmt_amt_yn","ON")
		//get monthly pmt amount
		mnthlypmt = GetValue_PBDataWindow(tblwindow, "#1","pmt_amt")
		//Enter Monthly Payment field with invalid data more than 9 digits
		value = CCur(mnthlypmt+"100")
		 SetValue_PBDataWindow(tblwindow, "#1","pmt_amt",value)
		//Validate the warning pop up
		// handle_ErrorPopup_F2Window()
		//Get the Length of Entered value in Monthly payment field
		getValueLength = CCur(GetValue_PBDataWindow(tblwindow,"#1","pmt_amt"))
		//Comparing the Length of accepting characters 
		if FuzzytMatch(value,getValueLength) = 0 
			 writeReportLog("Monthly Payment amount has updated successfully","Passed","","")
		//set value in monthly payment field
		 SetValue_PBDataWindow(tblwindow,"#1","pmt_amt","500")
		actamtFinanced = CCur(GetValue_PBDataWindow(tblwindow,"#1","amt_fincd"))
		acttotalintrst = ccur(GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt"))
		acttotalfinanced = ccur(GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed"))
		expamtfinance = ccur(amtFinanced)
		exptotfinanced = ccur(actamtFinanced)+ccur(acttotalintrst)
		 validateDataAndReport(actamtFinanced,expamtfinance,"Validation of Amount Financed in Account Tab Expected: "&amtFinanced& " and Actual: "&actamtFinanced)
		 validateDataAndReport(acttotalfinanced,exptotfinanced,"Validation of Total Financed Amount in Account Tab Expected: "&exptotfinanced& " and Actual: "&acttotalfinanced)
	//***************
	//Work Flow
	//***************
	 SetValue_PBDataWindow(tblwindow, "#1","override_pmt_amt_yn","OFF")
	//get monthly pmt amount
	actmnthlypmt = GetValue_PBDataWindow(tblwindow, "#1","pmt_amt")
	if FuzzytMatch(mnthlypmt,actmnthlypmt) = 0 
		writeReportLog "Override Payment checkbox is unselected.","Passed","",""
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_MonthlyPayment_AccountTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_InterestRate_AccountTab(intrate)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the interest rate in Account window
//Ex:  Verification_of_InterestRate_AccountTab(".16")
//*****************************************************************************************************************
Verification_of_InterestRate_AccountTab(String intRate)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//**************************
		//Field Validation
		//**************************
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct")
		//Before changing loan term 
		loanamt = GetValue_PBDataWindow(tblwindow,"#1","purch_amt")
		amtFinanced = GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")
		totalintrst = GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")
		totalfinanced = GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")
		//Enter Interest Rate field with invalid data more than 3 digits
		 SetValue_PBDataWindow(tblwindow, "#1","int_rate",Generate_RandomNumber(8))
		//Validate the warning pop up
		 handle_ErrorPopup_F2Window()
		//set value in interest rate field
		 SetValue_PBDataWindow(tblwindow,"#1","int_rate","10")
		//Validate the warning pop up
		 handle_ErrorPopup_F2Window()
		actamtFinanced = CCur(GetValue_PBDataWindow(tblwindow,"#1","amt_fincd"))
		acttotalintrst = ccur(GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt"))
		acttotalfinanced = ccur(GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed"))
		expamtfinance = ccur(amtFinanced)
		exptotfinanced = ccur(actamtFinanced)+ccur(acttotalintrst)
		 validateDataAndReport(actamtFinanced,expamtfinance,"Validation of Amount Financed in Account Tab Expected: "&expamtfinance& " and Actual: "&actamtFinanced)
		 validateDataAndReport(acttotalfinanced,exptotfinanced,"Validation of Total Financed Amount in Account Tab Expected: "&exptotfinanced& " and Actual: "&acttotalfinanced)
	//***************
	//Work Flow
	//***************
	 SetValue_PBDataWindow(tblwindow,"#1","int_rate",intRate)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_InterestRate_AccountTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Terms_AccountTab(loanterm)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the loan term in Account window
//Ex:  Verification_of_Terms_AccountTab("60")
//*****************************************************************************************************************
Verification_of_Terms_AccountTab(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//**************************
		//Field Validation
		//**************************
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct")
		//Before changing loan term 
		loanamt = GetValue_PBDataWindow(tblwindow,"#1","purch_amt")
		amtFinanced = GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")
		totalintrst = GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")
		totalfinanced = GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")
		//Enter Terms field with invalid data more than 3 digits
		 SetValue_PBDataWindow(tblwindow,"#1","nbr_of_months",Generate_RandomNumber(5))
		//Get the Length of Entered value in Terms field
		getValueLength = int(GetValue_PBDataWindow(tblwindow,"#1","nbr_of_months"))
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 3 
			 writeReportLog("Validation of Terms field is Accepting only 3 digits","Passed","","")
		else
			 writeReportLog("Failed : Terms field is Accepting more than 3 digits: "&getValueLength,"Failed", Err.Description ,"")
		//set value in terms field
		 SetValue_PBDataWindow(tblwindow,"#1","nbr_of_months","100")
		actamtFinanced = CCur(GetValue_PBDataWindow(tblwindow,"#1","amt_fincd"))
		acttotalintrst = ccur(GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt"))
		acttotalfinanced = ccur(GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed"))
		expamtfinance = ccur(amtFinanced)
		exptotfinanced = ccur(actamtFinanced)+ccur(acttotalintrst)
		 validateDataAndReport(actamtFinanced,expamtfinance,"Validation of Amount Financed in Account Tab Expected: "&expamtfinance& " and Actual: "&actamtFinanced)
		 validateDataAndReport(acttotalfinanced,exptotfinanced,"Validation of Total Financed Amount in Account Tab Expected: "&exptotfinanced& " and Actual: "&acttotalfinanced)
	//***************
	//Work Flow
	//***************
	// SetValue_PBDataWindow(tblwindow,"#1","nbr_of_months",loanTerm)
	loanTerm = Generate_RandomNumber_UserDefind("9","3")
	 SetValue_PBDataWindow(tblwindow,"#1","nbr_of_months",loanTerm)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_acct","#1", "nbr_of_months"))
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "nbr_of_months","bp_financedetails","loanterm",ID)
	 writeReportLog("Entered Loan Term: "& loanTerm &" in Account Tab(UI-"&getValueLength&",DB-3)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Terms_AccountTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_DownPayment_AccountTab(dwnpmt)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the down payment in Account window
//Ex:  Verification_of_DownPayment_AccountTab("100")
//*****************************************************************************************************************
 Verification_of_DownPayment_AccountTab(ID)
 	if Environment.value("FV_Flag") = "Y" 
 		//**************************
	 	//Field Validation
	 	//**************************
	 	Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct")
	 	//Before adding down_pmt amount 
		loanamt = GetValue_PBDataWindow(tblwindow,"#1","purch_amt")
		dealercheck = GetValue_PBDataWindow(tblwindow,"#1","dealer_check")
		dwnpmt = GetValue_PBDataWindow(tblwindow,"#1","down_pmt")
		totaldwnpmt = GetValue_PBDataWindow(tblwindow,"#1","cf_total_down_payment")
		unpaidBal = GetValue_PBDataWindow(tblwindow,"#1","cf_unpaid_balance")
		tototherchrges = GetValue_PBDataWindow(tblwindow,"#1","cmpnt_amt")
		amtFinanced = GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")
		totalintrst = GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")
		totalfinanced = GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")
	 	 //Enter Down Payment field with invalid data more than 100 characters
		 SetValue_PBDataWindow(tblwindow,"#1","down_pmt",Generate_RandomNumber(10))
		//Get the Length of Entered value in Down Payment field
		getValueLength = int(GetValue_PBDataWindow(tblwindow,"#1","down_pmt"))
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 9 
			 writeReportLog("Validation of Down Payment field is Accepting only 9 digits","Passed","","")
		else
			 writeReportLog("Failed : Down Payment field is Accepting more than 9 digits: "&getValueLength,"Failed", Err.Description ,"")
		//Set value in down pmt field
		 SetValue_PBDataWindow(tblwindow,"#1","down_pmt","100")
		actloanamt = CCur(GetValue_PBDataWindow(tblwindow,"#1","purch_amt"))
		actdealercheck = CCur(GetValue_PBDataWindow(tblwindow,"#1","dealer_check"))
		actdwnpmt = CCur(GetValue_PBDataWindow(tblwindow,"#1","down_pmt"))
		acttotaldwnpmt = CCur(GetValue_PBDataWindow(tblwindow,"#1","cf_total_down_payment"))
		actunpaidbal = CCur(GetValue_PBDataWindow(tblwindow,"#1","cf_unpaid_balance"))
		acttototherchrges = CCur(GetValue_PBDataWindow(tblwindow,"#1","cmpnt_amt"))
		actamtFinanced = CCur(GetValue_PBDataWindow(tblwindow,"#1","amt_fincd"))
		acttotalintrst = ccur(GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt"))
		acttotalfinanced = ccur(GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed"))
		expdealercheck = ccur(dealercheck)-ccur(actdwnpmt)
		expdwnpmt = ccur(dwnpmt)+ccur(actdwnpmt)
		exptotaldwnpmt = ccur(totaldwnpmt)+ccur(actdwnpmt)
		expunpaidbal = ccur(actloanamt)-ccur(actdwnpmt)
		expamtfinance = ccur(amtFinanced)-ccur(actdwnpmt)
		exptotfinanced = ccur(actamtFinanced)+ccur(acttotalintrst)
		 validateDataAndReport(actdealercheck,expdealercheck,"Validation of Dealer Check Amount in Account Tab Expected: "&expdealercheck& " and Actual: "&actdealercheck)
		 validateDataAndReport(actdwnpmt,expdwnpmt,"Validation of Down Payment in Account Tab Expected: "&expdwnpmt& " and Actual: "&actdwnpmt)
		 validateDataAndReport(acttotaldwnpmt,exptotaldwnpmt,"Validation of Total Down Payment in Account Tab Expected: "&exptotaldwnpmt& " and Actual: "&acttotaldwnpmt)
		 validateDataAndReport(actamtFinanced,expamtfinance,"Validation of Amount Financed in Account Tab Expected: "&expamtfinance& " and Actual: "&actamtFinanced)
		 validateDataAndReport(actunpaidbal,expunpaidbal,"Validation of Unpaid Balance in Account Tab Expected: "&expunpaidbal& " and Actual: "&actunpaidbal)
		 validateDataAndReport(acttotalfinanced,exptotfinanced,"Validation of Total Financed Amount in Account Tab Expected: "&exptotfinanced& " and Actual: "&acttotalfinanced)
	//***************
	//Work Flow
	//***************
	// SetValue_PBDataWindow(tblwindow,"#1","down_pmt",dwnpmt)
	dwnpmt = Generate_RandomNumber_UserDefind("9","9")
	 SetValue_PBDataWindow(tblwindow,"#1","down_pmt",dwnpmt)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_acct","#1", "down_pmt"))
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "down_pmt","bp_financedetails","downpayment",ID)
	 writeReportLog("Entered Down Payment value: "& dwnpmt &" in Account Tab(UI-"&getValueLength&",DB-9)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_DownPayment_AccountTab","Failed", Err.Description,"Y")
 RemoveFunction
//*****************************************************************************************************************
//@methodName: Verification_of_TradeinPayoff_AccountTab(tradeinpayoff)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the TradeIn payoff in Account window
//Ex:  Verification_of_TradeinPayoff_AccountTab("100")
//*****************************************************************************************************************
 Verification_of_TradeinPayoff_AccountTab(ID)
 	if Environment.value("FV_Flag") = "Y" 
 		//**************************
	 	//Field Validation
	 	//**************************
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct")
		//Before adding tradein payoff amount 
		loanamt = GetValue_PBDataWindow(tblwindow,"#1","purch_amt")
		dealercheck = GetValue_PBDataWindow(tblwindow,"#1","dealer_check")
		tradeinpayoff = GetValue_PBDataWindow(tblwindow,"#1","trade_in_payoff")
		netTradeinAmt = GetValue_PBDataWindow(tblwindow,"#1","cf_net_trade_in")
		totaldwnpmt = GetValue_PBDataWindow(tblwindow,"#1","cf_total_down_payment")
		unpaidBal = GetValue_PBDataWindow(tblwindow,"#1","cf_unpaid_balance")
		tototherchrges = GetValue_PBDataWindow(tblwindow,"#1","cmpnt_amt")
		amtFinanced = GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")
		totalintrst = GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")
		totalfinanced = GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")
	 	 //Enter Trade in payoff field with invalid data more than 100 characters
		 SetValue_PBDataWindow(tblwindow,"#1","trade_in_payoff",Generate_RandomNumber(10))
		//Get the Length of Entered value in Trade in payoff field
		getValueLength = int(GetValue_PBDataWindow(tblwindow,"#1","trade_in_payoff"))
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 9 
			 writeReportLog("Validation of Trade-In Payoff field is Accepting only 9 digits","Passed","","")
		else
			 writeReportLog("Failed : Trade-In Payoff field is Accepting more than 9 digits: "&getValueLength,"Failed", Err.Description ,"")
		//set value in trade in pay off field
		 SetValue_PBDataWindow(tblwindow,"#1","trade_in_payoff","100")
		actloanamt = CCur(GetValue_PBDataWindow(tblwindow,"#1","purch_amt"))
		actdealercheck = CCur(GetValue_PBDataWindow(tblwindow,"#1","dealer_check"))
		acttradeinpayoff = CCur(GetValue_PBDataWindow(tblwindow,"#1","trade_in_payoff"))
		actnetTradeinAmt = CCur(GetValue_PBDataWindow(tblwindow,"#1","cf_net_trade_in"))
		acttotaldwnpmt = CCur(GetValue_PBDataWindow(tblwindow,"#1","cf_total_down_payment"))
		actunpaidbal = CCur(GetValue_PBDataWindow(tblwindow,"#1","cf_unpaid_balance"))
		acttototherchrges = CCur(GetValue_PBDataWindow(tblwindow,"#1","cmpnt_amt"))
		actamtFinanced = CCur(GetValue_PBDataWindow(tblwindow,"#1","amt_fincd"))
		acttotalintrst = ccur(GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt"))
		acttotalfinanced = ccur(GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed"))
		expdealercheck = ccur(dealercheck)+ccur(acttradeinpayoff)
		exptradeinpayoff = ccur(tradeinpayoff)+ccur(acttradeinpayoff)
		expnetTradeinAmt = ccur(netTradeinAmt)-ccur(acttradeinpayoff)
		exptotaldwnpmt = ccur(actloanamt)-ccur(acttradeinpayoff)
		expunpaidbal = ccur(actloanamt)-ccur(acttotaldwnpmt)
		expamtfinance = ccur(acttototherchrges)+ccur(actunpaidbal)
		exptotfinanced = ccur(actamtFinanced)+ccur(acttotalintrst)
		 validateDataAndReport(actdealercheck,expdealercheck,"Validation of Dealer Check Amount in Account Tab Expected: "&expdealercheck& " and Actual: "&actdealercheck)
		 validateDataAndReport(acttradeinpayoff,exptradeinpayoff,"Validation of Trade-In Payoff in Account Tab Expected: "&exptradeinpayoff& " and Actual: "&acttradeinpayoff)
		 validateDataAndReport(actnetTradeinAmt,expnetTradeinAmt,"Validation of Net Trade-In Amount in Account Tab Expected: "&expnetTradeinAmt& " and Actual: "&actnetTradeinAmt)
		 validateDataAndReport(acttotaldwnpmt,exptotaldwnpmt,"Validation of Total Down Payment in Account Tab Expected: "&exptotaldwnpmt& " and Actual: "&acttotaldwnpmt)
		 validateDataAndReport(actamtFinanced,expamtfinance,"Validation of Amount Financed in Account Tab Expected: "&expamtfinance& " and Actual: "&actamtFinanced)
		 validateDataAndReport(actunpaidbal,expunpaidbal,"Validation of Unpaid Balance in Account Tab Expected: "&expunpaidbal& " and Actual: "&actunpaidbal)
		 validateDataAndReport(acttotalfinanced,exptotfinanced,"Validation of Total Financed Amount in Account Tab Expected: "&exptotfinanced& " and Actual: "&acttotalfinanced)
	//***************
	//Work Flow
	//***************
	// SetValue_PBDataWindow(tblwindow,"#1","trade_in_payoff",tradeinpayoff)
	tradeinpayoff = Generate_RandomNumber_UserDefind("9","9")
	 SetValue_PBDataWindow(tblwindow,"#1","trade_in_payoff",tradeinpayoff)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_acct","#1", "trade_in_payoff"))
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "trade_in_payoff","bp_financedetails","tradeinpayoff",ID)
	 writeReportLog("Entered Trade-In Payoff Amount value: "& tradeinpayoff &" in Account Tab(UI-"&getValueLength&",DB-9)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_TradeinPayoff_AccountTab","Failed", Err.Description,"Y")
 RemoveFunction
//*****************************************************************************************************************
//@methodName: Verification_of_TradeinAmount_AccountTab(tradeinamt)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the TradeIn Amount in Account window
//Ex:  Verification_of_TradeinAmount_AccountTab("100")
//*****************************************************************************************************************
 Verification_of_TradeinAmount_AccountTab(ID)
 	if Environment.value("FV_Flag") = "Y" 
 		//**************************
	 	//Field Validation
	 	//**************************
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct")
		//Before adding trade in amount 
		loanamt = GetValue_PBDataWindow(tblwindow,"#1","purch_amt")
		dealercheck = GetValue_PBDataWindow(tblwindow,"#1","dealer_check")
		tradeinamt = GetValue_PBDataWindow(tblwindow,"#1","trade_in_amt")
		netTradeinAmt = GetValue_PBDataWindow(tblwindow,"#1","cf_net_trade_in")
		totaldwnpmt = GetValue_PBDataWindow(tblwindow,"#1","cf_total_down_payment")
		unpaidBal = GetValue_PBDataWindow(tblwindow,"#1","cf_unpaid_balance")
		tototherchrges = GetValue_PBDataWindow(tblwindow,"#1","cmpnt_amt")
		amtFinanced = GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")
		totalintrst = GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")
		totalfinanced = GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")
	 	 //Enter Trade in amt field with invalid data more than 100 characters
		 SetValue_PBDataWindow(tblwindow,"#1","trade_in_amt",Generate_RandomNumber(10))
		//Get the Length of Entered value in Trade in amt field
		getValueLength = int(GetValue_PBDataWindow(tblwindow,"#1","trade_in_amt"))
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 9 
			 writeReportLog("Validation of Trade-In Amount field is Accepting only 9 digits","Passed","","")
		else
			 writeReportLog("Failed : Trade-In Amount field is Accepting more than 9 digits: "&getValueLength,"Failed", Err.Description ,"")
		 SetValue_PBDataWindow(tblwindow,"#1","trade_in_amt","100")
		actloanamt = CCur(GetValue_PBDataWindow(tblwindow,"#1","purch_amt"))
		actdealercheck = CCur(GetValue_PBDataWindow(tblwindow,"#1","dealer_check"))
		acttradeinamt = CCur(GetValue_PBDataWindow(tblwindow,"#1","trade_in_amt"))
		actnetTradeinAmt = CCur(GetValue_PBDataWindow(tblwindow,"#1","cf_net_trade_in"))
		acttotaldwnpmt = CCur(GetValue_PBDataWindow(tblwindow,"#1","cf_total_down_payment"))
		actunpaidbal = CCur(GetValue_PBDataWindow(tblwindow,"#1","cf_unpaid_balance"))
		acttototherchrges = CCur(GetValue_PBDataWindow(tblwindow,"#1","cmpnt_amt"))
		actamtFinanced = CCur(GetValue_PBDataWindow(tblwindow,"#1","amt_fincd"))
		acttotalintrst = ccur(GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt"))
		acttotalfinanced = ccur(GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed"))
		expdealercheck = ccur(dealercheck)-ccur(acttradeinamt)
		exptradeinamt = ccur(tradeinamt)+ccur(acttradeinamt)
		expnetTradeinAmt = ccur(netTradeinAmt)+ccur(acttradeinamt)
		exptotaldwnpmt = ccur(totaldwnpmt)+ccur(acttradeinamt)
		expunpaidbal = ccur(actloanamt)-ccur(acttradeinamt)
		expamtfinance = ccur(amtFinanced)-ccur(acttradeinamt)
		exptotfinanced = ccur(actamtFinanced)+ccur(acttotalintrst)
		 validateDataAndReport(actdealercheck,expdealercheck,"Validation of Dealer Check Amount in Account Tab Expected: "&expdealercheck& " and Actual: "&actdealercheck)
		 validateDataAndReport(acttradeinamt,exptradeinamt,"Validation of Trade-In Amount in Account Tab Expected: "&exptradeinamt& " and Actual: "&acttradeinamt)
		 validateDataAndReport(actnetTradeinAmt,expnetTradeinAmt,"Validation of Net Trade-In Amount in Account Tab Expected: "&expnetTradeinAmt& " and Actual: "&actnetTradeinAmt)
		 validateDataAndReport(acttotaldwnpmt,exptotaldwnpmt,"Validation of Total Down Payment in Account Tab Expected: "&exptotaldwnpmt& " and Actual: "&acttotaldwnpmt)
		 validateDataAndReport(actamtFinanced,expamtfinance,"Validation of Amount Financed in Account Tab Expected: "&expamtfinance& " and Actual: "&actamtFinanced)
		 validateDataAndReport(actunpaidbal,expunpaidbal,"Validation of Unpaid Balance in Account Tab Expected: "&expunpaidbal& " and Actual: "&actunpaidbal)
		 validateDataAndReport(acttotalfinanced,exptotfinanced,"Validation of Total Financed Amount in Account Tab Expected: "&exptotfinanced& " and Actual: "&acttotalfinanced)
	//***************
	//Work Flow
	//***************
	// SetValue_PBDataWindow(tblwindow,"#1","trade_in_amt",tradeinamt)
	tradeinamt = Generate_RandomNumber_UserDefind("9","9")
	 SetValue_PBDataWindow(tblwindow,"#1","trade_in_amt",tradeinamt)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_acct","#1", "trade_in_amt"))
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "trade_in_amt","bp_financedetails","tradeinamt",ID)
	 writeReportLog("Entered Trade-In Amount value: "& tradeinamt &" in Account Tab(UI-"&getValueLength&",DB-9)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_PurchaseAmount_AccountTab","Failed", Err.Description,"Y")
 RemoveFunction
//*****************************************************************************************************************
//@methodName: Verification_of_TradeinDesc_AccountTab(tradeDesc)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the TradeIn Desc in Account window
//Ex:  Verification_of_TradeinDesc_AccountTab("Retailer")
//*****************************************************************************************************************
 Verification_of_TradeinDesc_AccountTab(tradeDesc)
 	if Environment.value("FV_Flag") = "Y" 
 		//**************************
	 	//Field Validation
	 	//**************************
	 	 //Enter Trade in Description field with invalid data more than 100 characters
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct")
		 SetValue_PBDataWindow(tblwindow,"#1","trade_in_descr",random_AlphaNumeric_String(102))
		//Get the Length of Entered value in Trade in Description field
		getValueLength = GetValue_PBDataWindow(tblwindow,"#1", "trade_in_descr")
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 100 
			 writeReportLog("Validation of Trade in Description field is Accepting only 100 characters: "&getValueLength,"Passed","","")
		else
			 writeReportLog("Failed : Trade in Description field is Accepting More than 100 characters","Failed", Err.Description ,"")
	//***************
	//Work Flow
	//***************
	 SetValue_PBDataWindow(tblwindow,"#1","trade_in_descr",tradeDesc)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_TradeinDesc_AccountTab","Failed", Err.Description,"Y")
 RemoveFunction
//*****************************************************************************************************************
//@methodName: Verification_of_PurchaseAmount_AccountTab(loanAmt)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the Purchase amount in Account window
//Ex:  Verification_of_PurchaseAmount_AccountTab("12000")
//*****************************************************************************************************************
Verification_of_PurchaseAmount_AccountTab(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//**************************
		//Field Validation
		//**************************
		//Before adding Purchase amount 
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct")
		loanamt = GetValue_PBDataWindow(tblwindow,"#1","purch_amt")
		dealercheck = GetValue_PBDataWindow(tblwindow,"#1","dealer_check")
		totaldwnpmt = GetValue_PBDataWindow(tblwindow,"#1","cf_total_down_payment")
		unpaidBal = GetValue_PBDataWindow(tblwindow,"#1","cf_unpaid_balance")
		tototherchrges = GetValue_PBDataWindow(tblwindow,"#1","cmpnt_amt")
		amtFinanced = GetValue_PBDataWindow(tblwindow,"#1","amt_fincd")
		totalintrst = GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt")
		totalfinanced = GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed")
		//Enter Loan Amount field with invalid data more than 8 digits
		 SetValue_PBDataWindow(tblwindow, "#1","purch_amt",Generate_RandomNumber(10))
		//Get the Length of Entered value in Loan Amount field
		getValueLength = int(GetValue_PBDataWindow(tblwindow,"#1","purch_amt"))
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 9 
			 writeReportLog("Validation of Purchase Amount field is Accepting only 9 digits","Passed","","")
		else
			 writeReportLog("Failed : Purchase Amount field is Accepting more than 9 digits: "&getValueLength,"Failed", Err.Description ,"")
		purcamt = CCur(loanamt + 100)
		 SetValue_PBDataWindow(tblwindow,"#1","purch_amt",purcamt)
		actloanamt = CCur(GetValue_PBDataWindow(tblwindow,"#1","purch_amt"))
		actdealercheck = CCur(GetValue_PBDataWindow(tblwindow,"#1","dealer_check"))
		actunpaidbal = CCur(GetValue_PBDataWindow(tblwindow,"#1","cf_unpaid_balance"))
		acttototherchrges = CCur(GetValue_PBDataWindow(tblwindow,"#1","cmpnt_amt"))
		actamtFinanced = CCur(GetValue_PBDataWindow(tblwindow,"#1","amt_fincd"))
		acttotalintrst = ccur(GetValue_PBDataWindow(tblwindow,"#1","orig_int_amt"))
		acttotalfinanced = ccur(GetValue_PBDataWindow(tblwindow,"#1","cf_total_financed"))
		expdealercheck = ccur(dealercheck)-ccur(loanamt)+ccur(actloanamt)
		expunpaidbal = ccur(actloanamt)+ccur(totaldwnpmt)
		expamtfinance = ccur(actunpaidbal)+ccur(acttototherchrges)
		exptotfinanced = ccur(actamtFinanced)+ccur(acttotalintrst)
		 validateDataAndReport(expdealercheck,actdealercheck,"Validation of Dealer Check Amount in Account Tab Expected: "&expdealercheck)
		 validateDataAndReport(expunpaidbal,actunpaidbal,"Validation of Unpaid Balance Amount in Account Tab Expected: "&expunpaidbal& " and Actual: "&actunpaidbal)
		 validateDataAndReport(expamtfinance,actamtFinanced,"Validation of Amount Financed in Account Tab Expected: "&expamtfinance& " and Actual: "&actamtFinanced)
		 validateDataAndReport(exptotfinanced,acttotalfinanced,"Validation of Total Financed Amount in Account Tab Expected: "&exptotfinanced& " and Actual: "&acttotalfinanced)
	//***************
	//Work Flow
	//***************
	// SetValue_PBDataWindow(tblwindow,"#1","purch_amt",loanamt)
	loanamt = Generate_RandomNumber_UserDefind("9","9")
	 SetValue_PBDataWindow(tblwindow,"#1","purch_amt",loanamt)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_acct","#1", "purch_amt"))
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "purch_amt","bp_financedetails","loanamount",ID)
	 writeReportLog("Entered Loan Amount value: "& loanamt &" in Account Tab(UI-"&getValueLength&",DB-9)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_PurchaseAmount_AccountTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Payment_AccountTab(surAmt)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the payment  in Account window
//Ex:  Verification_of_Payment_AccountTab("100")
//*****************************************************************************************************************
Verification_of_Payment_AccountTab(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//**************************
		//Field Validation
		//**************************
		//Enter payment  field with invalid data more than 8 digits
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct")
		 SetValue_PBDataWindow(tblwindow, "#1","payment_",Generate_RandomNumber(10))
		//Get the Length of Entered value in payment  field
		getValueLength = int(GetValue_PBDataWindow(tblwindow,"#1","payment_"))
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 9 
			 writeReportLog("Validation of Payment  field is Accepting only 9 digits","Passed","","")
		else
			 writeReportLog("Failed : Payment  field is Accepting more than 9 digits: "&getValueLength,"Failed", Err.Description ,"")
	//***************
	//Work Flow
	//***************
	// SetValue_PBDataWindow(tblwindow,"#1","payment_",payamt)
	payamt = Generate_RandomNumber_UserDefind("9","9")
	 SetValue_PBDataWindow(tblwindow,"#1","payment_",payamt)
	 sendKeys("{Tab}")
	getValueLength = Length(getValue_In_PBDataWindow_DP("dw_acct","#1", "payment_"))
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "payment_","bp_financedetails","payment",ID)
	 writeReportLog("Entered payment  Amount value: "& payamt &" in Account Tab(UI-"&getValueLength&",DB-9)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Payment_AccountTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_DealerDiscount_AccountTab(discamt)
//@Author Ranjitha
//@Date 14th Aug 2018
//@Description This will verify the dealer discount in Account window
//Ex:  Verification_of_DealerDiscount_AccountTab("750")
//*****************************************************************************************************************
Verification_of_DealerDiscount_AccountTab(String discamt)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//**************************
		//Field Validation
		//**************************
		//Get Dealer Check value
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct")
		//Enter Dealer Discount field with invalid data more than 8 digits
		 SetValue_PBDataWindow(tblwindow,"#1","discount_amt",Generate_RandomNumber(10))
		//Get the Length of Entered value in Dealer Discount field
		getValueLength = int(GetValue_PBDataWindow(tblwindow,"#1","discount_amt"))
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 9 
			 writeReportLog("Validation of Dealer Discount field is Accepting only 9 digits","Passed","","")
		else
			 writeReportLog("Failed : Dealer Discount field is Accepting more than 9 digits: "&getValueLength,"Failed", Err.Description ,"")
		 SetValue_PBDataWindow(tblwindow,"#1","discount_amt","0")
		 sendKeys("{Tab}")
		dealercheckbefaddingdisc = GetValue_PBDataWindow(tblwindow,"#1","dealer_check")
		 SetValue_PBDataWindow(tblwindow,"#1","discount_amt","100")
		 sendKeys("{Tab}")
		actual = ccur(GetValue_PBDataWindow(tblwindow,"#1","dealer_check"))
		expected = CCur(dealercheckbefaddingdisc - 100)
		 validateDataAndReport(expected,actual,"Validation of Dealer Check Amount in Account Tab Expected: "&expected& " and Actual: "&actual)
	//***************
	//Work Flow
	//***************
	 SetValue_PBDataWindow(tblwindow,"#1","discount_amt",discamt)
	//Saving the Data
	 clickOnSaveButon()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_DealerDiscount_AccountTab","Failed", Err.Description,"Y")

//***************************************************************************************************************************
//@Method: verify_Length_TextField(windowName,rowName,ColName,Value,ActualLength)
//@Author: Thirumal Reddy
//@Date 9 Aug 2018
//@Description: This function is to enter data into any text field, fetch the entered data from text box and compare the length of characters.
//Ex:  verify_Length_TextField("windowName,"RowNumber","ColName","ValueToBePassed","ActualLengthToBeCompared")
//***************************************************************************************************************************
verify_Length_TextField(String windowName,String rowName,String ColName,String Value,String ActualLength)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	set nameOfWin = windowName
	 TypeText_PBDataWindow(nameOfWin,rowName,ColName,Value)
	DirecLength = Length(GetValue_PBDataWindow(nameOfWin,rowName,ColName))
	if DirecLength <= cint(ActualLength) 
 	 writeReportLog("length:"&DirecLength& "of the field is less than or equal to"&ActualLength,"Passed","","")
 	else 
 	 writeReportLog("length:"&DirecLength& "of Directions field is not matching to"&ActualLength,"Failed",FailComments,"Y")

//***************************************************************************************************************************
//@Method: verify_HomeAddressFields(arraySize,DataWindow,addr_Data_arr)
//@Author: Thirumal Reddy
//@Date 9 Aug 2018
//@Description: This function is to validate the fields in Home Address section in Address field(Procesing Loan).
//Ex:  verify_HomeAddressFields("NoOfLoops,"DataWindow","Value")
//***************************************************************************************************************************
verify_HomeAddressFields(String arraySize,String DataWindow,String addr_Data_arr)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
String arr
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
arr = {"addr1","addr2","zipcode","phone1","phone2","phone3")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
for value = 0 To cint(arraySize) Step 1
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	val = arr(value)
	 Get_Value_TextBox_Compare("w_cust",DataWindow,"#1",val,addr_Data_arr(value))

//***************************************************************************************************************************
//@Method: Get_Value_TextBox_Compare(windowName, dataWindowName, rowNumber, colID,expecValue)
//@Author: Thirumal Reddy
//@Date 9 Aug 2018
//@Description: This function is to fetch the value from text field and compare with the actual value.
//Ex:  Get_Value_TextBox_Compare("WindowName,"dataWindowName","rowNumber","ColumnName","ExpectedValue")
//***************************************************************************************************************************
 Get_Value_TextBox_Compare(String windowName,String dataWindowName,String rowNumber,String colID,String expecValue)
	actualValue = getValueInPBDataWindow_DP(windowName, dataWindowName, rowNumber, colID)
	 validateDataAndReport(ToUpper(actualValue),ToUpper(expecValue),"Actual value:"&actualValue& " is matching with the Expected value:"&expecValue)

//*****************************************************************************************************************
//@methodName: Application_Status()
//@Author Thirumal Reddy
//@Date 8th Aug 2018
//@Description This will validate Application status window
//Ex:  Application_Status()
//*****************************************************************************************************************
Application_Status()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//**************************
	//Field Validation
	//**************************
	if Environment.value("FV_Flag") = "Y" 
	//To Click on Approved radio button
	 SetValue_In_PBDataWindow_DP("dw_step","#1","app_status","Approved")
	 verifyDate("compute_1")
	//To click on conditioned radio button
	 SetValue_In_PBDataWindow_DP("dw_step","#1","app_status","Conditioned")
	 verifyDate("compute_1")
	//To click on Denied radio button
	 SetValue_In_PBDataWindow_DP("dw_step","#1","app_status","Denied")
	 verifyDate("compute_2")
	//To click on cancelled radio button
	 SetValue_In_PBDataWindow_DP("dw_step","#1","app_status","Cancelled")
	//***************
	 //Work Flow
	//***************
	//To click on In Process radio button
	 SetValue_In_PBDataWindow_DP("dw_step","#1","app_status","In Process")
	//To click on Plus check box
	 SetValue_In_PBDataWindow_DP("dw_step","#1","plus_loan_yn","ON")
	//Verifying Employee assigned field.
	 expecEmployee = "Help Desk"
	 actualEmployee = GetValue_In_PBDataWindow_DP("dw_step","#1","#11")
	  validateDataAndReport(currDate,decisionDate,"Actual Employee:"&actualEmployee& "Expected Employee:"&expecEmployee&" in Employee Assigned field are matching")
	 //Validating decision is valid for 14 days from field.
	 //To get current date
	 currDate = Trim(date)
	 decisionDate = GetValue_In_PBDataWindow_DP("dw_step","#1","decision_start_dt")
	 validateDataAndReport(currDate,decisionDate,"Actual Date:"&decisionDate& "Expected Date:"&currDate&" in decision valid for 14 days from field are matching")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Application_Status","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: verifyDate(colName)
//@Author Thirumal Reddy
//@Date 8th Aug 2018
//@Description This will fetch the date from DB and verifies with the expected date based on Column 
//Ex:  verifyDate("ColumnName from where date is to be fetched")
//*****************************************************************************************************************
verifyDate(String colName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 value = get_Add_Date_Time_UserID_DB(date)
	j = Split(value)
	expecDate = j(0)
 actDate = GetValue_In_PBDataWindow_DP("dw_step","#1",colName)
 	k = Split(actDate)
 	actualDate = k(0)
	 //Verify Date firom the fields
	  validateDataAndReport(expecDate,actualDate,"Actual Date:"&actualDate & " and Expected Date:"&expecDate& "are matching" )

//***************************************************************************************************************************
//@Method: enter_ReferenceDetails(ObjectArray,dataArray,rowNum,winName)
//@Author: Thirumal Reddy
//@Date 9 Aug 2018
//@Description: This function is to enter the data in Reference Tab in F2 window
//Ex:  enter_ReferenceDetails("columnArray,"DataToEnterArray","rowNumer","Window")
//***************************************************************************************************************************
enter_ReferenceDetails(String ObjectArray,String dataArray,String rowNum,String winName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set windowName = winName
	for Iterator = 0  To ubound(dataArray) Step 1
		 TypeText_PBDataWindow(windowName,"#"&rowNum,ObjectArray(Iterator),dataArray(Iterator))
		 writeReportLog("Valid Reference data:"&dataArray(Iterator)& "entered into:" &ObjectArray(Iterator)& "text box field","Passed","","")

//***************************************************************************************************************************
//@Method: verify_State_CityByZip(windowName,Rownumber,ColNum,expecValue)
//@Author: Thirumal Reddy
//@Date 9 Aug 2018
//@Description: This function is to verify auto populated state, city fields after entering ZipCode
//Ex:  verify_State_CityByZip("windowName,"Rownumber","ColNum","expecState/City")
//***************************************************************************************************************************
verify_State_CityByZip(String windowName,String Rownumber,String ColNum,String expecValue)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	stateCityName = ToUpper(GetValue_PBDataWindow(windowName,Rownumber,ColNum))
	if stateCityName = expecValue 
		 writeReportLog("Actual State/City Name:"&expecValue& "is Matching with Expected State/City name:"&stateCityName ,"Passed","","")
		else 
		 writeReportLog("Actual State/City Name:"&expecValue& "is not Matching with Expected State/City name:"&stateCityName ,"Failed",FailComments,"Y")

//***************************************************************************************************************************
//@Method:  Validate_ErrorPopup_Title_Message_F2Window()
//@Author: Thirumal Reddy
//@Date 9 Aug 2018
//@Description: This function is to validate error pop up in F2 window
//Ex:  Validate_ErrorPopup_Title_Message_F2Window()
//***************************************************************************************************************************
Validate_ErrorPopup_Title_Message_F2Window()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_message").WaitWhileExists 
		//Get the Error Popup Title
		ErrorPopupTitle = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_message").GetAttr(("regexpwndtitle")
		//Get the Error Popup Message
		ErrorPopupMessage = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_message").WinEditor("regexpwndclass:=Edit").GetAttr(("text")
		 writeReportLog("Validation of Error Title: "& ErrorPopupTitle &" with Popup Message: "&ErrorPopupMessage,"Passed","","")
		//Click OK Button
		PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_message").PbButton("text:=OK").Click()
//		else 
//		ErrorPopupMessage = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_message").WinEditor("regexpwndtitle:=.*").GetAttr(("text")
//		 writeReportLog("Validation of Error Title: "& ErrorPopupTitle &" with Popup Message: "&ErrorPopupMessage,"Passed","","")
//		//Click OK Button
//		PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_message").PbButton("text:=OK").Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Validate_ErrorPopup_Title_Message_F2Window","Failed", Err.Description,"Y")

//***************************************************************************************************************************
//@Method:  Verification_of_ReferenceDetails()
//@Author: Thirumal Reddy
//@Date 16 Aug 2018
//@Description: This function is to verify the field validation of reference tab
//Ex:  Verification_of_ReferenceDetails()
//***************************************************************************************************************************
Verification_of_ReferenceDetails()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Click on New Option
	 clickNewButton()
	//Select on New Customer Reference
	Set winName = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_chooseone").PbList("pbname:=lb_list")
	 selectValue_From_ChooseAnItem_Popup_ComponentTab("New Customer Reference")
	//Click on Save option
	 clickOnSaveButon()
	//Validating pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Validating First Name textbox
	Set winName = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_list")
	 verify_Length_TextField(winName,"#1","first_name",random_AlphaNumeric_String(35),"30")
	//Validating Lastname text box
	 verify_Length_TextField(winName,"#1","last_name",random_AlphaNumeric_String(35),"30")
	//Validating Home Phone textbox
	// verify_Length_TextField(winName,"#1","phone1",Generate_RandomNumber(15),"10")
	//Validating Cell Phone text box
	// verify_Length_TextField(winName,"#1","phone2",Generate_RandomNumber(15),"10")
	//Validating Other Phone text box
	// verify_Length_TextField(winName,"#1","phone3",Generate_RandomNumber(15),"10")
	//Validating address text box
	// verify_Length_TextField(winName,"#1","addr1",random_AlphaNumeric_String(45),"40")
	//Validating State field
	// Get_Value_TextBox_Compare("w_cust","dw_list","#1","state",Environment.Value("currentState"))
	//Validating Zip textbox
	// verify_Length_TextField(winName,"#1","zipcode",Generate_RandomNumber(15),"9")
	//Validating City textbox
	// verify_Length_TextField(winName,"#1","city",random_AlphaNumeric_String(35),"30")
	//Verifying Country
	 Get_Value_TextBox_Compare("w_cust","dw_list","#1","country","USA")
	//Click on Delete option
	 clickButton_Delete()
	//Click on Yes button in the Delete Reference pop up
	 clickButton_InWindow("w_message","Yes")
	//Click on New Option
	 clickNewButton()
	//Select on New Customer Reference
	Set windName = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_chooseone").PbList("pbname:=lb_list")
	 selectValue_From_ChooseAnItem_Popup_ComponentTab("New Customer Reference")
	//Select Reference type
	Set winName =  PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_list")
	 SetValue_PBDataWindow(winName,"#1","cust_ref_type","Son")
	//Click on Save option
	 clickOnSaveButon()
	//Validating pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Entering First name
	 TypeText_PBDataWindow(winName,"#1","first_name","John")
	//Click on Save option
	 clickOnSaveButon()
	//Validating pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Entering Last name
	 TypeText_PBDataWindow(winName,"#1","last_name","Smith")
	//Click on Delete option
	 clickButton_Delete()
	//Click on Yes button in the Delete Reference pop up
	 clickButton_InWindow("w_message","Yes")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ReferenceDetails","Failed", Err.Description,"Y")

//***************************************************************************************************************************
//@Method:  verification_of_Reference1_Deatils(city,State)
//@Author: Thirumal Reddy
//@Date 16 Aug 2018
//@Description: This function is to verify the Reference1 details of reference tab
//Ex:  verification_of_Reference1_Deatils(city,State)
//***************************************************************************************************************************
verification_of_Reference1_Deatils(String dataArr,String objArray,String city,String State,String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set windowName = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_list")
	 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","referenceType","branchplusqa.bp_reference",ID,"Reference_1_RefType",windowName,"#1","cust_ref_type")
	 enter_ReferenceDetails(objArray,dataArr,1,windowName)
	//Click on Save option
	 clickOnSaveButon()
	//Verifying City name based on Zip code
	 verify_State_CityByZip(windowName,"#1","city",city)
	//Verifying State name based on Zip code
	 verify_State_CityByZip(windowName,"#1","state",State)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: verification_of_Reference1_Deatils","Failed", Err.Description,"Y")

//***************************************************************************************************************************
//@Method:  verification_of_Reference2_Deatils(city,State)
//@Author: Thirumal Reddy
//@Date 16 Aug 2018
//@Description: This function is to verify the Reference1 details of reference tab
//Ex:  verification_of_Reference2_Deatils(city,State)
//***************************************************************************************************************************
verification_of_Reference2_Deatils(String dataArr2,String objArray,String city,String State,String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set windowName = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_list")
	 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","referenceType","branchplusqa.bp_reference",ID,"Reference_2_RefType",windowName,"#2","cust_ref_type")
	 enter_ReferenceDetails(objArray,dataArr2,2,windowName)
	//Click on Save option
	 clickOnSaveButon()
	//Verifying City name based on Zip code
	 verify_State_CityByZip(windowName,"#2","city",city)
	//Verifying State name based on Zip code
	 verify_State_CityByZip(windowName,"#2","state",state)
	//Click on Solicit checkbox to //no// in second reference row
	 SetValue_PBDataWindow(windowName,"#2","valid_for_solicit_yn","OFF")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: verification_of_Reference2_Deatils","Failed", Err.Description,"Y")

//***************************************************************************************************************************
//@Method:  verification_of_Reference3_Deatils(city,State)
//@Author: Thirumal Reddy
//@Date 16 Aug 2018
//@Description: This function is to verify the Reference1 details of reference tab
//Ex:  verification_of_Reference3_Deatils(city,State)
//***************************************************************************************************************************
verification_of_Reference3_Deatils(String dataArr3,String objArray,String city,String state,String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set windowName = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_list")
	 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","referenceType","branchplusqa.bp_reference",ID,"Referencetab_3_RefType",windowName,"#3","cust_ref_type")
	 enter_ReferenceDetails(objArray,dataArr3,3,windowName)
	//Click on Save option
	 clickOnSaveButon()
	//Verifying City name based on Zip code
	 verify_State_CityByZip(windowName,"#3","city",city)
	//Verifying State name based on Zip code
	 verify_State_CityByZip(windowName,"#3","state",state)
	//Click on Valid To Collect checkbox to no in third reference row
	 SetValue_PBDataWindow(windowName,"#3","valid_for_collect_yn","OFF")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: verification_of_Reference3_Deatils","Failed", Err.Description,"Y")

//***************************************************************************************************************************
//@Method:  verification_of_Reference4_Deatils(city,State)
//@Author: Thirumal Reddy
//@Date 16 Aug 2018
//@Description: This function is to verify the Reference1 details of reference tab
//Ex:  verification_of_Reference4_Deatils(city,State)
//***************************************************************************************************************************
verification_of_Reference4_Deatils(String dataArr4,String objArray,String city,String State,String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set windowName = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_list")
	 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","referenceType","branchplusqa.bp_reference",ID,"Referencetab_4_RefType",windowName,"#4","cust_ref_type")
	 enter_ReferenceDetails(objArray,dataArr4,4,windowName)
	//Click on Save option
	 clickOnSaveButon()
	//Verifying City name based on Zip code
	 verify_State_CityByZip(windowName,"#4","city",city)
	//Verifying State name based on Zip code
	 verify_State_CityByZip(windowName,"#4","state",state)
	//Click on Valid To Collect , Solict checkbox to No in fourth reference row
	 SetValue_PBDataWindow(windowName,"#4","valid_for_collect_yn","OFF")
	 SetValue_PBDataWindow(windowName,"#4","valid_for_solicit_yn","OFF")
	//Click on Save option
	 clickOnSaveButon()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: verification_of_Reference4_Deatils","Failed", Err.Description,"Y")

//***************************************************************************************************************************
//@Method:  generate_Name(numLength,name)
//@Author: Thirumal Reddy
//@Date 28 Aug 2018
//@Description: This function is to generate the name or text randomly based on given length.
//Ex:  generate_Name(numLength,name)
//***************************************************************************************************************************
generate_Name(String numLength,String name)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Lenoftext = numLength-Length(name)
 	generate_Name = name&" "&random_AlphaCharacter_String(Lenoftext-1)
 	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: generate_Name","Failed", Err.Description,"Y")
 RemoveFunction
//*****************************************************************************************************************
//@methodName: Select_Individual_Column_Data_RandomValue(TableName,dbColumnName,updateTableName,ID,UpdateColName,tblWindowName,rowNum,ColumnName)
//@Author Thirumal Reddy
//@Date 27 Aug 2018
//@Description This is to Select the dropdown fields from the DB Table
//Ex: Result = Select_Individual_Column_Data_RandomValue("branchqa.b_dropdownvalues","Paytype","ApplicationWindowname","#1","#")
//*****************************************************************************************************************
Select_Individual_Column_Data_RandomValue_Other(String TableName,String dbColumnName,String tblWindowName,String rowNum,String ColumnName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
String Connection
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
String ConnectionString
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
String Recordset
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
SQL ="SELECT "&dbColumnName&" FROM "&TableName&" where "&dbColumnName&" IS not NULL order by RAND() LIMIT 1"
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//define the connection string, specify database driver
ConnString = "DRIVER={MySQL ODBC 8.0 ANSI Driver}; SERVER=s1-alm-1; DATABASE=branchqa;UID=admin;PASSWORD=admin; OPTION=3"
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//create an instance of the ADO connection and recordset objects
Set Connection = CreateObject("ADODB.Connection")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
Set Recordset = CreateObject("ADODB.Recordset")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//Open the connection to the database
Connection.Open ConnString
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//Open the recordset object executing the SQL statement and update records 
Recordset.Open SQL,Connection
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//Select_Individual_Column_Data = Recordset(ColumnName)
Sleep (1)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
StoreValues = Recordset(dbColumnName)      
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
if StoreValues <> Empty     
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 SetValue_PBDataWindow(tblWindowName,rowNum,ColumnName,StoreValues)
	 sendKeys("{TAB}")
	ActualValue = GetValue_PBDataWindow(tblWindowName,rowNum,ColumnName)
	// Update_ColumnValue_Into_DB(tblWindowName,TableName,rowNum,ColumnName,TableName_DB,ColumnName_DB,ID)
	Sleep (1)
	// validateDataAndReport(UCase(ActualValue),ToUpper(StoreValues),"Validation of "&dbColumnName&" dropdown value Expected :"&StoreValues&" Actual :" &ActualValue)
else
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 writeReportLog("Unable to fetch the data from database","Failed",FailedComments,"Y")      
//Recordset.Close
Set Recordset=nothing
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
Connection.Close
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
Set Connection=nothing
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//Error handling 
 	if GetErrorCount()>0  			
		 writeReportLog("Failed to Select_Individual_Column_Data_RandomValue","Failed", Err.Description ,"")
 Function
//*****************************************************************************************************************
//@methodName: enter_Promise_Activitydetails_CollectionTab(activity_type,Note)
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will enter the Promise Activity details in Collection Tab
//Ex:  enter_Promise_Activitydetails_CollectionTab(activity_type,Note)
//*****************************************************************************************************************
enter_Promise_Activitydetails_CollectionTab(String activity_type,String Note)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set tblPBDataWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_note")
	//Select Activity Type
	 SetValue_PBDataWindow(tblPBDataWindow,"#1","activity_type",activity_type)
	 enterActivityCode_UserID_CollectionTab()
	//To type text in Note Editor
	if activity_type = "Notes" or activity_type = "Instructions" 
		 TypeText_Note_CollectionWindow(Note)
	if activity_type = "Promise" 
		//Code to set future date and time(promise date) for "Promise" Activity
		 get_Future_Date_CurrentTime_AMPM(Promise_FutureDate,Promise_FutureDate_Time,time_period)
		//To enter amount in promise Amount field
//		prmsamt = Generate_RandomNumber_UserDefind("9","10")
//		 SetValue_PBDataWindow(tblwindow, "#1","promise_amt",prmsamt)
		if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").WinEditor("regexpwndclass:=Edit","index:=0").WaitWhileExists 
			//Input Reason
			Note = " "&Note
			PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").WinEditor("regexpwndclass:=Edit","index:=0").Click()
			PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").WinEditor("regexpwndclass:=Edit","index:=0")TypeKeys Note
	//Click on save button
	 clickOnSaveButon()
	//Get Current Date
	Process_Date = getTodaysDate_mmddyyyy_format()
	//Validate the data for all activity types
	 validation_Collection_Activities_Promise(Process_Date,Note,Promise_FutureDate)
//	Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/enter_Promise_Activitydetails_CollectionTab","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: validation_Collection_Activities_Promise(Process_Date,Note,Promise_FutureDate)
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will validation of Promise Activity details in Collection Tab
//Ex:  validation_Collection_Activities_Promise(Process_Date,Note,Promise_FutureDate)
//*****************************************************************************************************************
validation_Collection_Activities_Promise(String Process_Date,String Note,String Promise_FutureDate)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 validate_Activity_Date_CollectionPage(Process_Date)
	//to validate the Results Description during run time
	 validate_Notes_Results_CollectionPage()
		//to validate the Promise Date during run time
		 validate_Promise_Date_CollectionPage(Promise_FutureDate)
		//to validate the Promise Amount during run time
		 validate_Promise_Amount_CollectionPage("9999999999")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/validation_Collection_Activities_Promise","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: Verification_of_PromiseAmount_CollectionTab()
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will verify the Promise Amount in Collection Tab
//Ex:  Verification_of_PromiseAmount_CollectionTab()
//*****************************************************************************************************************
Verification_of_PromiseAmount_CollectionTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//**************************
		//Field Validation
		//**************************
		//Enter Promise Amount
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_note")
		//Invalid Promise Amount
		 SetValue_PBDataWindow(tblwindow, "#1","promise_amt",Generate_RandomNumber(10))
		//Get the Length of Entered value in payment  field
		getValueLength = int(GetValue_PBDataWindow(tblwindow,"#1","promise_amt"))
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = 10 
			 writeReportLog("Validation of Promise Amount field is Accepting only 10 digits","Passed","","")
		else
			 writeReportLog("Failed : Promise Amount field is Accepting more than 10 digits: "&getValueLength,"Failed", Err.Description ,"")
	//Valid Promise Amount
	prmsamt = Generate_RandomNumber_UserDefind("9","10")
	 SetValue_PBDataWindow(tblwindow, "#1","promise_amt",prmsamt)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_PromiseAmount_CollectionTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_PromiseDate_CollectionTab()
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will verify the Promise Date in Collection Tab
//Ex:  Verification_of_PromiseDate_CollectionTab()
//*****************************************************************************************************************
Verification_of_PromiseDate_CollectionTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//**************************
		//Field Validation
		//**************************
		//Click on Add Row button
		 ClickonAddRow_Button_F2Window()
		//Select bank draft checkbox
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_note")
		//Select Activity Type
		 SetValue_PBDataWindow(tblwindow,"#1","activity_type","Promise")
		//Enter Invalid date
		 SetValue_PBDataWindow(tblwindow,"#1","promise_dt","10/02/1805")
		//Click on Save button
		 clickOnSaveButon()
		//Validate Date Validation error popup 
		 Validate_DateDailog_ErrorPopup_Title_Message_F2Window()	
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message_F2Window()
		 SetValue_PBDataWindow(tblwindow,"#1","promise_dt",getTodaysDate_mmddyyyy_format)
		//Click on Save button
		 clickOnSaveButon()	
	 	//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message_F2Window()	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_PromiseDate_CollectionTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: enterActivitydetails_CollectionTab(activity_type,Note)
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will enter collection activity details in Collection Tab
//Ex:  enterActivitydetails_CollectionTab(activity_type,Note)
//*****************************************************************************************************************
enterActivitydetails_CollectionTab(String activity_type,String Note)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set tblPBDataWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_note")
	//Select Activity Type
	Sleep (2)
	 SetValue_PBDataWindow(tblPBDataWindow,"#1","activity_type",activity_type)
	//Select Activity Code and User ID
	 enterActivityCode_UserID_CollectionTab()
	//To type text in Note Editor
	Note = generate_Name(20,"Notes")
	 TypeText_Note_CollectionWindow(Note)
	//Click on Save button
	 clickOnSaveButon()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: enterActivitydetails_CollectionTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ActivityStatus_Checkbox_CollectionTab(value)
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will verify activity status checkbox in Collection Tab
//Ex:  Verification_of_ActivityStatus_Checkbox_CollectionTab(value)
//*****************************************************************************************************************
 Verification_of_ActivityStatus_Checkbox_CollectionTab(value)
	if Environment.value("FV_Flag") = "Y" 
		//**************************
		//Field Validation
		//**************************
		//Select bank draft checkbox
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_note")
		 SetValue_PBDataWindow(tblwindow,"#1","activity_status","OFF")
	//***************
	//Work Flow
	//***************
 	//Unselect Bank Draft Checkbox
	 SetValue_PBDataWindow(tblwindow,"#1","activity_status",value)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ActivityStatus_Checkbox_CollectionTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ActivityDate_CollectionTab()
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will verify activity date in Collection Tab
//Ex:  Verification_of_ActivityDate_CollectionTab()
//*****************************************************************************************************************
Verification_of_ActivityDate_CollectionTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//**************************
		//Field Validation
		//**************************
		//Select bank draft checkbox
		Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_note")
		actdate = GetValue_PBDataWindow(tblwindow,"#1","activity_dt")
		//Enter Invalid date
		 SetValue_PBDataWindow(tblwindow,"#1","activity_dt","10/02/1805")
		//Click on Save button
		 clickOnSaveButon()
		//Validate Date Validation error popup 
		 Validate_DateDailog_ErrorPopup_Title_Message_F2Window()	
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message_F2Window()		
		//Enter Invalid Future date
		 SetValue_PBDataWindow(tblwindow,"#1","activity_dt","10/02/2020")
		//Click on Save button
		 clickOnSaveButon()
		//Validate Error Popup title message
		 Validate_ErrorPopup_Title_Message_F2Window()
	//***************
	//Work Flow
	//***************
 	//Unselect Bank Draft Checkbox
 	 SetValue_PBDataWindow(tblwindow,"#1","activity_dt","00/00/0000")
	 SetValue_PBDataWindow(tblwindow,"#1","activity_dt",getTodaysDate_mmddyyyy_format)
	//Click on Save button
	 clickOnSaveButon()
	//Validate Error Popup title message
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ActivityDate_CollectionTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Validate_DateDailog_ErrorPopup_Title_Message_F2Window()
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will validate Date Dialog error pop up
//Ex:  Validate_DateDailog_ErrorPopup_Title_Message_F2Window()
//*****************************************************************************************************************
Validate_DateDailog_ErrorPopup_Title_Message_F2Window()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").Dialog("regexpwndtitle:=Date Validation").WaitWhileExists 
		//Get the Error Popup Title
		ErrorPopupTitle = PbWindow("pbname:=w_bp_frame").Dialog("regexpwndtitle:=Date Validation").GetAttr(("regexpwndtitle")
		//Get the Error Popup Message
		ErrorPopupMessage = PbWindow("pbname:=w_bp_frame").Dialog("regexpwndtitle:=Date Validation").Static("regexpwndtitle:=.* on row number 1 is not a valid date.").GetAttr(("regexpwndtitle")
		 writeReportLog("Validation of Error Title: "& ErrorPopupTitle &" with Popup Message: "&ErrorPopupMessage,"Passed","","")
		//Click OK Button
		PbWindow("pbname:=w_bp_frame").Dialog("regexpwndtitle:=Date Validation").WinButton("text:=OK").Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Validate_DateDailog_ErrorPopup_Title_Message_F2Window","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Notes_CollectionTab(note)
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will verify Notes field in Collection Tab
//Ex:  Verification_of_Notes_CollectionTab(note)
//*****************************************************************************************************************
Verification_of_Notes_CollectionTab(String note)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//	if Environment.value("FV_Flag") = "Y" 
//		//**************************
//		//Field Validation
//		//**************************
//		//Enter Note field with invalid data more than 255 digits
//		 TypeText_Note_CollectionWindow("Test")
//		
//		//Get the Length of Entered value in Note field
//		getValueLength = getValue_In_PBDataWindow_DP("dw_acct","#1","note")
//		//Comparing the Length of accepting characters 
//		if Length(getValueLength) <= 256 
//			 writeReportLog("Validation of Note field is Accepting only 255 digits","Passed","","")
//		else
//			 writeReportLog("Failed : Note field is Accepting more than 255 digits: "&getValueLength,"Failed", Err.Description ,"")
//		 
//	
	//***************
	//Work Flow
	//***************
 	//enter Note
	 SetValue_PBDataWindow(tblwindow,"#1","note",note)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Notes_CollectionTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: enterActivityCode_UserID_CollectionTab()
//@Author Ranjitha
//@Date 4 Sep 2018
//@Description This will enter activity code and user ID in Collection Tab
//Ex:  enterActivityCode_UserID_CollectionTab()
//*****************************************************************************************************************
enterActivityCode_UserID_CollectionTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//select Activity Code
	PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_note").GetAttr( "visible",True,10000
	Set crdDecision = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_note")
	for i = 1 To 10 
	 SetValue_PBDataWindow(crdDecision,"#1","#5","#"&i)
	getdata = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_note").GetCellData("#1","#5")   
    if getdata <> "" 
    	Exit for
   	//select Assign userid
	PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_note").GetAttr( "visible",True,10000
	Set crdDecision = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_note")
	for i = 1 To 15 
	 SetValue_PBDataWindow(crdDecision,"#1","#11","#"&i)
	getuserid = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_note").GetCellData("#1","#5")   
    if getuserid <> "" 
    	Exit for
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to enterActivityCode_UserID_CollectionTab","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: select_CreditBureau_CreditCheckWindow_F2Window(valueToSelect)
//@Author Ranjitha
//@Date 5 Sep 2018
//@Description This will select the Credit Bureau option in Payment Tab
//Ex:  select_CreditBureau_CreditCheckWindow_F2Window(valueToSelect)
//*****************************************************************************************************************
select_CreditBureau_CreditCheckWindow_F2Window(String valueToSelect)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set crdtwndw = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_creditcheck").PbDataWindow("pbname:=dw_creditcheck")
	 TypeText_PBDataWindow(crdtwndw,"#1","#21",valueToSelect)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to select_CreditBureau_CreditCheckWindow_F2Window","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: select_OutputType_CreditCheckWindow_F2Window(valueToSelect)
//@Author Ranjitha
//@Date 5 Sep 2018
//@Description This will select the Output Type option in Payment Tab
//Ex:  select_OutputType_CreditCheckWindow_F2Window(valueToSelect)
//*****************************************************************************************************************
select_OutputType_CreditCheckWindow_F2Window(String valueToSelect)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set crdtwndw = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_creditcheck").PbDataWindow("pbname:=dw_creditcheck")
	 TypeText_PBDataWindow(crdtwndw,"#1","#4",valueToSelect)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to select_OutputType_CreditCheckWindow_F2Window","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: getValue_CreditCheckWindow_F2Window(ColName)
//@Author Ranjitha
//@Date 5 Sep 2018
//@Description This will get the value in Credit Check window in Payment Tab
//Ex:  getValue_CreditCheckWindow_F2Window(ColName)
//*****************************************************************************************************************
getValue_CreditCheckWindow_F2Window(String ColName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_creditcheck").PbDataWindow("pbname:=dw_creditcheck").WaitWhileExists 
		CellValue = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_creditcheck").PbDataWindow("pbname:=dw_creditcheck").GetCellData("#1",ColName)
	getValue_CreditCheckWindow_F2Window = CellValue
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: getValue_CreditCheckWindow_F2Window","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Validation_of_CreditCheck_Window_F2Window(outputType)
//@Author Ranjitha
//@Date 5 Sep 2018
//@Description This will validate the Credit Report in Payment Tab
//Ex:  Validation_of_CreditCheck_Window_F2Window(outputType)
//*****************************************************************************************************************
Validation_of_CreditCheck_Window_F2Window(String outputType)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Click on Credit Check button
	 ClickButton_Credit()
	//Select bureau id and output type
	 select_CreditBureau_CreditCheckWindow_F2Window("EQUIFAX")
	 select_OutputType_CreditCheckWindow_F2Window(outputType)
	//Validate data in credit Check window
	lName = UCase(getValue_CreditCheckWindow_F2Window("last_name"))
	fName = UCase(getValue_CreditCheckWindow_F2Window("first_name"))
	ssn_crdtwndw = getValue_CreditCheckWindow_F2Window("ssn")
	city_crdtwndw = UCase(getValue_CreditCheckWindow_F2Window("city"))
	zipcode_crdtwndw = getValue_CreditCheckWindow_F2Window("zipcode")
	 validateDataAndReport(lName,Environment.Value("lastName"),"Validation of Last Name in Credit Check window :"&lName& " and in Applicant Address window :"&Environment.Value("lastName"))
	 validateDataAndReport(fName,Environment.Value("firstName"),"Validation of First Name in Credit Check window :"&fName& " and in Applicant Address window :"&Environment.Value("firstName"))
	 validateDataAndReport(ssn_crdtwndw,Environment.Value("SSN"),"Validation of SSN in Credit Check window :"&"xxxxx"&Right(ssn_crdtwndw,4)& " and in Applicant Address window :"&"xxxxx"&Right(Environment.Value("SSN"),4))
	 validateDataAndReport(city_crdtwndw,Environment.Value("city"),"Validation of City in Credit Check window :"&city_crdtwndw& " and in Applicant Address window :"&Environment.Value("city"))
	 validateDataAndReport(zipcode_crdtwndw,Environment.Value("zipcode"),"Validation of Zip Code in Credit Check window :"&zipcode_crdtwndw& " and in Applicant Address window :"&Environment.Value("zipcode"))
	//Click on Get Report button
	 clickButton_InWindow("w_creditcheck","Get Report")
	Set repObj = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_creditcheck").PbWindow("pbname:=w_view_report").PbDataWindow("pbname:=dw_list")
	//Fetching Report Content
	verifytitlecreditReport = GetValue_PBDataWindow(repObj,"#1","text_line")
	verifyalertsCreditReport = GetValue_PBDataWindow(repObj,"#4","text_line")
	//Validating for Credit Report Generation
	 validatePartialDataAndReport(verifytitlecreditReport,"THIS FORM PRODUCED BY EQUIFAX","Validate Title in Credit Report "&verifytitlecreditReport)
	if outputType = "Persona Plus" 
	else
		verifyvalue1CreditReport = GetValue_PBDataWindow(repObj,"#10","text_line")
		verifyvalue2CreditReport = GetValue_PBDataWindow(repObj,"#12","text_line")
		verifyvalue3CreditReport = GetValue_PBDataWindow(repObj,"#14","text_line")
		//Validating for Credit Report
//		 validatePartialDataAndReport(verifyvalue1CreditReport,"COMPLIANCE DATA CENTER, INC. ","Validate Report in Credit Report "&verifyvalue1CreditReport)
//		 validatePartialDataAndReport(verifyvalue2CreditReport,"*NO MATCH FOUND IN CDC//S OFAC DATABASE ","Validate Report in Credit Report "&verifyvalue2CreditReport)
//		 validatePartialDataAndReport(verifyvalue3CreditReport,"*   END OF REPORT, COMPLIANCE DATA CENTER, INC.","Validate Report in Credit Report "&verifyvalue3CreditReport)
	//Click on Close button
	PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_creditcheck").PbWindow("pbname:=w_view_report").PbButton("pbname:=cb_close").Click()
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to Validation_of_CreditCheck_Window_F2Window","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: ClickButton_Credit()
//@Author Ranjitha
//@Date 5 Sep 2018
//@Description This will Click on Credit Check button in Payment Tab
//Ex:  ClickButton_Credit()
//*****************************************************************************************************************
ClickButton_Credit()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	PbWindow("BranchPlus").InsightObject("btnCredit").Click()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: ClickButton_Credit","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ToolBar_PaymentTab()
//@Author Ranjitha
//@Date 5 Sep 2018
//@Description This will verify the Tool Bar in Payment Tab
//Ex:  Verification_of_ToolBar_PaymentTab()
//*****************************************************************************************************************
Verification_of_ToolBar_PaymentTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Click on Process button
	 clickButton_Process()
	//Validate Error Pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Click on Waive Charge button
	 clickButton_Waive()
	//Validate Error Pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Click on New button
	 clickNewButton()
	list = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_chooseone").PbList("pbname:=lb_list").GetAttr(("all items")
	if IndexOf(list,"New Payment") > 0 		
	else
		 writeReportLog("New Payment Option is not available in the list","Passed","","")
	//Clcik on Cancel button
	 clickButton_InWindow("w_chooseone","Cancel")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_ToolBar_PaymentTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_LoanStatus_PaymentTab()
//@Author Ranjitha
//@Date 5 Sep 2018
//@Description This will verify the Loan Status in Payment Tab
//Ex:  Verification_of_LoanStatus_PaymentTab()
//*****************************************************************************************************************
Verification_of_LoanStatus_PaymentTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_list")
	LoanStatus = "Loan not processed"
	actLoanStatus = GetValue_PBDataWindow(tblwindow,"#2","cc_value")
	 validateDataAndReport(actLoanStatus,LoanStatus,"Validation of Loan Status in Payment Tab :"&actLoanStatus)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_LoanStatus_PaymentTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_OptedOut_CustomerTab()
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Opted Out field in Customer Tab
//Ex:  Verification_of_OptedOut_CustomerTab()
//*****************************************************************************************************************
Verification_of_OptedOut_CustomerTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Select Opted Out
	Set tblwndw = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust")
	 SetValue_PBDataWindow(tblwndw,"#1","opted_out","Not Opted Out")
	//Select Allow Solicitation Radiobutton
	 SetValue_PBDataWindow(tblwndw,"#1","allow_solicit_yn","Yes")
	 SetValue_PBDataWindow(tblwndw,"#1","allow_solicit_yn","No")
	//Select Welcome  Radiobutton
	 SetValue_PBDataWindow(tblwndw,"#1","welcome__yn","Yes")
	 SetValue_PBDataWindow(tblwndw,"#1","welcome__yn","No")
	//Click on Save
	 clickOnSaveButon()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_CustomerEvaluation_CustomerTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_CustomerEvaluation_CustomerTab()
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Customer Evaluation in Customer Tab
//Ex:  Verification_of_CustomerEvaluation_CustomerTab()
//*****************************************************************************************************************
Verification_of_CustomerEvaluation_CustomerTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Case-1 Validation of Dis Allow Checkbox
	Set tblwndw = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust")
	 SetValue_PBDataWindow(tblwndw,"#1","disallow_checks_yn","ON")
	 clickOnSaveButon()
	 SetValue_PBDataWindow(tblwndw,"#1","disallow_checks_yn","OFF")
	//Case-2 Validation of Stability Home Radiobutton
	 SetValue_PBDataWindow(tblwndw,"#1","stability_home","Poor")
	Sleep (1)
	 SetValue_PBDataWindow(tblwndw,"#1","stability_home","Average")
	Sleep (1)
	 SetValue_PBDataWindow(tblwndw,"#1","stability_home","Good")
	Sleep (1)
	//Case-3 Validation of Stability Work Radiobutton
	 SetValue_PBDataWindow(tblwndw,"#1","stability_work","Poor")
	Sleep (1)
	 SetValue_PBDataWindow(tblwndw,"#1","stability_work","Average")
	Sleep (1)
	 SetValue_PBDataWindow(tblwndw,"#1","stability_work","Good")
	Sleep (1)
	//Case-4 Validation of Ability Radiobutton
	 SetValue_PBDataWindow(tblwndw,"#1","ability","Poor")
	Sleep (1)
	 SetValue_PBDataWindow(tblwndw,"#1","ability","Average")
	Sleep (1)
	 SetValue_PBDataWindow(tblwndw,"#1","ability","Good")
	Sleep (1)
	//Case-4 Validation of Willingness Radiobutton
	 SetValue_PBDataWindow(tblwndw,"#1","willingness","Poor")
	Sleep (1)
	 SetValue_PBDataWindow(tblwndw,"#1","willingness","Average")
	Sleep (1)
	 SetValue_PBDataWindow(tblwndw,"#1","willingness","Good")
	Sleep (1)
	//Case-4 Validation of Security Radiobutton
	 SetValue_PBDataWindow(tblwndw,"#1","security","Poor")
	Sleep (1)
	 SetValue_PBDataWindow(tblwndw,"#1","security","Average")
	Sleep (1)
	 SetValue_PBDataWindow(tblwndw,"#1","security","Good")
	//Click Save button
	 clickOnSaveButon()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_CustomerEvaluation_CustomerTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Deceased_CustomerTab(valueToSet)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Deceased in Customer Tab
//Ex:  Verification_of_Deceased_CustomerTab("No")
//*****************************************************************************************************************
Verification_of_Deceased_CustomerTab(String valueToSet)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Select Deceased to Yes
	Set tblwndw = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust")
	 SetValue_PBDataWindow(tblwndw,"#1","deceased_yn","Yes")
	 clickOnSaveButon()
	//Validate label in Customer tab
	Set tblwindow1 = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_account_status_display")
	label = GetValue_PBDataWindow(tblwindow1,"#1","account_msg")
	if label = "Deceased - PRIMARY " 
		writeReportLog "Deceased Radiobutton is set to //Yes// and Label : "&label&" is displayed","Passed","",""
	//Select Deceased to No
	 SetValue_PBDataWindow(tblwndw,"#1","deceased_yn",valueToSet)
	//Clickon Save button
	 clickOnSaveButon()
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_account_status_display").WaitWhileExists 
	else
		writeReportLog "Deceased Radiobutton is set to //No// and Label is disappeared","Passed","",""
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Deceased_CustomerTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_HometownState_CustomerTab()
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Hometown State in Customer Tab
//Ex:  Verification_of_HometownState_CustomerTab()
//*****************************************************************************************************************
Verification_of_HometownState_CustomerTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Navigate to Address tab
	 navigateToTab("Address")
	state = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_loc").GetCellData("#1","state")
	//Navigate to Customer tab
	 navigateToTab("Customer")
	Set tblPBDataWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust")
	tblPBDataWindow.SelectCell "#1","hometown_state"
	 TypeText_PBDataWindow(tblPBDataWindow,"#1","hometown_state",state)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_HometownState_CustomerTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_HometownCity_CustomerTab(city)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Hometown City in Customer Tab
//Ex:  Verification_of_HometownCity_CustomerTab(city)
//*****************************************************************************************************************
Verification_of_HometownCity_CustomerTab(String city)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set tblPBDataWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust")
	tblPBDataWindow.SelectCell "#1","hometown_city"
	 TypeText_PBDataWindow(tblPBDataWindow,"#1","hometown_city",city)
	 clickOnSaveButon()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_HometownCity_CustomerTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_LengthinAreaMnths_CustomerTab(ID)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Length in Area Mnths in Customer Tab
//Ex:  Verification_of_LengthinAreaMnths_CustomerTab(ID)
//*****************************************************************************************************************
Verification_of_LengthinAreaMnths_CustomerTab(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	mnths = Generate_RandomNumber_UserDefind("1","3")
	Set tblPBDataWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust")
	tblPBDataWindow.SelectCell "#1","length_in_area_mos"
	 TypeText_PBDataWindow(tblPBDataWindow,"#1","length_in_area_mos",mnths)
	 sendKeys("{Tab}")
	getValueLength = Length(Cint(getValue_In_PBDataWindow_DP("dw_cust","#1", "length_in_area_mos")))
	//Updated Length in Area Months random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_cust", "#1", "length_in_area_mos","bp_loantype_dealer_primaryapplicant","lengthinmnths",ID)
	 writeReportLog("Entered Length in Area Mnths: "& mnths &" in Customer Tab (UI-"&getValueLength&",DB-3)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_LengthinAreaMnths_CustomerTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_LengthinAreayears_CustomerTab(ID)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Length in Area Yrs in Customer Tab
//Ex:  Verification_of_LengthinAreayears_CustomerTab(ID)
//*****************************************************************************************************************
Verification_of_LengthinAreayears_CustomerTab(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	yrs = Generate_RandomNumber_UserDefind("1","3")
	Set tblPBDataWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust")
	tblPBDataWindow.SelectCell "#1","length_in_area_yrs"
	 TypeText_PBDataWindow(tblPBDataWindow,"#1","length_in_area_yrs",yrs)
	 sendKeys("{Tab}")
	getValueLength = Length(Cint(getValue_In_PBDataWindow_DP("dw_cust","#1", "length_in_area_yrs")))
	//Updated Length in Area Years random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_cust", "#1", "length_in_area_yrs","bp_loantype_dealer_primaryapplicant","lengthinyrs",ID)
	 writeReportLog("Entered Length in Area Yrs: "& yrs &" in Customer Tab (UI-"&getValueLength&",DB-3)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_LengthinAreayears_CustomerTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_USResident_CustomerTab(valueToSet)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the US Resident in Customer Tab
//Ex:  Verification_of_USResident_CustomerTab(valueToSet)
//*****************************************************************************************************************
Verification_of_USResident_CustomerTab(String valueToSet)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Select US Resident
	Set tblwndw = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust")
	 SetValue_PBDataWindow(tblwndw,"#1","us_resident_yn","No")
	 clickOnSaveButon()
	Sleep (2)
	 SetValue_PBDataWindow(tblwndw,"#1","us_resident_yn",valueToSet)
	 clickOnSaveButon()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_USResident_CustomerTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_Dependents_CustomerTab(ID)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Dependents in Customer Tab
//Ex:  Verification_of_Dependents_CustomerTab(ID)
//*****************************************************************************************************************
Verification_of_Dependents_CustomerTab(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	dependents = Generate_RandomNumber_UserDefind("9","2")
	Set tblPBDataWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust")
	tblPBDataWindow.SelectCell "#1","nbr_of_dep"
	 TypeText_PBDataWindow(tblPBDataWindow,"#1","nbr_of_dep",dependents)
	 sendKeys("{Tab}")
	getValueLength = Length(Cint(getValue_In_PBDataWindow_DP("dw_cust","#1", "nbr_of_dep")))
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_cust", "#1", "nbr_of_dep","bp_loantype_dealer_primaryapplicant","dependents",ID)
	 writeReportLog("Entered Dependents: "& dependents &" in Customer Tab (UI-"&getValueLength&",DB-2)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_Dependents_CustomerTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_CreditScore_CustomerTab(ID)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Credit Score in Customer Tab
//Ex:  Verification_of_CreditScore_CustomerTab(ID)
//*****************************************************************************************************************
Verification_of_CreditScore_CustomerTab(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	creditscore = Generate_RandomNumber_UserDefind("9","3")
	Set tblPBDataWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust")
	tblPBDataWindow.SelectCell "#1","credit_score"
	 TypeText_PBDataWindow(tblPBDataWindow,"#1","credit_score",creditscore)
	 sendKeys("{Tab}")
	getValueLength = Length(Cint(getValue_In_PBDataWindow_DP("dw_cust","#1", "credit_score")))
	//Updated Discount Amt random data in DB
	 Update_ColumnValue_Into_DB("w_cust", "dw_cust", "#1", "credit_score","bp_loantype_dealer_primaryapplicant","creditscore",ID)
	 writeReportLog("Entered Credit Score value: "& creditscore &" in Customer Tab (UI-"&getValueLength&",DB-3)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_CreditScore_CustomerTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: Verification_of_ReviewDate_CustomerTab()
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Review Date in Customer Tab
//Ex:  Verification_of_ReviewDate_CustomerTab()
//*****************************************************************************************************************
Verification_of_ReviewDate_CustomerTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	review_dt =  get_Review_Date_CustomerTab_DB()
	Set tblPBDataWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust")
	tblPBDataWindow.SelectCell "#1","next_review_dt"
	getreviewdate_customer = getValueInPBDataWindow_DP("w_cust","dw_cust","#1","next_review_dt")
	getreviewdate_Split = Split(getreviewdate_customer," ")
	getreviewdate = getreviewdate_Split(0)
	getreviewdate = Right("0" & Month(getreviewdate), 2) & "/" & Right("0" & Day(getreviewdate), 2) & "/" & Year(getreviewdate)
	 validateDataAndReport(getreviewdate,review_dt,"Validation of Review Date in Customer Tab Expected: "&review_dt&" and Actual :"&getreviewdate)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to Verification_of_PreferredName_CustomerTab","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: Verification_of_PreferredName_CustomerTab(ID)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Preferred Name in Customer Tab
//Ex:  Verification_of_PreferredName_CustomerTab(ID)
//*****************************************************************************************************************
Verification_of_PreferredName_CustomerTab(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set tblPBDataWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust")
	prfrdName = generate_Name(30,"PreferredName")
	 TypeText_PBDataWindow(tblPBDataWindow,"#1","preferred_name",prfrdName)
	 sendKeys("{Tab}")
	tblPBDataWindow.SelectCell "#1","preferred_name"
	getValueLength = Length(getValueInPBDataWindow_DP("w_cust","dw_cust","#1","preferred_name"))
	//Updated preferred name random data in DB
	 Update_ColumnValue_Into_DB("w_cust","dw_cust","#1","preferred_name","bp_loantype_dealer_primaryapplicant","preferredname",ID)
	 writeReportLog("Entered Preferred Name: "& prfrdName &" in Customer Tab (UI-"&getValueLength&",DB-30)","Passed",FailComments,"")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to Verification_of_PreferredName_CustomerTab","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: get_Review_Date_CustomerTab_DB()
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will fetch the Review Date in Customer Tab
//Ex:  get_Review_Date_CustomerTab_DB()
//*****************************************************************************************************************
get_Review_Date_CustomerTab_DB()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust").SelectCell "#1","compute_3"
	Cust_ID = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust").GetCellData("#1","compute_3")
    //Get Entry Date in Customer Tab
   	Entry_Date_DB_Customer = runSQLQuery("SELECT entry_dt FROM support.bp_customer_tbl where cust_id=//"& Cust_ID &"//","entry_dt")
   	Entry_Date_DB_Split = Split(Entry_Date_DB_Customer," ")
	Entry_Date_DB_Yr = Entry_Date_DB_Split(0)
	Entry_Date_DB = dateadd ("yyyy","1",Entry_Date_DB_Yr)
	Entry_Date_DB = Right("0" & Month(Entry_Date_DB), 2) & "/" & Right("0" & Day(Entry_Date_DB), 2) & "/" & Year(Entry_Date_DB)
	get_Review_Date_CustomerTab_DB = Entry_Date_DB
	if GetErrorCount()>0  			
		 writeReportLog("Failed to get_Review_Date_CustomerTab_DB","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: select_Prefix_CustomerTab()
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will select the Prefix in Customer Tab
//Ex:  select_Prefix_CustomerTab()
//*****************************************************************************************************************
select_Prefix_CustomerTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set tblwndw = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust")
	for i = 1 To 5 
	//tblwndw.SelectCell "#1","#7"
	 SetValue_PBDataWindow(tblwndw,"#1","#7","#"&i)
	getprefix = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust").GetCellData("#1","#7")   
    if getprefix <> "" 
    	Exit for
   	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to select_Prefix_CustomerTab","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: Verification_of_CustomerDetails_CustomerTab()
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will verify the Customer Details in Customer Tab
//Ex:  Verification_of_CustomerDetails_CustomerTab()
//*****************************************************************************************************************
Verification_of_CustomerDetails_CustomerTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	expPriLang = "English"
	Set tblwndw = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust")
	tblwndw.SelectCell "#1","first_name"
	fn= ToUpper(getValueInPBDataWindow_DP("w_cust","dw_cust","#1","first_name"))
	tblwndw.SelectCell "#1","last_name"
	ln= ToUpper(getValueInPBDataWindow_DP("w_cust","dw_cust","#1","last_name"))
	tblwndw.SelectCell "#1","middle_name"
	mn= ToUpper(getValueInPBDataWindow_DP("w_cust","dw_cust","#1","middle_name"))
	tblwndw.SelectCell "#1","ssn"
	ssn= getValueInPBDataWindow_DP("w_cust","dw_cust","#1","ssn")
	tblwndw.SelectCell "#1","driverlic"
	dl= getValueInPBDataWindow_DP("w_cust","dw_cust","#1","driverlic")
	tblwndw.SelectCell "#1","dob_dt"
	dob= getValueInPBDataWindow_DP("w_cust","dw_cust","#1","dob_dt")
	dob = Right("0" & Month(dob), 2) & "/" & Right("0" & Day(dob), 2) & "/" & Year(dob)
	tblwndw.SelectCell "#1","primary_lang"
	priLang= ToUpper(getValueInPBDataWindow_DP("w_cust","dw_cust","#1","primary_lang"))
	 validateDataAndReport(fn,Environment.Value("firstName"),"Validation of First Name Expected :" &Environment.Value("firstName")&" and Actual :"&fn)
	 validateDataAndReport(ln,Environment.Value("lastName"),"Validation of Last Name Expected :" &Environment.Value("lastName")&" and Actual :"&ln)
	 validateDataAndReport(mn,Environment.Value("middleName"),"Validation of Middle Name Expected :" &Environment.Value("middleName")&" and Actual :"&mn)
	 validateDataAndReport(ssn,Environment.Value("SSN"),"Validation of SSN Expected :" &Environment.Value("SSN")&" and Actual :"&ssn)
	 validateDataAndReport(dob,Environment.Value("DOB"),"Validation of DOB Expected :" &Environment.Value("DOB")&" and Actual :"&dob)
	 validateDataAndReport(dl,Environment.Value("DL"),"Validation of DL Expected :" &Environment.Value("DL")&" and Actual :"&dl)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: Verification_of_CustomerDetails_CustomerTab","Failed", Err.Description,"Y")

//*****************************************************************************************************************
//@methodName: validate_Email_Field(ID)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will validate the Email ID in Customer Tab
//Ex:  validate_Email_Field(ID)
//*****************************************************************************************************************
validate_Email_Field(String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if Environment.value("FV_Flag") = "Y" 
		//*******************************
		//Field Validation - Email Field
		//*******************************
		//Case#01 : Save Application By Entering Invalid format Email Address
		//Set Invalid Email format
		Set tblPBDataWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_cust")
		 TypeText_PBDataWindow(tblPBDataWindow,"#1","email","test@")
		//Save New Application
		 clickOnSaveButon()
		//Verify email alert
		 Validate_ErrorPopup_Title_Message_F2Window()
		//Clear Values in Field
		 clear_Field_textBox_F2Window("dw_cust","email","#1")
	//--------------------------------------------------------------------------------
	//Case#02 : Save Application By Entering Special Characters in Email Address
		//Set Special Characters in Email Field
		 TypeText_PBDataWindow(tblPBDataWindow,"#1","email", "test$#&@")
		//Save New Application
		 clickOnSaveButon()
		//Verify email alert
		 Validate_ErrorPopup_Title_Message_F2Window()
		//Clear Values in Field
		 clear_Field_textBox_F2Window("dw_cust","email","#1")
	//------------------------------------------------------------------------------------
	//Case#03 : Save Application By Entering characters more than 250 in Email Address
		//Set Maximum Characters in email Field and Validate
		maxemail = random_AlphaCharacter_String("251")
		 TypeText_PBDataWindow(tblPBDataWindow,"#1","email",maxemail)
		//Get the Length of Entered value in Dealer Discount field
		getValueLength = int(GetValue_PBDataWindow(tblPBDataWindow,"#1","email"))
		//Comparing the Length of accepting characters 
		if Length(getValueLength) = "" 
			 writeReportLog("Validate Email Maximum Length : "&columnName,"Passed","","")	
		//Clear Values in Field
		 clear_Field_textBox_F2Window("dw_cust","email","#1")
//-------------------------------------------------------------------------------------
		//*************************
		//Work Flow - Email Field
		//**************************
		email = "Email"&random_AlphaCharacter_String("55")&"@sf.com"
		 TypeText_PBDataWindow(tblPBDataWindow,"#1","email",email)
		 sendKeys("{TAB}")
		//get length of email id
	    getValueLength= GetValue_PBDataWindow(tblPBDataWindow,"#1","email")
	   //Updated unique email random data in DB
		 Update_ColumnValue_Into_DB("w_cust", "dw_cust", "#1", "email","branchplusqa.bp_loantype_dealer_primaryapplicant","email",ID)
	     writeReportLog("Entered email ID: "& getValueLength &"  in Customer Tab (UI-"&Length(getValueLength)&",DB-250)","Passed",FailComments,"")
		//Error handling 
		if GetErrorCount()>0  			
		 writeReportLog("Failed to validate_Email_Field","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: clear_Field_textBox_F2Window(windowName,column_Name,rowNum)
//@Author Ranjitha
//@Date 6 Sep 2018
//@Description This will clear the Text field
//Ex:  clear_Field_textBox_F2Window("dw_cust","email","#1")
//*****************************************************************************************************************
clear_Field_textBox_F2Window(String windowName,String column_Name,String rowNum)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Object for Data Window
	Set tblPBDataWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:="&windowName)
	tblPBDataWindow.SelectCell rowNum, column_Name
	//Click Cell
	tblPBDataWindow.Click()
	//Set Value
	tblPBDataWindow.SetValue(CellData rowNum, column_Name," "
		//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed to clear_Field_textBox_F2Window"&column_Name,"Failed", Err.Description ,"")

//*************************************************************************************************************************************************
//@methodName: insurance_Tab_FieldValidate(windowName,colNum,Value,comparisonVal)
//@Author: Thirumal Reddy
//@Date 09 August 2018
//@Description for field level validation in Insurance Tab fields
//Ex:  insurance_Tab_FieldValidate(windowName,colNum,Value,comparisonVal)
//***************************************************************************************************************************************************
insurance_Tab_FieldValidate(String windowName,String colNum,String Value,String comparisonVal)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	for Iterator = 0 To ubound(Value) Step 1
	 verify_Length_TextField(windowName,"#1",colNum(Iterator),Value(Iterator),comparisonVal(Iterator))
//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed insurance_Tab_FieldValidate","Failed", Err.Description ,"")

//*************************************************************************************************************************************************
//@methodName: enter_ValidData_InsuranceTab_Fields(nameOfWindow,ColName,Value,DBCol,ID)
//@Author: Thirumal Reddy
//@Date 09 August 2018
//@Description to enter valid  data into Insurance tab fields, update to DB
//Ex:  enter_ValidData_InsuranceTab_Fields(nameOfWindow,ColName,Value,DBCol,ID)
//***************************************************************************************************************************************************
enter_ValidData_InsuranceTab_Fields(String nameOfWindow,String ColName,String Value,String DBCol,String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	for Iterator =0  To ubound(ColName) Step 1
		 TypeText_PBDataWindow(nameOfWindow,"#1",ColName(Iterator),Value(Iterator))
		val = ColName(Iterator)
		if val = "zipcode" or val="city" 
			else 
			 Update_ColumnValue_Into_DB("w_cust","dw_insurance","#1", ColName(Iterator),"branchplusqa.bp_insurance",DBCol(Iterator),ID)
    		 writeReportLog("Entered firstname value: "& firstName &" in insurance window (UI-"&getValueLength&",DB-30)","Passed",FailComments,"")
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed enter_ValidData_InsuranceTab_Fields","Failed", Err.Description ,"")

//***************************************************************************************************************************
//@Method: verify_Component_Tab(pfs_gap_Chargeamount,dealer_com_PFS,repo_com_pfs,branch_com_pfs,other_fee,VSC_36_Months_chrgAmount,surcharge_VSC_fdw,dealer_com_vsc,repo_com_vsc,branch_com_vsc)
//@Author: Thirumal Reddy
//@Date 04 Sep 2018
//@Description: This function is to verify and enter the data in component tab.
//Ex:  verify_Component_Tab(pfs_gap_Chargeamount,dealer_com_PFS,repo_com_pfs,branch_com_pfs,other_fee,VSC_36_Months_chrgAmount,surcharge_VSC_fdw,dealer_com_vsc,repo_com_vsc,branch_com_vsc)
//***************************************************************************************************************************
verify_Component_Tab(String pfs_gap_Chargeamount,String dealer_com_PFS,String repo_com_pfs,String branch_com_pfs,String other_fee,String VSC_36_Months_chrgAmount,String surcharge_VSC_fdw,String dealer_com_vsc,String repo_com_vsc,String branch_com_vsc)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_component")
	//get the row count
	rowCount = getRowCount_PbDataWindow("w_cust","dw_component")
	for Iterator = 1 To rowCount
		//get the description value
		desc = GetValue_PBDataWindow(tblwindow,"#"&Iterator,"descr")
		//Getting expected value from database and verifying with the value in the application based on description value
		Select Case desc
			Case "PFS GAP"
			valAmount = GetValue_PBDataWindow(tblwindow,"#"&Iterator,"charge_amt")
			delCom = GetValue_PBDataWindow(tblwindow,"#"&Iterator,"dealer_comm")
			repoCom = GetValue_PBDataWindow(tblwindow,"#"&Iterator,"rep_comm")
			branchCom =  GetValue_PBDataWindow(tblwindow,"#"&Iterator,"branch_comm")
			//Validating actual with expected
			if valAmount =pfs_gap_Chargeamount  and delCom=dealer_com_PFS and repoCom =repo_com_pfs and branchCom=branch_com_pfs 
				 writeReportLog("Actual values:"&valAmount&delCom&repoCom&branchCom &"are matching with expected values:"&pfs_gap_Chargeamount & dealer_com_PFS & repo_com_pfs &branch_com_pfs,"Passed","","Y")
			Case "Other Fee"
			valOtherFee = GetValue_PBDataWindow(tblwindow,"#"&Iterator,"charge_amt")
			//Validating actual with expected
			if valOtherFee=other_fee 
				 writeReportLog("Actual value:"&valOtherFee &" is matching with expected value:"&other_fee,"Passed","","Y")
			Case "Service Point VSC 36 Months"
			valAmount = GetValue_PBDataWindow(tblwindow,"#"&Iterator,"charge_amt")
			delCom = GetValue_PBDataWindow(tblwindow,"#"&Iterator,"dealer_comm")
			repoCom = GetValue_PBDataWindow(tblwindow,"#"&Iterator,"rep_comm")
			branchCom =  GetValue_PBDataWindow(tblwindow,"#"&Iterator,"branch_comm")
			surCharge =  GetValue_PBDataWindow(tblwindow,"#"&Iterator,"surcharge_amt")
			//Validating actual with expected
			if valAmount =VSC_36_Months_chrgAmount and surCharge = surcharge_VSC_fdw and delCom=dealer_com_vsc and repoCom =repo_com_vsc and branchCom=branch_com_vsc 
				 writeReportLog("Actual values:"&valAmount &surCharge &delCom &repoCom &branchCom &" are matching with expected values:"&VSC_36_Months_chrgAmount &surcharge_VSC_fdw &dealer_com_vsc &repo_com_vsc &branch_com_vsc,"Passed","","Y")
		Select
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed verify_Component_Tab","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: previousEmp_EmploymentTab()
//@Author Thirumal Reddy
//@Date 03 Sep 2018
//@Description This is to validate previous employment section in Employment Tab - loan Processing
//Ex:  previousEmp_EmploymentTab()
//*****************************************************************************************************************
previousEmp_EmploymentTab()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
previous_Emp_Name = generate_Name(40,"previousEmpName")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
prevemp_position = generate_Name(40,"PrevEmpPosition")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
prevemp_addr = generate_Name(40,"PrevEmpPosition")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
prevemp_phone = Trim(Generate_RandomNumber(10))
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
prevemp_ext = Trim(Generate_RandomNumber(4))
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
prevemp_wrkyears = Trim(Generate_RandomNumber(3))
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
prevemp_wrkmnths = Trim(Generate_RandomNumber(3))
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
Set prevWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_prev")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//Validating employer field
 verify_Length_TextField(prevWindow,"#1","emplr_name",random_AlphaNumeric_String(45),"40")
//Enter data in Employer field
 TypeText_PBDataWindow(prevWindow,"#1","emplr_name",previous_Emp_Name)
//Enter employer position
 TypeText_PBDataWindow(prevWindow,"#1","position",prevemp_position)
//Enter Previous employer address
 TypeText_PBDataWindow(prevWindow,"#1","addr1",prevemp_addr)
//Enter previous employer phone
 TypeText_PBDataWindow(prevWindow,"#1","phone1",prevemp_phone)
//Enter previous employer Extension
 TypeText_PBDataWindow(prevWindow,"#1","ext1",prevemp_ext)
//Enter work years
 TypeText_PBDataWindow(prevWindow,"#1","work_years",prevemp_wrkyears)
//Enter work months
 TypeText_PBDataWindow(prevWindow,"#1","work_months",prevemp_wrkmnths)
//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed previousEmp_EmploymentTab","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: enterdataInField_UpdateToDB(winName,rowNumber,ColArray,valArray,ID,DB_ColArray)
//@Author Thirumal Reddy
//@Date 03 Sep 2018
//@Description This is to enter the data in the text box and update the entered value to the DB
//Ex:  enterdataInField_UpdateToDB(winName,rowNumber,ColArray,valArray,ID,DB_ColArray)
//*****************************************************************************************************************
enterdataInField_UpdateToDB(String winName,String dataWindowName,String rowNumber,String ColArray,String valArray,String ID,String DB_ColArray,String dbTableName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set tblwindowname =  PbWindow("pbname:=w_bp_frame").PbWindow("pbname:="&winName).PbDataWindow("pbname:="&dataWindowName)
for Iterator = 0 To ubound(ColArray) Step 1
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 TypeText_PBDataWindow(tblwindowname,"#"&rowNumber,ColArray(Iterator),valArray(Iterator))
	 sendkeys("{TAB}")
	actualVal =  GetValue_PBDataWindow(tblwindowname,"#"&rowNumber,ColArray(Iterator))
	 validateDataAndReport(actualVal,valArray(Iterator),"Actual value :"&actualVal& "is matching with expected value:"&valArray(Iterator))
	valuetoDB = DB_ColArray(Iterator)
	 Update_ColumnValue_Into_DB(winName,dataWindowName,"#"&rowNumber, ColArray(Iterator),dbTableName,valuetoDB,ID)
     writeReportLog("Entered value: "& firstName &" in insurance window (UI-"&getValueLength&",DB-30)","Passed",FailComments,"")
//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed enterdataInField_UpdateToDB","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: MonthlySal_Calculate_onPayType(value,rowNumber,ID)
//@Author Thirumal Reddy
//@Date 03 Sep 2018
//@Description This is for verification of Monthly salary based on PayType.
//Ex:  MonthlySal_Calculate_onPayType(value,rowNumber,ID)
//*****************************************************************************************************************
MonthlySal_Calculate_onPayType(String value,String rowNumber,String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set windowname = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_emplmt")
	//genarating random salary
	sal=Generate_RandomNumber_UserDefind(9,8)
	salary=Substring(sal,1,6)&"."& Substring(sal,7,8)
	 TypeText_PBDataWindow(windowName,"#"&rowNumber,"gross_salary",salary)
	for Iterator = 0 To ubound(value) Step 1
	 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","employment_paysource","branchplusqa.bp_employment",ID,"primaryemp_paysource",windowName,"#"&rowNumber,"salary_source")
	 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","employment_payday","branchplusqa.bp_employment",ID,"primaryemp_payday",windowName,"#"&rowNumber,"payday")
	 SetValue_PBDataWindow(windowName,"#"&rowNumber,"#12",value(Iterator))
	payType = GetValue_PBDataWindow(windowname,"#1","salary_period_type")
	actSalary = formatNumber(GetValue_PBDataWindow(windowname,"#1","compute_3"))
if payType = "Biweekly" 
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	expSalary = (salary*26)/12
	expSalary = formatNumber(expSalary,2)
	//expSalary = "$" & expSalary
	 validateDataAndReport(expSalary,actSalary,"Net monthly income when paytype is Biweekly for salary $" & salary & " is " & actSalary )
else if payType = "Month" 
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	expSalary = salary
	expSalary = formatNumber(expSalary,2)
	//expSalary = "$" & expSalary
	 validateDataAndReport(expSalary,actSalary,"Net monthly income when paytype is Month for salary $" & salary & " is " & actSalary )
else if payType = "Week" 
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	expSalary = (salary*52)/12
	expSalary = formatNumber(expSalary,2)
	//expSalary = "$" & expSalary
	 validateDataAndReport(expSalary,actSalary,"Net monthly income when paytype is Week for salary $" & salary & " is " & actSalary )
else if payType = "Year" 
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	expSalary = salary/12
	expSalary = formatNumber(expSalary,2)
	//expSalary = "$" & expSalary
	 validateDataAndReport(expSalary,actSalary,"Net monthly income when paytype is Year for salary $" & salary & " is " & actSalary )
//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed MonthlySal_Calculate_onPayType","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: MonthlySal_Calculate_onPayType(value,rowNumber,ID)
//@Author Thirumal Reddy
//@Date 05 Sep 2018
//@Description This is for verification of Monthly salary based on PayType.
//Ex:  MonthlySal_Calculate_onPayType(value,rowNumber,ID)
//*****************************************************************************************************************
budget_Tab_Validation(String dataArr,String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//To get the row count
rowCount = getRowCount_PbDataWindow("w_cust","dw_budget")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
max_Amount = Generate_RandomNumber_UserDefind(9,6)&".00"
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
String DBColArr
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
DBColArr = {"primary_job_monthlyincome","second_job_monthlyincome","mortgage_mnthly_paymnt","autos_mnthly_paymnt","pfsc_mnthly_paymnt","rent_mnthly_paymnt")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
for Iterator = 1 To rowCount
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
		itr =Iterator-1
	Set budgetWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_budget")
	if Iterator<=2 
		 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#"&Iterator, "budget_type","INCOME")
		 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#"&Iterator, "description",dataArr(itr))
		 SetValue_PBDataWindow(budgetWindow,"#"&Iterator,"monthly_income",max_Amount)
		 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#"&Iterator, "monthly_income",max_Amount)
		 Update_ColumnValue_Into_DB("w_cust", "dw_budget","#"&Iterator, "monthly_income","branchplusqa.bp_budget",DBColArr(itr),ID)
	else
		 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#"&Iterator, "budget_type","DEBT")
	//	 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#"&Iterator, "description",dataArr(itr))
		 SetValue_PBDataWindow(budgetWindow,"#"&Iterator,"monthly_payment",max_Amount)
		 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#"&Iterator, "monthly_payment",max_Amount)
		 Update_ColumnValue_Into_DB("w_cust", "dw_budget","#"&Iterator, "monthly_payment","branchplusqa.bp_budget",DBColArr(itr),ID)
//		 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#"&Iterator, "budget_type","DEBT")
//		value = getValueInPBDataWindow_DP("w_cust", "dw_budget", "#"&Iterator, "description")
//		 SetValue_PBDataWindow(budgetWindow,"#"&Iterator,"monthly_payment",max_Amount)
//		if IndexOf(dataArr,value) 
//			 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#"&Iterator, "monthly_payment",max_Amount)
//		     Update_ColumnValue_Into_DB("w_cust", "dw_budget","#"&Iterator, "monthly_payment","branchplusqa.bp_budget",DBColArr(itr),ID)
//		
//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed budget_Tab_Validation","Failed", Err.Description ,"")

//*****************************************************************************************************************
//@methodName: VerificationofAccountandBudgetTab_toProcessLoan(gapchargeamount,otherfee,chargeamount,dealercomm,repocomm,suramount,ID)
//@Author Ranjitha N
//@Date 10 Sep 2018
//@Description This is for verification of Account tab and Budget tab to Process the loan
//Ex:  VerificationofAccountandBudgetTab_toProcessLoan(gapchargeamount,otherfee,chargeamount,dealercomm,repocomm,suramount,ID)
//*****************************************************************************************************************
VerificationofAccountandBudgetTab_toProcessLoan(String gapchargeamount,String otherfee,String chargeamount,String dealercomm,String repocomm,String surAmt,String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Navigate to Component Tab
	 navigateToTab("Component")
	//Update the Finance Details
	Set tblwndw = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_component")
	 SetValue_PBDataWindow(tblwndw,"#1","charge_amt",gapchargeamount)
	 SetValue_PBDataWindow(tblwndw,"#2","charge_amt",otherfee)
	 SetValue_PBDataWindow(tblwndw,"#3","charge_amt",chargeamount)
	 SetValue_PBDataWindow(tblwndw,"#1","dealer_comm",dealercomm)
	 SetValue_PBDataWindow(tblwndw,"#1","rep_comm",repocomm)
	 SetValue_PBDataWindow(tblwndw,"#3","dealer_comm",dealercomm)
	 SetValue_PBDataWindow(tblwndw,"#3","surcharge_amt",surAmt)
	 SetValue_PBDataWindow(tblwndw,"#3","rep_comm",repocomm)
	//Click on Save button
	 clickOnSaveButon()
	//Navigate to Component Tab
	 navigateToTab("Account")
	//Click on Process Button
	 clickButton_Process()
	//Handle Validation error pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Update the Loan terms
	Set tblwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct")
	 SetValue_PBDataWindow(tblwindow,"#1","nbr_of_months","72")
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "nbr_of_months","bp_financedetails","loanterm",ID)
	//Click on Save button
	 clickOnSaveButon()
	//Click on Process Button
	 clickButton_Process()
	//Handle Validation error pop up
	 Validate_ErrorPopup_Title_Message_F2Window()
	//Update the Purchase Amount and DownPayment Amount
	 SetValue_PBDataWindow(tblwindow,"#1","purch_amt","25000")
	 SetValue_PBDataWindow(tblwindow,"#1","down_pmt","3000")
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "purch_amt","bp_financedetails","loanamount",ID)
	 Update_ColumnValue_Into_DB("w_cust", "dw_acct", "#1", "down_pmt","bp_financedetails","downpayment",ID)
	//Click on Save button
	 clickOnSaveButon()
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: VerificationofAccountandBudgetTab_toProcessLoan","Failed", Err.Description,"Y")

//***************************************************************************************************************************
//@Method: sawsTab_Field_Validation_ValidData(value)
//@Author: Thirumal Reddy
//@Date 21 Aug 2018
//@Description: This function is to the fields in SAWS Tab and to enter valid data into the fields and verify.
//Ex:  sawsTab_Field_Validation_ValidData(value)
//***************************************************************************************************************************
sawsTab_Field_Validation_ValidData(String value)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//*******************************
//Field Validations
//*******************************
 saws_NegativeValidation()
set windowName = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_saws")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
for Iterator = 1 To 6 Step 1
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	valItr = Iterator-1
	 SelectCell_PBDataWindow(windowName,"#"&Iterator,"descr")
	set srch_Window = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_search").PbDataWindow("pbname:=dw_search")
	 SetValue_PBDataWindow(srch_Window,"#1","reason_expand",random_AlphaNumeric_String(5005))
	  clickButton_InWindow("w_search","Ok")
	 clickOnSaveButon()
	  verify_Length_TextField(windowName,"#"&Iterator,"notes","5000")
//*******************************
//Work Flow
//*******************************
	set windowName = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_saws")
	 SelectCell_PBDataWindow(windowName,"#"&Iterator,"descr")
	set srch_Window = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_search").PbDataWindow("pbname:=dw_search")
	 SetValue_PBDataWindow(srch_Window,"#1","reason_expand",value(valItr))
	  clickButton_InWindow("w_search","Ok")
	 clickOnSaveButon()
	 Get_Value_TextBox_Compare("w_cust","dw_saws","#"&Iterator,"notes",value(valItr))
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed  sawsTab_Field_Validation_ValidData","Failed", Err.Description ,"")

//***************************************************************************************************************************
//@Method: SelectCell_PBDataWindow(tblPBDataWindow,RowNumber,ColumnName)
//@Author: Thirumal Reddy
//@Date 21 Aug 2018
//@Description: This function is to select the links in SAWS Tab
//Ex:  SelectCell_PBDataWindow(tblPBDataWindow,RowNumber,ColumnName)
//***************************************************************************************************************************
SelectCell_PBDataWindow(String tblPBDataWindow,String RowNumber,String ColumnName)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//tblPBDataWindow.HoverMouse
	tblPBDataWindow.SelectCell RowNumber,ColumnName
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to SetValue_PBDataWindow","Failed", Err.Description ,"")

//***************************************************************************************************************************
//@Method: saws_NegativeValidation()
//@Author: Thirumal Reddy
//@Date 21 Aug 2018
//@Description: This function is to perform negative validation in SAWS Tab.
//Ex:  saws_NegativeValidation()
//***************************************************************************************************************************
saws_NegativeValidation()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//Click on Transportation Explanation link
set windowName = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_saws")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
 SelectCell_PBDataWindow(windowName,"#1","descr")
//Click on cancel button
  clickButton_InWindow("w_search","Cancel")
//Click on Transportation Explanation link
set windowName = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_saws")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
 SelectCell_PBDataWindow(windowName,"#1","descr")
//Click on Ok button
  clickButton_InWindow("w_search","Ok")
//Click on Save option
 clickOnSaveButon()
//Get the value in the first link and verify whether notes is null
value = getValueInPBDataWindow_DP("w_cust","dw_saws","#1","notes")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
if value="" 
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 writeReportLog("if any notes is saved with empty message,No data is displayed on the Saws Tab ","Passed",FailComments,"N")
else 
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 writeReportLog("if any notes is saved with empty message,still data is displayed on the Saws Tab ","Failed",FailComments,"Y")
//Click on Transportation Explanation link
set windowName = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_saws")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
 SelectCell_PBDataWindow(windowName,"#1","descr")
//Enter random alphanumeric characters
set srch_Window = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_search").PbDataWindow("pbname:=dw_search")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
 SetValue_PBDataWindow(srch_Window,"#1","reason_expand",random_AlphaNumeric_String(50))
//Click on Ok button
  clickButton_InWindow("w_search","Ok")
//Navigate to reference tab
 navigateToTab("Reference")
//Click on Yes button in Tab Page selection changing pop up
  clickButton_InWindow("w_message","Yes")
//Navigate to Saws Tab
 navigateToTab("SAWS")
//Error Handling
if GetErrorCount()>0  			
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 writeReportLog("Failed saws_NegativeValidation","Failed", Err.Description ,"")

//***************************************************************************************************************************
//@Method: Validate_Budget_LineItem()
//@Author: Thirumal Reddy
//@Date 21 Aug 2018
//@Description: This function is to perform validations in budget Tab by adding line items.
//Ex:  Validate_Budget_LineItem()
//***************************************************************************************************************************
 Validate_Budget_LineItem()
//Select budget type drop down
rowCoun = getRowCount_PbDataWindow("w_cust","dw_budget")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
max_Amount = Generate_RandomNumber_UserDefind(9,6)&".00"
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
Set budgetWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_budget")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//Select budget type income in the drop down
 SetValue_PBDataWindow(budgetWindow,"#"&rowCoun,"budget_type","INCOME")
//Entering budget description
 TypeText_PBDataWindow(budgetWindow,"#"&rowCoun,"description","INCOME")
//Entering monthly income
 SetValue_PBDataWindow(budgetWindow,"#"&rowCoun,"monthly_income",max_Amount)
//Comparing the values
 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#"&rowCoun, "monthly_income",max_Amount)
//Click on Add row option
 ClickonAddRow_Button_F2Window()
rowCoun = getRowCount_PbDataWindow("w_cust","dw_budget")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
max_Amount = Generate_RandomNumber_UserDefind(9,6)&".00"
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//Select budget type Debt in the drop down
 SetValue_PBDataWindow(budgetWindow,"#"&rowCoun,"budget_type","DEBT")
//Entering monthly income
 TypeText_PBDataWindow(budgetWindow,"#"&rowCoun,"description","DEBT")
//Entering monthly payment
 SetValue_PBDataWindow(budgetWindow,"#"&rowCoun,"monthly_payment",max_Amount)
//Comparing the values
 Get_Value_TextBox_Compare("w_cust", "dw_budget", "#"&rowCoun, "monthly_payment",max_Amount)
//Click on delete option
 clickButton_Delete()
//Click on yes button in delete budget window
 clickButton_InWindow("w_message","Yes")
//Click on delete option
 clickButton_Delete()
//Click on yes button in delete budget window
 clickButton_InWindow("w_message","Yes")
//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function:Validate_Budget_LineItem ","Failed", Err.Description,"Y")
 RemoveFunction
//***************************************************************************************************************************
//@Method: Negative_Validation_Insurance_Tab()
//@Author: Thirumal Reddy
//@Date 21 Aug 2018
//@Description: This function is to perform negative validation in Insurance Tab.
//Ex:  Negative_Validation_Insurance_Tab(company_Name,policy_Number)
//***************************************************************************************************************************
Negative_Validation_Insurance_Tab(String company_Name,String policy_Number)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//Click on New Option
 clickNewButton()
Set winName = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_chooseone").PbList("pbname:=lb_list")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
 selectValue_From_ChooseAnItem_Popup_ComponentTab("New Insurance")
//Click on save option
 clickOnSaveButon()
//Validating pop up
 Validate_ErrorPopup_Title_Message_F2Window()
//Entering Company name
Set insuranceWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_insurance")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
 SetValue_PBDataWindow(insuranceWindow,"#1","company_name",company_Name)
//Click on save option
 clickOnSaveButon()
//Validating pop up
 Validate_ErrorPopup_Title_Message_F2Window()
//Entering policy number
 SetValue_PBDataWindow(insuranceWindow,"#1","policy_nbr",policy_Number)
//Click on save option
 clickOnSaveButon()
//Validating pop up
 Validate_ErrorPopup_Title_Message_F2Window()
//Entering Start date
//Set insuranceWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_insurance")
// TypeText_PBDataWindow(insuranceWindow,"#1","start_dt","08/08/1800")
//Click on save option
// clickOnSaveButon()
//Validating pop up
// Validate_DateDailog_ErrorPopup_Title_Message_F2Window()
//Entering Start date
 SetValue_PBDataWindow(insuranceWindow,"#1","start_dt","")
 TypeText_PBDataWindow(insuranceWindow,"#1","start_dt","08/08/2020")
//Click on save option
 clickOnSaveButon()
//Validating pop up
 Validate_ErrorPopup_Title_Message_F2Window()
//Entering Date
// TypeText_PBDataWindow(insuranceWindow,"#1","end_dt","08/08/1800")
//Click on save option
// clickOnSaveButon()
//Validating pop up
// Validate_DateDailog_ErrorPopup_Title_Message_F2Window()
//Click on Delete option
 clickButton_Delete()
//Click on yes button in Delete Insurance pop up
 clickButton_InWindow("w_message","Yes")
//Click on Add row option
 ClickonAddRow_Button_F2Window()
//Click on Add row option
 ClickonAddRow_Button_F2Window()
//Click on Delete option
 clickButton_Delete()
//Click on yes button in Delete Insurance pop up
 clickButton_InWindow("w_message","Yes")
//Error Handling
if GetErrorCount()>0 
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 writeReportLog("Failed Step/Function:Validate_Budget_LineItem ","Failed", Err.Description,"Y")

//***************************************************************************************************************************
//@Method: Agent_AddressDetails_InsuranceWindow()
//@Author: Thirumal Reddy
//@Date 21 Aug 2018
//@Description: This function is to add agent address details in Insurance Tab.
//Ex:  Agent_AddressDetails_InsuranceWindow(currentState)
//***************************************************************************************************************************
Agent_AddressDetails_InsuranceWindow(String currentState)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
Agent_address_1 = ToUpper(generate_Name(40,"Address1"))
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
Agent_adress_2 =  ToUpper(generate_Name(40,"Address2"))
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
Agent_address_3 = ToUpper(generate_Name(40,"Address3"))
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
Agent_zip_code = Read_Individual_Column_Data("branchplusqa.bp_insurance","zipCode",currentState)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
Agent_City = Read_Individual_Column_Data("branchplusqa.bp_insurance","city",currentState)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
State = Read_Individual_Column_Data("branchplusqa.bp_insurance","state",currentState)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
Agent_phone = Generate_RandomNumber(10)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
Agent_fax =  Generate_RandomNumber(10)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
Agent_extension =Generate_RandomNumber(5)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
//Entering valid Agent address1
 PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_insurance").SelectCell("#1",43)
 PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_insurance")TypeKeys(Agent_address_1)
//Entering valid Agent address2
 PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_insurance").SelectCell("#1",44)
 PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_insurance")TypeKeys(Agent_adress_2)
//Entering valid Agent address3
 PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_insurance").SelectCell("#1",45)
 PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_insurance")TypeKeys(Agent_address_3)
//Entering valid Agent zip code
 PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_insurance").SelectCell("#1",48)
 PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_insurance")TypeKeys(Agent_zip_code)
//Entering valid Agent phone
 PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_insurance").SelectCell("#1",50)
 PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_insurance")TypeKeys(Agent_phone)	
//extension
 PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_insurance").SelectCell("#1",51)
 PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_insurance")TypeKeys(Agent_extension)
//Error Handling
if GetErrorCount()>0 
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	 writeReportLog("Failed Step/Function:Agent_AddressDetails_InsuranceWindow ","Failed", Err.Description,"Y")

//*****************************************************************************************
//@methodName : Validate_MotorCycleLoan_RelevantImage_CreditDecisionWindow()
//@Author     : Thirumal Reddy
//@Date       : 17 Sep 2018
//@Description: This will Validate MotorCycle Loan Relevant Image in Credit Decision Window
//Ex: Validate_MotorCycleLoan_RelevantImage_CreditDecisionWindow()
//*****************************************************************************************
Validate_MotorCycleLoan_RelevantImage_CreditDecisionWindow()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Validate MotorCycle Relevant Image
	if PbWindow("BranchPlus").InsightObject("MotorCycleImg").WaitWhileExists(10) 
		 writeReportLog("Validation of Credit Decision Relevant Image","Passed","","")
	else
		 writeReportLog("Failed Credit Decision MotorCycle Image","Failed", Err.Description ,"Y")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed Step/Function: Validate_MotorCycleLoan_RelevantImage_CreditDecisionWindow","Failed", Err.Description ,"")

//*****************************************************************************************
//@methodName : Validate_DirectLoan_RelevantImage_CreditDecisionWindow()
//@Author     : Thirumal Reddy
//@Date       : 17 Sep 2018
//@Description: This will Validate Direct Loan Relevant Image in Credit Decision Window
//Ex: Validate_DirectLoan_RelevantImage_CreditDecisionWindow()
//*****************************************************************************************
Validate_DirectLoan_RelevantImage_CreditDecisionWindow()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Validate MotorCycle Relevant Image
	if PbWindow("w_bp_frame").InsightObject("DirectLoanObject").WaitWhileExists(10) 
		 writeReportLog("Validation of Credit Decision Relevant Image","Passed","","")
	else
		 writeReportLog("Failed Credit Decision DirectLoan Image","Failed", Err.Description ,"Y")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed Step/Function: Validate_DirectLoan_RelevantImage_CreditDecisionWindow","Failed", Err.Description ,"")

//************************************************************************************************************************************
//@methodName: verificationOf_PrimaryEmployerName(WindowName,EmployerType,EmployerName,ID)
//@Author Thirumal Reddy
//@Date 29 Sep 2018
//@Description This is to enter the data in the Employer name field, verify and update the entered value to Automation DB
//Ex:  verificationOf_PrimaryEmployerName("F2","PrimaryEmployer","John",ID)
//************************************************************************************************************************************
verificationOf_PrimaryEmployerName(String WindowName,String EmployerType,String EmployerName,String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Set tblwindowname =  PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_step")
	//Checking the employer type and fetching the row number
	RowNumber = getRowNumber_BasedOn_EmployerType_EmploymentWindow("PrimaryEmployer")
	//Entering the employer name
	 enter_EmployerName(WindowName,EmployerType,EmployerName)
	 sendkeys("{TAB}")
	//Fetching actual employer name displayed
	actualEmployerName =  get_EmployerName(WindowName,EmployerType)
	//Validating actual employer name displayed  with the expected employer name
	 validateDataAndReport(actualEmployerName,EmployerName,"Validation of primary employer name field")
	//Updating the employer name to the Automation DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step",RowNumber, "emplr_name"," branchplusqa.bp_directloan_primaryemployer","primaryemployername",ID)
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed verificationOf_PrimaryEmployerName","Failed", Err.Description ,"")

//************************************************************************************************************************************
//@methodName: verificationOf_PrimaryEmployerShift(WindowName,EmployerType,EmployerShift,ID)
//@Author Thirumal Reddy
//@Date 29 Sep 2018
//@Description This is to enter the data in the Employer Shift field, verify and update the entered value to Automation DB
//Ex:  verificationOf_PrimaryEmployerShift("F2","PrimaryEmployer","Shift",ID)
//************************************************************************************************************************************
verificationOf_PrimaryEmployerShift(String WindowName,String EmployerType,String EmployerShift,String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Checking the employer type and fetching the row number
	RowNumber = getRowNumber_BasedOn_EmployerType_EmploymentWindow(EmployerType)
	//Entering Employer Shift
	 enter_EmployerShift(WindowName,EmployerType,EmployerShift)
	 sendkeys("{TAB}")
	//Fetching actual employer Shift displayed
	actualEmployerShift =  get_EmployerShift(WindowName,EmployerType)
	//Validating actual employer Shift with the expected employer Shift
	 validateDataAndReport(actualEmployerShift,EmployerShift,"Validation of primary employer shift field")
	//Writing employer Shift to the Automation DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step",RowNumber, "shift"," branchplusqa.bp_directloan_primaryemployer","primaryemployershift",ID)
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed verificationOf_PrimaryEmployerShift","Failed", Err.Description ,"")

//************************************************************************************************************************************
//@methodName: verificationOf_PrimaryEmployerSupervisor(WindowName,EmployerType,EmployerSupervisor,ID)
//@Author Thirumal Reddy
//@Date 29 Sep 2018
//@Description This is to enter the data in the Employer supervisor field, verify and update the entered value to Automation DB
//Ex:  verificationOf_PrimaryEmployerSupervisor("F2","PrimaryEmployer","Supervisor",ID)
//************************************************************************************************************************************
verificationOf_PrimaryEmployerSupervisor(String WindowName,String EmployerType,String EmployerSupervisor,String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Checking the employer type and fetching the row number
	RowNumber = getRowNumber_BasedOn_EmployerType_EmploymentWindow(EmployerType)
	//Entering Employer Supervisor
	 enter_EmployerSupervisor(WindowName,EmployerType,EmployerSupervisor)
	 sendkeys("{TAB}")
	//Fetching actual employer Supervisor displayed
	actualEmployerSupervisor = get_EmployerSupervisor(WindowName,EmployerType)
	//Validating actual employer Supervisor with the expected employer Supervisor
	 validateDataAndReport(actualEmployerSupervisor,EmployerSupervisor,"Validation of primary employer supervisor field")
	//Writing employer Supervisor to the Automation DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step",RowNumber, "sup"," branchplusqa.bp_directloan_primaryemployer","primaryemployerSupervisor",ID)
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed verificationOf_PrimaryEmployerSupervisor","Failed", Err.Description ,"")

//***********************************************************************************************************************************
//@Method: budgetTab_DeleteRows_SetData()
//@Author Thirumal Reddy
//@Date 11 Oct 2018
//@Description This function is to delete the rows in budget tab and add rows set data in budget tab in F2 window for refinancing current customer
//Ex:  budgetTab_DeleteRows_SetData()
//************************************************************************************************************************************
budgetTab_DeleteRows_SetData()
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
 income1Desc = "Gross Monthly Pay Primary Job"
 income2Desc = "Gross Monthly Pay 2nd Job"
 debt1 = "Mortgage"
 debt2 = "Rent"
 debt3 = "Autos"
 debt4 = "Proposed PFSC Payment"
 String descArr 
 descArr = Array(income1Desc,income2Desc,debt1,debt2,debt3,debt4)
//Fetching row count
rowCount = getRowCount_PbDataWindow("w_cust","dw_budget")
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
for Iterator = 1 To rowCount
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Click on delete option
	 clickButton_Delete()
	//Click on yes button in delete budget window
	 clickButton_InWindow("w_message","Yes")
for Iterator = 1 To 6
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	itr = Iterator-1
	 clickButton_AddRow()
	if Iterator<=2 
		 SetValueInPBDataWindow_DP("w_cust","dw_budget","#"&Iterator,"budget_type","INCOME")
		 SetValueInPBDataWindow_DP("w_cust","dw_budget","#"&Iterator,"description",descArr(itr))
	else 
		 SetValueInPBDataWindow_DP("w_cust","dw_budget","#"&Iterator,"budget_type","DEBT")
		 SetValueInPBDataWindow_DP("w_cust","dw_budget","#"&Iterator,"description",descArr(itr))

//************************************************************************************************************************************
//@methodName: verificationOf_PrimaryEmployerWorkYears(WindowName,EmployerType,EmployerWorkYears,ID)
//@Author Thirumal Reddy
//@Date 29 Sep 2018
//@Description This is to enter the data in the Employer work years field, verify and update the entered value to Automation DB
//Ex:  verificationOf_PrimaryEmployerWorkYears("F2","PrimaryEmployer","2",ID)
//************************************************************************************************************************************
verificationOf_PrimaryEmployerWorkYears(String WindowName,String EmployerType,String EmployerWorkYears,String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Checking the employer type and fetching the row number
	RowNumber = getRowNumber_BasedOn_EmployerType_EmploymentWindow(EmployerType)
	//Entering Employer Work Years
	 enter_EmployerWorkYears(WindowName,EmployerType,EmployerWorkYears)
	 sendkeys("{TAB}")
	//Fetching actual employer Work Years displayed
	actualEmployerWorkYears =  get_EmployerWorkYears(WindowName,EmployerType)
	//Validating actual employer Work Years with the expected employer Work Years
	 validateDataAndReport(actualEmployerWorkYears,EmployerWorkYears,"Validation of primary employer Work Years field")
	//Writing employer Work Years to the Automation DB
	 Update_ColumnValue_Into_DB("w_wiz_new_cust","dw_step",RowNumber, "work_yrs"," branchplusqa.bp_directloan_primaryemployer","primaryemployerworkyrs",ID)
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed verificationOf_PrimaryEmployerWorkYears","Failed", Err.Description ,"")

//*****************************************************************************************
//@methodName : validationOf_MonthlySalary_BasedOnPayType(WindowName,Employer,ID)
//@Author     : Thirumal Reddy
//@Date       : 28 Sep 2018 (Modified)
//@Description: This is to validate monthly salary based on paytype in F2 and F7 window
//Ex: validationOf_MonthlySalary_BasedOnPayType("F2","PrimaryEmployer",784)
//***************************************************************************************** 
validationOf_MonthlySalary_BasedOnPayType(String WindowName,String Employer,String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//Placing all the pay types to an array
	String PayTypeDropDownValue
	PayTypeDropDownValue = {"Month","Week","Year","Biweekly")
	//genarating random salary amount
	sal=Generate_RandomNumber_UserDefind(9,8)
	salary=Substring(sal,1,6)&"."& Substring(sal,7,8)
	//Entering the salary
	 enter_EmployeeSalary(WindowName,Employer,salary)
	//Iterating by reading the pay type values from array
	for Iterator = 0 To ubound(PayTypeDropDownValue) Step 1
		//Selecting value in pay source drop down randomly and updating the selected value to Automation DB
		 selectingPaySource_DropDown_RandomValue(WindowName,Employer,ID)
		//Tab out
		 sendkeys("{TAB}")
		//Selecting value in pay day drop down randomly and updating the selected value to Automation DB
		 selectingPayDay_DropDown_RandomValue(WindowName,Employer,ID)
		//Selecting value in paytype drop down based on the iteration value
		 selectingPayType_DropDown(WindowName,Employer,PayTypeDropDownValue(Iterator))
		//Getting the selected value from pay type drop down
		payType = get_SelectedPayType(WindowName,Employer)
		//Tab out
		 sendkeys("{TAB}")
		//Getting the Actual net employee salary displayed
		actualSalary = get_EmployeeActualSalary(WindowName,Employer)
		//calculating and verifying the salry displayed based on pay type
		 verifyingSalary_BasedOnPayType(payType,salary,actualSalary)
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed validationOf_MonthlySalary_BasedOnPayType","Failed", Err.Description ,"")

//********************************************************************************************************************************
//@methodName : selectingPaySource_DropDown_RandomValue(window,EmployerType,ID)
//@Author     : Thirumal Reddy
//@Date       : 28 Sep 2018 (Modified)
//@Description: This is to select the value in pay source drop down in F2 and F7 window randomly and updating to Automation DB
//Ex: selectingPaySource_DropDown_RandomValue("F2","PrimaryEmployer",ID)
//********************************************************************************************************************************
selectingPaySource_DropDown_RandomValue(String window,String EmployerType,String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	//checking the employer type
	if window = "F7" 
		Set tblWindowName =  PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_step")
		//Checking the employer type and fetching the row number
		RowNumber = getRowNumber_BasedOn_EmployerType_EmploymentWindow(EmployerType)
		//Selecting value in pay source drop down randomly and updating the selected value to Automation DB in Primary employer section
		 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","employment_paysource","branchplusqa.bp_employment",ID,"primaryemp_paysource",tblWindowName,RowNumber,"salary_source")
	else if window = "F2" 
		Set tblWindowName =  PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_emplmt")
		//Checking the employer type and fetching the row number
		RowNumber = getRowNumber_BasedOn_EmployerType_EmploymentWindow(EmployerType)
		//Selecting value in pay source drop down randomly and updating the selected value to Automation DB in Primary employer section
		 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","employment_paysource","branchplusqa.bp_employment",ID,"primaryemp_paysource",tblWindowName,RowNumber,"salary_source")
	else 
		 writeReportLog("Window specified is not avaliable","Failed",FailComments,"Y")
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed selectingPaySource_DropDown_RandomValue","Failed", Err.Description ,"")

//*****************************************************************************************
//@methodName : selectingPayDay_DropDown_RandomValue(window,Employer,ID)
//@Author     : Thirumal Reddy
//@Date       : 28 Sep 2018 (Modified)
//@Description: This is to select the value in pay day drop down in F2 and F7 window randomly and updating to Automation DB
//Ex: selectingPayDay_DropDown_RandomValue("F2","PrimaryEmployer",ID)
//*****************************************************************************************
selectingPayDay_DropDown_RandomValue(String window,String EmployerType,String ID)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if window = "F7" 
		Set tblWindowName =  PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_cust").PbDataWindow("pbname:=dw_step")
		//Checking the employer type and fetching the row number
		RowNumber = getRowNumber_BasedOn_EmployerType_EmploymentWindow(EmployerType)
		//Selecting value in pay source drop down randomly and updating the selected value to Automation DB in Primary employer section
		 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","employment_payday","branchplusqa.bp_employment",ID,"primaryemp_payday",tblWindowName,RowNumber,"payday")
	else if window = "F2" 
		Set tblWindowName =  PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_emplmt")
		//Checking the employer type and fetching the row number
		RowNumber = getRowNumber_BasedOn_EmployerType_EmploymentWindow(EmployerType)
		//Selecting value in pay source drop down randomly and updating the selected value to Automation DB in Primary employer section
		 Select_Individual_Column_Data_RandomValue("branchplusqa.bp_dropdown_values","employment_payday","branchplusqa.bp_employment",ID,"primaryemp_payday",tblWindowName,RowNumber,"payday")
	else 
		 writeReportLog("Window specified is not avaliable","Failed",FailComments,"Y")
	//Error handling 
	if GetErrorCount()>0  			
		 writeReportLog("Failed selectingPayDay_DropDown_RandomValue","Failed", Err.Description ,"")

//********************************************************************************************************
//@methodName: MLAVerification_Credit_DecisionWindow_RefinanceCurrentCustomer(ApplicantType)
//@Author Ranjitha
//@Date 12 June 2018
//@Modified by Thirumal Reddy
//@MOdified Date 1st OCT 2019
//@Description This is will verify the mla staus in Credit Decision window for primary and coapplicant
//Ex:  MLAVerification_Credit_DecisionWindow_RefinanceCurrentCustomer(ApplicantType)
//********************************************************************************************************
MLAVerification_Credit_DecisionWindow_RefinanceCurrentCustomer(String ApplicantType)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
		//Checking whether Coaaplicant window exist and applicant type is Primary applicant
		Sleep(3)
	if ApplicantType = "CoApplicant" 
		Set tblPBDataWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_acct").PbDataWindow("pbname:=dw_coapp")
	//Clicking on verify MLA status button for Co applicant
		PbWindow("BranchPlus").InsightObject("btn_VerifyMLAStatus_CreditDecision_Win10").Click()
	//Checking whether Primaryaplicant window exist and applicant type is Coapplicant
	else if ApplicantType = "PrimaryApplicant" 
		Set tblPBDataWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_acct").PbDataWindow("pbname:=dw_step")
		//Clicking on verify MLA status button for Primary Applicant
		PbWindow("BranchPlus").InsightObject("btn_VerifyMLAStatus_CreditDecision_Win10").Highlight
		//PbWindow("BranchPlus").InsightObject("btn_VerifyMLAStatus_CreditDecision").Click()
		//PbWindow("BranchPlus").InsightObject("btn_VerifyMLAStatus_CreditDecision").Click()
		//PbWindow("ResaleOfRepo_Header_Signature").InsightObject("btn_VerifyMLAStatus").Click()
		PbWindow("BranchPlus").InsightObject("btn_VerifyMLAStatus_CreditDecision_Win10").Click()
	else 
		 writeReportLog("Applicant Type is not present in the window","Failed",FailComments,"Y")
	Sleep(2)
	mlaVerificationWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_acct").PbWindow("pbname:=w_mla_verify").PbButton("pbname:=cb_transmit").GetAttr(("visible",True,40000)
	//Verifying whether MLA verification Window is displayed
	if mlaVerificationWindow 
	//Click on //GetReport// button
		PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_acct").PbWindow("pbname:=w_mla_verify").PbButton("pbname:=cb_transmit").Click()
		Sleep (10)
	 //click on Close button
		PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_acct").PbWindow("pbname:=w_mla_verify").PbWindow("pbname:=w_view_report").PbButton("pbname:=cb_close").Click()
	 Sleep (5)
	//Verify MLA Covered checkbox		
		MlaCoveredstatus = GetValue_PBDataWindow(tblPBDataWindow,"#1","mla_value")	
	//Verifying the MLA status is yes or no
		if MlaCoveredstatus = "No" 
			 writeReportLog("MLA Covered autopopulated to //No//","Passed",FailComments,"YES")				
		else
			 writeReportLog("MLA Covered autopopulated to //Yes//","Failed",FailComments,"")				
	else
		 writeReportLog("MLA Lending Verification window not displayed","Failed",FailComments,"")			
//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in MLAVerification_Credit_DecisionWindow_RefinanceCurrentCustomer","Failed", Err.Description ,"")

//********************************************************************************************************
//@methodName: enter_Primary_Employer_Details_CreditDecisionWindow_RefinanceCurrentCustomer(emplrName,position,dept,shift,supervisor,workyrs,workmos,salSource,payday,salPeriodType,grossSal)
//@Author Thirumal Reddy
//@Date 12 Oct 2018
//@Description This is will enter the Primary Employer details in Credit Decision window
//Ex:  enter_Primary_Employer_Details_CreditDecisionWindow_RefinanceCurrentCustomer("Security Finance","Tester","Testing","Day","John Edwards","2","5","Full-time Job","Every Other Monday","Biweekly","3000")
//********************************************************************************************************
enter_Primary_Employer_Details_CreditDecisionWindow_RefinanceCurrentCustomer(String emplrName,String position,String dept,String shift,String supervisor,String workyrs,String workmos,String salSource,String payday,String salPeriodType,String grossSal)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Sleep(3)
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_acct").PbDataWindow("pbname:=dw_step").WaitWhileExists(5) 
		Set crdtDecisionwindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_acct").PbDataWindow("pbname:=dw_step")
		Sleep(3)
		//Enter Employer Details
		 TypeText_PBDataWindow(crdtDecisionwindow,"#1","emplr_name",emplrName)
		 TypeText_PBDataWindow(crdtDecisionwindow,"#1","position",position)
		 TypeText_PBDataWindow(crdtDecisionwindow,"#1","dept",dept)
		 TypeText_PBDataWindow(crdtDecisionwindow,"#1","shift",shift)
		 TypeText_PBDataWindow(crdtDecisionwindow,"#1","sup",supervisor)
		 SetValue_PBDataWindow(crdtDecisionwindow,"#1","work_yrs",workyrs)
		 SetValue_PBDataWindow(crdtDecisionwindow,"#1","work_mos",workmos)
		 SetValue_PBDataWindow(crdtDecisionwindow,"#1","salary_source",salSource)
		 SetValue_PBDataWindow(crdtDecisionwindow,"#1","payday",payday)
		 SetValue_PBDataWindow(crdtDecisionwindow,"#1","salary_period_type",salPeriodType)
		 SetValue_PBDataWindow(crdtDecisionwindow,"#1","gross_salary",grossSal)
		Sleep(3)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in enter_Primary_Employer_Details_CreditDecisionWindow_RefinanceCurrentCustomer","Failed", Err.Description ,"")

//********************************************************************************************************
//@methodName: enter_DirectLoan_FinanceDetails_CreditDecisionWindow_RefinanceCurrentCustomer(purchaseAmt,terms,intRate)
//@Author Thirumal Reddy
//@Date 12 Oct 2018
//@Description This is will enter the Direct loan finance details in credit decision window
//Ex:  enter_DirectLoan_FinanceDetails_CreditDecisionWindow_RefinanceCurrentCustomer("3000","60","0.16")
//*************************************************************************************************************
enter_DirectLoan_FinanceDetails_CreditDecisionWindow_RefinanceCurrentCustomer(String purchaseAmt,String terms,String intRate)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_acct").PbDataWindow("pbname:=dw_step").WaitWhileExists(5) 
		Set tblPBWindow = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_wiz_new_acct").PbDataWindow("pbname:=dw_step")
		//Enter Finance Details
		 SetValue_PBDataWindow(tblPBWindow,"#1","purch_amt",purchaseAmt)
		 SetValue_PBDataWindow(tblPBWindow,"#1","nbr_of_months",terms)
		 SetValue_PBDataWindow(tblPBWindow,"#1","cust_rate",intRate)		
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/enter_DirectLoan_FinanceDetails_CreditDecisionWindow_RefinanceCurrentCustomer","Failed", Err.Description ,"")

//***************************************************************************************************************************
//@Method:  generate_Name(numLength,name)
//@Author: Thirumal Reddy
//@Date 28 Aug 2018
//@Description: This function is to generate the name or text randomly based on given length.
//Ex:  generate_Name(numLength,name)
//***************************************************************************************************************************
generate_Name(String numLength,String name)
	%FuncInfo[Desc="This function is to generate the name or text randomly based on given length.",Group="BranchPlusFieldLevelValidation"]
	Lenoftext = numLength-Length(name)
 	generate_Name = name&" "&random_AlphaCharacter_String(Lenoftext-1)
 	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: generate_Name","Failed", Err.Description,"Y")
 RemoveFunction
//******************************************************************************************************************
//EX:  Get_Data_DB("Select * from CUSTOMER_TBL where SSN=253981024", "LAST_NAME")
//******************************************************************************************************************
runSQLQuery(String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //Variable declaration
    String conn, rs
    Reporter.ReportEvent micDone,"Query",query
     LogSuccessMessage("Test Data Get Query",query)
    //Object declaration
    Set conn= createobject("adodb.connection")
    set rs = createobject("adodb.recordset")
    //Connection string
    conn.Open =  "Dsn=branch;Uid=support;Pwd=sql;"
   //Running the SQL Query
    rs.open query, conn
    runSQLQuery = rs.Fields(requiredFieldName)
    rs.Close
    conn.Close  
	if GetErrorCount()>0  			
		 writeReportLog("Failed to runSQLQuery","Failed", Err.Description ,"")

getApplicationNameFromDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	branchType = runSQLQuery("select branch_type from BRANCH_SETUP_TBL;","branch_type")
	if branchType = "BRANCH" 
		applicationName = "Branch"
	else if branchType = "PFS" 
		applicationName = "BranchPlus"
	getApplicationNameFromDB = applicationName
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getApplicationNameFromDB","Failed", Err.Description ,"")

getCurrentStateName_From_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	getCurrentStateName_From_DB = runSQLQuery("select BRANCH_SETUP_STATE from BRANCH_SETUP_TBL;","BRANCH_SETUP_STATE")
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getCurrentStateName_From_DB","Failed", Err.Description ,"")

//**********************************************************************************************************************************************************
//@methodName: getAppVersionNumber_From_DB()
//@Description: This will get the Application Version from the DB
//@Author: Hemanth
//Ex:  getAppVersionNumber_From_DB()
//*******************************************************************************************************************************************************
getAppVersionNumber_From_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	getAppVersionNumber_From_DB = runSQLQuery("select VERSION from bp_branch_setup_tbl;","VERSION")
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getAppVersionNumber_From_DB","Failed", Err.Description ,"")

//**********************************************************************************************************************************************************
//@methodName: getBuildNumber_From_DB()
//@Description: This will fetch the Build Number from the DB which is used for Reporting
//@Author: Hemanth
//Ex:  getBuildNumber_From_DB()
//*******************************************************************************************************************************************************
getBuildNumber_From_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	getBuildNumber_From_DB = runSQLQuery("select build_nbr from bp_branch_setup_tbl;","build_nbr")
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getBuildNumber_From_DB","Failed", Err.Description ,"")

//**********************************************************************************************************************************************************
//@methodName: getBranchID_From_DB()
//@Description: This will fetch the Branch ID from the DB which is used for Reporting
//@Author: Karthik
//Ex:  getBranchID_From_DB()
//*******************************************************************************************************************************************************
getBranchID_From_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	getBranchID_From_DB = runSQLQuery("select * from bp_branch_setup_tbl;","branch_id")
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getBuildNumber_From_DB","Failed", Err.Description ,"")

																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																				//to update value
runUpdateSQLQuery(String query)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
   //Variable declaration
    String conn, rs
    //Logger
    Reporter.ReportEvent micDone,"Query",query
    //Logger
     LogSuccessMessage("Test Data Get Query",query)
    //Object declaration
    Set conn= createobject("adodb.connection")
    set rs = createobject("adodb.recordset")
    //Connection string
    conn.Open =  "Dsn=branch;Uid=support;Pwd=sql;"    
    rs.open query, conn   
   // rs.Close
    conn.Close    
    if GetErrorCount()>0  			
		 writeReportLog("Failed to runUpdateSQLQuery","Failed", Err.Description ,"")

//***************************************************************************************************************************
//@Method: get_LoanNumber_From_DB()
//@Author: Sumithra
//@Date 9th july 2018
//@Description: This function is to get loan number from DB
//Ex:  get_LoanNumber_From_DB("ACTIVE","55")
//***************************************************************************************************************************
get_LoanNumber_From_DB(String AccountStatus,String AccountType_Code)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
     query = "Select * from support.bp_account_tbl where acct_status =//" & AccountStatus & "// and acct_type=//" & AccountType_Code & "// order by rand()"     
     //query = "Select * from support.bp_account_tbl where acct_status =//" & AccountStatus & "// and acct_type=//" & AccountType_Code & "// order by loan_nbr desc"     
    //run query to fetch loan number
	 loanNumber = runSQLQuery_WithWarning_WithoutExit(query, "loan_nbr")
	 //if Loan are not available 
	if loanNumber = "0" 
		 writeReportLog("<b> <font color=//orange//> No Loans found for Account type: " & AccountType_Code & "</font> </b>" ,"Passed",FailComments,"")
	get_LoanNumber_From_DB = loanNumber
   if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_From_DB","Failed", Err.Description,"")

//***************************************************************************************************************************
//@Method: UpdateComponentDescription_ComponentTab(refId)
//@Author: Sumithra
//@Date 4 july 2018
//@Description: This function is to update component description value
//Ex:  UpdateComponentDescription_ComponentTab(refId)
//***************************************************************************************************************************
UpdateComponentDescription_ComponentTab(String refId)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	Query1 = "Update bp_account_component_tbl set descr=//PFS GAP// where descr=//Dealer GAP// and acct_id =" & refId 
	Query2 = "Update bp_account_component_tbl set opt=//GAP// where descr=//PFS GAP// and acct_id = " & refId
    runUpdateSQLQuery(query1)
    runUpdateSQLQuery(query2)
    if GetErrorCount()>0  			
		 writeReportLog("Failed to UpdateComponentDescription_ComponentTab","Failed", Err.Description ,"")

//******************************************************************************************************************************************************
//@MethodName: get_LastChg_Date_CollateralTab_DB()
//@Author Chandra
//@Date 06 July 2018
//@Description This is get Last change Date,Time,UserID from DB in Collateral Tab
//Ex  get_LastChg_Date_CollateralTab_DB("last_chg_dt")
//******************************************************************************************************************************************************
get_LastChg_Date_CollateralTab_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_list").WaitWhileExists(10) 
		VIN_Number = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_list").GetCellData("#1","vin")
    //Get and return Lastchange Date in Collateral Tab
	LastChange_Date_DB = runSQLQuery("SELECT vin,last_chg_dt FROM support.bp_account_collateral_tbl where vin=//"& VIN_Number &"// ORDER BY last_chg_dt DESC","last_chg_dt")		
	get_LastChg_Date_CollateralTab_DB = LastChange_Date_DB
	GetDateTimeUserID = get_Add_Date_Time_UserID_DB(get_LastChg_Date_CollateralTab_DB)
	get_LastChg_Date_CollateralTab_DB = GetDateTimeUserID
    if GetErrorCount()>0  			
		 writeReportLog("Failed to get_LastChg_Date_CollateralTab_DB","Failed", Err.Description ,"")

//******************************************************************************************************************************************************
//@MethodName: get_Repo_LastChg_Redeemed_Date_AccountTab_DB()
//@Author Chandra
//@Date 06 July 2018
//@Description This is get Repo, Last change and Redeemed Date,Time,UserID from DB in Account Tab
//Ex  get_Repo_LastChg_Redeemed_Date_AccountTab_DB("repo_dt","last_chg_dt","redeemed_dt")
//******************************************************************************************************************************************************
get_Repo_LastChg_Redeemed_Date_AccountTab_DB(String RepoDate,String LastChangeDate,String RedeemedDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	if PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct").WaitWhileExists(10) 
		Account_ID = PbWindow("pbname:=w_bp_frame").PbWindow("pbname:=w_cust").PbDataWindow("pbname:=dw_acct").GetCellData("#1","acct_id")
    //Get and return Repo, Lastchange, Redeemed Date in Account Tab
    if RepoDate = "repo_dt" 
    	Repo_Date_DB = runSQLQuery("SELECT repo_dt FROM support.bp_account_tbl where acct_id=//"& Account_ID &"// ORDER BY repo_dt DESC","repo_dt")
    	get_Repo_LastChg_Redeemed_Date_AccountTab_DB = Repo_Date_DB
	else if LastChangeDate = "last_chg_dt" 
		LastChange_Date_DB = runSQLQuery("SELECT last_chg_dt FROM support.bp_account_tbl where acct_id=//"& Account_ID &"// ORDER BY last_chg_dt DESC","last_chg_dt")		
		get_Repo_LastChg_Redeemed_Date_AccountTab_DB = LastChange_Date_DB
	else if RedeemedDate = "redeemed_dt" 
		Redeemed_Date_DB = runSQLQuery("SELECT redeemed_dt FROM support.bp_account_tbl where acct_id=//"& Account_ID &"// ORDER BY redeemed_dt DESC","redeemed_dt")		
		get_Repo_LastChg_Redeemed_Date_AccountTab_DB = Redeemed_Date_DB
	GetDateTimeUserID = get_Add_Date_Time_UserID_DB(get_Repo_LastChg_Redeemed_Date_AccountTab_DB)
	get_Repo_LastChg_Redeemed_Date_AccountTab_DB = GetDateTimeUserID
    if GetErrorCount()>0  			
		 writeReportLog("Failed to get_Repo_LastChg_Redeemed_Date_AccountTab_DB","Failed", Err.Description ,"")

//******************************************************************************************************************************************************
//@MethodName: get_AcctNum_From_DB_To_Add_CPI()
//@Author Sumithra
//@Date 13 July 2018
//@Description This is to get account number from DB to add CPI
//Ex  get_AcctNum_From_DB_To_Add_CPI()
//******************************************************************************************************************************************************
get_AcctNum_From_DB_To_Add_CPI()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run 
    query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "CPI_SQLQuery.txt")
    //run query to fetch loan number
	 get_AcctNum_From_DB_To_Add_CPI = runSQLQuery(query, "loan_nbr")
    if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_AcctNum_From_DB_To_Add_CPI","Failed", Err.Description,"")

//***************************************************************************************************************************
//@Method: get_Account_Id_From_DB(AccountStatus,AccountType_Code)
//@Author: Sumithra
//@Date 13th July 2018
//@Description: This function is to get account id from DB
//Ex:  get_Account_Id_From_DB(AccountStatus,AccountType_Code)
//***************************************************************************************************************************
get_Account_Id_From_DB(String AccountStatus,String AccountType_Code)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
     query = "Select * from support.bp_account_tbl where acct_status =" & "//" & AccountStatus & "//" & " and acct_type=" & AccountType_Code         
    //run query to fetch account id
	 //get_Account_Id_From_DB = runSQLQuery(query, "acct_id")
     get_Account_Id_From_DB = runSQLQuery_WithWarning_WithoutExit(query,"acct_id")
     //Error Handling
     if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_Account_Id_From_DB","Failed", Err.Description,"")

 //*************************************************************************************************************************************************
//@Method: get_LoanNumber_Payments_From_DB()
//@Author Chandra
//@Date 10th July 2018
//@Description This function is to get loan number from DB intrest amount is > 100 in Payments table
//@Return field value which is required
//Ex:  get_LoanNumber_Payments_From_DB("Active,"55","100")
//*************************************************************************************************************************************************
get_LoanNumber_Payments_From_DB(String AccountStatus,String AccountTypeCode,String InterestAmount)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
     query = "Select * from support.bp_account_tbl where acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode & "// and int_amt>//" & InterestAmount & "// Order By RAND()"       
    //run query to fetch loan number
	 get_LoanNumber_Payments_From_DB = runSQLQuery(query,"loan_nbr")
  	 if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_Payments_From_DB","Failed", Err.Description,"")

//*****************************************************************************************************************
//@methodName: Read_Individual_Column_Data(Sql,ColumnName)
//@Author Jeevan
//@Date 08 Aug 2018
//@Description This is to read individual column data from the DB Table
//Ex: Result = Read_Individual_Column_Data("bp_loantype_dealer_primaryapplicant,"LastName","SC")
//*****************************************************************************************************************
Read_Individual_Column_Data(String TableName,String ColumnName,String StateID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
String Connection
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
String ConnectionString
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
String Recordset
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
Sql = "Select * from "&TableName&" where UsedData <> //Y// and StateID =//"&StateID&"//"
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//define the connection string, specify database driver
ConnString = "DRIVER={MySQL ODBC 8.0 ANSI Driver}; SERVER=s1-alm-1; DATABASE=branchplusqa;UID=admin;PASSWORD=admin; OPTION=3"
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//create an instance of the ADO connection and recordset objects
Set Connection = CreateObject("ADODB.Connection")
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
Set Recordset = CreateObject("ADODB.Recordset")
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//Open the connection to the database
Connection.Open ConnString
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//Open the recordset object executing the SQL statement and update records 
Recordset.Open SQL,Connection
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
Read_Individual_Column_Data = Recordset(ColumnName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//Recordset.Close
Set Recordset=nothing
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
Connection.Close
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
Set Connection=nothing
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
 Function
//*****************************************************************************************************************
//@methodName: Update_Individual_Column_Data(TableName,ColumnName,Value,ID)
//@Author Jeevan
//@Date 08 Aug 2018
//@Description This is to Update individual column data to the DB Table
//Ex:  Update_Individual_Column_Data("createautomobileloan_individual","LastName","Jennie")
//*****************************************************************************************************************
Update_Individual_Column_Data(String TableName,String ColumnName,String Value,String ID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
String Connection
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
String ConnectionString
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
String Recordset
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
SQL ="UPDATE "&TableName&" SET "&ColumnName&" = //"&Value&"// Where ID="&ID
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//define the connection string, specify database driver
ConnString = "DRIVER={MySQL ODBC 8.0 ANSI Driver}; SERVER=s1-alm-1; DATABASE=branchplusqa;UID=admin;PASSWORD=admin; OPTION=3"
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//create an instance of the ADO connection and recordset objects
Set Connection = CreateObject("ADODB.Connection")
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
Set Recordset = CreateObject("ADODB.Recordset")
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//Open the connection to the database
Connection.Open ConnString
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//Open the recordset object executing the SQL statement and update records 
Recordset.Open SQL,Connection
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//Recordset.Close
Set Recordset=nothing
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
Connection.Close
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
Set Connection=nothing
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
 Function
//***********************************************GENERIC Function************************************************************************
//@methodName: getvalue_From_AppDB()
//@Author: Karthik
//@Date 27 Nov 2018
//@Description This will get teh Column Value for the Specified Column Name from Table Name Specified
//Ex:  getvalue_From_AppDB("bp_Branch_SetUP_TBL","last_daily_closing")
//***********************************************************************************************************************
getvalue_From_AppDB(String tableName,String columnName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query to fetch the Bank Id based on Employee ID
	query = "select * from " & tableName
	getvalue_From_AppDB = runSQLQuery(query, columnName)
	//Error handing
	 if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/getvalue_From_DBTable","Failed", Err.Description ,"")

runSQLQuery_WithWarning(String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //Variable declaration
    String conn, rs
     LogSuccessMessage("Test Data Get Query",queryToExecute)
    //Object declaration
    Set conn= createobject("adodb.connection")
    set rs = createobject("adodb.recordset")
    //Connection string
    conn.Open =  "Dsn=branch;Uid=support;Pwd=sql;"
    //Executing the Query
    rs.open query, conn     
	//Validating for Query No Results
	if rs.EOF 
		 writeReportLog("Looks Like Query >> " & query &  " did not found any record","Warning", Err.Description,"")		 
		//Exit Test and Update Summary Report
		 exitTestAndUpdateSummaryReport()
	else
		//Fetching the required Field Value
   		 runSQLQuery_WithWarning = rs.Fields(requiredFieldName)	
	rs.Close
    conn.Close 
    //if Query Does not Return Any Result
    if GetErrorCount()>0 
		 writeReportLog("DB column Name " & requiredFieldName & " which you are looking is not available in the query Result; Query : " & query ,"Warning", Err.Description,"")		

//**********************************************************************************************
//@methodName: get_LoanNumber_FromAppDB(AccountStatus, AccountTypeCode, UI_Del_Status)
//@Description: This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status.
//@Author: Chandra
//@Date 26 Feb 2019
//@Returning the Loan Number
//Ex:  get_LoanNumber_FromAppDB("ACTIVE", "55", "Current")
//*********************************************************************************************** 
get_LoanNumber_FromAppDB(String AccountStatus,String AccountTypeCode,String UI_Del_Status)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get ID Based on Delinquency Status and Contractual status
	 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	//query to run
	if UI_Del_Status = ">90" 
//		query = "Select * from support.bp_account_tbl where acct_status = //" & AccountStatus & "//" & " and acct_type= //" & AccountTypeCode & "// and del_status = //"& delinqStatus  &"// and contractual_status > //"& contractual_status  &"// order by rand()"
		query = "Select * from support.bp_account_tbl where acct_id Not in (select acct_id from bp_account_collateral_tbl where repo_assigned_yn = //N//) and acct_status = //" & AccountStatus & "//" & " and acct_type= //" & AccountTypeCode & "// and del_status = //"& delinqStatus  &"// and contractual_status > //"& contractual_status  &"// order by rand()"
	else
//		query = "Select * from support.bp_account_tbl where acct_status = //" & AccountStatus & "//" & " and acct_type= //" & AccountTypeCode & "// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// order by rand()"
		query = "Select * from support.bp_account_tbl where acct_id Not in (select acct_id from bp_account_collateral_tbl where repo_assigned_yn = //N//) and acct_status = //" & AccountStatus & "//" & " and acct_type= //" & AccountTypeCode & "// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// order by rand()"
	//Fetching the loan number from DB
	loanNumber = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	//if Loan are not available 
	if loanNumber = "0" 
		 writeReportLog("<b> <font color=//orange//> No Loans found for Account Type Code: " & AccountTypeCode & " and Delinquency Status: " & UI_Del_Status & "</font> </b>" ,"Passed",FailComments,"")
	get_LoanNumber_FromAppDB = loanNumber
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_FromAppDB","Failed", Err.Description,"")

//**********************************************************************************************
//@methodName: get_ID_BasedOn_DelinqStatus_And_ContractualStatus(ByVal UI_Del_Status, ByRef delinquencyStatus, ByRef contractual_status)
//@Description: This is to get the ID based on Delinquency Status (Current, Potential, 30,60,90,>90).
//@Author: Chandra
//@Date 26 Feb 2019
//@Returning the delinquencyStatus and contractual_status
//Ex:  get_ID_BasedOn_DelinqStatus_And_ContractualStatus("Current", "", "0")
//*********************************************************************************************** 
get_ID_BasedOn_DelinqStatus_And_ContractualStatus(String ByVal UI_Del_Status,String ByRef delinquencyStatus,String ByRef contractual_status)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	if ToUpper(UI_Del_Status) = ToUpper("Current") 
		delinquencyStatus = "" 
		contractual_status =  "0"
	else if ToUpper(UI_Del_Status) = ToUpper("Potential") 
		delinquencyStatus = "P" 
		contractual_status =  "0"
	else if UI_Del_Status = "30" 
		delinquencyStatus = "" 
		contractual_status =  "1"
	else if UI_Del_Status = "60" 
		delinquencyStatus = "" 
		contractual_status =  "2"
	else if UI_Del_Status = "90" 
		delinquencyStatus = "" 
		contractual_status =  "3"
	else if UI_Del_Status = ">90" 
		delinquencyStatus = "" 
		contractual_status =  "4"
	else
		 writeReportLog("Wrong arrguments passed: "& UI_Del_Status &" in get_ID_BasedOn_DelinqStatus_And_ContractualStatus","Failed", Err.Description,"")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_ID_BasedOn_DelinqStatus_And_ContractualStatus","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_BranchPlus_CityName_FromDB()
//@Author Chandra
//@Date 25 Feb 2019
//@Description This is get the Branch Plus City Name from App DB (bp_location_tbl)
//@Returing the Branch Plus City Name
//Ex  get_BranchPlus_CityName_FromDB()
//*********************************************************************************************
get_BranchPlus_CityName_FromDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get value from DB Query
	branchCityName = ToUpper(getvalue_From_AppDB("bp_location_tbl where loc_type = //BRANCH// and loc_class=//MAILING//", "city"))
	get_BranchPlus_CityName_FromDB = branchCityName
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_BranchPlus_CityName_FromDB","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_Null_Columns_In_ReceiptNotificationTbl_FromDB(columName,requiredFiledName)
//@Author Chandra
//@Date 25 Feb 2019
//@Description This is get the Field Values where Column value is //NULL// based on File name(file_path, file_name) in Receipt_notification_tbl from DB
//@Returing the cell value of specified column
//Ex  get_Null_Columns_In_ReceiptNotificationTbl_FromDB("file_path","file_path")
//*********************************************************************************************
get_Null_Columns_In_ReceiptNotificationTbl_FromDB(String columName,String requiredFiledName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Null value from receipt notification table from DB 
	requiredValue = runSQLQuery_WithWarning_WithoutExit("select * from receipt_notification_tbl where "& columName &" IS NULL order by entry_dt desc",requiredFiledName)
	if requiredValue = "0" 
		 writeReportLog("//"& requiredFiledName &"// value is not availble in //receipt_notification_tbl// DB, Please Run Nightly Job","Failed", "","")
	get_Null_Columns_In_ReceiptNotificationTbl_FromDB = requiredValue
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_Null_Columns_In_ReceiptNotificationTbl_FromDB","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_Data_In_ReceiptNotificationTbl_FromDB(accountID,requiredFiledName)
//@Author Chandra
//@Date 25 Feb 2019
//@Description This will get the for the specified reportID from Receipt_notification_tbl
//@returns retuns the cell value based for the field name specified
//Ex  get_Data_In_ReceiptNotificationTbl_FromDB("76578746710","file_path")
//*********************************************************************************************
get_Data_In_ReceiptNotificationTbl_FromDB(String reportID,String requiredFiledName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Null value from receipt notification table from DB 
	required_Value = runSQLQuery_WithWarning_WithoutExit("select * from receipt_notification_tbl where rpt_id = //"& reportID &"// order by entry_dt desc",requiredFiledName)
	if required_Value = "0" 
		 writeReportLog("//"& requiredFiledName &"// value is not availble in //receipt_notification_tbl// DB, Please Run Nightly Job","Failed", "","")
	get_Data_In_ReceiptNotificationTbl_FromDB = required_Value
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_Data_In_ReceiptNotificationTbl_FromDB","Failed", Err.Description,"")

//****************************** GENERIC FUNCTION ***********************************************
//@methodName: runSQLQuery_WithWarning_WithoutExit(query, requiredFieldName)
//@Author Chandra
//@Date 03 Jan 2018
//@Description This is to run sql query and get value with warning status, where values are not available with exit the test
//Ex:// runSQLQuery_WithWarning_WithoutExit(query, requiredFieldName)
//*********************************************************************************************
runSQLQuery_WithWarning_WithoutExit(String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //Variable declaration
    String conn, rs
     LogSuccessMessage("Test Data Get Query",query)
    //Object declaration
    Set conn= createobject("adodb.connection")
    set rs = createobject("adodb.recordset")
    //Connection string
    conn.Open =  "Dsn=branch;Uid=support;Pwd=sql;"
    //Executing the Query
    rs.open query, conn     
	//Validating for Query No Results
	if rs.EOF 
		runSQLQuery_WithWarning_WithoutExit = "0"
	else
		//Fetching the required Field Value
   		 runSQLQuery_WithWarning_WithoutExit = rs.Fields(requiredFieldName)	
	rs.Close
    conn.Close 
    //if Query Does not Return Any Result
    if GetErrorCount()>0 
		 writeReportLog("DB column Name " & requiredFieldName & " which you are looking is not available in the query Result; Query : " & query ,"Warning", Err.Description,"")		

//**********************************************************************************************
//@methodName: get_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB(query_Path, AccountStatus, AccountTypeCode, DelinquencyStatus)
//@Description: This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status.
//@Author: Chandra
//@Date 21 Mar 2019
//@Returning the Loan Number
//Ex:  get_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB(query_Path,"ACTIVE", "55", "Current")
//***********************************************************************************************
get_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB(String query_Path,String AccountStatus,String AccountTypeCode,String DelinquencyStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Last Year Date from Current system Date
	ContractFromDate = addDays_for_SepecifiedDate("yyyy", -1,Date)
	found = False
	for itr = 1 To 100
		//get the Loan Number from DB
		loanNumber = get_LoanNumber_FromAppDB(AccountStatus, AccountTypeCode, DelinquencyStatus)
		//get the Loan Number from DB
		//loanNumber = get_LoanNumber_FromDB_BasedOn_ContractDate(AccountStatus,AccountTypeCode,DelinquencyStatus,ContractFromDate,Date)
		//Get Entire File Content from text file
		query = get_Entire_File_Content(query_Path)
		//Replaceing the LoanNumber
		query = Replace(query,"@LoanNumber",loanNumber)
		//Get the Due To Day Amount from DB
		DueTodayAmt = runSQLQuery(query, "Amount Due Today")
		//Comparing the Due Today Amount is 
		if Ccur(DueTodayAmt) <= Ccur("0") 
			found = True
			get_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB = loanNumber
			Exit for
	if found = False 
		 writeReportLog("Current Accounts which you are looking is not available in the DB and for Account Type: "&AccountTypeCode&" and Delinquency Status: "&DelinquencyStatus&"","Failed", Err.Description,"")		
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_LoanNumber_Where_TotalDueTodayAmount_IsZero_FromDB","Failed", Err.Description ,"")

//*********************************************************************************************
//@methodName: get_BranchMailingAddress_FromDB()
//@Author Chandra
//@Date 25 Feb 2019
//@Description This is get the Branch Address Name from App DB
//@Returing the Branch Address
//Ex  get_BranchMailingAddress_FromDB()
//*********************************************************************************************
get_BranchMailingAddress_FromDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Branch Name form DB 
	get_BranchMailingAddress_FromDB = getvalue_From_AppDB("bp_location_tbl where loc_type = //BRANCH// and loc_class=//MAILING//","addr1")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_BranchMailingAddress_FromDB","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_BranchName_FromDB()()
//@Author Chandra
//@Date 25 Feb 2019
//@Description This is get the Branch Name from App DB
//@Returing the Branch Name
//Ex  get_BranchName_FromDB()()
//*********************************************************************************************
get_BranchName_FromDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Branch Name form DB 
 	get_BranchName_FromDB = getvalue_From_AppDB("bp_branch_setup_tbl","branch_name")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_BranchName_FromDB","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: verify_ReportDocumentTbl_FromDB_AfterRunNightlyJob(reportID,requiredFiledName)
//@Author Chandra
//@Date 07 Mar 2019
//@Description This is get the Field Values based on reportID, filepath is Not NULL and Document is NULLin bp_report_document_tbl from DB
//@Returing the return the cell value of fieldName specified
//Ex  verify_ReportDocumentTbl_FromDB_AfterRunNightlyJob("159000023584"","filepath")
//*********************************************************************************************
verify_ReportDocumentTbl_FromDB_AfterRunNightlyJob(String reportID,String requiredFiledName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Null value from receipt notification table from DB 
	//requiredFieldValue = runSQLQuery_WithWarning_WithoutExit("select * from bp_document_tbl where document_id = (select document_id from bp_document_record_affil_tbl where record_id = //"& reportID & "//) and filepath is not NULL and Document is NULL",requiredFiledName)
	requiredFieldValue = runSQLQuery_WithWarning_WithoutExit("select * from bp_document_tbl where document_id = (select document_id from bp_document_record_affil_tbl where record_id = //"& reportID & "//) and filepath is not NULL",requiredFiledName)
	if requiredFieldValue = "0" 
		 writeReportLog("//"& requiredFiledName &"// value is not availble in //bp_document_tbl// DB, Please Run Nightly Job","Failed", "","")
	verify_ReportDocumentTbl_FromDB_AfterRunNightlyJob = requiredFieldValue
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in verify_ReportDocumentTbl_FromDB_AfterRunNightlyJob","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_BranchID_FromDB()
//@Author Chandra
//@Date 25 Feb 2019
//@Description This is get the Branch ID from App DB
//@Returing the Branch ID
//Ex  get_BranchID_FromDB()
//*********************************************************************************************
get_BranchID_FromDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get value from DB Query
	get_BranchID_FromDB = getvalue_From_AppDB("bp_branch_setup_tbl", "branch_id")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_BranchID_FromDB","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob(reportID,requiredFiledName)
//@Author Chandra
//@Date 07 Mar 2019
//@Description This is get the Field Values based on reportID, filepath is NULL and Document is Not NULLin bp_report_document_tbl from DB
//@Returing the return the cell value of fieldName specified
//Ex  verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob("159000023584"","filepath")
//*********************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																							//verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob(reportID,requiredFiledName)
//	
//	//Get Null value from receipt notification table from DB 
//	requiredValue = runSQLQuery("select * from bp_document_tbl where rpt_id = //"& reportID &"// and filename is NULL and Document is Not NULL order by entry_dt desc",requiredFiledName)
//	verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob = requiredValue
//	//Error handling
//	if GetErrorCount()>0 
//		 writeReportLog("Failed in verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob","Failed", Err.Description,"")
//	
////RemoveFunction
verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob(String reportID,String requiredFiledName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Fetching App Version
	appVersionWithoutDot = Trim(Replace(Environment.Value("appVersion"),".",""))
	//########
	//Release Specified Handling - Handled for the Changes Made in 9.6 Release
	//########
	if appVersionWithoutDot >= 960 
		//Get Null value from receipt notification table from DB 
		//requiredValue = runSQLQuery("select * from bp_document_tbl where document_id = (select document_id from bp_document_record_affil_tbl where record_id = //"& reportID & "//) and filepath is NULL and Document is Not NULL",requiredFiledName)
	   // requiredValue = runSQLQuery("select * from bp_document_tbl where document_id = (select document_id from bp_document_record_affil_tbl where document_id = //"& reportID & "//) and filepath is NULL",requiredFiledName)
		requiredValue = runSQLQuery("select * from bp_document_tbl where document_id = (select document_id from bp_document_record_affil_tbl where record_id = //"& reportID & "//) and filepath is NULL" ,requiredFiledName)	   
	else
		//Get Null value from receipt notification table from DB 
		requiredValue = runSQLQuery("select * from bp_report_document_tbl where rpt_id = //"& reportID &"// and filename is NULL and Document is Not NULL order by entry_dt desc",requiredFiledName)
	verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob = requiredValue
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in verify_ReportDocumentTbl_FromDB_BeforeRunNightlyJob","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_valueFrom_FeatureTable()
//@Author Karthik
//@Date 8 May 2019
//@Description This is get the value column specified from the Feature  table for the feature name specified
//Ex  get_valueFrom_FeatureTable("CENTRALIZED MAILING","feature_yn")
//*********************************************************************************************
get_valueFrom_FeatureTable(String featureName,String columnName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Branch Name form DB 
 	get_valueFrom_FeatureTable =  runSQLQuery("select * from bp_feature_tbl where feature = //" & featureName & "//", columnName)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_valueFrom_FeatureTable","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName:  enableOrDisableFeatureInDB()
//@Author Karthik
//@Date 25 Feb 2019
//@Description This will enable/disable the Feature in App DB i.e.,  updating the feature_yn to "Y"  or "N" in bp_Feature_tbl
//             based on Input/Parameter
//Ex  enableOrDisableFeatureInDB("CENTRALIZED MAILING","Enable")
//Ex  enableOrDisableFeatureInDB("CENTRALIZED MAILING","Disable")
//*********************************************************************************************
enableOrDisableFeatureInDB(String featureName,String statusToSet)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	if ToUpper(statusToSet) = "ENABLE" or ToUpper(statusToSet) = "Y" 
		featureYn = "Y"
	else if ToUpper(statusToSet) = "DISABLE" or ToUpper(statusToSet) = "N" 
		featureYn = "N"
	else
		 writeReportLog("Please Pass Proper Input to enableOrDisableFeatureInDB","Failed","Either Y Or N","")
	//Run update Query
	featureQuery =  "update bp_feature_tbl set feature_yn = //"& featureYn & "// where feature = //" & featureName & "//"
	 LogSuccessMessage("Query>>" &  featureQuery,"")
 	runUpdateSQLQuery(featureQuery)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in enableFeatureInDB","Failed", Err.Description,"")

//*******************************************************************************************************
//@Author Karthik
//@MethodName getLoanNumberBasedOnCriteriaSpecified
//@Description this method will return the Loan Number based on the Affiliation type, account type, account Status and account Class
//NOTE: for this function if you pass Empty("") or null or "ANY" it will ignore that condition 
//(for Example, if we pass accountType as null or "ANY" then this function will get loans for all types)
//Examples
//msgbox getLoanNumberBasedOnCriteriaSpecified("PRIMARY","AUTO","ACTIVE","NEW_LOAN")
//msgbox getLoanNumberBasedOnCriteriaSpecified("JOINT","AUTO","ACTIVE","NEW_LOAN")
//for Reference
//actStatus Codes/Values = //ACTIVE//,//APPROVED//,//CANCELLD//,//CHRG_OFF//,//CHRGBANK//,//CHRGSKIP//,//PAID_OUT//,//REDEEMED//,//REPO//,//REPOSOLD//,//REVERSED//,//SKIP//,//SOLDIER//
//acctClass Codes/Value = //NEW_LOAN//,//FMR_BRWR//,//BR_INT//
//***********************************************************************************************************
getLoanNumberBasedOnCriteriaSpecified(String affiType,String accountType,String acctStatus,String acctClass)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Constructing the base Query
	if ToUpper(affiType) = "PRIMARY" 
		baseQuery =  "select * from bp_account_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
	else if ToUpper(affiType) = "COSIGN" or ToUpper(affiType) = "JOINT" 	
	   baseQuery = "select * from bp_account_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" & ToUpper(affiType) & "//)"
	//Constructing based on Account Type
	if ToUpper(accountType) = "MOTOR" or  accountType = "56" 
		baseQuery = baseQuery & " and int_type = //INT_BRNG// and acct_type = //56//"
	else if ToUpper(accountType) = "AUTO" or  accountType = "55" 
		baseQuery = baseQuery & " and int_type = //INT_BRNG// and acct_type = //55//"
	else if ToUpper(accountType) = "DIRECT" or  accountType = "31" 
		baseQuery = baseQuery & " and int_type = //INT_BRNG// and acct_type = //31//"
	else//if ToUpper(accountType) = "ANY" or Trim(accountType) = "" or IsNull(accountType) 
	 	baseQuery = baseQuery & " and int_type = //INT_BRNG//"
	//Constructing based on Account Status
	if not(ToUpper(acctStatus) = "ANY" or Trim(acctStatus) = "" or IsNull(acctStatus)) 
		baseQuery = baseQuery & " and acct_status = //" & acctStatus & "//"
	//Constructing based on Account Status
	if not(ToUpper(acctClass) = "ANY" or Trim(acctClass) = "" or IsNull(acctClass)) 
		baseQuery = baseQuery & " and acct_class = //" & acctClass & "//"
	//Appending the Order by
	baseQuery = baseQuery & " order by rand()"
	//Logging the Query Generated in UFT Report
	  LogSuccessMessage("Query Generated in getLoanNumberBasedOnCriteriaSelected",baseQuery)
	//Running the SQL Query and returning the value
	getLoanNumberBasedOnCriteriaSpecified = runSQLQuery_WithWarning_WithoutExit(baseQuery,"loan_nbr")
Remove
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//*************************************************************************************
//@MethodName getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl
//@Description this function will get the value from the ReportDocumentTable for the latest document which got printed
//@Author Karthik
//@Param colName --> Table ColumnName 
//@Return value Of the specified column name
//Ex: msgbox getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl("entry_dt")
//****************************************************************************************
getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl(String colName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//	getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl = runSQLQuery("select * from bp_report_document_tbl order by entry_dt desc",colName)
//	########
	//Release Specified Handling - Handled for the Changes Made in 9.6 Release
	//########
	if Trim(Replace(Environment.Value("appVersion"),".","")) >= 960 
		getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl = runSQLQuery("select * from bp_document_tbl order by entry_dt desc",colName)
	else
		getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl = runSQLQuery("select * from bp_report_document_tbl order by entry_dt desc",colName)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in getDataFrom_LastPrintedRowData_InDB_From_ReportDocumentTbl","Failed", Err.Description ,"")

//***********************************************************************************************************************
//@methodName: get_CustomerDetails_Based_On_AccountID_And_AffilType_FromDB(accountID,affilType,requiredFileds)
//@Author: Chandra
//@Date 23 May 2018
//@Description This will get the Customer Details based on Account ID and Affiliation Type from DB
//@Returing the Customer Details
//Ex:  get_CustomerDetails_Based_On_AccountID_And_AffilType_FromDB("137700013584"","Primary","first_name:last_name:middle_name:credit_score)
//***********************************************************************************************************************
get_CustomerDetails_Based_On_AccountID_And_AffilType_FromDB(String accountID,String affilType,String requiredFileds)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query
	query = "select * from bp_account_customer_affil_tbl inner join bp_customer_tbl where bp_customer_tbl.cust_id = bp_account_customer_affil_tbl.cust_id and acct_id = //" & accountID & "// and affil_type = //" & affilType & "//"
   //Executing the Query Generated
	customerDetails = runSQLQuery_FetchMultipleValues(query, requiredFileds)
	get_CustomerDetails_Based_On_AccountID_And_AffilType_FromDB = customerDetails
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_CustomerDetails_Based_On_AccountID_AffilType_FromDB","Failed", Err.Description ,"")

//************************************************************************************************************************************************************
//@methodName : get_CustomerDetails_BasedOn_LoanNum_And_AffilType_FromDB(loanNum, affilType, requiredFileds)
//@Author : Chandra
//@Date 24 May 2018
//@Description This function will Get the customer details based on Loan number and Affiliation type from App DB
//@Returing the Customer Details
//Ex:  get_CustomerDetails_BasedOn_LoanNum_And_AffilType_FromDB("137700137124", "Primary", "first_name:last_name:middle_name:credit_score")
//************************************************************************************************************************************************************ 
get_CustomerDetails_BasedOn_LoanNum_And_AffilType_FromDB(String loanNum,String affilType,String requiredFileds)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query
	query = "select * from bp_customer_tbl where cust_id in (select cust_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_tbl where loan_nbr = //" & loanNum & "//) and affil_type = //" & affilType & "//)"
   //Executing the Query Generated
	customerDetails = runSQLQuery_FetchMultipleValues(query, requiredFileds)
	get_CustomerDetails_BasedOn_LoanNum_And_AffilType_FromDB = customerDetails
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/get_CustomerDetails_BasedOn_LoanNum_And_AffilType_FromDB","Failed", Err.Description ,"")

//***************************************************************************************************************************
//@Method: get_SumOfCharges_BasedOn_WaivedOff_FromDB(lonNum,chgType,waiveOffYN)
//@Author: Sumithra
//@Date 10th may 2019
//@Description: This function is to get Sum of charges based on waive off Y or N
//Ex:  get_SumOfCharges_BasedOn_WaivedOff_FromDB("9652","COLL_EXP","N")
//***************************************************************************************************************************
get_SumOfCharges_BasedOn_WaivedOff_FromDB(String lonNum,String chgType,String waiveOffYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
     query = "select sum(charge_amt) from bp_account_charge_tbl where acct_id in (select acct_id from bp_account_tbl where loan_nbr =//"& lonNum &"//) and charge_type in (//"&ChgType&"//) and waived_yn =//"&waiveOffYN&"//"     
    //run query to fetch loan number
	 result = runSQLQuery_WithWarning_WithoutExit(query, "sum(bp_account_charge_tbl.charge_amt)")
	 if result <> "" 
	 	get_SumOfCharges_BasedOn_WaivedOff_FromDB = result
 	else
	 	get_SumOfCharges_BasedOn_WaivedOff_FromDB = "0"
   if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_SumOfCharges_BasedOn_WaivedOff_FromDB","Failed", Err.Description,"")

//******************************************************************************************************************************************
//@Method getChargeDetails_BasedOnLoanCreationDate_FromAppDB
//@Author Karthik
//@Description this method will retuns the values(Can Return Multiple Values) from the Charge Calculation Table based on the Parameters Passed
//@Param
//	stateID --> pass the State ID
//	loanCreationDate --> Specify the Loan Creation Data so that it can identify the Correct Data required
//	accountType --> Pass the accoutn type 31, 55,56
// 	 opt --> Pass the Value "LATE_CHG" or "NSF_CHRG" based on the value required for you
//	requiredFieldValues --> specify the DB Column names. if multiple values are required then specify using the seperator ":"
 //msgbox 	("SC","5/7/2019","31","LATE_CHG","min_amt:max_amt") --> Direct Loan
 //msgbox getChargeDetails_BasedOnLoanCreationDate_FromAppDB("SC","5/7/2019","55","NSF_CHRG","min_amt:max_amt") --> Auto Loan
 //***************************************************************************************************************************************
 getChargeDetails_BasedOnLoanCreationDate_FromAppDB(stateID,loanCreationDate,accountType,opt,requiredFieldValues)
 	cnvtDate = formatDateWithSpecifiedDelimeter(loanCreationDate,"YYYYMMDD","-")
 	sqlGenerated = "select * from bp_charge_calc_tbl where state = //" & stateID & "// and start_dt <= //" & cnvtDate & "// and end_Dt >= //" & cnvtDate & "// and acct_type = //"& accountType & "// and opt = //"& opt & "//"
 	//Run SQL Query and return values
 	getChargeDetails_BasedOnLoanCreationDate_FromAppDB = runSQLQuery_FetchMultipleValues(sqlGenerated,requiredFieldValues)
 	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in method getChargeDetails_BasedOnLoanCreationDate_FromAppDB","Failed", Err.Description,"")
 RemoveFunction
//*******************************************************************************************************
//@Author Chandra
//@MethodName get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB
//@Date 07 Aug 2019
//@Description this method will return the Loan Number based on the Affiliation type, account type, account Status and account Class where Cease is not marked 
//NOTE: for this function if you pass Empty("") or null or "ANY" it will ignore that condition 
//(for Example, if we pass accountType as null or "ANY" then this function will get loans for all types)
//Examples
//msgbox get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB("PRIMARY","AUTO","ACTIVE","NEW_LOAN")
//msgbox get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB("JOINT","AUTO","ACTIVE","NEW_LOAN")
//for Reference
//actStatus Codes/Values = //ACTIVE//,//APPROVED//,//CANCELLD//,//CHRG_OFF//,//CHRGBANK//,//CHRGSKIP//,//PAID_OUT//,//REDEEMED//,//REPO//,//REPOSOLD//,//REVERSED//,//SKIP//,//SOLDIER//
//acctClass Codes/Value = //NEW_LOAN//,//FMR_BRWR//,//BR_INT//
//***********************************************************************************************************
get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB(String affiType,String accountType,String acctStatus,String acctClass)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Constructing the base Query
	if ToUpper(affiType) = "PRIMARY" 
		baseQuery =  "select * from bp_account_tbl where acct_id Not in (select acct_id from bp_do_not_contact_tbl) and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
	else if ToUpper(affiType) = "COSIGN" or ToUpper(affiType) = "JOINT" 	
	   baseQuery = "select * from bp_account_tbl where acct_id Not in (select acct_id from bp_do_not_contact_tbl) and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" & ToUpper(affiType) & "//)"
	//Constructing based on Account Type
	if ToUpper(accountType) = "MOTOR" or  accountType = "56" 
		baseQuery = baseQuery & " and int_type = //INT_BRNG// and acct_type = //56//"
	else if ToUpper(accountType) = "AUTO" or  accountType = "55" 
		baseQuery = baseQuery & " and int_type = //INT_BRNG// and acct_type = //55//"
	else if ToUpper(accountType) = "DIRECT" or  accountType = "31" 
		baseQuery = baseQuery & " and int_type = //INT_BRNG// and acct_type = //31//"
	else//if ToUpper(accountType) = "ANY" or Trim(accountType) = "" or IsNull(accountType) 
	 	baseQuery = baseQuery & " and int_type = //INT_BRNG//"
	//Constructing based on Account Status
	if not(ToUpper(acctStatus) = "ANY" or Trim(acctStatus) = "" or IsNull(acctStatus)) 
		baseQuery = baseQuery & " and acct_status = //" & acctStatus & "//"
	//Constructing based on Account Status
	if not(ToUpper(acctClass) = "ANY" or Trim(acctClass) = "" or IsNull(acctClass)) 
		baseQuery = baseQuery & " and acct_class = //" & acctClass & "//"
	//Appending the Order by
	baseQuery = baseQuery & " order by rand()"
	//Logging the Query Generated in UFT Report
	  LogSuccessMessage("Query Generated in get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB",baseQuery)
	//Running the SQL Query and returning the value
	get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB = runSQLQuery_FetchMultipleValues(baseQuery,"loan_nbr")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_NonCease_LoanNumberBasedOnCriteriaSpecified_FromDB","Failed", Err.Description ,"")

//**************************************************************************
//@methodName getTotalAmtPaidToOthersOnYourBehalf_FromAppDB
//@Author Karthik
//@Description this method will be get the Amount Paid to Others on Your Behalf from bank Detail Tbl 
//@Return the Sum of Amount Paid to Others
//EX: msgbox getTotalAmtPaidToOthersOnYourBehalf_FromAppDB("087400009192")
//*************************************************************************
getTotalAmtPaidToOthersOnYourBehalf_FromAppDB(String lnNbr)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	sqlQuery = "select isnull(sum(amt), 0) from bp_bank_detail_tbl where trans_id in (select trans_id from bp_account_tbl where loan_nbr = //" & lnNbr & "//) and check_type <> //CUSTOMER//"
	//UFT Logger
	 LogSuccessMessage("Query", sqlQuery)
	getTotalAmtPaidToOthersOnYourBehalf_FromAppDB = runSQLQuery(sqlQuery,"sum(bp_bank_detail_tbl.amt)")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in getTotalAmtPaidToOthersOnYourBehalf_FromAppDB","Failed", Err.Description ,"")

//*************************************************************************************************************************************************
//@Method: get_TCIFundedLoanNumber_FromDB(accountStatus)
//@Author: GG
//@Date: 7 Mar 2019
//@Description This function is to TCI Funded Loan Number from App DB based on Account Status
//Ex: get_TCIFundedLoanNumber_FromDB("ACTIVE")
//*************************************************************************************************************************************************
get_TCIFundedLoanNumber_FromDB(String accountStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//To fetch the TCI Funded Loans from DB
	query = "select * from bp_account_tbl where funded_deal_source <> //// and acct_status = //" & accountStatus & "// order by rand();"
	//To run the query to get required value 
	get_TCIFundedLoanNumber_FromDB = runSQLQuery(query,"loan_nbr")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_TCIFundedLoanNumber_FromDB","Failed", Err.Description,"")

//10 APR 2019
toSetDate_EmployeeDeliquencyTracker(String todayDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//to set the date
	toSetDate_EmployeeDeliquencyTracker = SetValueInPBDataWindow_DP("w_search","dw_search","#1","start_date",todayDate)
	//To click on OK Button
	 clickButtonInPBWindow("Employee Delinquency Tracker","Ok")
	Sleep (10)
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: toSetDate_EmployeeDeliquencyTracker","Failed", Err.Description ,"")

//**********************************************************************************************
//@methodName: get_LoanNumber_BasedOnOrderBy_FromAppDB(AccountStatus, AccountTypeCode, UI_Del_Status, orderBy)
//@Description: This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status order by rand()/ procd_dt desc.
//@Author: Chandra
//modified by: Sumithra -  the function with/without account type
//@Date 06 Sep 2019
//@Returning the Loan Number
//Ex:  get_LoanNumber_BasedOnOrderBy_FromAppDB("ACTIVE", "55", "Current", "rand")
  	// get_LoanNumber_BasedOnOrderBy_FromAppDB("ACTIVE", "", "Current", "rand")
//*********************************************************************************************** 
get_LoanNumber_BasedOnOrderBy_FromAppDB(String AccountStatus,String AccountTypeCode,String UI_Del_Status,String orderBy)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get ID Based on Delinquency Status and Contractual status
	 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	//SHP -  Append account type if it is not empty
	if AccountTypeCode <> "" 
 		 AccountType_Code = "and acct_type=//" & AccountTypeCode &"//"
	//query to run
	if UI_Del_Status = ">90" 
		query = "Select * from support.bp_account_tbl where acct_status = //" & AccountStatus & "//" & AccountType_Code &" and del_status = //"& delinqStatus  &"// and contractual_status > //"& contractual_status  &"// order by"
	else
		query = "Select * from support.bp_account_tbl where acct_status = //" & AccountStatus & "//" & AccountType_Code & " and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// order by"
	//Constructing the Expected Query (Adding Order by Rand()/ procd_dt)
	if ToUpper(orderBy) = "RAND" 
		query = query & " rand()"
	else
		query = query & " procd_dt desc"
	//Fetching the loan number from DB
	loanNumber = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	//if Loan are not available 
	if loanNumber = "0" 
		 writeReportLog("<b> <font color=//orange//> No Loans found for Account Type Code: " & AccountTypeCode & " and Delinquency Status: " & UI_Del_Status & "</font> </b>" ,"Passed",FailComments,"")
	get_LoanNumber_BasedOnOrderBy_FromAppDB = loanNumber
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_BasedOnOrderBy_FromAppDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: getRepossessionDetailsYTD_FromDB(yearValue,monthValue,byref reposedYTB,byref redeemedYTB,byref soldYTB,byref lossYTB)
//@Description: This function is to get Repossession details from DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  getRepossessionDetailsYTD_FromDB("2019","6",reposedYTB,redeemedYTB,soldYTB,lossYTB)
//*****************************************************************************************************************************************
getRepossessionDetailsYTD_FromDB(String yearValue,String monthValue,String byref reposedYTB,String byref redeemedYTB,String byref soldYTB,String byref lossYTB)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
		reposedYTB = 0
    	redeemedYTB = 0
      	soldYTB = 0
        lossYTB = 0
	for itr = 1 To monthValue 
		if itr = monthValue 
			today_Date = Right("0" & Month(Now), 2) & "/" & Right("0" & Day(Now), 2) & "/" & yearValue
			reposed  = get_DataInStaticsReport_FromDB(today_Date,"repos_nbr_additions")
				reposedYTB = reposedYTB + reposed
			redeemed  = get_DataInStaticsReport_FromDB(today_Date,"repos_nbr_redeemed")
			 	redeemedYTB = redeemedYTB + redeemed
			Sold  = get_DataInStaticsReport_FromDB(today_Date,"repos_nbr_sold")
			 	soldYTB = soldYTB + Sold
			loss  = get_DataInStaticsReport_FromDB(today_Date,"bnkrpt_nbr_cnsdr_for_loss")
			  lossYTB = lossYTB + loss
		else
			endDateOfMonth = formatDateWithSpecifiedDelimeter(DateSerial(yearValue, 1 + itr, 0),"MMDDYYYY","-")		
			reposed  = get_DataInStaticsReport_FromDB(endDateOfMonth,"repos_nbr_additions")
				reposedYTB = reposedYTB + reposed
			redeemed  = get_DataInStaticsReport_FromDB(endDateOfMonth,"repos_nbr_redeemed")
			 	redeemedYTB = redeemedYTB + redeemed
			Sold  = get_DataInStaticsReport_FromDB(endDateOfMonth,"repos_nbr_sold")
			 	soldYTB = soldYTB + Sold
			loss  = get_DataInStaticsReport_FromDB(endDateOfMonth,"bnkrpt_nbr_cnsdr_for_loss")
			  lossYTB = lossYTB + loss
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/getRepossessionDetailsYTD_FromDB","Failed", Err.Description ,"")

//*****************************************************************************************************************************************
//@methodName: get_DataInStaticsReport_FromDB(recordDate,columnName)
//@Description: This function is to get Stats details from DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  get_DataInStaticsReport_FromDB("2019/06/23","nbr_accts")
//*****************************************************************************************************************************************
get_DataInStaticsReport_FromDB(String recordDate,String columnName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
	 recordDate = formatDateWithSpecifiedDelimeter(recordDate,"YYYYMMDD","-")
     query = "select sum("&columnName&") from bp_branch_ops_summ_tbl where record_dt = //"&recordDate&"// and acct_type in (//55//,//56//,//31//) and date_type=//DAILY// and data_type  = //ACTUAL//"     
    //run query to fetch loan number
	  Reporter.ReportEvent micDone,"Query to get Data In Statics Report From DB ",query
	 result = runSQLQuery_WithWarning_WithoutExit(query,"sum(bp_branch_ops_summ_tbl."&columnName&")")
	 if result <> "" 
	 	get_DataInStaticsReport_FromDB = result
 	else
	 	get_DataInStaticsReport_FromDB = "0"
   if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_DataInStaticsReport_FromDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName:get_LoanNumberCount_InWeeklyLonProgressReport_FromDB(startProcessDate,EndProcessDate,AutoActType,MotorActType,DirectActType)
//@Description: This function is to get weekly loan progress details from DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  get_LoanNumberCount_InWeeklyLonProgressReport_FromDB("2019-07-01","2019-07-31","55","","")
//*****************************************************************************************************************************************
get_LoanNumberCount_InWeeklyLonProgressReport_FromDB(String startProcessDate,String EndProcessDate,String AutoActType,String MotorActType,String DirectActType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
	 startProcessDate = formatDateWithSpecifiedDelimeter(startProcessDate,"YYYYMMDD","-")
	 EndProcessDate = formatDateWithSpecifiedDelimeter(EndProcessDate,"YYYYMMDD","-")
    // query = "select sum("&columnName&") from bp_account_summary_tbl where record_dt >= //"&recordDate1&"// and record_dt <= //"&recordDate2&"// and acct_type in (//"&AutoActType&"//,//"&MotorActType&"//,//"&DirectActType&"//)"     
     query = "Select count(loan_nbr) from bp_account_tbl where procd_dt >= //"&startProcessDate&"// and procd_dt < //"&EndProcessDate&"// and acct_type in (//"&AutoActType&"//,//"&MotorActType&"//,//"&DirectActType&"//) and loan_nbr not in (select loan_nbr from bp_account_tbl where acct_status = //REVERSED// and procd_dt >= //"&startProcessDate&"// and procd_dt < //"&EndProcessDate&"// and datePart(yy, paid_out_dt) = datePart(yy, procd_dt) and datePart(mm, paid_out_dt) = datePart(mm, procd_dt))"
    Reporter.ReportEvent micDone,"Query to get LoanNumberCount In WeeklyLon ProgressReport From DB ",query
    //run query to fetch loan number
	 result = runSQLQuery_WithWarning_WithoutExit(query,"count(bp_account_tbl.loan_nbr)")
	 if result <> "" 
	 	get_LoanNumberCount_InWeeklyLonProgressReport_FromDB = result
 	else
	 	get_LoanNumberCount_InWeeklyLonProgressReport_FromDB = "0"
   if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumberCount_InWeeklyLonProgressReport_FromDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: get_TotalAcctsCount_From_StatsReport_FromDB(todaysDate,AutoActType,MotorActType,DirectActType)
//@Description: This function is to get total accounts count from stats report in DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  get_TotalAcctsCount_From_StatsReport_FromDB("2019-07-01","55","56","31")
//*****************************************************************************************************************************************
get_TotalAcctsCount_From_StatsReport_FromDB(String todaysDate,String AutoActType,String MotorActType,String DirectActType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	todaysDate =formatDateWithSpecifiedDelimeter(todaysDate,"yyyymmdd","-") 
    //query to run
    query = "select sum(nbr_accts) from bp_account_summary_tbl where record_dt >= //"&todaysDate&"// and record_dt <= //"&todaysDate&"// and acct_type in (//"&AutoActType&"//,//"&MotorActType&"//,//"&DirectActType&"//)"     
     result = runSQLQuery_WithWarning_WithoutExit(query, "sum(bp_account_summary_tbl.nbr_accts)")
	 if result <> "" 
	 	get_TotalAcctsCount_From_StatsReport_FromDB = result
 	else
	 	get_TotalAcctsCount_From_StatsReport_FromDB = "0"
    if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_TotalAcctsCount_From_StatsReport_FromDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: getLoanNumbersCount_InCollection_Report_FromDB(DelStatus,StartLetter,EndLetter,PromiseStartDate,PromiseEndDate)
//@Description: This function is to get Loan numbers count from collection report from DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  getLoanNumbersCount_InCollection_Report_FromDB("30","a","z","","")
//*****************************************************************************************************************************************
getLoanNumbersCount_InCollection_Report_FromDB(String DelStatus,String StartLetter,String EndLetter,String PromiseStartDate,String PromiseEndDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
    if ToUpper(DelStatus) = ToUpper("Current") 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (0) and a.acct_id in (select a.acct_id from bp_account_tbl a where a.del_status = //C// and a.contractual_status = 0) and a.acct_id not in (select a.acct_id from bp_account_tbl a where a.del_status = //P// and a.contractual_status = 0)"
	else if ToUpper(DelStatus) = ToUpper("Potential")  
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (0) and a.acct_id not in (select a.acct_id from bp_account_tbl a where a.del_status = //C// and a.contractual_status = 0) and a.acct_id in (select a.acct_id from bp_account_tbl a where a.del_status = //P// and a.contractual_status = 0)"
	else if DelStatus = "30" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (1)"
	else if DelStatus = "60" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (2)"
	else if DelStatus = "90"  
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (3)"
	else if DelStatus = ">90" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=999"
	else if DelStatus = "30+" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=1 and isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else if DelStatus = "60+"  
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=2 and isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else if DelStatus = "90+" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=3 and isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else
		 writeReportLog("Wrong arrguments passed: "& UI_Del_Status &" in getLoanNumbersCount_InCollection_Report_FromDB","Failed", Err.Description,"")
	if PromiseStartDate <> "" and PromiseEndDate <> "" 
	PromiseStartDate = formatDateWithSpecifiedDelimeter(PromiseStartDate,"YYYYMMDD","-")
	PromiseEndDate = formatDateWithSpecifiedDelimeter(PromiseEndDate,"YYYYMMDD","-")
	PromiseQuery = "and a.acct_id in (select c.acct_id from bp_account_activity_tbl c where c.promise_dt >=//"&PromiseStartDate&" 12:00 AM// and c.promise_dt <= //"&PromiseEndDate&" 11:59 PM// and c.promise_dt is not null and c.activity_type = //PROMISE// and c.activity_status = //ACTIVE//)"
	if PromiseStartDate <> "" and PromiseEndDate <> "" 
		query = "select count(loan_nbr) from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) and (acf.acct_id = a.acct_id) and (TrimLeft(c.last_name) between //"&StartLetter&"// and //"&EndLetter&"//||replicate (//Z//,30)) AND acF.affil_type = //PRIMARY// AND  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// and c.acct_code1  not in (//BANKRUPT// )) AND a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_yn   = //Y//) "&contractual_status & PromiseQuery
	else
		query = "select count(loan_nbr) from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) and (acf.acct_id = a.acct_id) and (TrimLeft(c.last_name) between //"&StartLetter&"// and //"&EndLetter&"//||replicate (//Z//,30)) AND acF.affil_type = //PRIMARY// AND  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// and c.acct_code1  not in (//BANKRUPT// )) AND a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_yn   = //Y//) "&contractual_status
     Reporter.ReportEvent micDone,"Query to get Data In Collection Report From DB ",query
    //run query to fetch loan number
	 result = runSQLQuery_WithWarning_WithoutExit(query,"count(a.loan_nbr)")
	if result <> "" 
	 	getLoanNumbersCount_InCollection_Report_FromDB = result
	else
	 	getLoanNumbersCount_InCollection_Report_FromDB = "0"
    if GetErrorCount()>0 
		 writeReportLog("Failed : getLoanNumbersCount_InCollection_Report_FromDB ","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: getLoanNumber_InCollection_Report_FromDB(DelStatus,StartLetter,EndLetter)
//@Description: This function is to get Loan number from collection report from DB
//@Author: Sumithra
//@Date 25 June 2019
//Ex:  getLoanNumber_InCollection_Report_FromDB("30","a","z")
//*****************************************************************************************************************************************
getLoanNumber_InCollection_Report_FromDB(String DelStatus,String StartLetter,String EndLetter)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
    if ToUpper(DelStatus) = ToUpper("Current") 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (0) and a.acct_id in (select a.acct_id from bp_account_tbl a where a.del_status = //C// and a.contractual_status = 0) and a.acct_id not in (select a.acct_id from bp_account_tbl a where a.del_status = //P// and a.contractual_status = 0)"
	else if ToUpper(DelStatus) = ToUpper("Potential")  
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (0) and a.acct_id not in (select a.acct_id from bp_account_tbl a where a.del_status = //C// and a.contractual_status = 0) and a.acct_id in (select a.acct_id from bp_account_tbl a where a.del_status = //P// and a.contractual_status = 0)"
	else if DelStatus = "30" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (1)"
	else if DelStatus = "60" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (2)"
	else if DelStatus = "90"  
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  in (3)"
	else if DelStatus = ">90" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=999"
	else if DelStatus = "30+" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=1 and isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else if DelStatus = "60+"  
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=2 and isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else if DelStatus = "90+" 
		contractual_status =  "and isnull(a.CONTRACTUAL_STATUS,0)  >=3 and isnull(a.CONTRACTUAL_STATUS,0)  <=999"
	else
		 writeReportLog("Wrong arrguments passed: "& UI_Del_Status &" in getLoanNumbersCount_InCollection_Report_FromDB","Failed", Err.Description,"")
	PromiseQuery = "and a.acct_id in (select c.acct_id from bp_account_activity_tbl c where c.activity_type = //PROMISE// and c.activity_status = //COMPLETE//) order by rand()"
	query = "select loan_nbr from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) and (acf.acct_id = a.acct_id) and (TrimLeft(c.last_name) between //"&StartLetter&"// and //"&EndLetter&"//||replicate (//Z//,30)) AND acF.affil_type = //PRIMARY// AND  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// and c.acct_code1  not in (//BANKRUPT// )) AND a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_yn   = //Y//) "&contractual_status & PromiseQuery
    //run query to fetch loan number
	 result = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	if result <> "" 
	 	getLoanNumber_InCollection_Report_FromDB = result
	else
	 	getLoanNumber_InCollection_Report_FromDB = "0"
    if GetErrorCount()>0 
		 writeReportLog("Failed : getLoanNumber_InCollection_Report_FromDB ","Failed", Err.Description,"")

//***************************************************************************************************************************
//@Method: get_LoanNumber_FromDB_BasedOn_ContractDate(AccountStatus,AccountTypeCode,UI_Del_Status,ContractFromDate,ContractToDate)
//@Author: Sumithra
//@Date 21 march 2018
//@Description: This function will get the loan from DB based on contract From date and To date
//Ex:  get_LoanNumber_FromDB_BasedOn_ContractDate("Active","55","30","2018-12-01",null)
//***************************************************************************************************************************
get_LoanNumber_FromDB_BasedOn_ContractDate(String AccountStatus,String AccountTypeCode,String UI_Del_Status,String ContractFromDate,String ContractToDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    if ToUpper(AccountStatus) = "ACTIVE" 
     	 //Get ID Based on Delinquency Status and Contractual status
		  get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	     if contractFromDate <> ""  
			contractFromDate = formatDateWithSpecifiedDelimeter(contractFromDate,"YYYYMMDD","-")
			contract_FromDate = "and funding_dt >= //"&ContractFromDate&"// "
	 	 if ContractToDate <> "" 
	 		 ContractToDate = formatDateWithSpecifiedDelimeter(ContractToDate,"YYYYMMDD","-")
	 		 Contract_ToDate = "and funding_dt < //"&ContractToDate&"//"
	 			//query to run 
		  //Query
 		//query = "acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode &"// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// " & contract_FromDate & contract_ToDate & "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by loan_nbr desc"
 		query = "acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode &"// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// " & contract_FromDate & contract_ToDate & "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by rand()"
 	else
 		 query = "acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode &"//" & contract_FromDate & contract_ToDate & "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by loan_nbr desc"	
    //Query
 	//query = "acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode &"// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// " & contract_FromDate & contract_ToDate & "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by loan_nbr desc"
 	if Environment.Value("currentState") = "OH" 
		sqlQuery = "Select * from support.bp_account_tbl where acct_id not in (select distinct(acct_id) from bp_account_charge_tbl where charge_type = //COLL_EXP//) and " & query
	else
		sqlQuery = "Select * from support.bp_account_tbl where " & query
	//UFT Logger
	 LogSuccessMessage("get_LoanNumber_FromDB_BasedOn_ContractDate", sqlQuery)
    //run query to fetch loan number
	// get_LoanNumber_FromDB_BasedOn_ContractDate = runSQLQuery(sqlQuery, "loan_nbr")
	get_LoanNumber_FromDB_BasedOn_ContractDate = runSQLQuery_WithWarning_WithoutExit(sqlQuery, "loan_nbr")
    if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_FromDB_BasedOn_ContractDate","Failed", Err.Description,"")

//**********************************************************************************************************************
//@MethodName queryAndExportResultToExcel
//@Author Karthik Shekar
//@Description this method will run the Query and export the query result to excel sheet along with Column header
//@Creation Date: 10th Sep 2019
//@Param
	//QueryToExecute --> Pass the query or SP to be executed
	//excelFilePathToSave --> Specify the complete file path along with file extension
//@Return Nothing
//EX:  queryAndExportResultToExcel("exec sp_rpt_stats_acct_summary 2290,//2019-09-10//,//%//,//DAILY//", "c:\Sp1.xlsx")
//EX:   queryAndExportResultToExcel("select * from bp_branch_setup_tbl", "c:\BS1.xlsx")
//***********************************************************************************************************************
queryAndExportResultToExcel(String queryToExecute,String excelFilePathToSave)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Creating the Excel Object for Saving the Query Data
	 Set objExcel = CreateObject("Excel.Application")
	 //objExcel.Visible = True
	 Set XLDoc = objExcel.Workbooks.Add
	 Set XLSheet = XLDoc.Worksheets(1)
 	//Creating the DB Connection
     Set cnn1 = CreateObject("ADODB.Connection")
     Set mrs = CreateObject("ADODB.Recordset") 
     cnn1.ConnectionTimeout = 30
     cnn1.Open "Dsn=branch;Uid=support;Pwd=sql;" 
		//Query to Execute
     //SQry = "exec sp_rpt_stats_acct_summary 2290,//2019-09-10//,//%//,//DAILY//"
	//Execute the Query
      mrs.Open queryToExecute, cnn1
	 //Fetching the Header details and updating in Excel Sheet
     for iCols = 0 To mrs.Fields.Count - 1
        XLSheet.Cells(1, iCols + 1).Value = mrs.Fields(iCols).Name
	//Exporting the Query Output to Excel Sheet
     XLSheet.Range("A2").CopyFromRecordset mrs
	//Saving the Excel WorkBook
	 objExcel.ActiveWorkbook.SaveAs excelFilePathToSave
	//Quitting and Closing Objects
	 objExcel.Quit
	 Set objExcel = Nothing
     mrs.Close
     cnn1.Close
Remove
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//**********************************************************************************************
//@methodName: get_LoanNumber_BasedOnDealerType_FromAppDB(AccountStatus, AccountTypeCode, UI_Del_Status, orderBy)
//@Description: This is to get the Loan Number from App DB based on Account status, Account Type Code, Dealer Type(Holdback TYpe) and Delinquency Status.
//@Author: Chandra
//@Date 26 Feb 2019
//@Returning the Loan Number
//Ex:  get_LoanNumber_BasedOnDealerType_FromAppDB("ACTIVE", "55", "DISCOUNT", "Current", "RAND")
//     get_LoanNumber_BasedOnDealerType_FromAppDB("ACTIVE", "55", "RESERVE", "Current", "RAND")
//*********************************************************************************************** 
get_LoanNumber_BasedOnDealerType_FromAppDB(String AccountStatus,String AccountTypeCode,String DealerType,String UI_Del_Status,String orderBy)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get ID Based on Delinquency Status and Contractual status
	 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	//query to run
	if UI_Del_Status = ">90" 
		query = "Select * from support.bp_account_tbl where dealer_id in (select dealer_id from bp_dealer_tbl where holdback_type = //" & DealerType & "//) and acct_status = //" & AccountStatus & "//" & " and acct_type= //" & AccountTypeCode & "// and del_status = //"& delinqStatus  &"// and contractual_status > //"& contractual_status  &"// order by rand()"
	else
		query = "Select * from support.bp_account_tbl where dealer_id in (select dealer_id from bp_dealer_tbl where holdback_type = //" & DealerType & "//) and acct_status = //" & AccountStatus & "//" & " and acct_type= //" & AccountTypeCode & "// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// order by rand()"
	//Constructing the Expected Query (Adding Order by Rand()/ procd_dt)
	if ToUpper(orderBy) = "RAND" 
		query = query & " rand()"
	else
		query = query & " procd_dt desc"
	//Fetching the loan number from DB
	loanNumber = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	//if Loan are not available 
	if loanNumber = "0" 
		 writeReportLog("<b> <font color=//orange//> No Loans found for Account Type Code: " & AccountTypeCode & " and Delinquency Status: " & UI_Del_Status & " and holdback_type = //" & DealerType & "//</font> </b>" ,"Passed",FailComments,"")
	get_LoanNumber_BasedOnDealerType_FromAppDB = loanNumber
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_BasedOnDealerType_FromAppDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: getData_In_AccountTable_FromDB(loanNumber,fieldName)
//@Description: This function is to get data from Account table in DB
//@Author: Sumithra
//@Date 01 Aug 2019
//Ex:  getData_In_AccountTable_FromDB("08740008226","acct_status")
//***************************************************************************************************************************************** 
getData_In_AccountTable_FromDB(String loanNumber,String fieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	fieldID = getFieldID_AccountTab(fieldName)
	//query	
	query = "select * from bp_account_tbl where loan_nbr =//"&loanNumber&"//"
   //Executing the Query Generated
	getData_In_AccountTable_FromDB = runSQLQuery_WithWarning_WithoutExit(query,fieldID)
	 //error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/getData_In_AccountTable_FromDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: verify_LoanNumExists_InCollection_Report_FromDB(loanNumber)
//@Description: This function is to verify if the loan exists in the Collection report from DB
//@Author: Sumithra
//@Date 01 Aug 2019
//Ex:  verify_LoanNumExists_InCollection_Report_FromDB("087400009897")
//*****************************************************************************************************************************************
verify_LoanNumExists_InCollection_Report_FromDB(String loanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//	query = "select loan_nbr from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) and (acf.acct_id = a.acct_id) AND acF.affil_type = //PRIMARY// AND  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// and c.acct_code1  not in (//BANKRUPT// )) AND a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_yn   = //Y//) and loan_nbr = //"&loanNumber&"//"
	if Trim(Replace(Environment.Value("appVersion"),".","")) <= "970" 
		query = "select loan_nbr from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) and (acf.acct_id = a.acct_id) AND acF.affil_type = //PRIMARY// AND  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// and c.acct_code1  not in (//BANKRUPT// )) AND a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_yn   = //Y//) and loan_nbr = //"&loanNumber&"//"
	else
		query = "select loan_nbr from bp_customer_tbl c,bp_account_customer_affil_tbl acf,bp_account_tbl a where (c.cust_id= acf.cust_id) and (acf.acct_id = a.acct_id) AND acF.affil_type = //PRIMARY// AND  a.acct_status IN (select c.acct_code1 from bp_account_code_tbl c where c.code_type = //STATCLAS//and c.acct_code2 = //ACTIVE// and c.acct_code1  not in (//BANKRUPT// )) AND a.acct_id NOT in (select acct_id from   bp_account_ins_claim_pend_tbl c where  c.claim_type = //TOTLLOSS//and  c.claim_status   = //PENDING//) and loan_nbr = //"&loanNumber&"//"
   //Executing the Query Generated
	verify_LoanNumExists_InCollection_Report_FromDB = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	if verify_LoanNumExists_InCollection_Report_FromDB = 0 
		 writeReportLog("Loan number with active claim (Total Loss) is not present in Collection report","Passed","","")
	else
		 writeReportLog("Loan number with active claim (Total Loss) is present in Collection report","Failed", Err.Description,"")
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/verify_LoanNumExists_InCollection_Report_FromDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: get_PendingId_for_InsClaim_FromDB(ClaimType,claimID,loanNumber)
//@Description: This function is to get the Pending Id for Insurance from DB
//@Author: Sumithra
//@Date 01 Aug 2019
//Ex:  get_PendingId_for_InsClaim_FromDB("TOTLLOSS","1","087400009897")
//*****************************************************************************************************************************************
get_PendingId_for_InsClaim_FromDB(String ClaimType,String claimID,String loanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select * from bp_account_ins_claim_pend_tbl icpt, bp_account_tbl act where icpt.acct_id = act.acct_id and claim_type = //"&ClaimType&"// and ins_claim_id = //"&claimID&"// and loan_nbr =//"&loanNumber&"//"
   //Executing the Query Generated
	get_PendingId_for_InsClaim_FromDB = runSQLQuery_WithWarning_WithoutExit(query,"ins_pend_id")
	 //error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_PendingId_for_InsClaim_FromDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: get_EntryDate_And_LastChangedDate_for_InsClaim_FromDB(ClaimType,claimID,loanNumber,requiredFieldNames)
//@Description: This function is to get the entry date and last changed date for insurance claims from DB
//@Author: Sumithra
//@Date 01 Aug 2019
//Ex:  get_EntryDate_And_LastChangedDate_for_InsClaim_FromDB("TOTLLOSS","1","087400009897",requiredFieldNames)
//*****************************************************************************************************************************************
get_EntryDate_And_LastChangedDate_for_InsClaim_FromDB(String ClaimType,String claimID,String loanNumber,String requiredFieldNames)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select icpt.entry_userid as InsTable_EntryID, icpt.entry_dt as InsTable_EntryDate,icpt.last_chg_dt as InsTable_lastEntryDate ,icpt.last_chg_userid as InsTable_lastEntryID from bp_account_ins_claim_pend_tbl icpt, bp_account_tbl act where icpt.acct_id = act.acct_id and claim_type = //"&ClaimType&"// and ins_claim_id = //"&claimID&"// and loan_nbr =//"&loanNumber&"//"
   //Executing the Query Generated
   get_EntryDate_And_LastChangedDate_for_InsClaim_FromDB = runSQLQuery_FetchMultipleValues_WithWarning(query,requiredFieldNames)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_EntryDate_And_LastChangedDate_for_InsClaim_FromDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: get_LoanNumber_FromAppDB_WhereActiveClaimNotExists(AccountStatus,AccountTypeCode,accountClass,affiType,UI_Del_Status)
//@Description: This function is to get loan number from DB where where active claim is not exist
//@Author: Sumithra
//@Date 01 Aug 2019
//Ex:  get_LoanNumber_FromAppDB_WhereActiveClaimNotExists("Active","55","NEW_LOAN","PRIMARY","Current")
//*****************************************************************************************************************************************
get_LoanNumber_FromAppDB_WhereActiveClaimNotExists(String AccountStatus,String AccountTypeCode,String accountClass,String affiType,String UI_Del_Status)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get ID Based on Delinquency Status and Contractual status
	 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	if accountClass <> "" 
		Account_Class = "and acct_class = //" & accountClass & "//"
	if AccountTypeCode <> "" 
		Account_Type = "and acct_type= //" & AccountTypeCode & "//"
	if affiType <> "" 
		if ToUpper(affiType) = "PRIMARY" 
			affi_Type =  "and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
		else if ToUpper(affiType) = "COSIGN" or ToUpper(affiType) = "JOINT" 	
		    affi_Type = "and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" & ToUpper(affiType) & "//)"
	//query to run
	if UI_Del_Status = ">90" 
		query = "Select * from support.bp_account_tbl where acct_status = //" & AccountStatus & "//" & Account_Class & Account_Type &" and del_status = //"& delinqStatus  &"// and contractual_status > //"& contractual_status  &"// and not acct_id = any(select acct_id from bp_account_ins_claim_pend_tbl as a where a.claim_type = //TOTLLOSS// and a.claim_yn = //Y//) "& affi_Type &" order by rand()"
	else
		query = "Select * from support.bp_account_tbl where acct_status = //" & AccountStatus & "//" & Account_Class & Account_Type &" and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// and not acct_id = any(select acct_id from bp_account_ins_claim_pend_tbl as a where a.claim_type = //TOTLLOSS// and a.claim_yn = //Y//) "& affi_Type &" order by rand()"
	//Fetching the loan number from DB
	loanNumber = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	//if Loan are not available 
	if loanNumber = "0" 
		 writeReportLog("<b> <font color=//orange//> No Loans found for Delinquency Status: " & UI_Del_Status & "</font> </b>" ,"Passed",FailComments,"")
	get_LoanNumber_FromAppDB_WhereActiveClaimNotExists = loanNumber
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_FromAppDB_WhereActiveClaimNotExists","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: get_OrganizationId_FromAppDB(StateName)
//@Description: This function is to get Organization id from DB
//@Author: Sumithra
//@Date 10 September 2019
//Ex:  get_OrganizationId_FromAppDB("SC")
//*****************************************************************************************************************************************
get_OrganizationId_FromAppDB(String StateName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
    query = "select * from Branch_setup_tbl where BRANCH_SETUP_STATE = //"&StateName&"//"
    get_OrganizationId_FromAppDB = runSQLQuery(query, "organization_id")
    if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_OrganizationId_FromAppDB","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: get_DataFromSP_In_StatisticsReport(SPName,orgId,recordDate,AccountType,DataType,requredColumnNames)
//@Description: This function is to get data from SP in Statistics report
//@Author: Sumithra
//@Date 22 Aug 2019
//Ex:  get_DataFromSP_In_StatisticsReport("StatsDelinquencySummary",//792//,today_Date,"%","DAILY",StatsColumnNames)
//*****************************************************************************************************************************************
get_DataFromSP_In_StatisticsReport(String SPName,String orgId,String recordDate,String AccountType,String DataType,String requredColumnNames)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	recordDate = formatDateWithSpecifiedDelimeter(recordDate,"yyyymmdd","-")
	if SPName = "StatsDelinquencySummary" 
		query = "exec sp_rpt_stats_del_summary //"&orgId&"//,//"&recordDate&"//,//"&AccountType&"//,//"&DataType&"//"
	else if SPName= "StatsBranchOperation" 
		query = "exec sp_rpt_stats_branch_ops //"&orgId&"//,//"&recordDate&"//,//"&AccountType&"//,//"&DataType&"//"
	else if SPName = "StatsAccountSummary" 
		query = "exec sp_rpt_stats_acct_summary //"&orgId&"//,//"&recordDate&"//,//"&AccountType&"//,//"&DataType&"//"
	else	
		 writeReportLog("SP name your searching is not exist","Failed", Err.Description,"")
   //Executing the Query Generated
	//get_DataFromSP_In_StatisticsReport = runSQLQuery_FetchMultipleValues_WithWarning(query,requredColumnNames)
	get_DataFromSP_In_StatisticsReport = runSQLQuery_FetchMultipleValues_WithoutExit(query,requredColumnNames)
	 //error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_DataFromSP_In_StatisticsReport","Failed", Err.Description,"")

//*****************************************************************************************************************************************
//@methodName: getLoanNumber_FromDB_where_CPINotExist(AccountTypeCode)
//@Description: This functionis to get the loan number where CPI is not exist
//@Author: Sumithra
//@Date 15 June 2019
//Ex:  getLoanNumber_FromDB_where_CPINotExist("55")
//***************************************************************************************************************************************** 
getLoanNumber_FromDB_where_CPINotExist(String AccountTypeCode)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run 
	 query = "select loan_nbr from bp_account_component_tbl,bp_account_pmt_schedule_tbl,bp_account_tbl where bp_account_component_tbl.acct_id =bp_account_pmt_schedule_tbl.acct_id and bp_account_pmt_schedule_tbl.acct_id = bp_account_tbl.acct_id and bp_account_pmt_schedule_tbl.pmt_type = //CONTRACT//  and bp_account_component_tbl.descr <> //Collateral Protection// and bp_account_component_tbl.descr <> //deleted// and bp_account_pmt_schedule_tbl.pmt_dt > GETDATE() and bp_account_tbl.acct_status = //ACTIVE// and acct_type=//" & AccountTypeCode &"// order by rand()"
    //run query to fetch loan number
	 getLoanNumber_FromDB_where_CPINotExist = runSQLQuery(query, "loan_nbr")
    if GetErrorCount()>0 
		 writeReportLog("Failed in step/getLoanNumber_FromDB_where_CPINotExist","Failed", Err.Description,"")

//*****************************************************************************************
//@methodName: get_Bankrupt_Account_LockedYN_Status_FromDB(accountType,loanNumber)
//@Author Chandra
//@Date 11 Oct 2019
//@Description This will get the Bankrupt Account Loacked YN Status from DB based on account type and Loan number
//Ex: get_Bankrupt_Account_LockedYN_Status_FromDB("ACCOUNT","087400009553")
//*****************************************************************************************
get_Bankrupt_Account_LockedYN_Status_FromDB(String accountType,String loanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Run SQL query 
	get_Bankrupt_Account_LockedYN_Status_FromDB = runSQLQuery("select uf_is_locked(//"& accountType &"//,//"& loanNumber &"//) as Locked_yn","Locked_yn")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_Bankrupt_Account_LockedYN_Status_FromDB","Failed", Err.Description,"Y")

//*****************************************************************************************
//@methodName: get_DealerDetails_AfterLoanModification_FromDB(accountID,requiredFileds,queryPath)
//@Author Chandra
//@Date 16 Oct 2019
//@Description This will get the Dealer Details from DB after loan modification
//Ex: get_DealerDetails_AfterLoanModification_FromDB(accountID,requiredFileds,queryPath)
//*****************************************************************************************
get_DealerDetails_AfterLoanModification_FromDB(String accountID,String requiredFileds,String queryPath)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get SQL Query form text file
	baseQuery = get_Entire_File_Content(queryPath)
	//Replacing the Account ID
	baseQuery = Replace(baseQuery,"@acct_id",accountID)
	//Logging the Query Generated in UFT Report
	  LogSuccessMessage("Query Generated in get_DealerDetails_AfterLoanModification_FromDB",baseQuery)
	//Running the SQL Query and returning the value
	requiredValues = runSQLQuery_FetchMultipleValues(baseQuery,requiredFileds)
	get_DealerDetails_AfterLoanModification_FromDB = requiredValues
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerDetails_AfterLoanModification_FromDB","Failed", Err.Description ,"")

//***********************************************************************************************************************
//@methodName: get_GracePeriod_From_DB(Currentstate,CountryName)
//@Author: Sumithra
//@Date 29 Nov 2018
//@Description This will give the Grace period from DB
//Ex:  get_GracePeriod_From_DB("SC","USA")
//***********************************************************************************************************************
get_GracePeriod_From_DB(String Currentstate,String CountryName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query to fetch the grace period based on state
	query = "select * from bp_charge_calc_tbl where start_dt <= today() and end_dt >= today() and state = //"&Currentstate&"// and country=//"&CountryName&"// and opt = //LATE_CHG//"
	get_GracePeriod_From_DB = runSQLQuery(query, "grace_days")
	 writeReportLog("Grace period for State: " & Currentstate & " is "& get_GracePeriod_From_DB &" days" ,"Passed",FailComments,"")
	//Error handing
	 if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/get_GracePeriod_From_DB","Failed", Err.Description ,"")

//***********************************************************************************************************************
//@methodName: validate_LastLateChargeAppliedDate_in_AppDB(ExpLateChgAppliedDate)
//@Author: Sumithra
//@Date 29 Nov 2018
//@Description This will validate last late cahrge applied date in branch_setup table
//EX:  validate_LastLateChargeAppliedDate_in_AppDB("29/11/2018")
//***********************************************************************************************************************
validate_LastLateChargeAppliedDate_in_AppDB(String ExpLateChgAppliedDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//get late charge applied date from DB
	lastLateChgAppliedDate = Trim(getvalue_From_AppDB("BRANCH_SETUP_TBL","last_late_charge_applied"))
	//validate
	 validateDataAndReport(cdate(lastLateChgAppliedDate),cdate(ExpLateChgAppliedDate),"Validating last late charge applied date in Branch Setup Table: " &lastLateChgAppliedDate)
	//Error handling
	if Error.Number <> 0 
		 writeReportLog("Failed in validate_LastLateChargeAppliedDate_in_AppDB","Failed",Error.Description,"")

//*********************************************************************************************
//@methodName: calculate_LateChargeAmount_BasedOn_CalcMethod_FromDB(stateName,emiAmount,loanCreationDate,accountType)
//@Author Sumithra HP
//@Date 11 October 2019
//@Description This is to calculate the late charge amount based on Calculation method from DB
//Ex  calculate_LateChargeAmount_BasedOn_CalcMethod_FromDB("SC","342","2019-10-30","55")
//*********************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																										//calculate_LateChargeAmount_BasedOn_CalcMethod_FromDB(stateName,emiAmount,loanCreationDate,accountType)
//	
//	loanCreationDate = formatDateWithSpecifiedDelimeter(loanCreationDate,"YYYYMMDD","-")
//	
//	if accountType <> "" 
//		account_Type = "and acct_type = //"&accountType&"//"
//	
//	//query	
//	query = "select * from bp_charge_calc_tbl where state = //"&stateName&"// and opt = //LATE_CHG// and date(start_dt) <= //"&loanCreationDate&"// and date(end_dt) >= //"&loanCreationDate&"// "& account_Type &" order by start_dt desc"
//	
//	//Updating the Query in the UFT Log
//	Reporter.ReportEvent micDone,"Query to get Calc Method to calculate Late Charge from DB",query
//	
//	//Executing the Query Generated
//	result = runSQLQuery_FetchMultipleValues_WithWarning(query,"calc_method;amt")
//	result =Split(result,";")
//	calcMethod =result(0)
//	lateChgAmount = result(1)
//	
//	if UCASE(calcMethod) = UCASE("Amount") 
//		calculate_LateChargeAmount_BasedOn_CalcMethod_FromDB = lateChgAmount
//	else
//		calculate_LateChargeAmount_BasedOn_CalcMethod_FromDB = round(emiAmount * lateChgAmount / 100.00, 2)
//	
//	//error handling
//	if GetErrorCount()>0  			
//		 writeReportLog("Failed in step/calculate_LateChargeAmount_BasedOn_CalcMethod_FromDB","Failed", Err.Description ,"Y")
//	
//
 //*********************************************************************************************
//@methodName: get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB(LoanNumber,ChargeType)
//@Author Sumithra HP
//@Date 19 September 2019
//@Description This is for get the Diffrence Amount for Charge Amount and Paid Amount From DB
//Ex  get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB("08740008879","")
//Ex  get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB("08740008879","LATE_CHG")
//*********************************************************************************************
get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB(String LoanNumber,String ChargeType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	recordDate = formatDateWithSpecifiedDelimeter(Date,"yyyymmdd","-")
	//charge type
	if ChargeType <> "" 
		charge_Type = "and charge_type=//"&ChargeType&"//"	
	//query	
	query = "select chargeAmount = sum(charge_amt)-sum(paid_amt) from bp_account_tbl a ,bp_account_charge_tbl b where a.acct_id=b.acct_id and waived_yn =//N// and adj_princ_yn =//N// and loan_nbr=//"&LoanNumber&"//" &charge_Type	
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get Difference of charge amount and Paid amount from DB",query
	//Executing the Query Generated
	get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB = runSQLQuery_FetchMultipleValues_WithWarning(query,"chargeAmount")
	if GetErrorCount()>0  			
		 writeReportLog("Failed in step/get_DiffrenceOf_ChargeAmtAndPaidAmt_FromDB","Failed", Err.Description ,"Y")

//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_Eligible_for_LateCharges(sinceLastPaymentDays,fundingDate,fundingDateOperator)
//@Author Sumithra HP
//@Date 10 Oct 2019
//@Description This function is to get the Loan number from DB where late charge is applicable
//NOTE: for this function if you pass Empty("") it will ignore that condition 
// get_LoanNumberFromDB_Eligible_for_LateCharges("","2019-08-01",">=")
// get_LoanNumberFromDB_Eligible_for_LateCharges("45","2019-08-01",">=")
// get_LoanNumberFromDB_Eligible_for_LateCharges("45","","")
//***********************************************************************************************************************************************
get_LoanNumberFromDB_Eligible_for_LateCharges(String sinceLastPaymentDays,String fundingDate,String fundingDateOperator)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	if sinceLastPaymentDays <> "" 
		startDate = formatDateWithSpecifiedDelimeter(DateSerial(Year(Date),Month(Date)-cint(1),1),"YYYYMMDD","-")
		endDate = formatDateWithSpecifiedDelimeter(DateSerial(Year(Date), 1 + Month(Date)-cint(1), 0),"YYYYMMDD","-")
		endDate = formatDateWithSpecifiedDelimeter(dateadd("d",-1,endDate),"YYYYMMDD","-")
		sinceLast_PaymentDays = "and acct_id in(select acct_id from bp_account_charge_tbl where charge_type=//LATE_CHG// group by acct_id  having max(due_dt) >=//"&startDate&"// and max(due_dt) <=//"&endDate&"//) and days_since_last_pay >=//"&sinceLastPaymentDays&"//"
	if fundingDate <> "" 
		fundingDate = formatDateWithSpecifiedDelimeter(fundingDate,"YYYYMMDD","-")
		funding_Date = "and funding_dt "&fundingDateOperator&" //"&fundingDate&"//"
	//query
	query = "select * from bp_account_tbl where acct_status=//Active// " & sinceLast_PaymentDays & funding_Date & "  and not acct_id = any(select acct_id from bp_account_ins_claim_pend_tbl as a where a.claim_type = //TOTLLOSS// and a.claim_yn = //Y//) and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by rand()"	
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get loan number from DB where Late Charge is applicable",query
	//Returing the loan number  
    get_LoanNumberFromDB_Eligible_for_LateCharges = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumberFromDB_Eligible_for_LateCharges","Failed", Err.Description,"")

//************************************************************************************************************************************************
//@Method: get_Latest_LateChargeAmount_And_StartDate_FromDB(stateName,LateChargeAmount,StartDate)
//@Author karthik
//@Date 10 Oct 2019
//@Description This function is to get the Latecharge amount and Startdate from DB
// get_Latest_LateChargeAmount_And_StartDate_FromDB("IN",LateChargeAmount,StartDate)
//**************************************************************************************************************************************************
get_Latest_LateChargeAmount_And_StartDate_FromDB(String stateName,String LateChargeAmount,String StartDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query
	query = "select * from bp_charge_calc_tbl where state =//"&stateName&"// and opt =//LATE_CHG// order by start_dt desc"
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get latest Late Charge amount and Start date from DB",query
	//Returing the start date and late charge amount
    result = runSQLQuery_FetchMultipleValues_WithWarning(query,"start_dt;amt")	
    StartDate = Split(result,";")(0)
    LateChargeAmount = Split(result,";")(1)
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_Latest_LateChargeAmount_And_StartDate_FromDB ","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_DealerName_BasedOnCriteriaSpecified_FromDB(dealerName,requiredField)
//@Author Chandra
//@Date 28 OCT 2019
//@Description This is get the Sum of Dealer Discount and Reserve Amount based on Dealer Name from App DB
//@Returing the Dealer Name
//Ex  get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB("All Tech Auto Sales LLC","087400000017","short_name;sumReserveAmt;sumDiscountAmt")
// get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB("All Tech Auto Sales LLC","087400000017","short_name;sumReserveAmt;sumDiscountAmt")
// get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB("All Tech Auto Sales LLC","087400000017","short_name;sumReserveAmt;sumDiscountAmt")
// get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB("All Tech Auto Sales LLC","087400000017","short_name;sumReserveAmt;sumDiscountAmt")
//*********************************************************************************************
get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB(String dealerID,String requiredField)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Initial Query
	baseQuery = "select DRT.dealer_id,sum(DRT.reserve_amt) as sumReserveAmt,sum(DRT.discount_amt) as sumDiscountAmt from bp_dealer_tbl BDT inner join bp_dealer_reserve_tbl DRT on BDT.dealer_Id = DRT.dealer_id where BDT.active_yn = //Y// and DRT.dealer_id = //"& dealerID &"// group by DRT.dealer_id"
	get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB = runSQLQuery_FetchMultipleValues(baseQuery,requiredField)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_SumOfDealerDiscountAndReserveAmount_BasedOnDealerName_FromDB","Failed", Err.Description,"")

//********************************************************************************************************************************************
//@methodName: getRowNumber_BasedOnDealerName_FromDB(dealerID)
//@Description: This function is to get Row Number based on Dealer Number from DB
//@Author: Chandra
//@Date 30-10-2019
//Ex:  getRowNumber_BasedOnDealerName_FromDB("0874125602002")
//*********************************************************************************************************************************************
getRowNumber_BasedOnDealerName_FromDB(String dealerID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	DealerName_query = "with resultsTable as (select row_number() over(order by short_name asc,dealer_id desc) as RowNo, short_name,dealer_id  from bp_dealer_tbl where active_yn = //Y//) select RowNo,dealer_id from resultsTable where dealer_id = //"& dealerID &"//"
	rowNumber = runSQLQuery(DealerName_query,"RowNo")
	getRowNumber_BasedOnDealerName_FromDB = rowNumber
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getRowNumber_BasedOnDealerName_FromDB","Failed", Err.Description ,"")

//********************************************************************************************************************************************
//@methodName: getRepresentativeName_BasedOnDealerName_FromDB(requiredFields,dealerID)
//@Description: This function is to get Representative Name based on Dealer Name from DB
//@Author: Chandra
//@Date 30-10-2019
//Ex:  getRepresentativeName_BasedOnDealerName_FromDB("first_name","087400000015")
//*********************************************************************************************************************************************
getRepresentativeName_BasedOnDealerName_FromDB(String requiredFields,String dealerID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	repName_query = "select dr.first_name from bp_dealer_tbl d, bp_dealer_rep_tbl dr where d.dealer_id = dr.dealer_id and d.active_yn = //Y// and d.dealer_id = //"& dealerID &"//"
	represantativeName = runSQLQuery(repName_query,requiredFields)
	getRepresentativeName_BasedOnDealerName_FromDB = represantativeName
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getRepresentativeName_BasedOnDealerName_FromDB","Failed", Err.Description ,"")

//*************************************************************************************************************************************************
//@Method: runSQLQuery_FetchMultipleValues_WithoutExit(query, requiredFieldName)   
//@Author Chandra
//@Date 24 Oct 2019
//@Description This function is run the SQL query to fetch multiple values with out exist test
//Ex: runSQLQuery_FetchMultipleValues_WithoutExit(query, "loan_nbr;trans_id")   
//*************************************************************************************************************************************************
runSQLQuery_FetchMultipleValues_WithoutExit(String query,String requiredFieldNames)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //Variable declaration
    String conn, rs
     LogSuccessMessage("Test Data Get Query",query)
    //Object declaration
    Set conn= createobject("adodb.connection")
    set rs = createobject("adodb.recordset")
    //Connection string
    conn.Open =  "Dsn=branch;Uid=support;Pwd=sql;"
    //Executing the Query
    rs.open query, conn
    //Validating for Query No Results
	if rs.EOF 
		runSQLQuery_FetchMultipleValues_WithoutExit = ""
	else
		 //splitting the name
	    arr = Split(requiredFieldNames,";")
		for i = 0 To UBound(arr)
	     if i <> 0 
	     	outputString = outputString & ";"
	     requiredFieldNames = rs.Fields(arr(i))
		 outputString = outputString & requiredFieldNames
		//Returing the Value
		runSQLQuery_FetchMultipleValues_WithoutExit = outputString 
	rs.Close
    conn.Close 	  
	  //if Query Does not Return Any Result
    if GetErrorCount()>0 
		Reporter.ReportEvent micWarning,"runSQLQuery_FetchMultipleValues_WithoutExit"," Query " & query & " Did not give any results" 
		Err.GenKeyEvents("<Ctrl-A>"+"<Delete">)
		// writeReportLog("DB column Names " & requiredFieldName & " which you are looking is not available in the query Result; Query : " & query ,"Warning", Err.Description,"")		

//*****************************************************************************************
//@methodName: get_CashDrawerUser_BasedOnCriteriaSpecified(employeType,securityLevel)
//@Author Chandra
//@Date 04 Oct 2019
//@Description This will get the existing cash drawer Manager user from DB
//Ex: get_CashDrawerUser_BasedOnCriteriaSpecified("14A","400")
//*****************************************************************************************
get_CashDrawerUser_BasedOnCriteriaSpecified(String employeType,String securityLevel)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get the Cash Drawer from the Shared Location 
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath")&"CashDrawer_User_BasedOnSpecifiedCriteria_SQLQuery.txt")
	query = Replace(query,"@empl_type",employeType)
	query = Replace(query,"@security_level",securityLevel)
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to Identify the Cash Drawer & Set Pwd",query
	//Returing the 1st User ID with Cash Drawer    
    get_CashDrawerUser_BasedOnCriteriaSpecified = runSQLQuery(query,"userid")		
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_CashDrawerUser_BasedOnCriteriaSpecified","Failed", Err.Description,"")

//***********************************************************************************************************************
//@methodName: get_NonMatured_LoanNumber_FromDB(accountType)
//@Author: Sumithra
//@Date 30 Oct 2019
//@Description This is to get loan number from DB which are not matured
//Ex:  get_NonMatured_LoanNumber_FromDB("55")
//***********************************************************************************************************************
get_NonMatured_LoanNumber_FromDB(String accountType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	query =	"Select * from support.bp_account_tbl where acct_status =//Active// and acct_type=//"&accountType&"// and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) > getdate(*)) order by rand()"
//	query =	"Select * from support.bp_account_tbl where acct_status =//Active// and acct_type=//"&accountType&"// and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) < getdate(*)) order by loan_nbr asc"
	//run query
	get_NonMatured_LoanNumber_FromDB = runSQLQuery_WithWarning_WithoutExit(query, "loan_nbr")
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_NonMatured_LoanNumber_FromDB","Failed", Err.Description,"")

//***********************************************************************************************************************
//@methodName: getMaturedLoanNumber_FromDB(accountType)
//@Author: Sumithra
//@Date 30 Oct 2019
//@Description This is to get loan number from DB which are matured
//Ex:  getMaturedLoanNumber_FromDB("55")
//***********************************************************************************************************************
getMaturedLoanNumber_FromDB(String accountType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	stateName = Environment.Value("currentState")
	if stateName ="NC" and accountType ="31" 
//		query = "select aa.acct_id,a.loan_nbr,aa.activity_code, aa.activity_descr from bp_account_activity_tbl aa inner join bp_account_tbl a where aa.activity_code = //ADJ_INT// and a.acct_status = //ACTIVE// order by aa.entry_dt desc"
		query = "select aa.acct_id,a.loan_nbr,aa.activity_code, aa.activity_descr from bp_account_activity_tbl aa inner join bp_account_tbl a where aa.activity_code = //ADJ_INT// and a.acct_status <> //PAID_OUT// and a.acct_status <> //CHRG_OFF// order by aa.entry_dt desc"
	else
//		query =	"Select * from support.bp_account_tbl where acct_status =//Active// and acct_type=//"&accountType&"// and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >= getdate(*)) order by loan_nbr desc"
		query =	"Select * from support.bp_account_tbl where acct_status =//Active// and acct_type=//"&accountType&"// and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) <= getdate(*)) order by rand()"
	//run sql query
	getMaturedLoanNumber_FromDB = runSQLQuery_WithWarning_WithoutExit(query, "loan_nbr")
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/getMaturedLoanNumber_FromDB","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_DealerName_BasedOnCriteriaSpecified_FromDB(holdBackType,principlaBal,requiredField)
//@Author Chandra
//@Date 24 OCT 2019
//@Description This is get the Dealer Name based on criteria specified from App DB
//@Returing the Dealer Name
//Ex  get_DealerName_BasedOnCriteriaSpecified_FromDB("DISCOUNT","12000","short_name")
// get_DealerName_BasedOnCriteriaSpecified_FromDB("RESERVE","12000","short_name")
// get_DealerName_BasedOnCriteriaSpecified_FromDB("Both","12000","short_name")
// get_DealerName_BasedOnCriteriaSpecified_FromDB("Zero","12000","short_name")
//*********************************************************************************************
get_DealerName_BasedOnCriteriaSpecified_FromDB(String holdBackType,String orginal_principlaBal,String requiredField)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Initial Query
	//baseQuery = "select BDT.short_name,DRT.dealer_id,sum(isnull(DRT.reserve_amt,0)) as sumReserveAmt,sum(isnull(DRT.discount_amt,0)) as sumDiscountAmt from bp_dealer_tbl BDT inner join bp_dealer_reserve_tbl DRT on BDT.dealer_Id = DRT.dealer_id where BDT.active_yn = //Y//"
	baseQuery = "select BDT.short_name,DRT.dealer_id,sum(isnull(DRT.reserve_amt,0)) as sumReserveAmt,sum(isnull(DRT.discount_amt,0)) as sumDiscountAmt, MIN(BDT.RESERVE_AMT) DL_RES,MIN(BDT.DISCOUNT_AMT) DL_DIS from bp_dealer_tbl BDT inner join bp_dealer_reserve_tbl DRT on BDT.dealer_Id = DRT.dealer_id where BDT.active_yn = //Y//"
	//New Principal Bal
	new_principlaBal = Round(((orginal_principlaBal * 5)/100),2)
	principlaBal = orginal_principlaBal - new_principlaBal 
	//Appending the Query based hold back type
	if ToUpper(holdBackType) = "DISCOUNT" 
		//Dealer Reserve is zero and Discount amount is not equal to zero
		//baseQuery = baseQuery & " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt <> 0 and sumDiscountAmt < " & principlaBal & " and sumReserveAmt = 0 AND DL_RES = 0 AND DL_DIS = 0 order by DRT.dealer_id "
//Modified on 6th Jan 2020
        baseQuery = baseQuery & " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt <> 0 and sumDiscountAmt < " & principlaBal & " and sumReserveAmt = 0 AND DL_RES = 0 AND DL_DIS <> 0 order by DRT.dealer_id "
	else if ToUpper(holdBackType) = "RESERVE" 
		//Dealer Reserve is not equal to zero and Discount amount is zero
//		baseQuery = baseQuery & " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt = 0 and sumReserveAmt <> 0 and sumReserveAmt < " & principlaBal & " AND DL_RES = 0 AND DL_DIS <> 0 order by DRT.dealer_id "
		baseQuery = baseQuery & " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt = 0 and sumReserveAmt <> 0 and sumReserveAmt < " & principlaBal & " AND DL_RES <> 0 AND DL_DIS = 0 order by DRT.dealer_id "
	else if ToUpper(holdBackType) = "BOTH" 
		//Dealer Reserve and Discount amount both not equal to zero
		//baseQuery = baseQuery & " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt <> 0 and sumReserveAmt <> 0 and sumReserveAmt < " & principlaBal & " AND DL_RES = 0 AND DL_DIS <> 0  order by DRT.dealer_id "	
		baseQuery = baseQuery & " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt <> 0 and sumReserveAmt <> 0 and sumReserveAmt < " & principlaBal & " order by DRT.dealer_id "	
	else if ToUpper(holdBackType) = "ZERO" 
		//Dealer Reserve and Discount amount both is equal to zero
		baseQuery = baseQuery & " group by BDT.short_name,DRT.dealer_id having sumDiscountAmt = 0 and sumReserveAmt = 0 and DL_RES=0 and DL_DIS=0 order by rand()"
	else
		//Pick an active dealer
		baseQuery = baseQuery & " group by BDT.short_name,DRT.dealer_id order by rand()"
	get_DealerName_BasedOnCriteriaSpecified_FromDB = runSQLQuery_FetchMultipleValues(baseQuery,requiredField)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerName_BasedOnCriteriaSpecified_FromDB","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB(dealerType,accountType,acctStatus,contractFromDate,requiredFileds, queryPath)
//@Author Chandra
//@Date 24 Sep 2019
//@Description This will Set the Field Value for the Field Name specified In Modify To Section from Loan Modification Window
//@Retruning the DB values
//Ex 1.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("DISCOUNT","AUTO","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"")
//   2.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("RESERVE","AUTO","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"")
//   3.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("BOTH","AUTO","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"Current")
//   4.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("DISCOUNT","Motor","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"")
//   5.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("RESERVE","Motor","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"30")
//   6.  get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB("BOTH","Motor","ACTIVE","2019-08-12","loan_nbr:total_reserve:total_discount:princ_bal:dealer_id",QueryPath,"")
//*********************************************************************************************
get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB(String dealerType,String accountType,String acctStatus,String contractFromDate,String requiredFileds,String queryPath,String UI_Del_Status)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get SQL Query form text file
	baseQuery = get_Entire_File_Content(queryPath)
	//Constructing based on Dealer DISCOUNT/RESERVE/BOTH(RESERVE and DISCOUNT) Amount 
	if ToUpper(dealerType) = "DISCOUNT" 
//		baseQuery = baseQuery & " and d.total_discount <> 0 and d.total_reserve = 0 and (a.princ_bal - round(((a.princ_bal *5) /100),2)) > d.total_discount" 
		baseQuery = baseQuery & " and d.total_discount <> 0 and d.total_reserve = 0 " 
	else if ToUpper(dealerType) = "RESERVE" 
//		baseQuery = baseQuery & " and d.total_reserve <> 0 and d.total_discount = 0 and (a.princ_bal - round(((a.princ_bal *5) /100),2)) > d.total_reserve" 
		baseQuery = baseQuery & " and d.total_reserve <> 0 and d.total_discount = 0 " 
	else if ToUpper(dealerType) = "BOTH" 
		baseQuery = baseQuery & " and a.princ_bal > d.total_reserve and d.total_reserve <> 0 and d.total_discount <> 0"
	//Constructing based on Account Type
	if ToUpper(accountType) = "MOTOR" or  accountType = "56" 
		baseQuery = baseQuery & " and acct_type in (//56//)"
	else if ToUpper(accountType) = "AUTO" or  accountType = "55" 
		baseQuery = baseQuery & " and acct_type in (//55//)"
	//Constructing based on UI_Del_Status
	if UI_Del_Status <> "" 
		//Get ID Based on Delinquency Status and Contractual status
		 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
		//append delinquency status
		baseQuery = baseQuery & "and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"//"
	//Constructing based on Account Status
	if not(ToUpper(acctStatus) = "ANY" or Trim(acctStatus) = "" or IsNull(acctStatus)) 
		baseQuery = baseQuery & " and a.acct_status = //" & acctStatus & "//"
//	//Constructing based on Processed Date
//	 if contractFromDate <> ""  
//	 	
//		ContractFromDate = formatDateWithSpecifiedDelimeter(contractFromDate,"YYYYMMDD","-")
//		//query to run 
//		baseQuery = baseQuery & " and procd_dt < //" & contractFromDate & "//"
//    
    //Constructing based on Processed Date
	 if contractFromDate <> ""  
	 	if IndexOf(contractFromDate,">") > 0 
	 		contractFromDate = Replace(contractFromDate,">","")
	 		ContractFromDate = formatDateWithSpecifiedDelimeter(contractFromDate,"YYYYMMDD","-")
			ContractToDate = addDays_for_SepecifiedDate("d","-45",Date)
			ContractToDate = formatDateWithSpecifiedDelimeter(ContractToDate,"YYYYMMDD","-")
 		 	//query to run 
 		 	baseQuery = baseQuery & " and funding_dt > //" & contractFromDate & "// and funding_dt < //"&ContractToDate&"//"
	 	else
			ContractFromDate = formatDateWithSpecifiedDelimeter(contractFromDate,"YYYYMMDD","-")
			//query to run 
			baseQuery = baseQuery & " and procd_dt < //" & contractFromDate & "//"
	//Appending the Order by
	baseQuery = baseQuery & " order by rand()"
	//Logging the Query Generated in UFT Report
	  LogSuccessMessage("Query Generated in getLoanNumberBasedOnCriteriaSelected",baseQuery)
	//Running the SQL Query and returning the value
	loanNumber_DB = runSQLQuery_FetchMultipleValues_WithoutExit(baseQuery,requiredFileds)
	get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB = loanNumber_DB
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_LoanNumber_BasedOnCriteriaSpecified_for_LoanModification_FromDB","Failed", Err.Description ,"")

//***********************************************************************************************************
//@methodName: updateSQLQuery_InHomeOffice(query)
//@Description: This will update the data to home office
//@Author:Karthik 
//@Date 16 Oct 2019
//Ex:  updateSQLQuery_InHomeOffice("update e_app_tbl set status =//NOTVIEW// where ssn = //248291507//"))
//***********************************************************************************************************
updateSQLQuery_InHomeOffice(String query)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
 	loginSheetPath = Environment.Value("BranchPlusSharedPath") & "LoginDetails.xlsx"
	DataTable.AddSheet("Login")
	DataTable.ImportSheet loginSheetPath,"Login","Login"
 	homeOffice_Username = DataTable.Value("NetworkUsername","Login")
	homeOffice_Passcode = DataTable.Value("NetworkPasscode","Login")
    //Create ADODB connection object
    Set objConnection = CreateObject("ADODB.Connection") 
    //Create Recordsetobject
    Set objRecordSet = CreateObject("ADODB.Recordset")
    //Connect to DB using provider and server
    //objConnection.open "provider=sqloledb;Server=s1-sql-brgqa1\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"
    objConnection.open "provider=sqloledb;Server=s1-sql-brgdev1\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"    
    //Write the SQL Query
    sqlQuery=query
    //Open the recordset object executing the SQL statement and update records 
    objRecordSet.Open sqlQuery,objConnection
    //Recordset.Close
    Set objRecordSet=nothing
    objConnection.Close
    Set objConnection=nothing    
    //Error handling 
     if GetErrorCount()>0              
         writeReportLog("Failed to updateSQLQuery_InHomeOffice","Failed", Err.Description ,"")

//EX: updateSQLQuery_InSQLServer_HO_BasedOnServer("QA",query)--> This will run the query in the QA Environment (SQL Server)
//EX: updateSQLQuery_InSQLServer_HO_BasedOnServer("DEV",Query) --> This will run the query in the Dev Environment (SQL Server)
updateSQLQuery_InSQLServer_HO_BasedOnServer(String serverType,String query)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
 	loginSheetPath = Environment.Value("BranchPlusSharedPath") & "LoginDetails.xlsx"
	DataTable.AddSheet("Login")
	DataTable.ImportSheet loginSheetPath,"Login","Login"
 	homeOffice_Username = DataTable.Value("NetworkUsername","Login")
	homeOffice_Passcode = DataTable.Value("NetworkPasscode","Login")
    Reporter.ReportEvent micDone,"Electronic Payments Insert Query",query
    //Create ADODB connection object
    Set objConnection = CreateObject("ADODB.Connection") 
    //Create Recordsetobject
    Set objRecordSet = CreateObject("ADODB.Recordset")
    //Connect to DB using provider and server
    if serverType = "QA" 
    	// objConnection.open "provider=sqloledb;Server=s1-sql-brgqa1\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"
//    	serverName = "s1-sql-brgqa1"
		serverName = "SQL-DB-D3"
    else if serverType = "DEV" 
    	 //objConnection.open "provider=sqloledb;Server=s1-sql-brgdev1\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"    
    	serverName = "s1-sql-brgdev1"
    else
    	 writeReportLog("Wrong Value passed to serverType argument || : updateSQLQuery_InSQLServer_HO_BasedOnServer","Failed","","")
    //Connect to DB
//     objConnection.open "provider=sqloledb;Server="& serverName &"\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"    
	objConnection.open "provider=sqloledb;Server="& serverName &";User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"    
    //Write the SQL Query
    sqlQuery=query
    //Open the recordset object executing the SQL statement and update records 
    objRecordSet.Open sqlQuery,objConnection
    //Recordset.Close
    Set objRecordSet=nothing
    objConnection.Close
    Set objConnection=nothing    
    //Error handling 
     if GetErrorCount()>0              
         writeReportLog("Failed to updateSQLQuery_InHomeOffice","Failed", Err.Description ,"")

//***********************************************************************************************************
//@methodName: runQuery_InHomeoffice_FetchMultipleValues(query,requiredFieldName)
//@Description: This will fetch the data from home office
//@Author:Karthik
//@Return : Return the column details from DB
//@Date 16 Oct 2019
//Ex:  runQuery_InHomeoffice_FetchMultipleValues("select * from e_app_tbl","ssn"))
//***********************************************************************************************************
runQuery_InHomeoffice_FetchMultipleValues(String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    loginSheetPath = Environment.Value("BranchPlusSharedPath") & "LoginDetails.xlsx"
	DataTable.AddSheet("Login")
	DataTable.ImportSheet loginSheetPath,"Login","Login"
    homeOffice_Username = DataTable.Value("NetworkUsername","Login")
	homeOffice_Passcode = DataTable.Value("NetworkPasscode","Login")
    //Create ADODB connection object
    Set objConnection = CreateObject("ADODB.Connection") 
    //Create Recordsetobject
    Set objRecordSet = CreateObject("ADODB.Recordset")
    //Connect to DB using provider and server
    objConnection.open "provider=sqloledb;Server=s1-sql-brgqa1\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"
    //Write the SQL Query
    sqlQuery=query
    //Execute the query
    objRecordSet.open sqlQuery, objConnection 
    //Validating for Query No Results
    if objRecordSet.EOF 
         writeReportLog("Looks Like Query >> " & query &  " did not found any record","Failed", Err.Description,"")
        ExitTest
    else
    //splitting the column values
        arr = Split(requiredFieldName,":")
        for i = 0 To UBound(arr)
        if i <> 0 
        outputString = outputString & ":"
    requiredFieldName = objRecordSet.Fields(arr(i))
    outputString = outputString & requiredFieldName
    //Returing the Value
    runQuery_InHomeoffice_FetchMultipleValues = outputString 
    objRecordSet.Close
    objConnection.Close
    Set objConnection = Nothing
    Set objRecordSet = Nothing
    //Error handling
    if GetErrorCount()>0              
         writeReportLog("Failed in Step/: runQuery_InHomeoffice_FetchMultipleValues","Failed", Err.Description ,"")

//***********************************************************************************************************************
//@methodName: insert_ElectronicPayment_InHomeOfficeDB(branchId,LoanNumber,appliedAmount)
//@Author: Sumithra
//@Date 12 Dec 2018
//@Description This will insert the electronic payment from home office DB
//Ex:  insert_ElectronicPayment_InHomeOfficeDB("0881","088100002224","10")
//***********************************************************************************************************************
insert_ElectronicPayment_InHomeOfficeDB(String branchId,String LoanNumber,String appliedAmount)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//get query from shared path
	insertDataQuery = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath")&"BRP-1571_script_for_HO_Insert_ElectronicPayments.sql")
	insertDataQuery = Replace(insertDataQuery,"//BRANCH//","//"&branchId&"//")
	insertDataQuery = Replace(insertDataQuery,"//LOAN_NBR//","//"&LoanNumber&"//")
	insertDataQuery = Replace(insertDataQuery,"appliedAmount",appliedAmount)
	//upadted query
	 updateSQLQuery_InHomeOffice(insertDataQuery)
	Sleep (3)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in insert_ElectronicPayment_InHomeOfficeDB","Failed", Err.Description,"")

insert_ElectronicPayment_InSQLServer_HODB(String serverType,String branchId,String LoanNumber,String appliedAmount)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//get query from shared path
	insertDataQuery = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath")&"BRP-1571_script_for_HO_Insert_ElectronicPayments.sql")
	insertDataQuery = Replace(insertDataQuery,"//BRANCH//","//"&branchId&"//")
	insertDataQuery = Replace(insertDataQuery,"//LOAN_NBR//","//"&LoanNumber&"//")
	insertDataQuery = Replace(insertDataQuery,"appliedAmount",appliedAmount)
	//as part of year end regression script failures maintainted the script with inserting payment date as system date
	PaymentDate = getTodaysDate_mmddyyyy_format()
	insertDataQuery = Replace(insertDataQuery,"PAYMENT_DATE",PaymentDate)
	//Fetching Account_id -- for the New Changes Made as part of 9.4.1 Fix
	acct_id = getAccountID_From_DB_basedOnLoanNumber(LoanNumber)
	insertDataQuery = Replace(insertDataQuery,"ACCT_ID",acct_id)
	//upadted query
	 updateSQLQuery_InSQLServer_HO_BasedOnServer(serverType,insertDataQuery)
	Sleep (3)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in insert_ElectronicPayment_InHomeOfficeDB","Failed", Err.Description,"")

//***********************************************************************************************************************
//@methodName: update_Domain_In_BP_Website_Table_FromDB
//@Author: Sumithra
//@Date 30 Oct 2019
//@Description This is to update domian in website table
//Ex:  update_Domain_In_BP_Website_Table_FromDB("ONLINE PMTS TEST","http://sfc-api-qa201")
//***********************************************************************************************************************
update_Domain_In_BP_Website_Table_FromDB(String website,String domain)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query 
	query = "Update bp_website_tbl set domain =//"&domain&"// where website =//"&website&"//"
	//upadted query
	 runUpdateSQLQuery(query)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in update_Domain_In_BP_Website_Table_FromDB","Failed", Err.Description,"")

//*****************************************************************************************
//@methodName: get_DealerTotalAmount_FromDB(dealerID,requiredField)
//@Author Chandra
//@Date 27 Sep 2019
//@Description This will get the existing cash drawer Superviosr user from DB
//Ex: get_DealerTotalAmount_FromDB("08810234762378","total_discount")
//*****************************************************************************************
get_DealerTotalAmount_FromDB(String dealerID,String requiredField)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select * from bp_dealer_reserve_tbl where dealer_id = //"&  dealerID & "// order by entry_dt desc"
	get_DealerTotalAmount_FromDB = runSQLQuery(query,requiredField)
	 //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_DealerTotalAmount_FromDB ","Failed", Err.Description,"")

//*********************************************************************************************
//@MEthodName getCountOfBusinessAgents_FromDB
//@Author Karthik.Shekar
//@Description This function will get the count of Business agents from App DB based on criteria specified
//@Return count
//@Date 13 Nov 2019
//EX:  msgbox getCountOfBusinessAgents_FromDB("Repossession","Y")
//     msgbox getCountOfBusinessAgents_FromDB("","Y")
 //********************************************************************************************** 
 getCountOfBusinessAgents_FromDB(agentType,activeYN)
  //Query
  query = "select count(*) from bp_business_agent_tbl where active_yn = //" & activeYN & "//"
  //Constructing the Query based on Criteria
  if ToUpper(agentType) = ToUpper("Repossession") 
  	dbAgentType = "REPOAGNT"
  	query = query & " and agent_type = //" & dbAgentType & "//" 
  else if ToUpper(agentType) = ToUpper("Garnishment") 
  	dbAgentType = "GARNAGNT"
  	query = query & " and agent_type = //" & dbAgentType & "//" 
  else if ToUpper(agentType) = ToUpper("Others") 
  	dbAgentType = "OTHERAGENT"
  	query = query & " and agent_type = //" & dbAgentType & "//" 
  else if ToUpper(agentType) = ToUpper("ALL") or  Length(Trim(agentType)) = 0 
  	query = query
  else
  	 writeReportLog("AgentType " & agentType &  " passed to function getCountOfBusinessAgents_FromDB is not corect","Passed","","")
     //Returning 
  getCountOfBusinessAgents_FromDB = runSQLQuery(query,"count(*)") 
  //Error Handling
   if GetErrorCount()>0 
		 writeReportLog("Failed in step/getCountOfBusinessAgents_FromDB","Failed", Err.Description,"")
 RemoveFunction
//********************************************************************************************
//@Method get_random_DealerNameAndID_FromAppDB
//@Author Karthik.Shekar
//@Date 21 Nov 2019
//@Description this function will get the Dealer Name and ID based on the Dealer Status Passed
//@Return DealerName;DealerID
//msgbox get_random_DealerNameAndID_FromAppDB("y")
//msgbox get_random_DealerNameAndID_FromAppDB("y")
//********************************************************************************************
get_random_DealerNameAndID_FromAppDB(String dealerStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query
	query = "select * from bp_dealer_tbl where active_yn = //"& ToUpper(dealerStatus) &"//" & " order by rand()"		
	 //Returing the Value
	 get_random_DealerNameAndID_FromAppDB = runSQLQuery_FetchMultipleValues_WithWarning(query,"short_name;dealer_id")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerDetails_FromAppDB","Failed", Err.Description,"")

//***********************************************************************************************************************************
//@Method: get_DealerAddress_BasedOnDealerID_FromAppDB(dealerID,dealerType,addrType,requiredField)
//@Author Karthik
//@Date 18 Oct 2019
//@Description This function is to get the Dealer Address based on dealer Id from DB
//Ex:  getValue_CheckbookPayment_window("087400000001","DEALER","MAILING","addr1;addr2;addr3;zipcode;city;state")
//************************************************************************************************************************************
get_DealerAddress_BasedOnDealerID_FromAppDB(String dealerID,String dealerType,String addrType,String requiredField)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query
	query = "select * from bp_location_tbl where loc_id = //"& dealerID &"// and loc_type = //"& dealerType &"// and loc_class = //"& addrType &"//"
	get_DealerAddress_BasedOnDealerID_FromAppDB = runSQLQuery_FetchMultipleValues_WithWarning(query,requiredField)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerAddress_BasedOnDealerID_FromAppDB","Failed", Err.Description,"")

//***********************************************************************************************************************************
//@Method: update_DealerAddress_BasedOnDealerID_FromAppDB
//@Author Karthik
//@Date 06 Sep 2019
//@Description This function will update the dealer Address 2 field value and Phone Number in Location Table
//Ex:  update_DealerAddress_BasedOnDealerID_FromAppDB("106000000003","DEALER","MAILING","addr2","Latke View")
//Ex:  update_DealerAddress_BasedOnDealerID_FromAppDB("106000000003","DEALER","MAILING","addr1","#28987")
//************************************************************************************************************************************
update_DealerAddress_BasedOnDealerID_FromAppDB(String dealerID,String dealerType,String addrType,String colName,String valueToSet)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query
	query = "update bp_location_tbl Set " & colName & " = //" & valueToSet & "// where loc_id = //"& dealerID &"// and loc_type = //"& dealerType &"// and loc_class = //"& addrType &"//"
	//running the SQL Querys
	  runUpdateSQLQuery(query)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerAddress_BasedOnDealerID_FromAppDB","Failed", Err.Description,"")

//***********************************************************************************************************************
//@methodName: get_BusinessAgentCount_BasedOn_AgentType_FromDB(agentType)
//@Author: Karthik.Shekar
//@Date 24 Oct 2019
//@Description This will get Business Agent count based on agent type from DB
//Ex:  get_BusinessAgentCount_BasedOn_AgentType_FromDB("GARNAGNT")
//Ex:  get_BusinessAgentCount_BasedOn_AgentType_FromDB("REPOAGNT")
//***********************************************************************************************************************
get_BusinessAgentCount_BasedOn_AgentType_FromDB(String agentType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //run query to fetch loan number
	 result = runSQLQuery_WithWarning_WithoutExit("select Count(dba_name) from bp_business_agent_tbl where agent_type = //"&agentType&"//","count(bp_business_agent_tbl.dba_name)")
	 if result <> "" 
	 	get_BusinessAgentCount_BasedOn_AgentType_FromDB = result
 	else
	 	get_BusinessAgentCount_BasedOn_AgentType_FromDB = "0"
   if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_BusinessAgentCount_BasedOn_AgentType_FromDB","Failed", Err.Description,"")

//***********************************************************************************************************************************
//@Method: getPaymentType_BasedOnTransID_FromDB(transID,requiredFields)
//@Author Chandra
//@Date 25 Nov 2019
//@Description This function is to get the Value from Payment Account table based trans ID from DB
//Ex:  getPaymentType_BasedOnTransID_FromDB(transID,requiredFields)
//************************************************************************************************************************************
getPaymentType_BasedOnTransID_FromDB(String transID,String requiredFields)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	getPaymentType_BasedOnTransID_FromDB = runSQLQuery("select * from  bp_account_payment_tbl where trans_id = //"& transID &"//",requiredFields)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: getPaymentType_BasedOnTransID_FromDB","Failed", Err.Description ,"")

//msgbox getDealerStateBasedOnLoanNumber("088100009483")
getDealerStateBasedOnLoanNumber(String loanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	getDealerStateBasedOnLoanNumber = runSQLQuery("select state from bp_dealer_tbl where dealer_id = (select dealer_id from bp_account_tbl where loan_nbr = //" & loanNumber & "//)","state")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: getPaymentType_BasedOnTransID_FromDB","Failed", Err.Description ,"")

//***********************************************************************************************************************
//@methodName: get_BusinessAgent_FromAppDB
//@Author: Karthik
//@Date 28 Aug 2019
//@Description This will get Business Agent from DB
//Ex:  get_BusinessAgent_FromAppDB("Y","Repossession","dba_name")
//     get_BusinessAgent_FromAppDB("N,"Garnishment","agent_id")
//***********************************************************************************************************************
get_BusinessAgent_FromAppDB(String activeYN,String agentType,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
//	//run SQL Query
//	requiredValue = runSQLQuery_WithWarning_WithoutExit("select * from bp_business_agent_tbl", requiredFieldName)
//	//Returning the value
//	get_BusinessAgent_FromAppDB = requiredValue
//	//Error handling
//	if GetErrorCount()>0  			
//		 writeReportLog("Failed in Step/: get_BusinessAgent_FromAppDB","Failed", Err.Description ,"")
//	
	//Query
	  query = "select * from bp_business_agent_tbl where active_yn = //" & activeYN & "//" 
	  //Constructing the Query based on Criteria
	  if ToUpper(agentType) = ToUpper("Repossession") 
	  	dbAgentType = "REPOAGNT"
	  	query = query & " and agent_type = //" & dbAgentType & "//" 
	  else if ToUpper(agentType) = ToUpper("Garnishment") 
	  	dbAgentType = "GARNAGNT"
	  	query = query & " and agent_type = //" & dbAgentType & "//" 
	  else if ToUpper(agentType) = ToUpper("Others") 
	  	dbAgentType = "OTHERAGENT"
	  	query = query & " and agent_type = //" & dbAgentType & "//" 
	  else if ToUpper(agentType) = ToUpper("ALL") or  Length(Trim(agentType)) = 0 
	  	query = query
	  else
	  	 writeReportLog("AgentType " & agentType &  " passed to function get_BusinessAgent_FromAppDB is not corect","Failed","","")
	  query = query & " order by rand()"
	  //Returning 
	  get_BusinessAgent_FromAppDB = runSQLQuery(query,requiredFieldName) 
	  //Error Handling
	   if GetErrorCount()>0 
			 writeReportLog("Failed in step/get_BusinessAgent_FromAppDB","Failed", Err.Description,"")

//***********************************************************************************************************************
//@methodName: get_MailingAddress_FromAppDB(requiredFieldName)
//@Author: Karthik
//@Date 28 Aug 2019
//@Description This will get Business Agent from DB
//Ex:  get_MailingAddress_FromAppDB("addr1:addr2:city:state:zipcode")
//***********************************************************************************************************************
get_MailingAddress_FromAppDB(String requiredFieldNames)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//run SQL Query
	requiredValue = runSQLQuery_FetchMultipleValues_WithWarning("select * from bp_location_tbl where loc_type = //BRANCH// and loc_class = //MAILING//",requiredFieldNames)
	//Returning the value
	get_MailingAddress_FromAppDB = requiredValue
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_MailingAddress_FromAppDB","Failed", Err.Description ,"")

//***********************************************************************************************************************************
//@Method: get_GLDescription_BasedOnTransID_FromDB(colName)
//@Author Chandra
//@Date 19 Aug 2019
//@Description This function is get the GL Description based on Transaction ID from DB
//@Returning the GL Description
//Ex:  get_GLDescription_BasedOnTransID_FromDB("0000087854564")
//************************************************************************************************************************************
get_GLDescription_BasedOnTransID_FromDB(String transactionID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	GL_Descr = ""
	rowCount = ""
	//Get Row Count from General Ledger details tbl in DB
	rowCount = get_COA_RowCount_BasedOnTransactionID_FromDB(transactionID)
	//Getting GL Description based on Transaction ID 
	for RowCount_DB = 1 To rowCount
		//COA number getting based on row and Trans ID
		Coa_Details = get_Data_In_GeneralLedgerDetailTbl_FromDB(RowCount_DB,transactionID,"coa")
		//Get GL Description from chart account tble from DB based on COA number
		GL_Descr = get_GLDescription_In_ChartAccountTbl_FromDB(Coa_Details)
		//Getting all the GL Description additng to variable
		GL_All_Description = Coa_Details & " " & GL_Descr & "||" & GL_All_Description
	get_GLDescription_BasedOnTransID_FromDB = GL_All_Description
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_GLDescription_BasedOnTransID_FromDB","Failed", Err.Description,"Y")

//***********************************************************************************************************************************
//@Method: get_GLDescription_BasedOnTransID_FromDB(transactionID)
//@Author Chandra
//@Date 19 Aug 2019
//@Description This function is get the Row Count based on Transaction ID from DB (Chart account tbl & genral ledger details tbl)
//@Returning the Row Count
//Ex:  get_COA_RowCount_BasedOnTransactionID_FromDB("000001237845")
//************************************************************************************************************************************
get_COA_RowCount_BasedOnTransactionID_FromDB(String transactionID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Data from Bank Details Table based Last Entry Date record
	requiredValue = runSQLQuery("select Count(*) from bp_chart_accounts_tbl where coa in (select coa from bp_general_ledger_detail_tbl where trans_id = //"& transactionID &"//)","count(*)")
	get_COA_RowCount_BasedOnTransactionID_FromDB = requiredValue
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_COA_RowCount_BasedOnTransactionID_FromDB","Failed", Err.Description,"Y")

//***********************************************************************************************************************************
//@Method: get_Data_In_GeneralLedgerDetailTbl_FromDB(rowNumber,transactionID,requiredFields)
//@Author Chandra
//@Date 19 Aug 2019
//@Description This function is get the Data in Genral ledger details tbl based on row number, Transaction ID and like coa, account id from DB (Chart account tbl & genral ledger details tbl)
//@Returning the Row Count
//Ex:  get_Data_In_GeneralLedgerDetailTbl_FromDB("1","00000214586","coa")
//************************************************************************************************************************************
get_Data_In_GeneralLedgerDetailTbl_FromDB(String rowNumber,String transactionID,String requiredFields)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Data from Bank Details Table based Last Entry Date record
	requiredValue = runSQLQuery("select TOP 1 START AT "& rowNumber &" * from bp_chart_accounts_tbl where coa in (select coa from bp_general_ledger_detail_tbl where trans_id = //"& transactionID &"//)",requiredFields)
	get_Data_In_GeneralLedgerDetailTbl_FromDB = requiredValue
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_Data_In_GeneralLedgerDetailTbl_FromDB","Failed", Err.Description,"Y")

//***********************************************************************************************************************************
//@Method: get_GLDescription_In_ChartAccountTbl_FromDB(coa_ID)
//@Author Chandra
//@Date 19 Aug 2019
//@Description This function is get the GL description from DB based on COA number (Chart account tbl)
//@Returning the Row Count
//Ex:  get_GLDescription_In_ChartAccountTbl_FromDB("1002")
//************************************************************************************************************************************
get_GLDescription_In_ChartAccountTbl_FromDB(String coa_ID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get Data from bp_chart_accounts_tbl based on COA number
	requiredValue = runSQLQuery("select * from bp_chart_accounts_tbl where coa = //"& coa_ID &"//","descr")
	get_GLDescription_In_ChartAccountTbl_FromDB = requiredValue
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_GLDescription_In_ChartAccountTbl_FromDB","Failed", Err.Description,"Y")

//*********************************************************************************************
//@methodName: update_CashDrawerUserSecurityLevel_BasedOnUser(securiyLevel,cashDrawerUserID)
//@Author Chandra
//@Date 27 Aug 2019
//@Description This is to Update the Security level less than 400 based on User Id in DB
//Ex: Result = update_CashDrawerUserSecurityLevel_BasedOnUser("300","csw")
//*********************************************************************************************
update_CashDrawerUserSecurityLevel_BasedOnUser(String securiyLevel,String cashDrawerUserID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") &"Update_CashDrawerUser_SecurityLevel_SQLQuery.txt")
	//Replace the UserID 
	query = Replace(query,"@UserID@",cashDrawerUserID)
	//Replace the Security Level
	query = Replace(query,"@securityLevel@",securiyLevel)
	//Run Sql Query
	 runUpdateSQLQuery(query)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: update_CashDrawerUserSecurityLevel_BasedOnUser","Failed", Err.Description,"Y")

//*********************************************************************************************
//@methodName: get_DealerDetails_FromAppDB(holdback_Type,discountAmount,requiredField)
//@Author Chandra
//@Date 07 May 2019
//@Description This is get the Dealer Name from App DB
//@Returing the Dealer Name
//Ex  get_DealerDetails_FromAppDB("Y","DISCOUNT","100","short_name")
//	 get_DealerDetails_FromAppDB("N","RESERVE","200","short_name")
//*********************************************************************************************
get_DealerDetails_FromAppDB(String dealerStatus,String holdback_Type,String discountAmount,String requiredField)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query
	query = "select * from bp_dealer_tbl where active_yn = //"& ToUpper(dealerStatus) &"// and holdback_type = //"& ToUpper(holdback_Type) &"//"
	//if Discount Amount is empty ignore
	if ToUpper(dealerStatus) = "Y" 
		query = query & " and discount_amt <= //"& discountAmount &"//"
	get_DealerDetails_FromAppDB = runSQLQuery(query,requiredField)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in get_DealerDetails_FromAppDB","Failed", Err.Description,"")

//************************************************************************************************************************************************
//@Method: get_ChargeFromDB(stateName,acct_type,opt_type,order,effectiveDate)
//@Author Deepthi
//@Date 17 Jan 2020
//@Description This function is to get the NSF amount from DB
// get_ChargeFromDB("IN",//55//,//NSF_CHRG//,//2020-01-01//)
//**************************************************************************************************************************************************
get_ChargeFromDB(String stateName,String acct_type,String opt_type,String order,String effectiveDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query
	//query = "select * from bp_charge_calc_tbl where state =//"&stateName&"// and opt = //NSF_CHRG// order by start_dt "&order&""
	query="select * from bp_charge_calc_tbl where state = //"&stateName&"// and acct_type = //"&acct_type&"// and opt = //"&opt_type&"// and date(start_dt) "&order&" //"&effectiveDate&"//"
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get latest Late Charge amount and Start date from DB",query
	//Returing the start date and late charge amount
    result = runSQLQuery_FetchMultipleValues_WithWarning(query,"start_dt;amt")	
    //StartDate = Split(result,";")(0)
    get_ChargeFromDB = Split(result,";")(1)
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_ChargeFromDB ","Failed", Err.Description,"")

//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate(dealerState,stateoperator,fundingDate,fundingDateOperator,accounttype)
//@Author Deepthi
//@Date 16 Jan 2020
//@Description This function is to get the Loan number from DB based on the selected dealer
//Example:  get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate("NC","=",01-01-2020",">","55")
//***********************************************************************************************************************************************
get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate(String dealerState,String stateoperator,String fundingDate,String fundingDateOperator,String accounttype)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query
	query = "select * from bp_account_tbl where dealer_id in (select dealer_id from bp_dealer_tbl where state "&stateoperator&"//"&dealerState&"//) and acct_status= //ACTIVE// and acct_type=//"&accounttype&"// and funding_dt "&fundingDateOperator&" //"&fundingDate&"//  order by rand()"	
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get loan number from DB where Late Charge is applicable",query
	//Returing the loan number  
  	get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate","Failed", Err.Description,"")

//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate
//@Author Deepthi
//@Date 20 Jan 2020
//@Description This function is to get the loan number form DB based on the Payment Type passed to method along with Loan Functing Date and Account Type
//@Return Loan Number
//Example:get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate("CHECKPAY","N","01-01-2020,">","55")
//        get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate("CASH","N","01-01-2020,"<","56)
//***********************************************************************************************************************************************
get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate(String paymentType,String reversedYn,String fundingDate,String fundingDateOperator,String accounttype)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query
	query = "select * from bp_account_tbl where acct_id in(select acct_id from bp_account_payment_tbl where  pmt_type=//"&paymentType&"// and reversed_yn=//"&reversedYn&"//) and acct_status= //ACTIVE// and acct_type=//"&accounttype&"// and funding_dt "&fundingDateOperator&" //"&fundingDate&"// order by rand()"
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get loan number from DB where Late Charge is applicable",query
	//Returing the loan number  
  	get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("get_LoanNumberFromDB_BasedOnPaymentype_Fundingdate","Failed", Err.Description,"")

//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_BasedOnFundingDate(fundingDate,fundingDateOperator,accounttype)
//@Author Deepthi
//@Date 16 Jan 2020
//@Description This function is to get the Loan number from DB based on the selected dealer
//Example:  get_LoanNumberFromDB_BasedOnFundingDate("2020-01-01",">","55")
//***********************************************************************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																//get_LoanNumberFromDB_BasedOnFundingDate(fundingDate,fundingDateOperator,accounttype)
//		
//	//query
//	query = "select * from bp_account_tbl  where acct_status= //ACTIVE// and acct_type=//"&accounttype&"// and funding_dt "&fundingDateOperator&" //"&fundingDate&"//  order by rand()"
//	//Updating the Query in the UFT Log
//	Reporter.ReportEvent micDone,"Query to get loan number from DB where Late Charge is applicable",query
//	//Returing the loan number  
//  	get_LoanNumberFromDB_BasedOnFundingDate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
//    
//    //Error Handling
//	if GetErrorCount()>0 
//		 writeReportLog("get_LoanNumberFromDB_BasedOnFundingDate","Failed", Err.Description,"")
//	
//
//###MOdified by Karthik
//MOdification Description : added affiliationType --> PRIMARY , JOINT or COSIGN
//EX: msgbox get_LoanNumberFromDB_BasedOnFundingDate("PRIMARY","2020-01-01","<","31")
get_LoanNumberFromDB_BasedOnFundingDate(String affiliationType,String fundingDate,String fundingDateOperator,String accounttype)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query
	query = "select * from bp_account_tbl  where acct_status= //ACTIVE// and acct_type=//"&accounttype&"// and funding_dt "&fundingDateOperator&" //"&fundingDate&"//"	
	if ToUpper(affiliationType) = "PRIMARY" 
		query =  query & " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
	else if ToUpper(affiliationType) = "COSIGN" or ToUpper(affiliationType) = "JOINT" 	
	   query =  query & " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" & ToUpper(affiliationType) & "//)"
	//Appending Order by
	query = query & " order by rand()"
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get loan number from DB where Late Charge is applicable",query
	//Returing the loan number  
  	get_LoanNumberFromDB_BasedOnFundingDate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("get_LoanNumberFromDB_BasedOnFundingDate","Failed", Err.Description,"")

//
////************************************************************************************************************************************************
////@Method: get_ChargeFromDB(stateName,acct_type,opt_type,order,effectiveDate)
////@Author Deepthi
////@Date 17 Jan 2020
////@Description This function is to get the NSF amount from DB
//
//// get_Latest_NSFAmount_And_StartDate_FromDB("IN",//55//,//NSF_CHRG//,//2020-01-01)
////**************************************************************************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													//get_ChargeFromDB(stateName,acct_type,opt_type,order,effectiveDate)
//	
//	//query
//	//query = "select * from bp_charge_calc_tbl where state =//"&stateName&"// and opt = //NSF_CHRG// order by start_dt "&order&""
//	query="select * from bp_charge_calc_tbl where state = //"&stateName&"// and acct_type = //"&acct_type&"// and opt = //"&opt_type&"// and date(start_dt) "&order&" //"&effectiveDate&"//"
//
//	//Updating the Query in the UFT Log
//	Reporter.ReportEvent micDone,"Query to get latest Late Charge amount and Start date from DB",query
//	
//	//Returing the start date and late charge amount
//    result = runSQLQuery_FetchMultipleValues_WithWarning(query,"start_dt;amt")	
//    //StartDate = Split(result,";")(0)
//    get_ChargeFromDB = Split(result,";")(1)
//    
//    //Error Handling
//	if GetErrorCount()>0 
//		 writeReportLog("Failed : get_ChargeFromDB ","Failed", Err.Description,"")
//	
//
//
//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate(dealerState,stateoperator,fundingDate,fundingDateOperator,accounttype,LoanNumer,DealerID)
//@Author Deepthi
//@Date 16 Jan 2020
//@Description This function is to get the Loan number from DB based on the selected dealer
//Example:  get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate("NC","=",01-01-2020",">","55",LoanNumer,DealerID)
//***********************************************************************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																//get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate(dealerState,stateoperator,fundingDate,fundingDateOperator,accounttype)
//	
//	
//	//query
//	query = "select * from bp_account_tbl where dealer_id in (select dealer_id from bp_dealer_tbl where state "&stateoperator&"//"&dealerState&"//) and acct_status= //ACTIVE// and acct_type=//"&accounttype&"// and funding_dt "&fundingDateOperator&" //"&fundingDate&"//  order by rand()"	
//	//Updating the Query in the UFT Log
//	Reporter.ReportEvent micDone,"Query to get loan number from DB where Late Charge is applicable",query
//	//Returing the loan number  
//  	get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
//	
//    
//    //Error Handling
//	if GetErrorCount()>0 
//		 writeReportLog("Failed : get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate","Failed", Err.Description,"")
//	
//
//EX: msgbox get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate("PRIMARY","30","NC","=","2020-01-01","<","55")
//EX: msgbox get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate("PRIMARY",">90","NC","=","2020-01-01","<","55")
//EX: msgbox get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate("PRIMARY","Current","NC","=","2020-01-01","<","55")
//NOTE: affiType & UI_DEL_Status are non Mandatory Fields
get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate(String affiType,String UI_Del_Status,String dealerState,String stateoperator,String fundingDate,String fundingDateOperator,String accounttype)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query
	query = "select * from bp_account_tbl where dealer_id in (select dealer_id from bp_dealer_tbl where state "&stateoperator&"//"&dealerState&"//) and acct_status= //ACTIVE// and acct_type=//"&accounttype&"// and funding_dt "&fundingDateOperator&" //"&fundingDate&"//"	
	if ToUpper(affiType) = "PRIMARY" 
		query = query & " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
	else if ToUpper(affiType) = "COSIGN" or ToUpper(affiType) = "JOINT" 	
	   query = query & " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" & ToUpper(affiType) & "//)"
	if Len(Trim(UI_Del_Status)) > 0 
		//Get ID Based on Delinquency Status and Contractual status			
		if UI_Del_Status <> ">=30" 
			 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
		//Based on Account Status
		if UI_Del_Status = ">90" 
			query = query & " and del_status = //" &  delinqStatus  &"// and contractual_status > //"& contractual_status & "//"
		else if UI_Del_Status = ">=30" 
			query = query & " and del_status = //// and contractual_status <> 0"
		else
			query = query & " and del_status = //" &  delinqStatus  &"// and contractual_status = //"& contractual_status & "//"
	 //Appendign Order by
	 //query = query & " order by rand()"
	 query = query & " order by contractual_status desc"
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get loan number Based On Dealer State and Funding Date",query
	//Returing the loan number  
  	get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumberFromDB_BasedOnDealerStateAndFundingDate","Failed", Err.Description,"")

//************************************************************************************************************************************************
//@Method: get_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate(paymentType,reversedYn,dealerState,stateoperator,fundingDate,fundingDateOperator,accounttype)
//@Author Deepthi
//@Date 20 Jan 2020
//@Description This function is to get the loan form DB which has check payment
//Example:get_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate("CHECKPAY//,"N","NC","=","2020-01-01",">","55")
//***********************************************************************************************************************************************
get_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate(String paymentType,String reversedYn,String dealerState,String stateoperator,String fundingDate,String fundingDateOperator,String accounttype)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query
	query = "select * from bp_account_tbl where acct_id in (select acct_id from bp_account_payment_tbl where  pmt_type=//"&paymentType&"// and reversed_yn=//"&reversedYn&"// and entry_dt "&fundingDateOperator&" //"&fundingDate&"//) and dealer_id in (select dealer_id from bp_dealer_tbl where state=//"&dealerState&"//) and acct_status= //ACTIVE// and acct_type=//"&accounttype&"// and funding_dt "&fundingDateOperator&" //"&fundingDate&"// order by rand()"	
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to get loan number from DB Based on Payment Type and Funding Date ",query
	//Returing the loan number  
  	get_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
   //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumberFromDB_BasedOnDealer_Paymentype_Fundingdate","Failed", Err.Description,"")

//********************************************************************************************
//@Method get_random_DealerName_BasedOnDealerState_FromAppDB(stateOperator,state,dealerStatus)
//@Author Deepthi 
//@Date 23 Jan 2020
//@Description this function will get the Dealer Name D based on the Dealer Status and dealer state Passed
//@Return DealerName
//Example:  get_random_DealerName_BasedOnDealerState_FromAppDB("=","NC","Y")
//********************************************************************************************
get_random_DealerName_BasedOnDealerState_FromAppDB(String stateOperator,String state,String dealerStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query
	query = "select * from bp_dealer_tbl where state "&stateOperator&" //"&state&"// and active_yn = //"& ToUpper(dealerStatus) &"//" & " order by rand()"		
	 //Returing the Value
	 get_random_DealerName_BasedOnDealerState_FromAppDB = runSQLQuery_WithWarning_WithoutExit(query,"short_name")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("get_random_DealerName_BasedOnDealerState_FromAppDB","Failed", Err.Description,"")

//********************************************************************************************
//@Method get_DealerName_BasedOnLoanNumber_FromAppDB(LoanNumber)
//@Author Deepthi 
//@Date 23 Jan 2020
//@Description this function will get the dealer ID based on the Loan Number
//@Return DealerName
//Example:  get_DealerName_BasedOnLoanNumber_FromAppDB("LoanNumber")
//********************************************************************************************
get_DealerName_BasedOnLoanNumber_FromAppDB(String LoanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Query
	query = "select short_name from bp_dealer_tbl where dealer_id = (select dealer_id from bp_account_tbl where loan_nbr = //"&LoanNumber&"//)"		
	 //Returing the Value
	 get_DealerName_BasedOnLoanNumber_FromAppDB = runSQLQuery_WithWarning_WithoutExit(query,"short_name")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("get_DealerName_BasedOnLoanNumber_FromAppDB","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: get_LoanNumber_FromDB_Where_SettlementNotExists_BasedOnComponentsRequired(AccountStatus,AccountTypeCode,UI_Del_Status,CPIAndPFSRequired)
//@Author Sumithra
//@Date 12 Nov 2019
//@Description This return the loan number where settlement not exist based on components presents
//Ex  get_LoanNumber_FromDB_Where_SettlementNotExists_BasedOnComponentsRequired(AccountStatus,AccountTypeCode,UI_Del_Status,CPIAndPFSRequired)
// get_LoanNumber_FromDB_Where_SettlementNotExists_BasedOnComponentsRequired("Active","","","N")
// get_LoanNumber_FromDB_Where_SettlementNotExists_BasedOnComponentsRequired("Active","55","","","N","N")
//EX: get_LoanNumber_FromDB_Where_SettlementNotExists_BasedOnComponentsRequired("CHARGEDOFF","55","PRIMARY","","N","N")
//*********************************************************************************************
get_LoanNumber_FromDB_Where_SettlementNotExists_BasedOnComponentsRequired(String AccountStatus,String AccountTypeCode,String affiType,String UI_Del_Status,String CPIAndPFSRequired,String VSCComponentRequired)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	if UI_Del_Status <> "" 
	   //Get ID Based on Delinquency Status and Contractual status
		 get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
		delinquencyStatus = "and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"//"
	if AccountTypeCode <> ""  		
		AccountType_Code = " and acct_type=//" & AccountTypeCode &"// "
	if affiType <> "" 
		 if ToUpper(affiType) = "PRIMARY" 
			affiliation_Type =  " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
		else if ToUpper(affiType) = "COSIGN" or ToUpper(affiType) = "JOINT" 	
	   		affiliation_Type = " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" & ToUpper(affiType) & "//)"
		// affiliation_Type = " and acct_id in (select acct_id from bp_account_customer_affil_tbl where affil_type = //"&affiType&"//)"
			//query to run 
	if Trim(CPIAndPFSRequired) = "" or Length(Trim(CPIAndPFSRequired)) = 0 
		//Ignore		
	else if CPIAndPFSRequired = "N" 
		//Components = "and acct_id not in (select acct_id from bp_account_component_tbl where opt in(//GAP//,//CPI//)  group by acct_id)"
		Components = "and acct_id not in (select distinct(acct_id) from bp_account_Component_tbl where descr like //%GAP%// or opt = //CPI//)"
	else if CPIAndPFSRequired = "Y" 
		Components = "and acct_id  in (select acct_id from bp_account_component_tbl where opt =//GAP// or opt = //CPI// and end_dt >= getdate(*) group by acct_id)"
	else
		 writeReportLog("Wrong Parameter passed for Component","Failed", Err.Description,"")	
	if Trim(VSCComponentRequired) = "" or Length(Trim(VSCComponentRequired)) = 0 
		//Ignore		
	else if VSCComponentRequired = "N" 
		VSCComponents = "and acct_id not in (select acct_id from bp_account_component_tbl where opt like //WAR%// group by acct_id)"
	else if VSCComponentRequired = "Y" 
		VSCComponents = "and acct_id in (select acct_id from bp_account_component_tbl where opt = //WAR36// and end_dt >= getdate(*) group by acct_id)"
	else
		 writeReportLog("Wrong Parameter passed for VSC Component","Failed", Err.Description,"")	
	query = "Select * from support.bp_account_tbl where acct_status =//" & AccountStatus & "//" &AccountType_Code & delinquencyStatus & affiliation_Type & " and acct_id not in (select acct_id from bp_account_settlement_tbl)  " & Components & VSCComponents &" order by rand()"
	//UFT Logger
	 LogSuccessMessage("Settlement query", query)
    //Fetching the loan number from DB
	loanNumber = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	//if Loan are not available 
	if loanNumber = "0" 
		// writeReportLog("<b> <font color=//orange//> No Loans found for Criteria " & AccountStatus & "|" & AccountTypeCode & "|" & affiType &"|"& UI_Del_Status & "</font> </b>" ,"Passed",FailComments,"")
		 LogWarningMessage("No Loans found for Criteria " & AccountStatus & " | " & AccountTypeCode & " | " & affiType &" | "& UI_Del_Status ,"")
	get_LoanNumber_FromDB_Where_SettlementNotExists_BasedOnComponentsRequired = loanNumber
    if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_FromDB_Where_SettlementNotExists_BasedOnComponentsRequired","Failed", Err.Description,"")

//*************************************************************************************************************
//@methodName : get_DailyMangrActivityDescription_FromDB(rowId,currentState,todayDate,branchID,ChartAcctType,colName)
//@Author     : GG
//@Date       : 13 FEB 2019
//@Description: This will select/Unselect the checkbox in Daily Closing Window
//Ex:  get_DailyMangrActivityDescription_FromDB(1,"SC","02-13-2018","ASSETCUR","0874","chart_account_id")
//*************************************************************************************************************
get_DailyMangrActivityDescription_FromDB(String rowId,String currentState,String todayDate,String ChartAcctType,String branchID,String colName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get the Cash Drawer from the Shared Location
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "Daily_Managers_ReportSQLQuery.txt")
	//Replace the Current State, branchId and Row number Dynamicaly
	query = Replace(query,"$currentState$",currentState)
	query = Replace(query,"$rowId$",rowId)
	query = Replace(query,"$branchID$",branchID)
	//Replace the Today//s Date Dynamicaly
	query = Replace(query,"$todayDate$",todayDate)
	//Replace the Chart of Account Type Dynamicaly
	query = Replace(query,"$ChartAcctType$",ChartAcctType)
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to Identify the Total Description Count of Daily manager report table Based on State,Date and Chart of Account Type:",query
	//Returing the Descrition Field name of Assets/Liability,Income,Expense from DB
	get_DailyMangrActivityDescription_FromDB = runSQLQuery(query,colName)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_DailyMangrActivityDescription_FromDB","Failed", Err.Description ,"")

//*****************************************************************************************************************************************
//@methodName: get_TotalPriceAndBeginAmt_Asset_Liability_Income_Expense_FromDB(str_FilePath,reportType,nodeTreeName,nodeName)
//@Description: This function is to get the Total Amount of Income, Expense,Liability and Assets Section in Daily Managers Report
//@Author: GG
//@Date 20 FEB 2019
//Ex:  get_TotalPriceAndBeginAmt_Asset_Liability_Income_Expense_FromDB("02/12/2019","CR","ASSETCUR","0874")
//*****************************************************************************************************************************************
get_TotalPriceAndBeginAmt_Asset_Liability_Income_Expense_FromDB(String todayDate,String creditType,String ChartAcctType,String branchID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get the Cash Drawer from the Shared Location
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "DailyManagesReport_TotalAmount_Asset_Expense_Income_Liability_SQLQuery.txt")
	//Replace the Current State, branchId and Row number Dynamicaly
	query = Replace(query,"$branchID$",branchID)
	//Replace the Today//s Date Dynamicaly
	query = Replace(query,"$todayDate$",todayDate)
	//Replace the Chart of Account Type Dynamicaly
	query = Replace(query,"$ChartAcctType$",ChartAcctType)
	//Replace the Chart of Account Type Dynamicaly
	query = Replace(query,"$creditType$",creditType)
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to Identify the Total Description Count of Daily manager report table Based on State,Date and Chart of Account Type:",query
	//Returing the Descrition Field name of Assets/Liability,Income,Expense from DB
	get_TotalPriceAndBeginAmt_Asset_Liability_Income_Expense_FromDB = runSQLQuery_FetchMultipleValues(query,"begin income:period income")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_TotalPriceAndBeginAmt_Asset_Liability_Income_Expense_FromDB","Failed", Err.Description ,"")

//*****************************************************************************************
//@methodName : get_DailyMangrActivityCount_FromDB(branchID,todayDate,ChartAcctType)
//@Author     : GG
//@Date       : 13 FEB 2019
//@Description: This will select/Unselect the checkbox in Daily Closing Window
//Ex:  get_DailyMangrActivityCount_FromDB("0874","02-13-2019","ASSETCUR")
//*****************************************************************************************
 get_DailyMangrActivityCount_FromDB(branchID,todayDate,ChartAcctType)
	//Get the Daily Managers Report query from the Shared Location	
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "DailyManagerReportCount_SQLQuery.txt")
	//Replace the BranchID Dynamicaly
	query = Replace(query,"$branchID$",branchID)
	//Replace the Today//s Date Dynamicaly
	query = Replace(query,"$todayDate$",todayDate)
	//Replace the Chart of Account Type Dynamicaly
	query = Replace(query,"$ChartAcctType$",ChartAcctType)
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to Identify the Total Count of Daily manager report table Based on State,Date and Chart of Account Type:",query
	//Returing the total count of Assets/Liability,Income,Expense fields from DB
	get_DailyMangrActivityCount_FromDB = runSQLQuery(query,"Count(*)")
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_DailyMangrActivityCount_FromDB","Failed", Err.Description ,"")

runSQLQuery_FetchMultipleValues(String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //Variable declaration
    String conn, rs
    //Object declaration
    Set conn= createobject("adodb.connection")
    set rs = createobject("adodb.recordset")
    //Connection string
    conn.Open =  "Dsn=branch;Uid=support;Pwd=sql;"
    //Executing the Query
    rs.open query, conn
   //Validating for Query No Results
	if rs.EOF 
		 writeReportLog("Looks Like Query >> " & query &  " did not found any record","Failed", Err.Description,"")
		ExitTest
	else
		 //splitting the name
	    arr = Split(requiredFieldName,":")
		for i = 0 To UBound(arr)
	     if i <> 0 
	     	outputString = outputString & ":"
	     requiredFieldName = rs.Fields(arr(i))
		 outputString = outputString & requiredFieldName
		//Returing the Value
		runSQLQuery_FetchMultipleValues = outputString 
	rs.Close
    conn.Close 	  
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: runSQLQuery_FetchMultipleValues","Failed", Err.Description ,"")

//****************************************************************
//@Method set_ONLINE_PMTS_TEST_URL_InLocalDB
//@Description this method will update the Domain in BP_Website_Tbl for "Online PMTS Test" field
//@Param serverType --> QA Or DEV
//@Author Karthik.Shekar
//
//@EX: set_ONLINE_PMTS_TEST_URL_InLocalDB("QA")
//********************************************************************
set_ONLINE_PMTS_TEST_URL_InLocalDB(String serverType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	if serverType = "QA" 
		 update_Domain_In_BP_Website_Table_FromDB("ONLINE PMTS TEST",Environment.Value("QAServerURL"))
	else if serverType = "DEV" 
		 update_Domain_In_BP_Website_Table_FromDB("ONLINE PMTS TEST",Environment.Value("DevSQLServerURL"))
	else
		 writeReportLog("Wrong Value " & serverType &  "Passed to set_HO_Domain_InLocalDB ","","","")

//************************************************************************************************
//@MethodName enableOrDisableFeature_In_SQLServer_HODB
//@Description This Method will Enable or Disable the Featrue in SQL HO DB for the Specified Feature and Branch ID
//@Param serverType --> QA OR DEV
//		branchID --> Pass the Branch ID for which you want to make changes
//		featureName --> Specify the Feature Name
//		statusToSet --> Pass Y or N or Enable or Disable
//@Author Karthik.SHekar
//@Date 14 Feb 2019
//EX: enableOrDisableFeature_In_SQLServer_HODB("DEV","0881","AutoPayments","DISABLE")
//EX: enableOrDisableFeature_In_SQLServer_HODB("QA","0881","AutoPayments","Y")
//****************************************************************************************************
enableOrDisableFeature_In_SQLServer_HODB(String serverType,String branchID,String featureName,String statusToSet)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	if ToUpper(statusToSet) = "ENABLE" or ToUpper(statusToSet) = "Y" 
		featureYn = "Y"
	else if ToUpper(statusToSet) = "DISABLE" or ToUpper(statusToSet) = "N" 
		featureYn = "N"
	else
		 writeReportLog("Please Pass Proper Input to enableOrDisableFeature_In_SQLServer_HODB","Failed","Either Y Or N","")
	//Run update Query
	featureQuery =  "update bp_feature_tbl set feature_yn = //" & featureYn & "// where feature = //"& featureName & "// and branch_id = //"& branchID &"//"
	//Logger
	 LogSuccessMessage("Feature update Query (HO DB) >>" &  featureQuery,"")
 	//Run Update Query
 	 updateSQLQuery_InSQLServer_HO_BasedOnServer(serverType,featureQuery)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in enableFeatureInDB","Failed", Err.Description,"")

//******************************************************
//@Method getAccountID_From_DB_basedOnLoanNumber
//@Description This method will get the Accoutn ID from DB based on Loan Number
//@Return Acct_ID 
//@Author Karthik.Shekar
//@Data 14 Feb 2020
//EX:getAccountID_From_DB_basedOnLoanNumber("088100001456")
//**********************************************************
getAccountID_From_DB_basedOnLoanNumber(String loanNum)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	getAccountID_From_DB_basedOnLoanNumber = runSQLQuery("select acct_id from bp_account_tbl where loan_nbr = //"& loanNum &"//","acct_id")
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getAccountID_From_DB_basedOnLoanNumber","Failed", Err.Description ,"")

//*****************************************************************************************************************************************
//@methodName: get_ApprovedDate_EntryDate_And_LastChangedDate_for_Settlements_FromDB(loanNumber,requiredFieldNames)
//@Description: This function is to get the approved date,entry date and last changed date for settlement from DB
//@Author: Sumithra
//@Date 18 Nov 2019
//Ex:  get_ApprovedDate_EntryDate_And_LastChangedDate_for_Settlements_FromDB("106000008435","approved_userid;approved_dt;entry_userid;entry_dt;last_chg_dt;last_chg_userid")
//*****************************************************************************************************************************************
get_ApprovedDate_EntryDate_And_LastChangedDate_for_Settlements_FromDB(String loanNumber,String requiredFieldNames)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select stlmnt.approved_userid as Settlement_ApprovedID, stlmnt.approved_dt as Settlement_ApprovedDate,stlmnt.entry_userid as Settlement_EntryID, stlmnt.entry_dt as Settlement_EntryDate,stlmnt.last_chg_dt as Settlement_lastEntryDate ,stlmnt.last_chg_userid as Settlement_lastEntryID from bp_account_settlement_tbl stlmnt, bp_account_tbl act where stlmnt.acct_id = act.acct_id and active_yn = //Y// and loan_nbr =//"&loanNumber&"//"
   //Executing the Query Generated
   get_ApprovedDate_EntryDate_And_LastChangedDate_for_Settlements_FromDB = runSQLQuery_FetchMultipleValues_WithWarning(query,requiredFieldNames)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_ApprovedDate_EntryDate_And_LastChangedDate_for_Settlements_FromDB","Failed", Err.Description,"")

//***************************************************************************************
//@MethodName getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB
//@Description this method will get the Latest Transaction ID based on the conditions passed to method i.e., Loan number, Payment type
//			 reversedYN, transactionDateOperatior and transaction Date
//@author Karthik.Shekar
//@return TransactionID
//Ex: msgbox getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB("088100007553", "CHECKPAY", "N", "<", "2020-01-01")
//***************************************************************************************
getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB(String loanNumber,String paymentType,String reversedYN,String transactionDateOperator,String transactionDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select trans_id from bp_account_payment_tbl where  pmt_type=//"& paymentType & "// and reversed_yn=//" & reversedYN & "// and entry_dt "& transactionDateOperator & " //" & transactionDate &"// and acct_id in (select acct_id from bp_account_tbl where loan_nbr =//" & loanNumber & "//) order by trans_id desc"
	//Updating the Query in the UFT Log
	Reporter.ReportEvent micDone,"Query to getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB ", query
	//Returing the loan number  
  	getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB = runSQLQuery(query,"trans_id")
   //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : getTransactionId_BasedOn_LoanNumber_PaymentType_FromAppDB","Failed", Err.Description,"")

//****************************************************************************************
//@Method Name getCurrentStateName_FullName_DB
//@Author Karthik.Shekar
//@Description this fuction will get the Full name of Current State from DB
//@Return Full State name
//@Date 10 April 2020
//Ex: msgbox getCurrentStateName_FullName_DB()
//******************************************************************************************
getCurrentStateName_FullName_DB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	currentState = getCurrentStateName_From_DB()
	query = "select * from bp_state_country_tbl where state = //" & currentState & "//"
	//Run query
	fullName = runSQLQuery(query,"state_name")
	getCurrentStateName_FullName_DB = fullName
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getCurrentStateName_FullName_DB","Failed", Err.Description ,"")

//*****************************************************************************************
//@methodName: set_TestURL_DebitOrCreditCard_Payment_InDB()
//@Author Ambika
//@Date 09 oct 2019
//@Description This is to set the test url before debit/credit Payment
//Ex: set_TestURL_DebitOrCreditCard_Payment_InDB()
//*****************************************************************************************
set_TestURL_DebitOrCreditCard_Payment_InDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    version = getAppVersionNumber_From_DB()
    if Trim(Replace(version,".","")) >= 950 
        //Get the query from the Shared Location 
        query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath")&"DebitOrCredit_SQLQuery_9.5.txt")
    else
        //Get the query from the Shared Location 
        query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath")&"DebitOrCredit_Repay_SQLQuery_9.4.txt")
    //run Sql  query   
     runUpdateSQLQuery(query)
    //Error Handling
    if GetErrorCount()>0 
         writeReportLog("Failed : set_TestURL_DebitOrCreditCard_Payment_InDB ","Failed", Err.Description,"")

//******************************************************************************************************************************************************
//@Method: getValueFromComponentTable_AppDB(acctId,valueToFetch,CompOption)
//@Author Ambika
//@Date 05 Mar 2020
//@Description: This function is to get value in component table from DB
//Ex:  getValueFromComponentTable_AppDB("106000020711","CPI","CANCEL")
//******************************************************************************************************************************************************
getValueFromComponentTable_AppDB(String acctId,String CompOption,String valueToFetch)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//fetching column name from db
	if ToUpper(valueToFetch) = "CANCEL" 
		colName = "cancel_yn"
	else if ToUpper(valueToFetch) = "REFUNDABLE" 
		colName = "refundable_yn"
	else if ToUpper(valueToFetch) = "COMPONENT_ID" 
		colName = "cmpnt_id"
	else
		 writeReportLog("Please pass the Proper parameter value to method getValueFromComponentTable_AppDB","Failed","","")
	//query
	query = "select * from bp_account_component_tbl where acct_id = //"& acctId &"// and opt = //"& CompOption &"// order by entry_dt desc" 
   //Executing the Query Generated
   getValueFromComponentTable_AppDB = runSQLQuery(query,colName)
   //error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getValueFromComponentTable_AppDB","Failed", Err.Description ,"")

////****************************************************************************************************
////@method getLoanNumber_Basedon_AlliedInsuranceDate
////@Author Karthik.Shekar
////@Description This will get the Loan Number based on Allied Insurance Details Paramters which has been passed.
////				NOTE: You can Ignore a Paramter by passing Empty value ""
////@Date 12 May 2020
////@Return Loan number based on criteria specified. 
//
////ex: msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",True,True,"","",">","05/12/2020") //Fetching for Active Insurance
////	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","CHRG_OFF",True,True,"","","<","05/12/2020")//Fetching for Expired Insurance
////	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",True,True,"<","05/12/2020","","") //Fetching for already Canceled Insurance
////	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",True,True,">","05/12/2020","","")//Fetching for Future Cancel Date
////	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",False,"","","","","") // Fetching for Empty Compnay Name
////	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE","",False,"","","","") // Fetching for Empty Poliicy Number
////	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("","","ACTIVE",True,True,"","","","") // if we want to ignore the Loan Type
//
////for Reference
////actStatus Codes/Values = //ACTIVE//,//APPROVED//,//CANCELLD//,//CHRG_OFF//,//CHRGBANK//,//CHRGSKIP//,//PAID_OUT//,//REDEEMED//,//REPO//,//REPOSOLD//,//REVERSED//,//SKIP//,//SOLDIER//
////************************************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													//getLoanNumber_Basedon_AlliedInsuranceDate(accountType, affiType, acctStatus, isInsCompanyName, isInsPolicyNum, insCancelOperator, insCancelDate, insExpOperator, inExpirationDate)
//	
//	//
//	//Base Query
//	baseQuery = "select * from bp_account_tbl BAT inner join bp_account_ins_allied_tbl AIAT on BAT.acct_id = AIAT.acct_id where BAT.int_type = //INT_BRNG//"
//	
//	//Constructing based on Affi Type
//	if ToUpper(affiType) = "PRIMARY" 
//		baseQuery =  baseQuery & " and BAT.BAT.acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
//	else if ToUpper(affiType) = "COSIGN" or ToUpper(affiType) = "JOINT" 	
//	   baseQuery = baseQuery & " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" & ToUpper(affiType) & "//)"
//	
//	
//	//Constructing based on Account Type
//	if ToUpper(accountType) = "MOTOR" or  accountType = "56" 
//		baseQuery = baseQuery & " and BAT.acct_type = //56//"
//	else if ToUpper(accountType) = "AUTO" or  accountType = "55" 
//		baseQuery = baseQuery & " and BAT.acct_type = //55//"
//	else if ToUpper(accountType) = "DIRECT" or  accountType = "31" 
//		baseQuery = baseQuery & " and BAT.acct_type = //31//"
//	//else
//		// writeReportLog("Wrong Value passed to Account Type Parameter in function getLoanNumber_Basedon_AlliedInsuranceDate","Failed","","")
//	
//	
//	//Constructing based on Account Status
//	if not(ToUpper(acctStatus) = "ANY" or Trim(acctStatus) = "" or IsNull(acctStatus)) 
//		baseQuery = baseQuery & " and BAT.acct_status = //" & acctStatus & "//"
//	
//	
//	//Constructing based on Insurance Company Name ( Ignore if other Values are Passed )
//	if isnull(isInsCompanyName) or isInsCompanyName = False 
//		baseQuery = baseQuery & " and InsurerInsuranceCompanyNam is null" 
//	else if (isnull(isInsCompanyName) = False and Length(Trim(isInsCompanyName)) > 0 ) or isInsCompanyName = True 
//		baseQuery = baseQuery & " and InsurerInsuranceCompanyNam is not null"
//	
//	
//	//Constructing based on Insurance Policy Number ( Ignore if other Values are Passed )
//	if isnull(isInsPolicyNum) or isInsPolicyNum = False 
//		baseQuery = baseQuery & " and InsurancePolicyNumber is null" 
//	else if (isnull(isInsPolicyNum) = False and Length(Trim(isInsPolicyNum)) > 0 ) or isInsPolicyNum = True 
//		baseQuery = baseQuery & " and InsurancePolicyNumber is not null"
//	
//	
//	//Constructing query based on Ins Cancel Date ( Ignore Only if Empty String is Passed )
//	if Length(Trim(insCancelDate)) > 0 
//		baseQuery = baseQuery & " and convert(date,InsuranceCancel,101) "& insCancelOperator &" convert(date, //"& insCancelDate & "//, 101)"		
//	
//	
//	//Constructing query based on Ins Expiration Date( Ignore Only if Empty String is Passed )
//	if Length(Trim(inExpirationDate)) > 0 
//		baseQuery = baseQuery & " and convert(date, InsuranceExpiration,101) "& insExpOperator & " convert(date,//"& inExpirationDate &"//, 101)"
//	
//	
//	//Appending the Order by
//	baseQuery = baseQuery & " order by rand()"
//	
//	//Logging the Query Generated in UFT Report
//	  LogSuccessMessage("Query Generated in getLoanNumber_Basedon_AlliedInsuranceDate",baseQuery)
//	 	
//	//Running the SQL Query and returning the value
//	getLoanNumber_Basedon_AlliedInsuranceDate = runSQLQuery_FetchMultipleValues(baseQuery,"loan_nbr")
//	
//	
//	//Error Handling
//	if GetErrorCount()>0 
//		 writeReportLog("Failed in getLoanNumber_Basedon_AlliedInsuranceDate","Failed", Err.Description ,"")
//	
//
//****************************************************************************************************
//@method getLoanNumber_Basedon_AlliedInsuranceDate
//@Author Karthik.Shekar
//@Description This will get the Loan Number based on Allied Insurance Details Paramters which has been passed.
//				NOTE: You can Ignore a Paramter by passing Empty value ""
//@Date 12 May 2020
//@Return Loan number based on criteria specified. 
//@Modified by Deepthi
//@Modified Date 15 june 2020
//@ modified to retrieve the data based on coverage status
//ex: msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",True,True,"","",">","05/12/2020") //Fetching for Active Insurance
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","CHRG_OFF",True,True,"","","<","05/12/2020")//Fetching for Expired Insurance
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",True,True,"<","05/12/2020","","") //Fetching for already Canceled Insurance
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",True,True,">","05/12/2020","","")//Fetching for Future Cancel Date
//	msgbox c // Fetching for Empty Compnay Name
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE","",False,"","","","") // Fetching for Empty Poliicy Number
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("","","ACTIVE",True,True,"","","","") // if we want to ignore the Loan Type
//ex: for modified method
//   msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",True,True,"","",">","05/12/2020","") //Fetching for Active Insurance irrespective of coverage status
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","CHRG_OFF",True,True,"","","<","05/12/2020","Active")//Fetching for Expired Insurance where coverage status is active
//	msgbox getLoanNumber_Basedon_AlliedInsuranceDate("AUTO","","ACTIVE",True,True,"<","05/12/2020","","","Waive") //Fetching for already Canceled Insurance where coverage status is waive
//for Reference
//actStatus Codes/Values = //ACTIVE//,//APPROVED//,//CANCELLD//,//CHRG_OFF//,//CHRGBANK//,//CHRGSKIP//,//PAID_OUT//,//REDEEMED//,//REPO//,//REPOSOLD//,//REVERSED//,//SKIP//,//SOLDIER//
//************************************************************************************************************
getLoanNumber_Basedon_AlliedInsuranceDate(String accountType,String affiType,String acctStatus,String isInsCompanyName,String isInsPolicyNum,String insCancelOperator,String insCancelDate,String insExpOperator,String inExpirationDate,String coverageStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//
	//Base Query
	baseQuery = "select * from bp_account_tbl BAT inner join bp_account_ins_allied_tbl AIAT on BAT.acct_id = AIAT.acct_id where BAT.int_type = //INT_BRNG//"
	//Constructing based on Affi Type
	if ToUpper(affiType) = "PRIMARY" 
		baseQuery =  baseQuery & " and BAT.BAT.acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
	else if ToUpper(affiType) = "COSIGN" or ToUpper(affiType) = "JOINT" 	
	   baseQuery = baseQuery & " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" & ToUpper(affiType) & "//)"
	//Constructing based on Account Type
	if ToUpper(accountType) = "MOTOR" or  accountType = "56" 
		baseQuery = baseQuery & " and BAT.acct_type = //56//"
	else if ToUpper(accountType) = "AUTO" or  accountType = "55" 
		baseQuery = baseQuery & " and BAT.acct_type = //55//"
	else if ToUpper(accountType) = "DIRECT" or  accountType = "31" 
		baseQuery = baseQuery & " and BAT.acct_type = //31//"
	//else
		// writeReportLog("Wrong Value passed to Account Type Parameter in function getLoanNumber_Basedon_AlliedInsuranceDate","Failed","","")
	//Constructing based on Account Status
	if not(ToUpper(acctStatus) = "ANY" or Trim(acctStatus) = "" or IsNull(acctStatus)) 
		baseQuery = baseQuery & " and BAT.acct_status = //" & acctStatus & "//"
	//Constructing based on Insurance Company Name ( Ignore if other Values are Passed )
	if isnull(isInsCompanyName) or isInsCompanyName = False 
		baseQuery = baseQuery & " and InsurerInsuranceCompanyNam is null" 
	else if (isnull(isInsCompanyName) = False and Length(Trim(isInsCompanyName)) > 0 ) or isInsCompanyName = True 
		baseQuery = baseQuery & " and InsurerInsuranceCompanyNam is not null"
	//Constructing based on Insurance Policy Number ( Ignore if other Values are Passed )
	if isnull(isInsPolicyNum) or isInsPolicyNum = False 
		baseQuery = baseQuery & " and InsurancePolicyNumber is null" 
	else if (isnull(isInsPolicyNum) = False and Length(Trim(isInsPolicyNum)) > 0 ) or isInsPolicyNum = True 
		baseQuery = baseQuery & " and InsurancePolicyNumber is not null"
	//Constructing query based on Ins Cancel Date ( Ignore Only if Empty String is Passed )
	if Length(Trim(insCancelDate)) > 0 
		baseQuery = baseQuery & " and convert(date,InsuranceCancel,101) "& insCancelOperator &" convert(date, //"& insCancelDate & "//, 101)"		
	//Constructing query based on Ins Expiration Date( Ignore Only if Empty String is Passed )
	if Length(Trim(inExpirationDate)) > 0 
		baseQuery = baseQuery & " and convert(date, InsuranceExpiration,101) "& insExpOperator & " convert(date,//"& inExpirationDate &"//, 101)"
	//Constructing query based on Required Coverage Status and Required Coverage Ins Status
	if Length(Trim(coverageStatus)) > 0 
		baseQuery = baseQuery & " and RequiredCoverageStatus = //" & coverageStatus & "//"
	//Appending the Order by
	baseQuery = baseQuery & " order by rand()"
	//Logging the Query Generated in UFT Report
	  LogSuccessMessage("Query Generated in getLoanNumber_Basedon_AlliedInsuranceDate",baseQuery)
	//Running the SQL Query and returning the value
	getLoanNumber_Basedon_AlliedInsuranceDate = runSQLQuery_FetchMultipleValues_WithoutExit(baseQuery,"loan_nbr")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in getLoanNumber_Basedon_AlliedInsuranceDate","Failed", Err.Description ,"")

//****************************************************************************************************************
//@Method getData_From_AlliedInsuranceTbl_AppDb
//@Date 13 May 2020
//@Author Karthik.Shekar
//@Description this funcntion will get the Data from Allied Insurance Tbl which is there in App(ASA) DB
//EX: msgbox getData_From_AlliedInsuranceTbl_AppDb("count","") --> To get Cnt of Records
//	msgbox getData_From_AlliedInsuranceTbl_AppDb("count","088100028892") --> to get Count of Records for a Particular Account
//	msgbox getData_From_AlliedInsuranceTbl_AppDb("rec_id:rec_date:acct_id","") --> Fetches value of 1st Record
//	msgbox getData_From_AlliedInsuranceTbl_AppDb("rec_id:rec_date:acct_id","088100028236") --> Filters data based on Account iD
//****************************************************************************************************************
getData_From_AlliedInsuranceTbl_AppDb(String requiredFields,String accountId)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select * from bp_account_ins_allied_tbl"
	//Special Conditon	
	if Length(Trim(accountId)) > 0 
		query = query & " where acct_id = " & accountId		
	//Count
	if ToUpper(requiredFields) = ToUpper("Count") 
		query = Replace(query,"*","count(*)")
		requiredFields = "count(*)"	
//	if ToUpper(requiredFields) = ToUpper("Count") 
//		query = "select count(*) from bp_account_ins_allied_tbl"
//		requiredFields = "count(*)"	
//	else if Length(Trim(accountId)) > 0 
//		query = query & " where acct_id = " & accountId		
//	
	//Logger
	// LogSuccessMessage("query ; getData_From_AlliedInsuranceTbl_AppDb",query)
	//Executing the Query Generated
	alliedDetails = runSQLQuery_FetchMultipleValues(query, requiredFields)
	getData_From_AlliedInsuranceTbl_AppDb = alliedDetails
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: getData_From_AlliedInsuranceTbl_AppDb","Failed", Err.Description ,"")

//********************************************************************************************************
//@Method getValue_InSQLServer_HO_BasedOnServer
//@Date 19 May 2020
//@Author Karthik.Shekar
//@Description This function will query the HO DB and return the Value for the field Values specified.
//@Return Values for the Column name specified
//EX: msgbox getValue_InSQLServer_HO_BasedOnServer("DEV","0881","select * from bp_feature_tbl where feature = //AutoPayments//","feature:feature_yn")
//    msgbox getValue_InSQLServer_HO_BasedOnServer("QA","1524","select * from bp_feature_tbl where feature = //AutoPayments//","feature_yn")
//********************************************************************************************************
getValue_InSQLServer_HO_BasedOnServer(String serverType,String branchID,String query,String requiredFieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
 	loginSheetPath = Environment.Value("BranchPlusSharedPath") & "LoginDetails.xlsx"
	DataTable.AddSheet("Login")
	DataTable.ImportSheet loginSheetPath,"Login","Login"
 	homeOffice_Username = DataTable.Value("NetworkUsername","Login")
	homeOffice_Passcode = DataTable.Value("NetworkPasscode","Login")
    //appending the Branch ID
    query = query & " and branch_id = //" & branchID & "//" 
    //Logger
    Reporter.ReportEvent micDone,"query generated to getSQLQuery_InSQLServer_HO_BasedOnServer",query
    //Create ADODB connection object
    Set objConnection = CreateObject("ADODB.Connection") 
    //Create Recordsetobject
    Set objRecordSet = CreateObject("ADODB.Recordset")
    //Connect to DB using provider and server
    if serverType = "QA" 
    	// objConnection.open "provider=sqloledb;Server=s1-sql-brgqa1\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"
    	serverName = "s1-sql-brgqa1"
    else if serverType = "DEV" 
    	 //objConnection.open "provider=sqloledb;Server=s1-sql-brgdev1\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"    
    	serverName = "s1-sql-brgdev1"
    else
    	 writeReportLog("Wrong Value passed to serverType argument || : getValue_InSQLServer_HO_BasedOnServer","Failed","","")
    //Connect to DB
     objConnection.open "provider=sqloledb;Server="& serverName &"\inst_a;User Id="&homeOffice_Username&"; Password="&homeOffice_Passcode&"; Database=HomeOffice;Trusted_Connection=Yes"    
    //Write the SQL Query
    sqlQuery=query
    //Open the recordset object executing the SQL statement and update records 
    objRecordSet.Open sqlQuery,objConnection
    //Validating for Query No Results
	if objRecordSet.EOF 
		 writeReportLog("Looks Like Query >> " & query &  " did not found any record","Failed", Err.Description,"")
		ExitTest
	else
		 //splitting the name
	    arr = Split(requiredFieldName,":")
		for i = 0 To UBound(arr)
	     if i <> 0 
	     	outputString = outputString & ":"
	     requiredFieldName = objRecordSet.Fields(arr(i))
		 outputString = outputString & requiredFieldName
		//Returing the Value
		getValue_InSQLServer_HO_BasedOnServer = outputString 
    //Recordset.Close
    Set objRecordSet=nothing
    objConnection.Close
    Set objConnection=nothing    
    //Error handling 
     if GetErrorCount()>0              
         writeReportLog("Failed to getValue_InSQLServer_HO_BasedOnServer","Failed", Err.Description ,"")

//*********************************************************************
//@Method getLoanNumber_WithOut_AlliedInsuranceDate
//@Author Karthik.Shekar
//@Date 18 May 2020
//Description This function will get the Loan Number which does not Contain Allied Insurance Based based on accountType and Account Status
//@Return Loan Number	
//Modified by deepthi 
//Modified Date 15 june 2020
//Modified method to retreive null when the query result is empty
//EX: msgbox getLoanNumber_WithOut_AlliedInsuranceDate("Auto","Active")
//    msgbox getLoanNumber_WithOut_AlliedInsuranceDate("","")
//**********************************************************************
getLoanNumber_WithOut_AlliedInsuranceDate(String accountType,String acctStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //Base query
	baseQuery = "select * from bp_account_tbl where acct_id not in (select distinct(acct_id) from bp_account_ins_allied_tbl) and length(loan_nbr) > 3"
	//Constructing based on Account Type
	if ToUpper(accountType) = "MOTOR" or  accountType = "56" 
		baseQuery = baseQuery & " and acct_type = //56//"
	else if ToUpper(accountType) = "AUTO" or  accountType = "55" 
		baseQuery = baseQuery & " and acct_type = //55//"
	else if ToUpper(accountType) = "DIRECT" or  accountType = "31" 
		baseQuery = baseQuery & " and acct_type = //31//"	
	//Constructing based on Account Status
	if not(ToUpper(acctStatus) = "ANY" or Trim(acctStatus) = "" or IsNull(acctStatus)) 
		baseQuery = baseQuery & " and acct_status = //" & acctStatus & "//"
	//Writer Report Log
	  LogSuccessMessage("Query Generated in getLoanNumber_WithOut_AlliedInsuranceDate",baseQuery)
	 //Running the SQL Query and returning the value
	//getLoanNumber_WithOut_AlliedInsuranceDate = runSQLQuery_FetchMultipleValues(baseQuery,"loan_nbr")	
	getLoanNumber_WithOut_AlliedInsuranceDate = runSQLQuery_FetchMultipleValues_WithoutExit(baseQuery,"loan_nbr")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in getLoanNumber_WithOut_AlliedInsuranceDate","Failed", Err.Description ,"")

//*********************************************************************************************************
//@Method insertRowIn_bpAlliedInsuranceDataTbl
//@Date 21 May 2020
//@Description This function will insert the new row of Data into the bp_account_ins_allied_tbl
//@Input Parameter passs the Filed Name & Field Values which needs to be replaced from Standard Data using seperator ":"
//NOTE: Rec_ID value should be unique
//	   branch_id should be replaced
//EX:  insertRowIn_bpAlliedInsuranceDataTbl("rec_id:branch_id:acct_id:InsuranceExpiration",Generate_RandomNumber_UserDefind("0123456789","12") & "//0881//://088100028569//://08/13/2022//")
//    insertRowIn_bpAlliedInsuranceDataTbl("rec_id:acct_id:InsuranceExpiration",Generate_RandomNumber_UserDefind("0123456789","12") & "://088100028569//://08/13/2022//")
//	 insertRowIn_bpAlliedInsuranceDataTbl("rec_id:acct_id",Generate_RandomNumber_UserDefind("0123456789","12") & "://088100028569//")
//********************************************************************************************************
insertRowIn_bpAlliedInsuranceDataTbl(String fieldNamestoReplace,String fieldValuesToReplace)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Field Value that needs to be replaced with Standard Data
	eachFieldnameToRepalce = Split(fieldNamestoReplace,":")
	eachFieldValuesToReplace = Split(fieldValuesToReplace,":")
	//Reading Test Standard Test Data from excel sheet 
	testScriptListPath = Environment.Value("BranchPlusSQLPath") & "newDataRow_bpAlliedInsuTableData.xlsx"
	//msgbox testScriptListPath
	//Create the excel object
	Set objExcel = CreateObject("Excel.Application") 
	//objExcel.Visible = True
	Set objWorkbook = objExcel.Workbooks.Open(testScriptListPath)
	fieldNameArrary = ""
	fieldValuesArrary= ""
	for itr = 1 To 48 Step 1
		fieldNameArrary = fieldNameArrary & "," & objExcel.Cells(1,itr).Value
		//Replace the Value
		ifFieldPrest = getIndex(eachFieldnameToRepalce,objExcel.Cells(1,itr).Value)
		if ifFieldPrest > 0 
			//msgbox objExcel.Cells(1,itr).Value			
			fieldValuesArrary = fieldValuesArrary & "," & eachFieldValuesToReplace(ifFieldPrest-1)			
		else
			fieldValuesArrary = fieldValuesArrary & "," & objExcel.Cells(2,itr).Value
	fieldNameArrary = Right(fieldNameArrary,Length(fieldNameArrary)-1)
	fieldValuesArrary = Right(fieldValuesArrary,Length(fieldValuesArrary)-1)
	//close the workbook
	objWorkbook.Close
	//exit the excel program
	objExcel.Quit
	//Query
	query = "INSERT INTO bp_account_ins_allied_tbl (" & fieldNameArrary & ") VALUES ("& fieldValuesArrary &")"
	//Log Query
	 LogSuccessMessage("query to Insert Record into bp_account_Ins_allied_tbl",query)
	//Running the update Query
	 runUpdateSQLQuery(query)

//**********************************************************************************
//arryObe = "Test:Karthik:Shekar:Marlabs"
//msgbox getIndex(Split(arryObe,":"),"Marlabs")
//NOTE: THis is more of a Supporting reusable function to insertRowIn_bpAlliedInsuranceDataTbl
//*************************************************************************************
getIndex(String arraryObject,String fieldName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	found = false
	for itr = 0 To ubound(arraryObject) Step 1
		if arraryObject(itr) = fieldName 
			getIndex =  itr+1
			found = true
			Exit for
	if found = false 
		getIndex = 0

//****************************************************************************************************************
//@Method run_VSC_RefundAmount_Query_FetchValue_FromDB
//@Author Karthik.SHekar
//@Date 10 Jun 2020
//@Description this function will run the Query to Fetch the Refund Amount/Milage Refund Amt / DProRefunAmt for the details passed
//EX: run_VSC_RefundAmount_Query_FetchValue_FromDB("2020-07-13","166500004190","166500012390","74000","RefundAmt;MileageRefundAmt")
//    msgbox run_VSC_RefundAmount_Query_FetchValue_FromDB("2020-07-15","166500019436","166500057464","74000","RefundAmt")
//for Reference: Filed/Column Names in Db --> ChargeAmt,TotalDays, EarnedDays,DProRefundAmt, MileageRefundAmt, RefundAmt
//****************************************************************************************************************
run_VSC_RefundAmount_Query_FetchValue_FromDB(String refundDate,String acctID,String compID,String currentMiles,String fieldNameToget)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	vscRefundQuery = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath")&"VSC_refund_query.sql")	
	vscRefundQuery = Replace(vscRefundQuery,"@refundDate@",refundDate)
	vscRefundQuery = Replace(vscRefundQuery,"@acctID@",acctID)
	vscRefundQuery = Replace(vscRefundQuery,"@compID@",compID)
	vscRefundQuery = Replace(vscRefundQuery,"@currentMiles@",currentMiles)
	 LogSuccessMessage("VSC Refund Query Generated",vscRefundQuery)
	//Returning the Value
	run_VSC_RefundAmount_Query_FetchValue_FromDB = runSQLQuery_FetchMultipleValues_WithoutExit(vscRefundQuery, fieldNameToget)  	
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: run_VSC_RefundAmount_Query_FetchValue_FromDB","Failed", Err.Description ,"")

 //***********************************************************************************
 //@Mthoe getDealerName_BasedOnHoldBackType_ACH
 //@Description This will get the Dealer name based on the Dealer Status, Holdback Type, ACH Eanbled and Dealer State
 //@Author Karthik.SHekar
 //@Date 12 June 2020
//EX:  msgbox getDealerName_BasedOnHoldBackType_ACH_FromAppDB("Y","Reserve","N","")
	// msgbox getDealerName_BasedOnHoldBackType_ACH_FromAppDB("Y","Discount","N","SC")
	// msgbox getDealerName_BasedOnHoldBackType_ACH_FromAppDB("Y","RESERVE","Y","")
	// msgbox getDealerName_BasedOnHoldBackType_ACH_FromAppDB("Y","DISCOUNT","Y","AL")
	// msgbox getDealerName_BasedOnHoldBackType_ACH_FromAppDB("Y","RESERVE","","NC")
 //************************************************************************************** 
 getDealerName_BasedOnHoldBackType_ACH_FromAppDB(dealerStatus, holdback_Type, achEnabled, dealerState)
	//Query
	query = "select * from bp_dealer_tbl where active_yn = //"& ToUpper(dealerStatus) &"// and holdback_type = //"& ToUpper(holdback_Type) &"//"
	if ToUpper(holdback_Type) = "RESERVE" 
		query = query & " and reserve_amt <> 0.00"
	else if ToUpper(holdback_Type) = "DISCOUNT" 
		query = query & " and discount_amt <> 0.00"
	if ToUpper(achEnabled) = "Y" 
		query = query & " and dealer_id in (select tbl_id from bp_banking_tbl where active_yn = //Y//)"
	else if ToUpper(achEnabled) = "N" 
		query = query & " and dealer_id not in (select tbl_id from bp_banking_tbl where active_yn = //Y//)"
	if Length(Trim(dealerState)) > 0 
		query = query & " and state =//" & dealerState & "//"	
	//Appending Order By
	query = query & " order by rand()"
	//Returning the Value
	 dealerFetched = runSQLQuery_WithWarning_WithoutExit(query,"short_name")
	  writeReportLog("Dealer Identified is " & dealerFetched,"Passed","","")
	 getDealerName_BasedOnHoldBackType_ACH_FromAppDB = dealerFetched
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in getDealerName_BasedOnHoldBackType_ACH_FromAppDB","Failed", Err.Description,"")
 RemoveFunction
//*********************************************************************
//@Method get_DealerRepresentative_BasedOn_DealerName_FromDB
//@Date 19 July 2020
//@Author Karthik.Shekar
//@Description This fucntion will get the Dealer Representative Name Based on Dealer Name from App DB
//@Return DealerName ( Firstname LastName )
//EX: get_DealerRepresentative_BasedOn_DealerName_FromDB("Flexi ford")
//**********************************************************************
get_DealerRepresentative_BasedOn_DealerName_FromDB(String dealerName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select * from bp_dealer_rep_tbl where active_yn = //Y// and dealer_id in (select dealer_id from bp_dealer_tbl where short_name =//"& dealerName &"//)"
	//Dealer Rep Fetched from DB
	dealRep = runSQLQuery_FetchMultipleValues_WithoutExit(query,"first_name;last_name")
	//Returning the Value	
	get_DealerRepresentative_BasedOn_DealerName_FromDB = Split(dealRep,";")(0) & " " & Split(dealRep,";")(1) 
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to get_DealerRepresentative_BasedOn_DealerName_FromDB","Failed", Err.Description ,"")

//**********************************************************************************
//@Method getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB
//@Author Karthik.Shekar
//@Date 25 June 2020
//@Description THis Fucntion will get the count of Charge type based on Loan Number, ChargeType and waivedYN Status from APP DB
//msgbox getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB("087400009608","CPI_CHG","Y")
//msgbox getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB("087400009608","CPI_CHG","N")
//*******************************************************************************************
getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB(String loanNumber,String chargeType,String waivedYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run
     query = "select count(*) from bp_account_charge_tbl where acct_id in (select acct_id from bp_account_tbl where loan_nbr =//"& loanNumber &"//) and charge_type in (//"&chargeType&"//) and waived_yn =//"&waivedYN&"//"     
    //run query to fetch loan number
	 getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB = runSQLQuery_WithWarning_WithoutExit(query, "count(*)")
   if GetErrorCount()>0 
		 writeReportLog("Failed in step/getCountOfCharges_From_ChargesTable_PaymentTab_FromAPPDB","Failed", Err.Description,"")

//******************************************************************
//@MEthod run_Query_To_Skip_DealerStats_NightlyRun_AppDB
//@AUthor Karthik.Shekar
//@Description This will update the Stored Procedure in App DB to Skip the updating Dealer Stats during Nightly Batch Process which is going to spead up the Nightly Process
//@Date 30 June 2020
//Ex: run_Query_To_Skip_DealerStats_NightlyRun_AppDB()
//******************************************************************
run_Query_To_Skip_DealerStats_NightlyRun_AppDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	//	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "Skip_DealerStats_During_NightlyRun.sql")	
	filePath = Environment.Value("BranchPlusSQLPath") & "Skip_DealerStats_During_NightlyRun.sql"
	filePath = Replace(filePath,"\","/")
	//Run Sql Query
	 runUpdateSQLQuery("read //" & filePath & "//")
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: run_Query_To_Skip_DealerStats_NightlyRun_AppDB","Failed", Err.Description,"Y")

//******************************************************************
//@MEthod run_Query_To_Skip_SmallBalance_NightlyRun_AppDB
//@AUthor Karthik.Shekar
//@Description This will update the Stored Procedure in App DB to Skip the updating Small Balance Data during Nightly Batch Process which is going to spead up the Nightly Process
//@Date 30 June 2020
//Ex: run_Query_To_Skip_SmallBalance_NightlyRun_AppDB()
//******************************************************************
run_Query_To_Skip_SmallBalance_NightlyRun_AppDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "Skip_SmallBalance_During_NightlyRun.sql")	
	//Run Sql Query
	 runUpdateSQLQuery(query)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: run_Query_To_Skip_SmallBalance_NightlyRun_AppDB","Failed", Err.Description,"Y")

//*****************************************************************************************************
//@Method add_AllKindOfCharges_toAccount_FromAppDB
//@Author Karthik.Shekar
//@Date 21 July 2020
//@Description This function will add all Kind of Charges to Account 
//@Paramters loanNumber --> Loan Number to which charges needs to be added
//			processDate --> This is more of a Transaction Date which needs to be set (yyyy-mm-dd)
//EX:  add_AllKindOfCharges_toAccount_FromAppDB("088100009734","2020-09-07")
//EX:  add_AllKindOfCharges_toAccount_FromAppDB("088100009734","2020-12-08")
//******************************************************************************************************
add_AllKindOfCharges_toAccount_FromAppDB(String loanNumber,String processDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Fetching the Last Trans ID
    //lastTransId= runSQLQuery("select max(trans_id) as trans_id from bp_account_charge_tbl","trans_id")
	//lastTransId= runSQLQuery("select trans_id from bp_account_charge_tbl order by trans_id desc","trans_id")
	lastTransId = runSQLQuery("select next_value from bp_next_value_tbl where key_name = //trans_id//","next_value")
	//Account ID
	acctId = getAccountID_From_DB_basedOnLoanNumber(loanNumber)
	//Fetch Branch ID
	branchId = getBranchID_From_DB()
	//#####
	//STATE VARIATION
	//#######
	if Environment.Value("currentState") = "OH" 
		//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
		baseQuery = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "add_AllKindOfCharges_toAccount_OH.txt")	
	else
		//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
		baseQuery = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "add_AllKindOfCharges_toAccount.txt")	
	//Replacing the Account ID
	baseQuery = Replace(baseQuery,"@AcctId@",acctId)
	baseQuery = Replace(baseQuery,"@BranchID@",branchId)
	baseQuery = Replace(baseQuery,"@ProcessDate@",processDate)
	baseQuery = Replace(baseQuery,"@TransID@",lastTransId)
	//Logger
	 LogSuccessMessage("Query generated add_AllKindOfCharges_toAccount",baseQuery)
	//Run Sql Query to Insert all Charges
	 runUpdateSQLQuery(baseQuery)
	//Updating the next_Value in Transaction Table
	 nextTransID = lastTransId + 5
	 nextTransID =  Right("000000000000" & nextTransID, 12)	 
	 updateQuery = "update bp_next_value_tbl set next_value = //"& nextTransID & "// where key_name = //trans_id//"	 
	  runUpdateSQLQuery(updateQuery)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: add_AllKindOfCharges_toAccount_FromAppDB","Failed", Err.Description,"Y")

//***************************************************************************************************
//@Method getCurrentPrincipalBalanceAndInterest_for_Account
//Author Karthik.SHkear
//@Description This method willl get the Current Principal and Current Interest of the Account.
//@Date 27 Aug 2020
//  getCurrentPrincipalBalanceAndInterest_for_Account("088100029251", expPrinc, expInt )
//msgbox expPrinc
//msgbox expInt
//***************************************************************************************************
getCurrentPrincipalBalanceAndInterest_for_Account(String accountID,String ByRef expCurPrinc,String ByRef expCurInt)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "getCurrentPrincipalBalanceAndInterest_for_Account.txt")	
	//Replacing the Acct Id in Query
	query = Replace(query,"@acctID@",Trim(accountID))
	//Logger
	// writeReportLog("Query generated as part of getCurrentPrincipalBalanceAndInterest_for_Account","Passed",query,"")
	 LogSuccessMessage("Query generated as part of getCurrentPrincipalBalanceAndInterest_for_Account",query)
	//Returning the Values
	queryOutput = runSQLQuery_FetchMultipleValues_WithoutExit(query,"pend_princ_till_today;pend_int")
	//ByRef Returning the Values
	expCurPrinc = Split(queryOutput,";")(0)
	expCurInt = Split(queryOutput,";")(1)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getCurrentPrincipalBalanceAndInterest_for_Account","Failed", Err.Description ,"")

//********************************************************************************************
//@Method get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB
//@Author Karthik.Shekar
//@Description This fucntion will get teh Waived Stats from Charges Table of Payment Tab if we pass the Account ID and Transaction Number
//
//msgbox get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB("176400010993","182301")
//msgbox get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB("176400010993","182286")
//********************************************************************************************
get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB(String acctID,String transId)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select waived_yn from bp_account_charge_tbl where acct_id = //"& acctID & "// and trans_id = //"& transId & "//"
	//Returning the Value
	get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB = runSQLQuery(query,"waived_yn")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB","Failed", Err.Description,"Y")

//****************************************************************************************************************
//@Method getData_From_AlliedInsuranceTbl_BasedOnRecID_AppDb
//@Date 13 May 2020
//@Author Karthik.Shekar
//@Description this funcntion will get the Data from Allied Insurance Tbl which is there in App(ASA) DB
//@Modified By: Deepthi
//Modified to get data from the Allied Insurnace Tbl based on the rec_id 
//EX: msgbox getData_From_AlliedInsuranceTbl_AppDb("count","","") --> To get Cnt of Records
//    msgbox getData_From_AlliedInsuranceTbl_AppDb("count","088100028892","") --> to get Count of Records for a Particular Account
//    msgbox getData_From_AlliedInsuranceTbl_AppDb("rec_id:rec_date:acct_id","","") --> Fetches value of 1st Record
//    msgbox getData_From_AlliedInsuranceTbl_AppDb("rec_id:rec_date:acct_id","088100028236","rec_id") --> Filters data based on Account ID and rec_id
//****************************************************************************************************************
getData_From_AlliedInsuranceTbl_BasedOnRecID_AppDb(String requiredFields,String accountId,String rec_ID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    query = "select * from bp_account_ins_allied_tbl"
    //Special Conditon    
    if Length(Trim(accountId)) > 0 
        query = query & " where acct_id = " & accountId        
    //Count
    if ToUpper(requiredFields) = ToUpper("Count") 
        query = Replace(query,"*","count(*)")
        requiredFields = "count(*)"    
    //Special Conditon    
    if Length(Trim(rec_ID)) > 0 
        query = query & " and rec_id = " & rec_ID        
    //Logger
     LogSuccessMessage("query ; getData_From_AlliedInsuranceTbl_BasedOnRecID_AppDb",query)
    //Executing the Query Generated
    alliedDetails = runSQLQuery_FetchMultipleValues(query, requiredFields)
    getData_From_AlliedInsuranceTbl_BasedOnRecID_AppDb = alliedDetails
    //Error handling
    if GetErrorCount()>0              
         writeReportLog("Failed in Step/: getData_From_AlliedInsuranceTbl_BasedOnRecID_AppDb","Failed", Err.Description ,"")

//*****************************************************************************************
//@methodName: getAndValidate_TestURL_DebitOrCreditCard_Payment_InDB(ExpTestUrl)
//@Author Ambika
//@Date 27 May 2020
//@Description This is to get the web url from bp_credit_card_setup_tbl and validte web url
//Ex: getAndValidate_TestURL_DebitOrCreditCard_Payment_InDB()
//***********t******************************************************************************
getAndValidate_TestURL_DebitOrCreditCard_Payment_InDB()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	version = getAppVersionNumber_From_DB()
	ExpTestUrl = "https://qa-cardpayments-api.security-finance.com/qa/CardService/Services/CardService.svc"
	//handling based on version
	if Trim(Replace(version,".","")) >= 950 
		//fetching required values from db
		PmtProdUrl = runSQLQuery_FetchMultipleValues("select web_url from bp_credit_card_setup_tbl where cc_type = //PMTPROD//","web_url")
		PmtTestUrl = runSQLQuery_FetchMultipleValues("select web_url from bp_credit_card_setup_tbl where cc_type = //PMTTEST//","web_url")
		RvsProdUrl = runSQLQuery_FetchMultipleValues("select web_url from bp_credit_card_setup_tbl where cc_type = //RVSPROD//","web_url")
		RvsTestUrl = runSQLQuery_FetchMultipleValues("select web_url from bp_credit_card_setup_tbl where cc_type = //RVSTEST//","web_url")
		//validating test url
		 validateDataAndReport(PmtProdUrl,ExpTestUrl,"Validation of PMTPROD web url")
		 validateDataAndReport(PmtTestUrl,ExpTestUrl,"Validation of PMTTEST web url")
		 validateDataAndReport(RvsProdUrl,ExpTestUrl,"Validation of RVSPROD web url")
		 validateDataAndReport(RvsTestUrl,ExpTestUrl,"Validation of RVSTEST web url")
	else
		//fetching required values from db
		TestUrl = runSQLQuery_FetchMultipleValues("select web_url from bp_credit_card_setup_tbl where cc_type = //CREDIT//","web_url")
		//validating test url
		 validateDataAndReport(TestUrl,ExpTestUrl,"Validation of Credit web url")
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : getAndValidate_TestURL_DebitOrCreditCard_Payment_InDB ","Failed", Err.Description,"")

//********************************************************************************************
//@Author Karthik.Shekar
//@Description This Fucntion will set the date in Bath Process Table
//@Date 20 Aug 2020
//Ex: set_EndDate_In_Bp_Batch_Process_Tbl("ue_dealer_statistics_summ", "2000-12-31")
//********************************************************************************************
set_EndDate_In_Bp_Batch_Process_Tbl_AppDB(String eventName,String endDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	Query =  "update bp_batch_process_tbl set end_dt =//" & endDate & " 00:00:00.000// where event_name = //"& eventName & "//"
	 LogSuccessMessage("Query set_EndDate_In_Bp_Batch_Process_Tbl_AppDB >>" &  Query,"")
 	 runUpdateSQLQuery(Query)
 	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/set_EndDate_In_Bp_Batch_Process_Tbl_AppDB","Failed", Err.Description,"")

//**********************************************************************************************************************************
//@Method get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal
//@Author Karthik.Shekar
//@Description This Method will fetch the Loan number which will have the current Interest and Current principal in it for current system date based on input paramteres passed.
//			  NOTE: THis will Fail the Script if it does not find any account with above mentioned criteria
//EX: msgbox get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal("Active","55","Current","2020-01-01","2020-07-01")
//    msgbox get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal("REPO","31","Current","2020-01-01","2020-07-01")
//********************************************************************************************************************************************
get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal(String AccountStatus,String AccountTypeCode,String UI_Del_Status,String ContractFromDate,String ContractToDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Flag
	found = false
	//Iterating and Validating
	for itr = 1 To 50 Step 1
		loanNum = get_LoanNumber_FromDB_BasedOn_ContractDate(AccountStatus,AccountTypeCode,UI_Del_Status,ContractFromDate,ContractToDate)
		accntID = getAccountID_From_DB_basedOnLoanNumber(loanNum)
		 getCurrentPrincipalBalanceAndInterest_for_Account(accntID, currentPrinc, currentInt)
		//Identifying account with Current Principal and CurrInt		
		if ccur(currentPrinc) > ccur(1) and ccur(currentInt) > ccur(0) 
			found = true
//			msgbox itr
//			msgbox currentPrinc
//			msgbox currentInt
			get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal = loanNum
			Exit for
	//Validating if no loan Found
	if found = false 
		get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal = 0
		// writeReportLog("Not able to find any Loan for Current Date " & date() & " Which Contains Current Interest and Current Principal in it. Please try for different date","Failed","Looking for --> "  & AccountStatus & "," & AccountTypeCode& "," & UI_Del_Status & "," & ContractFromDate & "," &ContractToDate,"")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal ","Failed", Err.Description,"")

//*********************************************************************************************************
//@Author: Karthik Shekar
//@Method: get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB
//@Date: 09 Sep 2020
//This function is intended to get the total chargeamount from Charge Table irrespective of waive status and charge type
//CharteTYpe (for Ref) --> //LATE_CHG//	//PRINCPAL//	//COLL_CHG//	//NSF_CHRG//	//DEFERMNT//	//INTEREST//	//INT_DUE//	//LOANCONV//	//MISC_CHG//	//NSF_CHNG//	//EXCESS//	//COLL_EXP//	//CPI_CHG//
//EX: msgbox get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","")
//	msgbox get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","LATE_CHG","Y")
//	msgbox get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","LATE_CHG","N")
//	msgbox get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","Y")
//	msgbox get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","N")
//*********************************************************************************************************
get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB(String acctID,String chargeType,String waivedYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select isnull(sum(charge_amt), 0) as Sum_Chrg_Amt from bp_account_charge_tbl where charge_type not in (//INTEREST//,//PRINCPAL//) and acct_id = //"& acctID & "//"
	//Handling for Charge Type
	if Length(Trim(chargeType)) > 0 and chargeType <> "" 
		query = query & " and charge_type = //"&  chargeType &"//"
	//Handling for Waived YN
	if Length(Trim(waivedYN)) > 0 and waivedYN <> "" 
		query = query & " and waived_yn = //"&  waivedYN &"//"
	//UFT Logger
	 LogSuccessMessage("Query generated get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB",query)
	//Returning the Value
	get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB = runSQLQuery(query,"Sum_Chrg_Amt")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_SumOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB","Failed", Err.Description,"Y")

//*********************************************************************************************************
//@Author: Karthik Shekar
//@Method: get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB
//@date: 09 Sep 2020
//@Description This function is intended to get the total paid charge from Charge Table irrespective of waive status and charge type
//CharteTYpe (for Ref) --> //LATE_CHG//	//PRINCPAL//	//COLL_CHG//	//NSF_CHRG//	//DEFERMNT//	//INTEREST//	//INT_DUE//	//LOANCONV//	//MISC_CHG//	//NSF_CHNG//	//EXCESS//	//COLL_EXP//	//CPI_CHG//
//EX: msgbox get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","")
//	msgbox get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","LATE_CHG","Y")
//	msgbox get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","LATE_CHG","N")
//	msgbox get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","Y")
//	msgbox get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB("088100029099","","N")
//*********************************************************************************************************
get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB(String acctID,String chargeType,String waivedYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select isnull(sum(paid_amt), 0) as Paid_Chrg_Amt from bp_account_charge_tbl where charge_type not in (//INTEREST//,//PRINCPAL//) and acct_id = //"& acctID & "//"
	//Handling for Charge Type
	if Length(Trim(chargeType)) > 0 and chargeType <> "" 
		query = query & " and charge_type = //"&  chargeType &"//"
	//Handling for Waived YN
	if Length(Trim(waivedYN)) > 0 and waivedYN <> "" 
		query = query & " and waived_yn = //"&  waivedYN &"//"
	//UFT Logger
	 LogSuccessMessage("Query generated get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB",query)
	//Returning the Value
	get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB = runSQLQuery(query,"Paid_Chrg_Amt")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_SumOf_PaidAmt_ChargesTbl_PaymentTab_FromAppDB","Failed", Err.Description,"Y")

//*******************************************************
//@MethodName is_AgentAvailable_In_DB
//@Author Karthik.Shekar
//@Description This function wil Valdiate if the Agent is available in System or not based on its Active Status.
//@Date 11 Sep 2020
//EX: msgbox is_AgentAvailable_In_DB("Automation Tester","")
//msgbox is_AgentAvailable_In_DB("Automation Tester","N")
//msgbox is_AgentAvailable_In_DB("Karthik Shekar","Y")
//**********************************************************
is_AgentAvailable_In_DB(String agentName,String activeYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select count(*) from bp_business_agent_tbl where dba_name = //"& agentName & "//"
	if Trim(activeYN) <> "" 
		query = query & " and active_yn = //"& activeYN & "//"
	//Run the query
	cnt = runSQLQuery_WithWarning_WithoutExit(query,"count(*)")
	//Returning the Value
	if cnt = 0 
		is_AgentAvailable_In_DB = false
	else
		is_AgentAvailable_In_DB = true
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: is_AgentAvailable_In_DB","Failed", Err.Description,"")

//*******************************************************************************
//@Method get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB
//@Name Karthik.Shekar
//@Description This will get the Loan Based on Existing Payment Type(Which are not Reversed) and account Status
//@Values: PaymentTYpe --> //PAYMENT//	//DEFERMNT//	//PRINCPAL//	//CHRG_OFF//	//SETTLEMT//	//PRINCADJ//	//SMALLBAL//	//INTRNLPY//	//ADJSTMNT//
//         acctStatus --> //ACTIVE//	//APPROVED//	//APPRVCND//	//BANKRUPT//	//CANCELLD//	//CHRG_OFF//	//CHRGBANK//	//CHRGSKIP//	//DENIED//	//PAID_OUT//	//PENDING//	//REDEEMED//	//REPO//	//REVERSED//
//EX: get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB("DEFERMNT","ACTIVE")
//  get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB("SETTLEMT","CHRG_OFF")
//********************************************************************************
get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB(String paymentType,String acctStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Reading Entire File Content
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "get_LoanNumber_With_Existing_PaymentType_AppDB.txt")
	query = Replace(query,"@PMT_CLASS@",paymentType)
	query = Replace(query,"@ACCT_STATUS@",acctStatus)
	//Logger
	 LogSuccessMessage("Query get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB",query)
	//Returning the Value
	get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_LoanNumber_With_Existing_PaymentType_NotReversed_AppDB","Failed", Err.Description,"Y")

//**************************************************************
//@Method checkAndUpdate_MaxCheckNumber_Disbursement
//@Author Karthik.Shekar
//@Date 16 Sep 2020
//@Description This fucntion will update the Maximum Check Number Value in Disbursement account if  Check Number is less than 500
//EX:  checkAndUpdate_MaxCheckNumber_Disbursement()
//************************************************************
checkAndUpdate_MaxCheckNumber_Disbursement()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Fetching existing Check Number
	nextCheckNBR = runSQLQuery_WithWarning_WithoutExit("select next_check_nbr from bp_branch_banking_tbl where bank_type = //CHCKDISB//","next_check_nbr")
	//Fetching Max check Number
	max_check_nbr = runSQLQuery_WithWarning_WithoutExit("select max_check_nbr from bp_branch_banking_tbl where bank_type = //CHCKDISB//","max_check_nbr")
	//Validating and updating		
	if max_check_nbr < (nextCheckNBR + 500) 
		max_check_nbr = nextCheckNBR + 700
		 runUpdateSQLQuery("update bp_branch_banking_tbl set max_check_nbr = //"& max_check_nbr & "// where bank_type = //CHCKDISB//")
	 //Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in checkAndUpdate_MaxCheckNumber_Disbursement","Failed", Err.Description,"")

//*******************************************************************************
//@Method get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB
//@Name Shelma Joseph
//@Date 16 Sep 2020
//@Description //This function is intended to get the total count of charges from Charge Table irrespective of waive status and charge type
//CharteTYpe (for Ref) --> //LATE_CHG//    //PRINCPAL//    //COLL_CHG//    //NSF_CHRG//    //DEFERMNT//    //INTEREST//    //INT_DUE//    //LOANCONV//    //MISC_CHG//    //NSF_CHNG//    //EXCESS//    //COLL_EXP//    //CPI_CHG//
//EX: msgbox get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100028926","","")
//    msgbox get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100028926","CPI_CHG","Y")
//    msgbox get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100028926","CPI_CHG","N")
//    msgbox get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100028926","","Y")
//    msgbox get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB("088100028926","","N")
//*********************************************************************************************************
get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB(String acctID,String chargeType,String waivedYN)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    query = "select count(*) as Count_chrg_Amt from bp_account_charge_tbl where charge_type not in (//INTEREST//,//PRINCPAL//) and acct_id = //"& acctID & "//"
    //Handling for Charge Type
    if Length(Trim(chargeType)) > 0 and chargeType <> "" 
        query = query & " and charge_type = //"&  chargeType &"//"
    //Handling for Waived YN
    if Length(Trim(waivedYN)) > 0 and waivedYN <> "" 
        query = query & " and waived_yn = //"&  waivedYN &"//"
    //UFT Logger
     LogSuccessMessage("Query generated get_Suf_CountOfChargeAmt_ChargesTbl_PaymentTab_FromAppDB",query)
    //Returning the Value
    get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB = runSQLQuery(query,"Count_chrg_Amt")    
    //Error Handling
    if GetErrorCount()>0 
         writeReportLog("Failed Step/Function: get_CountOf_ChargeAmt_ChargesTbl_PaymentTab_FromAppDB","Failed", Err.Description,"Y")

//***************************************************************************************************
//@Method getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate
//Author Karthik.SHkear
//@Description This method willl get the Current Principal and Current Interest of the Account.
//@Date 22 Sep 2020
//EX:  getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate("088100029258", "2020-09-30", actCurPrinc, actCurInt)
//	msgbox actCurPrinc & " - " & actCurInt
//
//***************************************************************************************************
getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate(String accountID,String actDate,String ByRef actCurPrinc,String ByRef actCurInt)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate.txt")	
	//query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "getCurrentPrincipalBalanceAndInterest_for_Account_New.txt")	
	//Replacing the Acct Id in Query
	query = Replace(query,"@acctID@",Trim(accountID))
	query = Replace(query,"@date@",actDate)
	//Logger
	// writeReportLog("Query generated as part of getCurrentPrincipalBalanceAndInterest_for_Account","Passed",query,"")
	 LogSuccessMessage("Query generated as part of getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate",query)
	//Returning the Values
	queryOutput = runSQLQuery_FetchMultipleValues_WithoutExit(query,"pend_princ_till_today;pend_int")
	//ByRef Returning the Values
	actCurPrinc = Split(queryOutput,";")(0)
	actCurInt = Split(queryOutput,";")(1)
	//Error Handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed to getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate","Failed", Err.Description ,"")

//***************************************************************
//EX: msgbox get_RepoDate_From_AppDB("088100029258")
//***************************************************************
get_RepoDate_From_AppDB(String acctID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select date(repo_dt) as repodate,* from bp_account_tbl where acct_id = //" & acctID & "//"
	//Returning the Value
	get_RepoDate_From_AppDB = runSQLQuery(query,"repodate")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_RepoDate_From_AppDB","Failed", Err.Description,"")

//***************************************************************
//EX: msgbox get_AccountStatus_From_AppDB("088100029258")
//***************************************************************
get_AccountStatus_From_AppDB(String acctID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select acct_status as repodate,* from bp_account_tbl where acct_id = //" & acctID & "//"
	//Returning the Value
	get_AccountStatus_From_AppDB = runSQLQuery(query,"acct_status")	
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: get_RepoDate_From_AppDB","Failed", Err.Description,"")

//***************************************************************************************************************************
//@Method: get_LoanNumber_FromDB_BasedOn_ContractDate(AccountStatus,AccountTypeCode,UI_Del_Status,ContractFromDate,ContractToDate)
//@Author: Karthik
//@Date 23 Sep 2020
//@Description: This function will get the loan from DB based on contract From Date, Contract To Date, Account Status and DealerState
//Ex:  get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState("Active","55","30","NC", "2018-12-01","")
//Ex:  get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState("Active","55","30","SC", "","")
//***************************************************************************************************************************
get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState(String AccountStatus,String AccountTypeCode,String UI_Del_Status,String dealerState,String ContractFromDate,String ContractToDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    if ToUpper(AccountStatus) = "ACTIVE" 
     	 //Get ID Based on Delinquency Status and Contractual status
		  get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	     if contractFromDate <> ""  
			contractFromDate = formatDateWithSpecifiedDelimeter(contractFromDate,"YYYYMMDD","-")
			contract_FromDate = "and funding_dt >= //"&ContractFromDate&"// "
	 	if ContractToDate <> "" 
	 		 ContractToDate = formatDateWithSpecifiedDelimeter(ContractToDate,"YYYYMMDD","-")
	 		 Contract_ToDate = "and funding_dt < //"&ContractToDate&"//"
	 			//query to run 
		  //Query
 		//query = "acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode &"// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// " & contract_FromDate & contract_ToDate & "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by loan_nbr desc"
 		query = "acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode &"// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// " & contract_FromDate & contract_ToDate & "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*))"
 	else
 		 query = "acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode &"//" & contract_FromDate & contract_ToDate & "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*))"	
    //Handling for the Dealer State    
    if dealerState <> "" 
    	query =  query & " and  dealer_id in (select dealer_id from bp_dealer_tbl where state = //"& dealerState &"//)"
    //Query
 	//query = "acct_status =//" & AccountStatus & "//" & " and acct_type=//" & AccountTypeCode &"// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// " & contract_FromDate & contract_ToDate & "and acct_id in(select acct_id from bp_account_pmt_schedule_tbl group by acct_id having max(pmt_dt) >=getdate(*)) order by loan_nbr desc"
 	if Environment.Value("currentState") = "OH" 
		sqlQuery = "Select * from support.bp_account_tbl where acct_id not in (select distinct(acct_id) from bp_account_charge_tbl where charge_type = //COLL_EXP//) and " & query & " order by rand()"
	else
		sqlQuery = "Select * from support.bp_account_tbl where " & query & " order by rand()"
	//UFT Logger
	 LogSuccessMessage("Query generated get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState", sqlQuery)
    //run query to fetch loan number
	// get_LoanNumber_FromDB_BasedOn_ContractDate = runSQLQuery(sqlQuery, "loan_nbr")
	get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState = runSQLQuery_WithWarning_WithoutExit(sqlQuery, "loan_nbr")
    if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState","Failed", Err.Description,"")

//**********************************************************************************************************************************
//@Method get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState
//@Author Karthik.Shekar
//@Description This Method will fetch the Loan number which will have the current Interest and Current principal in it for current system date based on input paramteres passed.
//	NOTE: it will Return 0 if we don//t find any loans for Specified Criteria
//			  
//EX: msgbox get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState("Active","55","Current","NC","2020-01-01","2020-07-01")
//    msgbox get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState("REPO","31","Current","SC","2020-01-01","2020-07-01")
//********************************************************************************************************************************************
get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState(String AccountStatus,String AccountTypeCode,String UI_Del_Status,String dealerState,String ContractFromDate,String ContractToDate)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Flag
	found = false
	//Iterating and Validating
	for itr = 1 To 20 Step 1
		loanNum = get_LoanNumber_FromDB_BasedOn_ContractDate_DealerState(AccountStatus,AccountTypeCode,UI_Del_Status,dealerState,ContractFromDate,ContractToDate)
		accntID = getAccountID_From_DB_basedOnLoanNumber(loanNum)
		 getCurrentPrincipalBalanceAndInterest_for_Account(accntID, currentPrinc, currentInt)
		//Identifying account with Current Principal and CurrInt		
		if ccur(currentPrinc) > ccur(1) and ccur(currentInt) > ccur(0) 
			found = true
//			msgbox itr
//			msgbox currentPrinc
//			msgbox currentInt
			get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState = loanNum
			Exit for
	//Validating if no loan Found
	if found = false 
		get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal_DealerState = 0
		// writeReportLog("Not able to find any Loan for Current Date " & date() & " Which Contains Current Interest and Current Principal in it. Please try for different date","Failed","Looking for --> "  & AccountStatus & "," & AccountTypeCode& "," & UI_Del_Status & "," & ContractFromDate & "," &ContractToDate,"")
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : get_LoanNumber_From_AppDb_BasedOn_CurrentInterest_And_CurrentPrincipal ","Failed", Err.Description,"")

//*********************************************************************************************
//@methodName: update_CustomPaymentProcessingOrder_In_AppDB
//@Author Karthik
//@Date 24 Sep 2020
//@Description This is to Update the Security level less than 400 based on User Id in DB
//Ex: update_CustomPaymentProcessingOrder_In_AppDB("NC","55", "ZZZZZZZZ") ---> Active Account
//    update_CustomPaymentProcessingOrder_In_AppDB("SC","31", "REPO") ---> REP Account
//*********************************************************************************************
update_CustomPaymentProcessingOrder_In_AppDB(String state,String loanType,String accountStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") &"query_To_Update_AppDB_With_CustomPaymentOrder.txt")
	//Replace the UserID 
	query = Replace(query,"@state@",state)
	//Replace the Security Level
	query = Replace(query,"@loanType@",loanType)
	//Replace the Security Level
	query = Replace(query,"@accountStatus@",accountStatus)
	//Run Sql Query
	 runUpdateSQLQuery(query)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: update_CashDrawerUserSecurityLevel_BasedOnUser","Failed", Err.Description,"Y")

//*****************************************************************************************************
//@Method add_AllKindOfCharges_toAccount_FromAppDB
//@Author Karthik.Shekar
//@Date 08 Oct 2020
//@Description This function will add Specific Charge to Account 
//@Paramters loanNumber --> Loan Number to which charges needs to be added
//			processDate --> This is more of a Transaction Date which needs to be set (yyyy-mm-dd)
//			chargeType --> Pass the Charge Type To Insert the value
//EX:  add_SpecificCharge_toAccount_FromAppDB("088100009734","2020-09-07", "DEFERMNT")
//EX:  add_SpecificCharge_toAccount_FromAppDB("088100009734","2020-12-08","NSF_CHNG")
//******************************************************************************************************
add_SpecificCharge_toAccount_FromAppDB(String loanNumber,String processDate,String chargeType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//Fetching the Last Trans ID    
	lastTransId = runSQLQuery("select next_value from bp_next_value_tbl where key_name = //trans_id//","next_value")
	//Account ID
	acctId = getAccountID_From_DB_basedOnLoanNumber(loanNumber)
	//Fetch Branch ID
	branchId = getBranchID_From_DB()
	//Get File content from Update_CashDrawerUser_SecurityLevel_SQLQuery.txt
	baseQuery = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "add_SpecificCharge_ToAccount.txt")	
	//Replacing the Account ID
	baseQuery = Replace(baseQuery,"@AcctId@",acctId)
	baseQuery = Replace(baseQuery,"@BranchID@",branchId)
	baseQuery = Replace(baseQuery,"@ProcessDate@",processDate)
	baseQuery = Replace(baseQuery,"@TransID@",lastTransId)
	baseQuery = Replace(baseQuery,"@ChargeType@",chargeType)
	//Logger
	 LogSuccessMessage("Query generated add_SpecificCharge_toAccount_FromAppDB",baseQuery)
	//Run Sql Query to Insert all Charges
	 runUpdateSQLQuery(baseQuery)
	//Updating the next_Value in Transaction Table
	 nextTransID = lastTransId + 1
	 nextTransID =  Right("000000000000" & nextTransID, 12)	 
	 updateQuery = "update bp_next_value_tbl set next_value = //"& nextTransID & "// where key_name = //trans_id//"	 
	  runUpdateSQLQuery(updateQuery)
	//Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed Step/Function: add_SpecificCharge_toAccount_FromAppDB","Failed", Err.Description,"Y")

//******************************************************************************************************************************************************
//@MethodName: getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable()
//@Author Karthik
//@Date 12 Oct 2020
//@Description This will get the loan number from the account which contains the charges like "NSF Change// and //Collectin Charge" in it. 
//msgbox getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable("Active")
//msgbox getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable("CHRG_OFF")
//msgbox getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable("") --> Can Give Empty Value as well. That time it will not filter for acc status
//******************************************************************************************************************************************************
getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable(String accStatus)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run 
    query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "getLoanNumber_FromAcc_With_ChargesNotPresntIn_OrderTable.txt")
    //Additional Condition only when Acc Status is not null
    if Length(Trim(accStatus)) > 0 
    	query = query & " and a.acct_status =//" & accStatus & "//"
    //Appending Order by
    query = query & " order by rand()" 
    //Logger
     LogSuccessMessage("Query generated getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable",query)
    //run query to fetch loan number
	 getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable = runSQLQuery(query, "loan_nbr")
    if GetErrorCount()>0 
		 writeReportLog("Failed in step/getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable","Failed", Err.Description,"")

//************************************************************************
//@Method getLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday
//@Date 19 Oct 2020
//@Author Karthik.Shekar
//@Description This fucntion will get the Loan number from DB for the accounts which contains the Charges which are not defined in
//			Payment Processing Order Table also this will filter for account based on AccStatus and DueTodayAmt 
//EX: msgbox getLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday("Active","=", "0")
//    msgbox getLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday("Active",">", "100")
//************************************************************************
getLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday(String accStatus,String dueTodayAmtOperator,String dueTodayAmt)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	found = false
	for itr = 1 To 30 Step 1
		loanNUmber = getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable(accStatus)
		//Fetching Due TOday Amount
		actdueTodayAmt = get_TotalDueToday_Amount_FromAppDB(loanNumber)
		//msgbox actdueTodayAmt
		//Validating for Condition
		//if ccur(actdueTodayAmt) = ccur(dueTodayAmt) 
		 if eval(ccur(actdueTodayAmt) & dueTodayAmtOperator & ccur(dueTodayAmt)) 
			found = true
			getLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday = loanNUmber
			Exit for
	//Returning zero if we don//t find any loan
	if found = false 
		getLoanNumber_FromDB_With_ChargesNotPresentIn_OrderTable_Basedon_TotalDueToday = 0
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: getLoanNumber_FromAcc_With_ChargesNotPresentIn_OrderTable","Failed", Err.Description ,"")

//***************************************************************************************************************
//@MEthod get_TotalDueToday_Amount_FromAppDB
//@Author Karthik.Shekar
//@Date 19 OCt 2020
//@DEscription this method will return "Total Due Today" Amount if we pass the Loan number to it. 
//EX: msgbox get_TotalDueToday_Amount_FromAppDB("088100009734")
//***************************************************************************************************************
get_TotalDueToday_Amount_FromAppDB(String loanNumber)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run 
    query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "get_TotalDueTodayAmount_BasedOnLoanNumber_SQLQuery.txt")
	//Replaceing the LoanNumber
	query = Replace(query,"@LoanNumber",loanNumber)
	//Logger
	 LogSuccessMessage("Query Generated get_TotalDueToday_Amount_FromAppDB",query)
	//Get the Due To Day Amount from DB
	get_TotalDueToday_Amount_FromAppDB = runSQLQuery(query, "Amount Due Today")
	//Error handling
	if GetErrorCount()>0  			
		 writeReportLog("Failed in Step/: get_TotalDueToday_Amount_FromAppDB","Failed", Err.Description ,"")

//****************************************************************
//@Method isCreditBureauAvailable_AppDB
//@Description this method will Return Ture or False after checking if the Required Credit Bureau is Available in that State are not
//@Date 07 dec 2020
//@Author karthik.SHekar
//EX: msgbox 	isCreditBureauAvailable_AppDB("TRANSUN") --> Use this  to check for TRANSUNION
	//msgbox 	isCreditBureauAvailable_AppDB("EQUIFAX") --> Use this  to check for EQUIFAX
	//msgbox  isCreditBureauAvailable_AppDB("MLA_EQ") --> for MLA EQUIFAX
	//msgbox 	isCreditBureauAvailable_AppDB("TR45") --> Negative Try
//******************************************************************
isCreditBureauAvailable_AppDB(String reqBureauName)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	output = runSQLQuery("select count(*) as cnt from bp_credit_bureau_tbl where service = //"& reqBureauName &"//","cnt")
	if output = 0 
		isCreditBureauAvailable_AppDB = false
	else
		isCreditBureauAvailable_AppDB = true
	//Error
	if GetErrorCount()>0  			
		 writeReportLog("Failed to isCreditBureauAvailable_AppDB","Failed", Err.Description ,"")

//**********************************************************************************
//@Method get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType
//@Author Karthik.Shekar
//@Description
//@Date 23 Dec 2020
//EX: msgbox get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType("31") --> for Direct Loan
//	msgbox get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType("55") --> for Auto Loan
//******************************************************************************************
get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType(String accType)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
    //query to run 
    query = get_Entire_File_Content(Environment.Value("BranchPlusSQLPath") & "CPI_SQLQuery_BasedOnloan.txt")
    //Replace the account Type
    query = Replace(query,"@account_type@",accType)
    //Logger
     LogSuccessMessage("Query generated get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType",query)
    //run query to fetch loan number
	 get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType = runSQLQuery_WithWarning_WithoutExit(query, "loan_nbr")
   if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_AcctNum_From_DB_To_Add_CPI_BaseOnLoanType","Failed", Err.Description,"")

//**********************************************************************************
//@Method get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndRequestUserId_CreditTable
//@Author Ritu Tripathi
//@Description
//@Date 16 Aug 2021
//EX: get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndRequestUserId_CreditTable(Bureau,RequestUserID)
//******************************************************************************************
get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndRequestUserId_CreditTable(String Bureau,String RequestUserID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query to run
		query = "Select top 1 * from credit_report_request_tbl where credit_bureau = //"&Bureau&"// and request_userid = //"&RequestUserID&"// and customer_id IN (Select customer_id from credit_report_request_tbl where customer_id not in(0) group by customer_id having count(customer_id) = 1 order by RAND()) order by RAND()"
	requiredFieldName = "org_id:customer_id:customer_original_owner:request_userid:credit_bureau:credit_score:credit_score_type:cr_userid:output_type:account_original_owner:account_id"
	//get details from DB
	get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndRequestUserId_CreditTable = runSQLQuery_FetchMultipleValues(query, requiredFieldName)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndRequestUserId_CreditTable","Failed", Err.Description,"")

//**********************************************************************************
//@Method get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable
//@Author Ritu Tripathi
//@Description
//@Date 23 Aug 2021
//EX: get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable(Bureau,CustomerID)
//******************************************************************************************
get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable(String Bureau,String CustomerID)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	query = "Select top 1 * from credit_report_request_tbl where credit_bureau = //"&Bureau&"// and customer_id = //"&CustomerID&"// order by record_dt desc"
	requiredFieldName = "org_id:customer_id:customer_original_owner:request_userid:credit_bureau:credit_score:credit_score_type:cr_userid:output_type:account_original_owner:account_id"
	//get details from DB
	get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable = runSQLQuery_FetchMultipleValues(query, requiredFieldName)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_Details_OfCustomer_WithCreditScore_BasedOnBureauAndCustomerId_CreditTable","Failed", Err.Description,"")

//**********************************************************************************
//@Method get_BranchSetupDetails
//@Author Ritu Tripathi
//@Description This function is used to fetch the current branch and organization id from DB
//@Date 18 Aug 2021
//EX: get_BranchSetupDetails()
//******************************************************************************************
get_BranchSetupDetails()
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	query = "Select * from branch_setup_tbl;"
	requiredFieldName = "branch_id:organization_id"
	//get branch id and organization id from DB
	get_BranchSetupDetails = runSQLQuery_FetchMultipleValues(query, requiredFieldName)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/get_BranchSetupDetails","Failed", Err.Description,"")

//**********************************************************************************
//@Method pullNewCreditScore
//@Author Ritu Tripathi
//@Description This function is used to fetch the latest credit score based on credit bureau, Customer ID and Reference id
//@Date 20 Aug 2021
//EX: pullNewCreditScore("Equifax","167500035687","167500035685")
//******************************************************************************************
pullNewCreditScore(String RequiredBureau,String CustomerID,String RefID_App)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query to run
	query = "Select top 1 * from credit_report_request_tbl where credit_bureau = //"&RequiredBureau&"// and customer_id = //"&CustomerID&"// and account_id = //"&RefID_App&"// order by record_dt desc"
	requiredFieldName = "credit_score"
	//get latest pulled credit score from DB
	pullNewCreditScore = runSQLQuery(query, requiredFieldName)
	//error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in step/pullNewCreditScore","Failed", Err.Description,"")

//***********************************************************************************************************************
//@methodName: update_TestURL_bp_credit_service_ref_tbl
//@Author: Ritu
//@Date 15 September 2021
//@Description This is to updat API TEST URL in Credit Service table
//Ex:  update_TestURL_bp_credit_service_ref_tbl("ONLINE PMTS TEST","http://sfc-api-qa201")
//***********************************************************************************************************************
update_TestURL_bp_credit_service_ref_tbl(String state,String bureau,String ref_type,String ref_value)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	//query 
	//update bp_credit_service_ref_tbl set ref_value=//https://qa-creditreport-api.security-finance.com/v6/api/CreditPull// where state=//GA// and service=//EQUIFAX// and ref_type = //API URL TEST//
	query = "Update bp_credit_service_ref_tbl set ref_value =//"&ref_value&"// where state=//"&state&"// and service=//"&bureau&"// and ref_type = //"&ref_type&"//"
	//upadted query
	 runUpdateSQLQuery(query)
	//Error handling
	if GetErrorCount()>0 
		 writeReportLog("Failed in update_TestURL_bp_credit_service_ref_tbl","Failed", Err.Description,"")

//*****************************************************************************************
//@methodName: validate_TestURL_bp_credit_service_ref_tbl
//@Author Ritu
//@Date 16 September 2021
//@Description This is to get the test url from bp_credit_service_ref_tbl and validte it
//Ex: validate_TestURL_bp_credit_service_ref_tbl()
//***********t******************************************************************************
validate_TestURL_bp_credit_service_ref_tbl(String state,String bureau,String ref_type,String expected_URL)
	%FuncInfo[Desc="This is to get the test url from bp_credit_service_ref_tbl and validte it",Group="BranchPlusSQLFunctions"]
	query = "select ref_value from bp_credit_service_ref_tbl where state=//"&state&"// and service=//"&bureau&"// and ref_type = //"&ref_type&"//"
	//fetching URL from DB
	URL_InDB = runSQLQuery_FetchMultipleValues(query,"ref_value")
	//validating url
	 validateDataAndReport(URL_InDB,expected_URL,"Validation of API Test URL")
    //Error Handling
	if GetErrorCount()>0 
		 writeReportLog("Failed : validate_TestURL_bp_credit_service_ref_tbl ","Failed", Err.Description,"")

