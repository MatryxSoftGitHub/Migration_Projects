// //#####################################################################################
// //     BRANCH Functions
// //#####################################################################################
// String sCapturePath = "C:\Temp\"
// String sSSFileName = "DesktopSS_"
// String sUsername
// String sPassword
// String sNetworkUsername
// String sNetworkPasscode
// String screenShotFileName
// String sBranchPlusApp = ""
// String sBranchPlusSQLPath = ""
// String sEnvDefermentAmtRecvd = ""
// String sEnvAmtReceived = ""
// String osVersion
// String CellData
// String Promise_FutureDate,Promise_FutureDate_Time,time_period
// String Activity_Date
// 
// // //EX: call isDirectLoanApplicableF||CurrentState() 
// // //********************************************************************************************* 
// // Boolean isDirectLoanApplicableForCurrentState() 
	// // Boolean bDirectLoanApplicableForCurrentState 
	// // //handling f|| direct loan states 
	// // if (sCurrentState == "NC" || sCurrentState == "SC" || sCurrentState == "FL" || sCurrentState == "GA" ||  sCurrentState == "AL"||  sCurrentState == "OH") 
		// // bDirectLoanApplicableForCurrentState = true 
	// // else 
		// // bDirectLoanApplicableForCurrentState = false  
	// // //Err|| Handling 
	// // if (GetErrorCount() > 0) 
		// // LogError("Failed Step/Function: isDirectLoanApplicableForCurrentState") 
	// // return bDirectLoanApplicableForCurrentState
// 
// // killBranchPlusProcess()
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // //SystemUtil.CloseProcessByName "sfc_branch_plus.exe"
	// // String sProcess = "Taskkill " + "/IM " + "sfc_branch_plus.exe" +"*" + " /" + "F"
	// // System.Execute (sProcess)
	// // Sleep (2)
// 
// 
// 
// 
// // initilizeBranchPlusTest(String BranchPlusApp)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // //Kill oprn processesgetTotalPrinicpleBalance_From_PaymentTab
	// // //SystemUtil.CloseProcessByName "iexplore.exe"
	// // //SystemUtil.CloseProcessByName "chrome.exe"
	// // String sProcess1 = "Taskkill " + "/IM " + "chrome.exe" +"*" + " /" + "F"
	// // System.Execute (sProcess1)
	// // 
	// // //SystemUtil.CloseProcessByName "excel.exe"
	// // String sProcess2 = "Taskkill " + "/IM " + "excel.exe" +"*" + " /" + "F"
	// // System.Execute (sProcess2)
	// // 
	// // //SystemUtil.CloseProcessByName "sfc_branch_plus.exe"
	// // String sProcess3 = "Taskkill " + "/IM " + "sfc_branch_plus.exe" +"*" + " /" + "F"
	// // System.Execute (sProcess3)
	// // 
	// // System.Run (sBranchPlusApp)
	// // if GetErrorCount()>0 
		// // writeReportLog("Failed in initilizeBranchPlusTest","Failed", Error_Description,"")
	// // 
	// // //	Sleep (5)
		// // //individual report configuration
	// // //	Set oShell = CreateObject("Shell.Application")
	// // //	oShell.ShellExecute BranchPlusApp,,,"runas",1
	// // //	Set oShell = Nothing
	// // //	DataTable.ImportSheet System.GetEnvVar("BranchPlusSharedPath") + System.GetEnvVar("currentState")&"\TestData\Config.xlsx","Config","Global"
	// // //	LogFolder = DataTable.Value("Result_Path","Global")
	// // //	LogFolder = configureCustomReport()
	// // //Error handling
// //
// //
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// //	 
// //	appVersion = getAppVersionNumber_From_DB()
// //	buildNumber = getBuildNumber_From_DB()
// //	
// //	//TestDir = "\\sfcnas-cl-201\Shared\AUTOMATION\BranchPlus\" + currentState
// //	//Load file paths required for scripts from external XML file
// //	Environment.LoadFromFile "\\sfcnas-cl-201\Shared\AUTOMATION\BranchPlus\Global_Path_Configuration.xml"	
// //	
// //	System.GetEnvVar("BranchPlusSharedPath")
// //	
// //	//Getting Log Folder Path	
// //	System.GetEnvVar("LogFolder")= getLogFolderPath()
// //	 CopyFile(System.GetEnvVar("BranchPlusSharedPath")&"Templates\SFAutomationIndividualTest.html", System.GetEnvVar("LogFolder")&"\"&System.GetEnvVar("TestName")&".html")
// //	
// //	startTime = Time()
// //
// //	//Initilizing Test Report
// //	 InitilizeTestReport(System.GetEnvVar("LogFolder")&"\"&System.GetEnvVar("TestName")&".html",startTime,"Branch+",currentState,appVersion + " | " + buildNumber,date(),System.GetEnvVar("TestName"))
// //	
// //	initializeCustomReport = startTime
// //	//Error handling
// //	if GetErrorCount()>0 
// //		 writeReportLog("Failed in initializeCustomReport","Failed", Error_Description,"")
// //	
// //
// //
// //
// 
// // initializeCustomReport(String currentState)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // //Setting the Default Printer	
	// // setWindowsDefaultPrinter("Generic / Text Only")
	// // //Getting Required data from DB
	// // appVersion = getAppVersionNumber_From_DB()
	// // System.GetEnvVar("appVersion") = appVersion
	// // buildNumber = getBuildNumber_From_DB()
	// // TestDir = "\\sfcnas-cl-201\Shared\AUTOMATION\BranchPlus\" + currentState
	// // //Load file paths required for scripts from external XML file
	// // Environment.LoadFromFile "\\sfcnas-cl-201\Shared\AUTOMATION\BranchPlus\Global_Path_Configuration.xml"	
	// // //System.GetEnvVar("BranchPlusSharedPath")
	// // //Getting Log Folder Path	
	// // System.GetEnvVar("LogFolder")= getLogFolderPath()
	// // // CopyFile(System.GetEnvVar("BranchPlusSharedPath")&"Templates\SFAutomationIndividualTest.html", System.GetEnvVar("LogFolder")&"\"&System.GetEnvVar("TestName")&".html")
	// // //Fetching Branch ID From DB
	// // branchID = getBranchID_From_DB()
	// // //Fetching the Current UFT Version	
	// // UFTVersion = System.GetEnvVar("ProductVer")
	// // //Special Handling of Data Sheet
	// // if (DataTable.GetSheet(dtGlobalSheet).GetCurrentRow < 1 and UFTVersion <> "15.0.2") || (UFTVersion =  "15.0.2" and DataTable.GetSheet(dtGlobalSheet).GetCurrentRow = 1) 
		// // //Fetching Branch ID From DB
		// // branchID = getBranchID_From_DB()
		// // startTime = Time()
		// // //Copying FIle
		// // //*** CopyFile("\\sfcnas-cl-201\Shared\AUTOMATION\BranchPlus\Templates\SFAutomationIndividualTest.html", System.GetEnvVar("LogFolder")&"\"&System.GetEnvVar("TestName")&".html")
		// // CopyFile("\\sfcnas-cl-201\Shared\AUTOMATION\BranchPlus\Templates\SFAutomationIndividualTest.html", System.GetEnvVar("LogFolder")&"\"&System.GetEnvVar("TestName")& ""& System.GetEnvVar("TestNameSuffix")&".html")
		// // //Initilizing Test Report
		// // //*** InitilizeTestReport(System.GetEnvVar("LogFolder")&"\"&System.GetEnvVar("TestName")&".html",startTime,"Branch+",currentState + "_" + branchID,appVersion + " | " + buildNumber,date(),System.GetEnvVar("TestName"))
		// // InitilizeTestReport(System.GetEnvVar("LogFolder")&"\"&System.GetEnvVar("TestName")& ""& System.GetEnvVar("TestNameSuffix") &".html",startTime,"Branch+",currentState + "_" + branchID,appVersion + " | " + buildNumber,date(),System.GetEnvVar("TestName"))
	// // //Identifying which Suite to Execute
	// // identifySuiteToExecute()
	// // //Validate Check Number and update
	// // checkAndUpdate_MaxCheckNumber_Disbursement()
	// // //Return the startTime
	// // initializeCustomReport = startTime
	// // //Error handling
	// // if GetErrorCount()>0 
		// // writeReportLog("Failed in initializeCustomReport","Failed", Error_Description,"")
// 
// // getLogFolderPath()	
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // LogFolder = configureCustomReport()
	// // //UFT Logger
	// // LogSuccessMessage("Custom Results Folder Path",LogFolder)
	// // //Returning
	// // getLogFolderPath = LogFolder
	// // //Error handling
	// // if GetErrorCount()>0 
		// // writeReportLog("Failed in getLogFolderPath","Failed", Error_Description,"")
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// //	 
// ////	DataTable.ImportSheet System.GetEnvVar("BranchPlusSharedPath") + System.GetEnvVar("currentState")&"\TestData\Config.xlsx","Config","Global"
// ////	configureCustomReport = DataTable.Value("Result_Path","Global")
// //	DataTable.AddSheet("Config")
// //	DataTable.ImportSheet System.GetEnvVar("BranchPlusSharedPath") + System.GetEnvVar("currentState")&"\TestData\Config.xlsx","Config","Config"
// //	configureCustomReport = DataTable.Value("Result_Path","Config")
// //	//Error handling
// //	if GetErrorCount()>0 
// //		 writeReportLog("Failed in configureCustomReport","Failed", Error_Description,"")
// //	
// //
// // configureCustomReport()	
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // //	DataTable.ImportSheet System.GetEnvVar("BranchPlusSharedPath") + System.GetEnvVar("currentState")&"\TestData\Config.xlsx","Config","Global"
	// // //	configureCustomReport = DataTable.Value("Result_Path","Global")
	// // DataTable.AddSheet("Config")
	// // DataTable.ImportSheet System.GetEnvVar("BranchPlusSharedPath") + System.GetEnvVar("currentState")&"\TestData\Config.xlsx","Config","Config"
	// // //Current Host Name
	// // hostName = System.GetEnvVar("LocalHostName")
	// // //rowCnt
	// // rowCnt = DataTable.GetSheet("Config").GetRowCount	
	// // found = false
	// // //identifying the Log Folder
	// // for itr = 1 To rowCnt Step 1
		// // actHostName = DataTable.Value("LocalHostName","Config")	
		// // if hostName = actHostName 
			// // configureCustomReport = DataTable.Value("Result_Path","Config") 
			// // found = true
			// // Exit for
		// // else
			// // DataTable.GetSheet("Config").SetValue(Row
	// // //Default Value
	// // if found = false 
		// // DataTable.GetSheet("Config").SetValue(CurrentRow(1)
		// // configureCustomReport= DataTable.Value("Result_Path","Config")
	// // //Error handling
	// // if GetErrorCount()>0 
		// // writeReportLog("Failed in configureCustomReport","Failed", Error_Description,"")
// 
// //Created for Month Purpose
// // configureCustomReportMEnd()	
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //	DataTable.ImportSheet System.GetEnvVar("BranchPlusSharedPath") + System.GetEnvVar("currentState")&"\TestData\Config.xlsx","Config","Global"
// //	configureCustomReport = DataTable.Value("Result_Path","Global")
	// // DataTable.AddSheet("Config")
	// // DataTable.ImportSheet System.GetEnvVar("BranchPlusSharedPathMEnd") + System.GetEnvVar("currentState")&"\TestData\Config.xlsx","Config","Config"
	// // //Current Host Name
	// // hostName = System.GetEnvVar("LocalHostName")
	// // //rowCnt
	// // rowCnt = DataTable.GetSheet("Config").GetRowCount	
	// // found = false
	// // //identifying the Log Folder
	// // for itr = 1 To rowCnt Step 1
		// // actHostName = DataTable.Value("LocalHostName","Config")	
		// // if hostName = actHostName 
			// // configureCustomReportM= DataTable.Value("Result_Path","Config") 
			// // found = true
			// // Exit for
		// // else
			// // DataTable.GetSheet("Config").SetValue(Row
	// // //Default Value
	// // if found = false 
		// // DataTable.GetSheet("Config").SetValue(CurrentRow(1)
		// // configureCustomReportMEnd= DataTable.Value("Result_Path","Config")
	// // //Error handling
	// // if GetErrorCount()>0 
		// // writeReportLog("Failed in configureCustomReportMEnd","Failed", Error_Description,"")
// // 
// //**************************************************************************************
// //---------------------
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// //	LoginWin = Window("BranchPLUSLogon").WinEdit("txtUserName").IsPresent()
// //		if LoginWin 
// //		//Enter System user credentials
// //		Window("BranchPLUSLogon").WinEdit("txtUserName").SetValue( userName
// //		Window("BranchPLUSLogon").WinEdit("txtPassword").SetValue( userPassword
// //		//Click on OK
// //		Window("BranchPLUSLogon").WinButton("btnOK").Click()
// //		
// //		//Verify Network login Authentication
// //		NetworkLoginWindow = Window("BranchPLUSLogon").Window("NetworkLoginAuthentication").WinEdit("txtNetworkUser").IsPresent()
// //			if NetworkLoginWindow 
// //				Window("BranchPLUSLogon").Window("NetworkLoginAuthentication").WinEdit("txtNetworkUser").SetValue( NetworkUser
// //				Window("BranchPLUSLogon").Window("NetworkLoginAuthentication").WinEdit("txtNetworkPassword").SetValue( NetworkPasscode
// //				Window("BranchPLUSLogon").Window("NetworkLoginAuthentication").WinButton("btnOk").Click()
// //					winVisible = BranchPlus.IsPresent()
// //					if winVisible 
// //						 writeReportLog("Validate Branch Plus Login","Passed",FailComments,"")
// //					else
// //						 writeReportLog("Validate Branch Plus Login","Failed",FailComments,"")
// //					
// //				
// //			else
// //				//Fail Log - Branch Network Login window not displayed
// //				 writeReportLog("Branch Plus Network Login window not displayed","Failed",FailComments,"")
// //			
// //
// //		else
// //		//Fail Log - Branch System Login window not displayed
// //		 writeReportLog("Branch Plus System Login window not displayed","Failed",FailComments,"")
// //			
// //
// //*************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// //	 
// //	
// //	//Load file paths required for scripts from external XML file
// //	//Environment.LoadFromFile "\\\sfcnas-cl-201\Shared\BranchPlus\Global_Path_Configuration.xml"
// //	
// //	if w_bp_frame.WaitWhileExists(5) 
// //		
// //		//w_bp_frame.PbObject("pbname:=mdi_1")
// //		if PbWindow("w_bp_frame").PbObject("PbObject").WaitWhileExists(5) || BranchPlus.CreditDecision.WaitWhileExists(5) 
// //			//Initilize Test - Kill Previous processes and map result html file
// //			 initilizeBranchPlusTest("C:\BranchRoot\App\sfc_branch_plus\RunBranchPlus.CMD")
// //			//Login to Branch Application
// //			 Login_BranchPlus_Application()
// //			
// //			//Getting the User ID (Cashdrawer)
// //			userID = get_Existing_CashDrawer_User()
// //			
// //			//Login into Branch with Cash Drawer User
// //			 changeLogInUser(userID,"auto123")
// //			
// //		else
// //		//Login to Branch Application is not Required			
// //				
// //	else
// //		//Initilize Test - Kill Previous processes and map result html file
// //		 initilizeBranchPlusTest("C:\BranchRoot\App\sfc_branch_plus\RunBranchPlus.CMD")
// //		//Login to Branch Application
// //		 Login_BranchPlus_Application()
// //		
// //		//Getting the User ID (Cashdrawer)
// //		userID = get_Existing_CashDrawer_User()
// //		
// //		//Login into Branch with Cash Drawer User
// //		 changeLogInUser(userID,"auto123")
// //
// //	
// //	
// //	 if GetErrorCount()>0  			
// //		      writeReportLog("Failed in Step/BranchPlusLogin","Failed", Error_Description ,"")
// //	 	
// //
// //**********************************************************
// 
// //New Login Function
// // BranchPlusLogin()
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // //Load file paths required for scripts from external XML file
	// // //Environment.LoadFromFile "\\\sfcnas-cl-201\Shared\BranchPlus\Global_Path_Configuration.xml"
	// // //Handling Un Expected Dialog
	// // handle_Dialog("sfc_branch_plus\.exe","Close the program")
	// // handle_Dialog("RDP Clip Monitor","Close the program")	
	// // //Validating if there are any open windows	 
	// // if BranchPlus.WaitWhileExists(2) 
		// // //Checking if there are any child windows
		// // Set oDesc = Description.Create()
		// // oDesc("micclass").value = "PbWindow"
		// // Set objArr = BranchPlus.GetChildren(oDesc)
		// // if  objArr.count() >= 1 
		// // //Initilize Test - Kill Previous processes and map result html file
			// // initilizeBranchPlusTest("C:\BranchRoot\App\sfc_branch_plus\RunBranchPlus.CMD")
			// // //Handling Un Expected Dialog
			// // handle_Dialog("sfc_branch_plus\.exe","Close the program")
			// // handle_Dialog("RDP Clip Monitor","Close the program")
			// // //Login to Branch Application
			// // Login_BranchPlus_Application()		  	
			// // //Getting the User ID (Cashdrawer)
			// // userID = get_Existing_CashDrawer_User()
			// // //Login into Branch with Cash Drawer User
			// // changeLogInUser(userID,"auto123")		
	// // else
		// // //Initilize Test - Kill Previous processes and map result html file
		// // initilizeBranchPlusTest("C:\BranchRoot\App\sfc_branch_plus\RunBranchPlus.CMD")
		// // //Handling Un Expected Dialog
		// // handle_Dialog("sfc_branch_plus\.exe","Close the program")
		// // handle_Dialog("RDP Clip Monitor","Close the program")
		// // //Login to Branch Application
		// // Login_BranchPlus_Application()
		// // //Getting the User ID (Cashdrawer)
		// // userID = get_Existing_CashDrawer_User()
		// // //Login into Branch with Cash Drawer User
		// // changeLogInUser(userID,"auto123")
	// // //Error Handling
	// // if GetErrorCount()>0  			
			// // writeReportLog("Failed in Step/BranchPlusLogin","Failed", Error_Description ,"")
// 
// //*****************************************************************************************
// //@methodName: BranchPlusLogin_Without_CashDrawer()
// //@Author Jeevan
// //@Date 27 June 2018
// //@Description This will login to BranchPlus application with out assining Cash Drawer
// //*****************************************************************************************
// // BranchPlusLogin_Without_CashDrawer()
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // //	if w_bp_frame.WaitWhileExists(5) 
	// // //		
	// // //		//w_bp_frame.PbObject("pbname:=mdi_1")
	// // //		if PbWindow("w_bp_frame").PbObject("PbObject").WaitWhileExists(5) || BranchPlus.CreditDecision.WaitWhileExists(5) 
	// // //			//Initilize Test - Kill Previous processes and map result html file
	// // //			 initilizeBranchPlusTest("C:\BranchRoot\App\sfc_branch_plus\RunBranchPlus.CMD")
	// // //			//Login to Branch Application
	// // //			 Login_BranchPlus_Application()
	// // //		else
	// // //		//Login to Branch Application is not Required			
	// // //				
	// // //	else
	// // //		//Initilize Test - Kill Previous processes and map result html file
	// // //		 initilizeBranchPlusTest("C:\BranchRoot\App\sfc_branch_plus\RunBranchPlus.CMD")
	// // //		//Login to Branch Application
	// // //		 Login_BranchPlus_Application()
	// // //		
	// // //	
	// // // if w_bp_frame.WaitWhileExists(5) 
		// // // if BranchPlus.btnClose.WaitWhileExists(5) || BranchPlus.CreditDecision.WaitWhileExists(5)  || w_bp_frame.w_view_report.WaitWhileExists(5) 
			// // // //Initilize Test - Kill Previous processes and map result html file
			// // // initilizeBranchPlusTest("C:\BranchRoot\App\sfc_branch_plus\RunBranchPlus.CMD")
			// // // //Handling Un Expected Dialog
			// // // handle_Dialog("sfc_branch_plus\.exe","Close the program")
			// // // handle_Dialog("RDP Clip Monitor","Close the program")
			// // // //Login to Branch Application
			// // // Login_BranchPlus_Application()
		// // // else
	// // // else
		// // // //Initilize Test - Kill Previous processes and map result html file
		// // // initilizeBranchPlusTest("C:\BranchRoot\App\sfc_branch_plus\RunBranchPlus.CMD")
		// // // //Handling Un Expected Dialog
		// // // handle_Dialog("sfc_branch_plus\.exe","Close the program")
		// // // handle_Dialog("RDP Clip Monitor","Close the program")
		// // // //Login to Branch Application
		// // // Login_BranchPlus_Application()
	// // // if GetErrorCount()>0  			
		// // // writeReportLog("Failed in Step/BranchPlusLogin_Without_CashDrawer","Failed", Error_Description ,"")
// 
// //*****************************************************************************************
// //@methodName: Login_BranchPlus_Application()
// //@Author Ranjitha
// //@Date 18 June 2018
// //@Description This will login to BranchPlus application USING Support User
// ////*****************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// //	 
// //	//**************************************************************************************	
// //	loginSheetPath = System.GetEnvVar("BranchPlusSharedPath") + "\LoginDetails.xlsx"
// //
// //	//Importing Test Data from Excel Shet(specific sheet)
// //	 importSpecificSheet(loginSheetPath,"Login")
// //	
// //	user_Name = DataTable.Value("UserName","Login")
// //	password = DataTable.Value("Password","Login")
// //	network_Username = DataTable.Value("NetworkUsername","Login")
// //	network_Passcode = DataTable.Value("NetworkPasscode","Login")
// //	//**************************************************************************************
// //
// //	LoginWin = Window("BranchPLUSLogon").WinEdit("txtUserName").IsPresent()
// //		if LoginWin 
// //		//Enter System user credentials
// //		Window("BranchPLUSLogon").WinEdit("txtUserName").SetValue( user_Name
// //		Window("BranchPLUSLogon").WinEdit("txtPassword").SetValue( password
// //		//Click on OK
// //		Window("BranchPLUSLogon").WinButton("btnOK").Click()
// //		
// //		//Verify Network login Authentication
// //		NetworkLoginWindow = Window("BranchPLUSLogon").Window("NetworkLoginAuthentication").WinEdit("txtNetworkUser").IsPresent()
// //			if NetworkLoginWindow 
// //				Window("BranchPLUSLogon").Window("NetworkLoginAuthentication").WinEdit("txtNetworkUser").SetValue( network_Username
// //				Window("BranchPLUSLogon").Window("NetworkLoginAuthentication").WinEdit("txtNetworkPassword").SetValue( network_Passcode
// //				Window("BranchPLUSLogon").Window("NetworkLoginAuthentication").WinButton("btnOk").Click()
// //					//Handling Version Mismatch pop up
// //					 handle_VersionMismatch_Popup()
// //					winVisible = BranchPlus.IsPresent()
// //					if winVisible 
// //						// writeReportLog("Validate Branch Plus Login","Passed",FailComments,"")
// //					else
// //						 writeReportLog("Validate Branch Plus Login","Failed",FailComments,"")
// //					
// //				
// //			else
// //				//Fail Log - Branch Network Login window not displayed
// //				 writeReportLog("Branch Plus Network Login window not displayed","Failed",FailComments,"")
// //			
// //		else
// //		//Fail Log - Branch System Login window not displayed
// //		 writeReportLog("Branch Plus System Login window not displayed","Failed",FailComments,"")
// //			
// //		//Error Handling
// //		if GetErrorCount()>0  			
// //		 writeReportLog("Failed in Step/Login_BranchPlus_Application","Failed", Error_Description ,"")
// //	
// //
// //
// // Login_BranchPlus_Application()
	// // %FuncInfo[Desc="This will login to BranchPlus application USING Support User.",Group="BranchPlusFunctions"]
	// // String loginSheetPath
	// // Boolean bLoginWin,bNetworkLoginWindow,bwinVisible
	// // //oginSheetPath = System.GetEnvVar("BranchPlusSharedPath") + "LoginDetails.xlsx")
	// // //Importing Test Data from Excel Shet(specific sheet)
	// // //	 importSpecificSheet(loginSheetPath,"Login")
	// // // DataTable.AddSheet("Login")
	// // // DataTable.ImportSheet loginSheetPath,"Login","Login"
	// // // DataTable.GetSheet("Login").SetValue(CurrentRow 1
	// // // user_Name = DataTable.Value("UserName","Login")
	// // // password = DataTable.Value("Password","Login")
	// // // network_Username = DataTable.Value("NetworkUsername","Login")
	// // // network_Passcode = DataTable.Value("NetworkPasscode","Login")
	// // //**************************************************************************************
	// // //##############
	// // //Handling Special Case i.e, SOme Time Branch Login Window will not get identified as PBWindow.
	// // //##############
	// // String user_Name, password, network_Username, network_Passcode
	// // if BranchPLUSLogon.WaitWhileExists(5) 
		// // killBranchPlusProcess()
		// // Sleep (3)
		// // System.Run("C:\BranchRoot\App\sfc_branch_plus\RunBranchPlus.CMD")
		// // //initilizeBranchPlusTest("C:\BranchRoot\App\sfc_branch_plus\RunBranchPlus.CMD")
		// // Sleep (2)
	// // //PbWindow("Pbname:=w_bp_logon").Highlight
	// // bLoginWin = BranchPlus.CashDrawerLoginWindow.txtuserid.IsPresent()
	// // if bLoginWin == true
		// // //Enter System user credentials
		// // BranchPlus.CashDrawerLoginWindow.txtuserid.SetValue(user_Name)
		// // BranchPlus.CashDrawerLoginWindow.txtuserid.SetValue(password)
		// // //Click on OK
		// // BranchPlus.CashDrawerLoginWindow.btnOK.Click()
		// // //Verify Network login Authentication
		// // bNetworkLoginWindow =BranchPlus.CashDrawerLoginWindow.w_bp_logon_network.tx_tuserid.IsPresent()
		// // if bNetworkLoginWindow == true
			// // BranchPlus.CashDrawerLoginWindow.w_bp_logon_network.tx_tuserid.SetValue(network_Username)
			// // BranchPlus.CashDrawerLoginWindow.w_bp_logon_network.txt_password.SetValue(network_Passcode)
			// // BranchPlus.CashDrawerLoginWindow.w_bp_logon_network.btn_OK.Click()
			// // //Handling Version Mismatch pop up
			// // handle_VersionMismatch_Popup()
			// // bwinVisible = BranchPlus.IsPresent()
			// // if bwinVisible 
				// // // writeReportLog("Validate Branch Plus Login","Passed",FailComments,"")
			// // else
				// // writeReportLog("Validate Branch Plus Login","Failed",FailComments,"")
		// // else
			// // //Fail Log - Branch Network Login window not displayed
			// // writeReportLog("Branch Plus Network Login window not displayed","Failed",FailComments,"")
	// // else
		// // //Fail Log - Branch System Login window not displayed
		// // writeReportLog("Branch Plus System Login window not displayed","Failed",FailComments,"")
	// // //Removing the Data Sheet from UFT
	// // // DataTable.DeleteSheet("Login")
	// // //Error Handling
// 
// //**************************************************************************
// //@MethodName changeLogInUser
// //@Description this fucntion will help in changing the Logged into User 
// //**************************************************************************
// // changeLogInUser(String newUserId,String pwd)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // String currentState = System.GetEnvVar("currentState")
	// // BranchPlus.SetActive()
	// // UA.GenKeyEvents("<F4>")
	// // //	//Enter System user credentials
	// // //		w_bp_frame.PbWindow("Pbname:=w_bp_logon").PbEdit("pbname:=sle_userid").SetValue( user_Name
	// // //		w_bp_frame.PbWindow("Pbname:=w_bp_logon").PbEdit("pbname:=sle_password").SetValue( password
	// // //		//Click on OK
	// // //		w_bp_frame.PbWindow("Pbname:=w_bp_logon").PbButton("pbname:=cb_ok").Click()
	// //  BranchPlus.CashDrawerLoginWindow.IsPresent()
	// // 
	// // BranchPlus.CashDrawerLoginWindow.txtuserid.SetValue(newUserId)
	// // BranchPlus.CashDrawerLoginWindow.txtpassword.SetValue(pwd)  
	// // BranchPlus.CashDrawerLoginWindow.btnOK.Click()
	// // if BranchPlus.CashDrawerLoginWindow.Question.btnYes.IsPresent()
		// // //Clicking on No Button in Question.. Pop Up
		// // //.Dialog("Question").WinButton("btnNo").IsPresent()
		// // BranchPlus.CashDrawerLoginWindow.Question.btnNo.Click()
		// // Print("Login with userassigned with cash drawer " + newUserId + "Current state " + currentState + "is Successful")
	// // else
		// // LogError("Login with userassigned with cash drawer " + newUserId + "Current state " + currentState + "was Failed")
// 
// //******************************************************************
// //This will Open + Choose the Loan Type
// //@Modified By: Ranjitha
// //@Modified On: 12 June 2018
// //@Modified Description: Written the function using descriptive programming to navigate to F7 screen and choose the loan type
// //EX: chooseLoanType("Automobile Loan - Interest Bearing")
// //******************************************************************
// chooseLoanType(String loanType)
	// %FuncInfo[Desc="Written the function using descriptive programming to navigate to F7 screen and choose the loan type.",Group="BranchPlusFunctions"]
	// Sleep (3)
	// BranchPlus.SetActive()
	// AppObject dwStepWndow
	// //Navigate to choose loan type
	// UA.GenKeyEvents("<F7>")
	// //Choosing the Type of Loan
	// Sleep (2)
	// //SleepTillCreditDecisionLoads("pbname:=u_wiz_cust_loan_type")//SleepTillCreditDecisionLoads function is not there
	// if BranchPlus.CreditDecision.Finish.IsPresent()
		// dwStepWndow = BranchPlus.CreditDecision.tbldwStep
	// //crdDecision.SelectCell "#1","acct_type"
	// SetValue_PBDataWindow(dwStepWndow,"#1","acct_type",loanType)	
// 
// //**************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// // Real GetValue_PBDataWindow(AppObject tblPBDataWindow,String RowNumber,String ColumnName)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // tblPBDataWindow.HoverMouse () ()
	// // Real rGetValue_PBDataWindow = tblPBDataWindow.GetCellData(RowNumber,ColumnName)	
	// // return rGetValue_PBDataWindow
// 
// //**************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// // SetValue_PBDataWindow(AppObject tblPBDataWindow,String RowNumber,String ColumnName,String CellValue)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // //tblPBDataWindow.HoverMouse () ()
	// // Sleep (2)
	// // //if req radio is unchecked - check it
	// // String reqColumnStatus = tblPBDataWindow.GetCellData(RowNumber,ColumnName)
	// // if reqColumnStatus == CellValue 
		// // //Do nothing
	// // else
		// // tblPBDataWindow.SetValue(RowNumber,ColumnName,CellValue)
// 
// //**************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// // TypeText_PBDataWindow(AppObject tblPBDataWindow,String RowNumber,String ColumnName,String CellValue)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // if tblPBDataWindow.IsPresent()
		// // //tblPBDataWindow.HoverMouse () ()
		// // tblPBDataWindow.Click(RowNumber,ColumnName)
		// // Sleep(2)
		// // tblPBDataWindow.TypeKeys (CellValue)
// 
// //**************************************************************************************
// //This will click on  Button in Credit Decision Window
// // clickOnButton_CreditDecisionWindow()
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // //click on next
	// // BranchPlus.CreditDecision.btnNext.Click()
	// // Sleep (5)
// 
// //*********************************************************************
// //This will select the Dealer in the Credit Decision window
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// //	//select dealer
// //	 SleepTillCreditDecisionLoads("STEP 6")
// //	Set crdDecision = BranchPlus.CreditDecision.PbDataWindow("tbldwStep")
// //	 SetValue_PBDataWindow(crdDecision,"#1","dealer_id","#1")	
// //
// //
// //This will select the Dealer in the Credit Decision window
// selectDealerInfo_CreditDecisionWindow(String dealerInfo)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //select dealer
	// AppObject aoCrdDecision
	// String getdata
	// if BranchPlus.CreditDecision.tbldwStep.IsPresent()
		// aoCrdDecision = BranchPlus.CreditDecision.tbldwStep
		// for (Integer i = 1; i<=10; i++)
			// SetValue_PBDataWindow(aoCrdDecision,"#1","dealer_id","#"+ "{i}")	
			// getdata = BranchPlus.CreditDecision.tbldwStep.GetValue()//GetCellData("#1","Dealer_id")   
			// if (getdata == "" )
				// break
// 
// //*************************************************************************************************
// //@Method selectSpecificDealer_CreditDecisionWindow
// //@Date 02 Jun 2020
// //Author Karthik.Shekar
// //@Description This function will get the Values in the Component Table which will be displayed in Customer Window as well as While Creating the Loan
// //EX: msgbox selectSpecificDealer_CreditDecisionWindow(dealerName,"CreditDecision") --> While Creating Loan
// //EX msgbox selectSpecificDealer_CreditDecisionWindow(dealerName,"RefinanceCustomer") --> While refinance current customer 
// //*************************************************************************************************
// selectSpecificDealer_CreditDecisionWindow(String sDealerName,String sWindowName)
	// %FuncInfo[Desc="This function will get the Values in the Component Table which will be displayed in Customer Window as well as While Creating the Loan.",Group="BranchPlusFunctions"]
		// //select dealer
		// AppObject aoCrdDecision
		// if (sWindowName == "CreditDecision" )
			// if BranchPlus.CreditDecision.tbldwStep.IsPresent()
				// aoCrdDecision = BranchPlus.CreditDecision.tbldwStep                
				// SetValue_PBDataWindow(aoCrdDecision,"#1","dealer_id",sDealerName)              
		// else if (sWindowName == "BranchPlus" || sWindowName == "RefinanceCustomer")
			// if BranchPlus.CreditDecision.tbldwStep.IsPresent()
				// aoCrdDecision = BranchPlus.CreditDecision.tbldwStep               
				// SetValue_PBDataWindow(aoCrdDecision,"#1","dealer_id",sDealerName)              
		// else
			// LogError("Wrong //Windowname// passed to selectSpecificDealer_CreditDecisionWindow"+"Failed"+""+"")
// 
// //*********************************************************************
// //This will select the Dealer in the Credit Decision window
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// //	//select dealer
// //	 SleepTillCreditDecisionLoads("STEP 6")
// //	Set crdDecision = BranchPlus.CreditDecision.PbDataWindow("tbldwStep")
// //	 SetValue_PBDataWindow(crdDecision,"#1","dealer_id","#1")	
// //
// //
// //This will select the Dealer in the Credit Decision window
// selectDealerName_CreditDecisionWindow(String dealerName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //select dealer
	// AppObject aoCrdDecision
	// if BranchPlus.CreditDecision.tbldwStep.IsPresent()
		// aoCrdDecision = BranchPlus.CreditDecision.tbldwStep
		// TypeText_PBDataWindow(aoCrdDecision,"#1","dealer_id",dealerName)	
// 
// //*********************************************************************
// //This will enter the Applicant Details in Credit Decision Window
// // enterPrimaryApplicantDetails_CreditDecisionWindow(String lastName,String firstName,String SSN,String dob)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // Sleep (2)
	// // //Enter Last Name
	// // SleepTillCreditDecisionLoads("STEP 6")
	// // Set crdDecision = BranchPlus.CreditDecision.PbDataWindow("tbldwStep")
	// // TypeText_PBDataWindow(crdDecision,"#1","last_name",lastName)
	// // //Enter First Name
	// // TypeText_PBDataWindow(crdDecision,"#1","first_name",firstName)
	// // Sleep (2)
	// // //Enter SSN
	// // TypeText_PBDataWindow(crdDecision,"#1","ssn",SSN)
	// // Sleep (2)
	// // //Enter DOB
	// // TypeText_PBDataWindow(crdDecision,"#1","dob_dt",dob)	
	// // Sleep (2)
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to enterPrimaryApplicantDetails_CreditDecisionWindow","Failed", Error_Description ,"")
// 
// //*********************************************************************
// //This will enter the Applicant Address in Credit Decision Window
// // enterApplicantAddess_CreditDecisionWindow(String addr1,String addr2,String addr3,String zipCode )
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // //Applicant Address
	// // SleepTillCreditDecisionLoads("STEP 6")
	// // Set crdDecision = BranchPlus.CreditDecision.PbDataWindow("tbldwStep")
	// // //Set Address 1
	// // // SetValue_PBDataWindow(crdDecision,"#1","addr1",addr1)
	// // TypeText_PBDataWindow(crdDecision,"#1","addr1",addr1)
	// // //Set Address 2
	// // // SetValue_PBDataWindow(crdDecision,"#1","addr2",addr2)
	// // TypeText_PBDataWindow(crdDecision,"#1","addr2",addr2)
// //	//Set Address 3
// // //	 SetValue_PBDataWindow(crdDecision,"#1","addr3",addr3)
	// // //Enter City
	// // TypeText_PBDataWindow(crdDecision,"#1","city","CityTest")
	// // //Enter Zipcode
	// // // SetValue_PBDataWindow(crdDecision,"#1","zipcode",zipCode)	
	// // TypeText_PBDataWindow(crdDecision,"#1","zipcode",zipCode)	
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to enterApplicantAddess_CreditDecisionWindow","Failed", Error_Description ,"")
// 
// //*********************************************************************
// //This will click on the Credit Ck Button and validate if the credit report is generated.
// validateCreditCheck_CreditDecisionWindow()		
	// %FuncInfo[Desc="This will click on the Credit Ck Button and validate if the credit report is generated.",Group="BranchPlusFunctions"]
	// //Updating the Test URL for TRANSU
	// //runUpdateSQLQuery("update bp_credit_service_ref_tbl set ref_value =//https://qa-creditreport-api.security-finance.com// where ref_type = //API URL TEST// and service = //TRANSUN//")	
	// //Logger
	// writeReportLog("Updated the Test URL in bp_credit_service_ref_tbl with value //https://qa-creditreport-api.security-finance.com//","Passed","","")
	// //Identifying the Credit Bureau Type
	// //**** if State has Transunion we will be selecting Transuion irrespective of weather equifax is there || not
	// Boolean isTransUnionAvailable = isCreditBureauAvailable_AppDB("TRANSUN")
	// AppObject pbcredchkwindow
	// //Select Credit Bureau
	// if (isTransUnionAvailable == true)
		// pbcredchkwindow = BranchPlus.CreditDecision.Creditcheck.tblCreditcheck
		// pbcredchkwindow.WaitWhileExists(5)
		// if (BranchPlus.CreditDecision.Creditcheck.IsPresent())
			// //Selecting Test Server
			// BranchPlus.CreditDecision.Creditcheck.rb_Test.Select ()
		// else
			// writeReportLog("Not able the see the Option //Test Server// to perform the credit Check. Please verify","Failed","NOTE: You need to login with Support User to See the Test server Option","Y")
	// //Selecting Credit Buerea and Entering Test Customer Details	
	// if (isTransUnionAvailable )
		// //Logger
		// writeReportLog("<b> <font color=//orange//>Performing Credit Pull using //TRANS UNION// Bureau</font> </b>","Passed","","")
		// TypeText_PBDataWindow(pbcredchkwindow,"#1","bureau_id","TRANS UNION")
		// Sleep(2)
		// //enterTestCustomerDetails_CreditCheckWindow("Transunion")//enterTestCustomerDetails_CreditCheckWindowFunction is not there
	// else
		// writeReportLog("<b> <font color=//orange//>Performing Credit Pull using //EQUIFAX// Bureau</font> </b>","Passed","In this state //TRANS UNION// is not supported","")
		// TypeText_PBDataWindow(pbcredchkwindow,"#1","bureau_id","equifax")
		// Sleep (2)
		// //Enter Test Customer Details
		// //enterTestCustomerDetails_CreditCheckWindow("Equifax")//		enterTestCustomerDetails_CreditCheckWindow is not there
	// Sleep (2)
	// //Click on GEt Report Button
	// BranchPlus.CreditDecision.Creditcheck.GetReport.Click()
	// //Handle Security Alert Popup
	// handle_Level2PBWindow_DialogPopup("Credit Decision.*","Branch PLUS","Security Alert","Yes")
	// //Validating the Report
	// AppObject repObj
	// if BranchPlus.CreditReport.IsPresent()
		// repObj = BranchPlus.CreditReport.Reportdetails
	// //Fetching Report Content
	// //	
	// //verifycreditReport = BranchPlus.CreditReport..PbDataWindow("Reportdetails").GetText()
	// //Validation
	// String verifycreditReport
	// if isTransUnionAvailable 
		// verifycreditReport = GetValue_PBDataWindow(repObj,"#2","text_line")
		// //Validating for Credit Report Generation
		// validatePartialDataAndReport(verifycreditReport,"TRANSUNION CREDIT REPORT","Validate Credit Report")
	// else
		// verifycreditReport = GetValue_PBDataWindow(repObj,"#1","#2")
		// //Validating for Credit Report Generation
		// validatePartialDataAndReport(verifycreditReport,"THIS FORM PRODUCED BY EQUIFAX","Validate Credit Report")
	// //Snap SHot
	// writeReportLog("Snap shot of the Credit Report Printed","Passed", "" ,"Y")
	// //Close the Window.	
	// BranchPlus.CreditReport.Close.Click()
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to validateCreditCheck_CreditDecisionWindow","Failed", Error_Description ,"")
// 
// //*********************************************************************
// //This will click on the Credit Ck Button and validate if the credit report is generated in Co Applicant window.
// validateCreditCheck_CreditDecisionWindow_CoApplicant()
	// %FuncInfo[Desc="This will click on the Credit Ck Button and validate if the credit report is generated in Co Applicant window.",Group="BranchPlusFunctions"]
	// //Select Credit Bureau
	// AppObject pbcredchkwindow = BranchPlus.CreditDecision.Creditcheck.tblCreditcheck
	// AppObject repObj
	// BranchPlus.CreditDecision.Creditcheck.tblCreditcheck.WaitWhileExists(5)
	// //Select Equifax 
	// TypeText_PBDataWindow(pbcredchkwindow,"#1","bureau_id","equifax")
	// //Wait Untill window visiable
	// BranchPlus.CreditDecision.Creditcheck.tblCreditcheck.IsPresent()
	// Sleep(20)
	// //Highlight //Get Report// Button
	// BranchPlus.CreditDecision.Creditcheck.GetReport.HoverMouse ()
	// //Click on //Get Report// Button
	// BranchPlus.CreditDecision.Creditcheck.GetReport.Click()
	// //Clicking on Report Details Button
	// if (BranchPlus.CreditReport.Reportdetails.IsPresent())
		// //Set variable 
		// repObj = BranchPlus.CreditReport.Reportdetails
	// //Fetching Report Content
	// String verifycreditReport = GetValue_PBDataWindow(repObj,"#1","#2")
	// //Logger
	// writeReportLog("Co Applicant Credit Report has been Printed successfully","Passed",FailComments,"Y") 
	// //Click on Close Button
	// BranchPlus.CreditReport.Close.Click()
	// //Validating for Credit Report Generation
	// validatePartialDataAndReport(verifycreditReport,"THIS FORM PRODUCED BY EQUIFAX","Validate Credit Report")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to validateCreditCheck_CreditDecisionWindow_CoApplicant","Failed", Error_Description ,"")
// 
// //***********************************************************************************************
// //This will enter the Collateral Details in Credit Decision Window
// // enterCollateralDetails_CreditDecisionWindow(String vin,String descr,String make,String model,String style,String mfyear,String color,String mileage,String cylinder,String other,String tradeDesc)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // //Enter details in Collateral section
	// // SleepTillCreditDecisionLoads("STEP 6")
	// // Set crdDecision = BranchPlus.CreditDecision.PbDataWindow("tbldwStep")
	// // SetValue_PBDataWindow(crdDecision,"#1","new_yn","Yes")
	// // SetValue_PBDataWindow(crdDecision,"#1","vin",vin)
	// // TypeText_PBDataWindow(crdDecision,"#1","descr",descr)
	// // SetValue_PBDataWindow(crdDecision,"#1","make",make)
	// // SetValue_PBDataWindow(crdDecision,"#1","model",model)
	// // SetValue_PBDataWindow(crdDecision,"#1","style",style)
	// // SetValue_PBDataWindow(crdDecision,"#1","year",mfyear)
	// // SetValue_PBDataWindow(crdDecision,"#1","color",color)
	// // SetValue_PBDataWindow(crdDecision,"#1","mileage",mileage)
	// // SetValue_PBDataWindow(crdDecision,"#1","cylinder",cylinder)
	// // SetValue_PBDataWindow(crdDecision,"#1","other",other)
	// // SetValue_PBDataWindow(crdDecision,"#1","trade_in_descr",tradeDesc)
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to enterCollateralDetails_CreditDecisionWindow","Failed", Error_Description ,"")
// 
// //***********************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// enterFinanceDetails_CreditDecisionWindow(String dealerReserve,String loanAmt,String loanTerm,String intRate)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Enter value in Finance detail section
	// Sleep (3)
	// AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	// //	if System.GetEnvVar("currentState") = "NC" 
	// //		 SetValue_PBDataWindow(crdDecision,"#1","dealer_hldbck_amt",dealerReserve)
	// //	
	// SetValue_PBDataWindow(crdDecision,"#1","purch_amt",loanAmt)
	// //Log
	// writeReportLog("Requested Loan Amount: $" + loanAmt,"Passed",FailComments,"YES")
	// // SetValue_PBDataWindow(crdDecision,"#1","payment_","")		
	// SetValue_PBDataWindow(crdDecision,"#1","nbr_of_months",loanTerm)	
	// SetValue_PBDataWindow(crdDecision,"#1","int_rate",intRate)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to enterFinanceDetails_CreditDecisionWindow","Failed", Error_Description ,"")
// 
// //**********************************************************************************
// //This will validate the First Payment Date in the Credit Decision Window
// // validateFirstPaymentDate_CreditDecisionWindow()
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // SleepTillCreditDecisionLoads("STEP 6")
	// // Set crdDecision = BranchPlus.CreditDecision.PbDataWindow("tbldwStep")
	// // //Verify First payment date validation 
	// // loanDate = GetValue_PBDataWindow(crdDecision,"#1","funding_dt")
	// // firstPaymentdate = GetValue_PBDataWindow(crdDecision,"#1","first_pmt_due_dt")
	// // //Validating the Data
	// // validateDataAndReport(Cdate(firstPaymentdate),DateAdd("m",1,CDate(loanDate)),"Validate First Payment date: " + Cdate(firstPaymentdate))	
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to validateFirstPaymentDate_CreditDecisionWindow","Failed", Error_Description ,"")
// 
// //
// ////**********************************************************************************
// ////This will enter the Value in the Charge Amount Field in Credit Decision Window
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// //	  
// //	 //Enter value in charge amount fields
// //	Set crdDecision1 = BranchPlus.CreditDecision.PbDataWindow("tbldwcomponent")
// //    if System.GetEnvVar("currentState") = "FL" 
// //		 SetValue_PBDataWindow(crdDecision1,"#2","charge_amt","250")	
// //	     SetValue_PBDataWindow(crdDecision1,"#3","charge_amt","1100")
// //	else
// //		 SetValue_PBDataWindow(crdDecision1,"#1","charge_amt","250")	
// //	     SetValue_PBDataWindow(crdDecision1,"#2","charge_amt","1100")
// //		
// //	//Error Handling
// //	if GetErrorCount()>0  			
// //		 writeReportLog("Failed to enterChargeAmount_CreditDecisionWindow","Failed", Error_Description ,"")
// //		
// //
// //@Modified by : Ambika MR
// //Modify reason : Handled for 9.7.0 changes made as part of BRP-4385 date old VSC components
// //**********************************************************************************
// //This will enter the Value in the Charge Amount Field in Credit Decision Window
// enterChargeAmount_CreditDecisionWindow()
	// %FuncInfo[Desc="This will enter the Value in the Charge Amount Field in Credit Decision Window.",Group="BranchPlusFunctions"]
	// //Enter value in charge amount fields
	// AppObject crdDecision1 = BranchPlus.CreditDecision.tbldwcomponent
	// //#############################
	// //Release Specified Handling - Handled for the Changes Made in 9.7 Release as part of BRP-4385 date old VSC components
	// //#############################
	// //Fetching Release Number
	// String sAppVersionWithoutDot, sAppVersion
	// sAppVersion = System.GetEnvVar("appVersion")
	// sAppVersionWithoutDot= sAppVersion.Replace(".","").Trim()
	// Integer iAppVersionNum = Integer.Parse (sAppVersionWithoutDot)
	// if  iAppVersionNum < 970  
		// if System.GetEnvVar("currentState") == "FL" 
			// SetValue_PBDataWindow(crdDecision1,"#2","charge_amt","250")	
			// SetValue_PBDataWindow(crdDecision1,"#3","charge_amt","1100")
		// else
			// SetValue_PBDataWindow(crdDecision1,"#1","charge_amt","250")	
			// SetValue_PBDataWindow(crdDecision1,"#2","charge_amt","1100")
	// else
		// if System.GetEnvVar("currentState") == "FL" 
			// SetValue_PBDataWindow(crdDecision1,"#2","charge_amt","250")	
		// else
			// SetValue_PBDataWindow(crdDecision1,"#1","charge_amt","250")	
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to enterChargeAmount_CreditDecisionWindow","Failed", Error_Description ,"")
// 
// //**********************************************************************************
// //Selecting the Application Status in Credit Decision Window
// // setValueInApplicationStatus_CreditDecisionWindow(String applicationStatus)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // //Enter details in Application status
	// // SleepTillCreditDecisionLoads("STEP 6")
	// // Set crdDecision = BranchPlus.CreditDecision.PbDataWindow("tbldwStep")
	// // crdDecision.SelectCell "#1","app_status"
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to setValueInApplicationStatus_CreditDecisionWindow","Failed", Error_Description ,"")
// 
// //**********************************************************************************
// //Clicking on Finish Button
// // clickOnFinishButton_CreditDecisionWindow()
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // BranchPlus.CreditDecision.PbButton("Finish").Click()
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to clickOnFinishButton_CreditDecisionWindow","Failed", Error_Description ,"")
// 
// //********************************************************************************
// //This will handel the USPS Window
// // handleUSPSWindow()
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // if BranchPlus.CreditDecision.PbWindow("USPS_Window").IsPresent() 
		// // BranchPlus.CreditDecision.PbWindow("USPS_Window").PbButton("btnUseAddressAbove").Click()
		// // // writeReportLog("USPS Window appeared and Handeled","Passed","","")	
// 
// //This will handel the USPS Window for Applicant
// handleUSPSWindow_Applicant()
	// %FuncInfo[Desc="This will handel the USPS Window for Applicant.",Group="BranchPlusFunctions"]
	// if BranchPlus.CreditDecision.USPS_Window.IsPresent() 
		// BranchPlus.CreditDecision.USPS_Window.btnUseAddressAbove.Click()
		// writeReportLog("USPS Window for Applicant appeared and Handeled","Passed","","")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to handleUSPSWindow_Applicant","Failed", Error_Description ,"")
// 
// //********************************************************************************
// //This will Open the Maintenance Window  by Pressing the F2 Key and Search with SSN 
// // openMaintenanceAndSearchWithSSNNumber(String ssn)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // Sleep (5)
	// // BranchPlus.SetActive()
	// // sendKeys("{F2}")
	// // Sleep (2	)
	// // if BranchPlus.PbWindow("CustomerSearchWindow").PbDataWindow("dw_search").IsPresent() 
		// // BranchPlus.PbWindow("CustomerSearchWindow").PbDataWindow("dw_search").SetValue(CellData "#1","ssn",ssn
		// // BranchPlus.PbWindow("CustomerSearchWindow").PbButton("btnOK").Click()
		// // writeReportLog("Search With SSN Number >> " + "******" + RIGHT(ssn,4) ,"Passed","","")
	// // else
		// // writeReportLog("Search With SSN Number >> " + "******" + RIGHT(ssn,4),"Failed","","")
	// // Sleep(5)
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to openMaintenanceAndSearchWithSSNNumber","Failed", Error_Description ,"")
// 
// //********************************************************************************
// //This will Select the Value in "App Source" field undr Account Tab in F2 Window
// selectAppSource_AccountTab(String valueToSelect)
	// %FuncInfo[Desc="This will Select the Value in App Source field undr Account Tab in F2 Window.",Group="BranchPlusFunctions"]
	// // BranchPlus.CustomerF2Window.dw_acct.Check CheckPoint("dw_acct")
	// AppObject aoAcctPbWindow
	// if (BranchPlus.CustomerF2Window.dw_acct.WaitWhileExists(5))
		// aoAcctPbWindow = BranchPlus.CustomerF2Window.dw_acct
		// TypeText_PBDataWindow(aoAcctPbWindow,"#1","app_source",valueToSelect)
	// else
		// writeReportLog("Selecting App Source Value >> " + valueToSelect,"Failed","","")		
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to selectAppSource_AccountTab","Failed", Error_Description ,"")
// 
// //********************************************************************************
// //This will Click on the Save Button
// // clickOnSaveButon()
	// // %FuncInfo[Desc="This will Click on the Save Button",Group="BranchPlusFunctions"]
	// // BranchPlus.InsightObject("btnSave").Click()
	// // Sleep (5)
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to clickOnSaveButon","Failed", Error_Description ,"")
// 
// //********************************************************************************
// //This will set the values in the Fields US Resident Radio BUton, credit Score + Email
// // setValuesIn_CustomerTab(String USResident,String creditScore,String Email)
	// // %FuncInfo[Desc="This will set the values in the Fields US Resident Radio BUton, credit Score + Email",Group="BranchPlusFunctions"]
	// // //BranchPlus.CustomerF2Window.PbDataWindow("dw_cust").Check CheckPoint("dw_cust")
	// // if Err.count <> 0 
	// // Sleep (5)
	// // Set custTabPbWindow = BranchPlus.CustomerF2Window.PbDataWindow("dw_cust")
	// // if custTabPbWindow.IsPresent() 
		// // SetValue_PBDataWindow(custTabPbWindow,"#1","us_resident_yn",USResident)
		// // SetValue_PBDataWindow(custTabPbWindow,"#1","credit_score",creditScore)
		// // SetValue_PBDataWindow(custTabPbWindow,"#1","email",Email)
		// // //Logger
		// // writeReportLog("Updated the data in the Fields USResident, Credit Score + Email","Passed","","")
	// // else
		// // writeReportLog("Customer Tab in F2 Window did not get Loaded. Please check ", "Failed","","")		
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to setValuesIn_CustomerTab","Failed", Error_Description ,"")
// 
// //********************************************************************************
// //This will Navigate to Specified Tab
// // navigateToTab(String tabName)
	// // %FuncInfo[Desc="This will Navigate to Specified Tab",Group="BranchPlusFunctions"]
	// // BranchPlus.CustomerF2Window.PbTabStrip("TabStripe").Select tabName
	// // Sleep (3)
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to navigateToTab","Failed", Error_Description ,"")
// 
// //********************************************************************************
// //This will set the Values in the Budget Tab
// // enterValuesIn_BudgetTab(String monthlyInc1,String monthlyInc2,String montlyPay1,String montlyPay2,String montlyPay3,String montlyPay4)
	// // %FuncInfo[Desc="This will set the Values in the Budget Tab",Group="BranchPlusFunctions"]
	// // //BranchPlus.CustomerF2Window.PbDataWindow("dw_budget").Check CheckPoint("dw_budget")
	// // if Err.count <> 0 
		// // //Ignoring the Error
	// // Set budgetPBWindow = BranchPlus.CustomerF2Window.PbDataWindow("dw_budget")
	// // if budgetPBWindow.IsPresent() 
		// // SetValue_PBDataWindow(budgetPBWindow,"#1","monthly_income",monthlyInc1)
		// // SetValue_PBDataWindow(budgetPBWindow,"#2","monthly_income",monthlyInc2)
		// // SetValue_PBDataWindow(budgetPBWindow,"#3","monthly_payment",montlyPay1)
		// // SetValue_PBDataWindow(budgetPBWindow,"#4","monthly_payment",montlyPay2)
		// // SetValue_PBDataWindow(budgetPBWindow,"#5","monthly_payment",montlyPay3)
		// // SetValue_PBDataWindow(budgetPBWindow,"#6","monthly_payment",montlyPay4)		
		// // //Logger
		// // writeReportLog("Data in the Budget Tab has been updated","Passed","","")
	// // else
		// // writeReportLog("Budget Tab in F2 Window did not get Loaded. Please check ", "Failed","","")		
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to enterValuesIn_BudgetTab","Failed", Error_Description ,"")
// 
// //********************************************************************************
// //This will click on the "First" Button
// clickButton_First()
	// %FuncInfo[Desc="This will click on the First Button.",Group="BranchPlusFunctions"]
	// BranchPlus.btnFirst.Click()
// 
// //********************************************************************************
// //This will click on the "Add Row" Button
// // clickButton_AddRow()
	// // %FuncInfo[Desc="This will click on the "Add Row" Button",Group="BranchPlusFunctions"]
	// // BranchPlus.InsightObject("btnAddRow").Click()
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to clickButton_AddRow","Failed", Error_Description ,"")
// 
// //********************************************************************************
// //This will Add the Reference Details in Reference Tab
// // addReferenceDetails_ReferenceTab(String rowNum,String referenceType,String firstName,String lastName,String homePhone,String cellPhone,String otherPhone)
	// // %FuncInfo[Desc="This will Add the Reference Details in Reference Tab",Group="BranchPlusFunctions"]
	// // Set refPBWindow =BranchPlus.CustomerF2Window.PbDataWindow("dw_list_reference") 
	// // if refPBWindow.IsPresent() 
		// // Set refPBWindow =BranchPlus.CustomerF2Window.PbDataWindow("dw_list_reference")
		// // SetValue_PBDataWindow(refPBWindow, rowNum, "cust_ref_type", referenceType)
		// // TypeText_PBDataWindow(refPBWindow, rowNum, "first_name", firstName)
		// // TypeText_PBDataWindow(refPBWindow, rowNum, "last_name", lastName)
		// // SetValue_PBDataWindow(refPBWindow, rowNum, "phone1", homePhone)
		// // SetValue_PBDataWindow(refPBWindow, rowNum, "phone2", cellPhone)
		// // SetValue_PBDataWindow(refPBWindow, rowNum, "phone3", otherPhone)
		// // //Logger
		// // writeReportLog("New Reference " + rowNum + " has been Added >>" + lastName + "," + firstName ,"Passed","","")
	// // else
		// // writeReportLog("Reference Tab in F2 Window did not get Loaded. Please check ", "Failed","","")		
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to addReferenceDetails_ReferenceTab","Failed", Error_Description ,"")
// 
// //********************************************************************************
// //This will enter the mandatory information in the Insurance Tab
// // enterInsuranceDetails_InsuranceTab(String rowNum,String companyName,String PolicyNumber,String startDate,String endDate)
	// // %FuncInfo[Desc="This will enter the mandatory information in the Insurance Tab",Group="BranchPlusFunctions"]
	// // BranchPlus.CustomerF2Window.PbDataWindow("dw_insurance").Check CheckPoint("dw_insurance")
	// // Set insPBWindow = BranchPlus.CustomerF2Window.PbDataWindow("dw_insurance")
	// // if insPBWindow.IsPresent() 
		// // Set insPBWindow = BranchPlus.CustomerF2Window.PbDataWindow("dw_insurance")
		// // SetValue_PBDataWindow(insPBWindow,rowNum,"company_name",companyName)
		// // SetValue_PBDataWindow(insPBWindow,rowNum,"policy_nbr",PolicyNumber)
		// // TypeText_PBDataWindow(insPBWindow,rowNum,"start_dt",startDate)
		// // TypeText_PBDataWindow(insPBWindow,rowNum,"end_dt",endDate)
		// // //Logger
		// // writeReportLog("New Insurance " +  rowNum + " has been added","Passed","","")
	// // else
		// // writeReportLog("Insurance Tab in F2 Window did not get Loaded. Please check ", "Failed","","")	
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to enterInsuranceDetails_InsuranceTab","Failed", Error_Description ,"")
// 
// //********************************************************************************
// //This will select the Value in the Status Select List in F2 window Account Tab
// // changeAccountStatus_InAccountTab(String accStatus)
	// // %FuncInfo[Desc="This will select the Value in the Status Select List in F2 window Account Tab",Group="BranchPlusFunctions"]
	// // BranchPlus.CustomerF2Window.dw_acct.Check CheckPoint("dw_acct")
	// // Sleep (1)
	// // BranchPlus.CustomerF2Window.dw_acct.SetValue(CellData "#1","acct_status",accStatus
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to changeAccountStatus_InAccountTab","Failed", Error_Description ,"")
// 
// //********************************************************************************
// //This will click on Process Button
// // clickButton_Process()
	// // %FuncInfo[Desc="This will click on Process Button",Group="BranchPlusFunctions"]
	// // BranchPlus.InsightObject("btnProcess").Click()
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to clickButton_Process","Failed", Error_Description ,"")
// 
// //********************************************************************************
// //This will click on Process Button and Enter the Check Description + Handels Check Number Popup
// processLoan_ToMakeActive()
	// %FuncInfo[Desc="This will click on Process Button and Enter the Check Description + Handels Check Number Popup.",Group="BranchPlusFunctions"]
	// clickButton_Process()
	// //for Joint Customer Popup
	// // clickButton_Level1PBwindow_DP("Process Loan Validation","Yes")
	// //Validation as part of the BRP-2784
	// if BranchPlus.w_acct_loan_disclosure.IsPresent()
		// writeReportLog("Process Loan Validation Pop Up is dispalyed","Failed","","")
	// BranchPlus.w_acct_loan_disclosure.btnOK.Click()	
	// BranchPlus.w_acct_loan_disclosure.w_message.btnYes.Click()
	// //CheckBook 
	// AppObject aoDwList = BranchPlus.w_checkbook_pmt_split.dw_list
	// if BranchPlus.w_checkbook_pmt_split.IsPresent()
		// SetValue_PBDataWindow (aoDwList, "#1","reason","Automation Testing")
	// //Validating if Split Check is available
	// String splitChkText = GetValue_PBDataWindow(aoDwList,"#2","compute_2")
	// if (splitChkText.Trim() == "SPLIT Check" )
		// //w_bp_frame.PbWindow("pbname:=w_checkbook_pmt_split").PbDataWindow("pbname:=dw_list").SetValue(CellData "#2","pay_to",payToName
		// SetValue_PBDataWindow(aoDwList, "#2","reason","Automation Testing")
	// //Clickin on Process Button
	// BranchPlus.w_checkbook_pmt_split.btnProcess.Click()
	// Sleep (30)
	// //Click on Mailing validation dailog -- 9.2.0 Release handled
	// handle_PbWindow("w_message","OK")
	// //Handeling Check Number Popup
	// if BranchPlus.NextCheckNumberPopUp.IsPresent()
		// BranchPlus.NextCheckNumberPopUp.btnYes.Click()
	// //Handling Multiple Checks
	// if BranchPlus.NextCheckNumberPopUp.WaitWhileExists(30) 
		// BranchPlus.NextCheckNumberPopUp.btnYes.Click()
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to processLoan_ToMakeActive","Failed", Error_Description ,"")
// 
// //********************************************************************************
// //This will fetch the Loan Account Number generated
// // getLoanNumbeGenerated_AccountTab()	
	// // %FuncInfo[Desc="This will fetch the Loan Account Number generated",Group="BranchPlusFunctions"]
	// // Set custTable = BranchPlus.CustomerF2Window.dw_acct
	// // //	AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// // custTable.IsPresent()
	// // loanAccNumber = 0
	// // Sleep (5)
	// // for itr = 1 To 200 Step 1
		// // loanAccNumber =  GetValue_PBDataWindow(custTable,"#1","cf_loan_nbr")
		// // if loanAccNumber <> "Loan Not Processed" 
			// // // writeReportLog("Loan Account Number: " + loanAccNumber,"Passed",FailComments,"YES")
			// // Exit for	
	// // if GetErrorCount()>0 	
		// // writeReportLog("Failed to getLoanNumbeGenerated_AccountTab","Failed", Error_Description ,"")
	// // getLoanNumbeGenerated_AccountTab = loanAccNumber
// 
// //********************************************************************************
// closeBranchApplication()
	// %FuncInfo[Desc="This will fetch the Loan Account Number generated",Group="BranchPlusFunctions"]
	// if (BranchPlus.btnClose. WaitWhileExists(5))
			// BranchPlus.btnClose.Click()
	// Sleep (3)
	// //Closing Branch App
	// killBranchPlusProcess()
	// //Handling Un Expected Dialog
	// handle_Dialog("sfc_branch_plus\.exe","Close the program")
	// handle_Dialog("RDP Clip Monitor","Close the program")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to closeBranchApplication","Failed", Error_Description ,"")
// 
// //******************************************************************************************************************
// //This will click on the Refresh Button
// clickButton_Refresh()
	// %FuncInfo[Desc="This will click on the Refresh Button.",Group="BranchPlusFunctions"]
	// BranchPlus.btnRefresh.Click()
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to clickButton_Refresh","Failed", Error_Description ,"")
// 
// //******************************************************************************************************************
// clickButton_Find()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if BranchPlus.btnFind.IsPresent()
		// BranchPlus.btnFind.Click()
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to clickButton_Find","Failed", Error_Description ,"")
// 
// //******************************************************************************************************************
// //This will get the Reference ID from the Account Tab
// String getReferenceID_AccountTab()
	// %FuncInfo[Desc="This will get the Reference ID from the Account Tab.",Group="BranchPlusFunctions"]
	// AppObject custTable = BranchPlus.CustomerF2Window.dw_acct
	// if ( BranchPlus.CustomerF2Window.dw_acct.IsPresent())
	// String refID =  GetValue_PBDataWindow(custTable,"#1","acct_id")
	// writeReportLog("Loan Reference ID:" + refID,"Passed",FailComments,"")
	// return refID
// //******************************************************************************* 
// //This will click on "x" Close button
// // closeCurrentWindow()
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // Sleep(3)
	// // BranchPlus.btnClose.Click()
	// // Sleep(3)
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to closeCurrentWindow","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //This function will exit the Branch Plus App
// exitBranchPlusApp()
	// %FuncInfo[Desc="This function will exit the Branch Plus App.",Group="BranchPlusFunctions"]
	// Sleep (5) // Waiting till all the Process of Branch + Gets completed before exiting
	// BranchPLUS.MenuItemBar.file.Exit.Select()
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to exitBranchPlusApp","Failed", Error_Description ,"")
	// 
// getActiveLoginUserDetails(String userName, String pwd)
	// %FuncInfo[Desc="This function will exit the Branch Plus App.",Group="BranchPlusFunctions"]
	// userName = runSQLQuery("select userid from bp_employee_tbl where empl_type = //16A// and empl_status=//ACTIVE//;","userid")
	// pwd =runSQLQuery("select password from bp_employee_tbl where empl_type = //16A// and empl_status=//ACTIVE//;","password")	
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to getActiveLoginUserDetails","Failed", Error_Description ,"")
// //Wait till Credt Decision Loads
// // waitTillCreditDecisionLoads(String expectedTitle)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // AppObject aocrdDecision
	// // String sGetwinTitle
	// // for(Integer i=1; i<=10; i++)
		// // //Get Window Title
		// // aocrdDecision = BranchPlus.CreditDecision
		// // sGetwinTitle = aocrdDecision.GetAttr("Text")
			// // if sGetwinTitle.IndexOf(expectedTitle) > 0 
				// // break
// 
// //Click on //Add Row// Button
// // // Click_Add_Row_Button()
	// // // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // // //Click on //Add Row// Button
	// // // BranchPlus.CreditDecision.btnNext.Click()
// 
// //This will enter the Co-Applicant Details in Credit Decision Window
// // // enter_Co_ApplicantDetails_CreditDecisionWindow(String row_Num,String lastName,String firstName,String SSN,String dob,String applicant_type)
	// // // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // // AppObject aoCrdDecision1
	// // // //Create Object for Data Window
	// // // aoCrdDecision1 = CreditDecisionSTEP.CoApplicantTable
	// // // //Select Type
	// // // TypeText_PBDataWindow(aoCrdDecision1,row_Num,"affil_type",applicant_type)
	// // // //Enter Last Name
	// // // TypeText_PBDataWindow(aoCrdDecision1,row_Num,"last_name",lastName)
	// // // //Enter First Name
	// // // TypeText_PBDataWindow(aoCrdDecision1,row_Num,"first_name",firstName)
	// // // //Enter SSN
	// // // // SetValue_PBDataWindow(crdDecision1,row_Num,"ssn",SSN)
	// // // TypeText_PBDataWindow(aoCrdDecision1,row_Num,"ssn",SSN)
	// // // //Enter DOB
	// // // // SetValue_PBDataWindow(crdDecision1,row_Num,"dob_dt",dob)
	// // // TypeText_PBDataWindow(aoCrdDecision1,row_Num,"dob_dt",dob)
	// // // //Error Handling
	// // // if GetErrorCount()>0  			
		// // // writeReportLog("Failed to enter_Co_ApplicantDetails_CreditDecisionWindow","Failed", Error_Description ,"")
// 
// //This will enter the Co_Applicant Address in Credit Decision Window
// // // enter_Co_ApplicantAddess_CreditDecisionWindow(String row_num,String addr1,String zipCode)
	// // // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // // AppObject aoCrdDecision1
	// // // //Co-Applicant Address	
	// // // aoCrdDecision1 = CreditDecisionSTEP.CoApplicantTable
	// // // //Set Address 1
	// // // SetValue_PBDataWindow(aoCrdDecision1,row_num,"addr1",addr1)	
	// // // //Enter Zipcode
	// // // SetValue_PBDataWindow(aoCrdDecision1,row_num,"zipcode",zipCode)	
	// // // //Error Handling
// 
// //Click on Applicant Credit Check
// Click_Applicant_Credit_Check()
	// %FuncInfo[Desc="Click on Applicant Credit Check.",Group="BranchPlusFunctions"]
	// //Click on //Credit Chk// Button
		// Sleep(3)
		// BranchPlus.btnCreditChk.HoverMouse()
		// BranchPlus.btnCreditChk.Click()		
		// //Error Handling
// //Click on Co_Applicant Credit Check
// Click_Co_Applicant_Credit_Check()
	// %FuncInfo[Desc="Click on Co_Applicant Credit Check.",Group="BranchPlusFunctions"]
	// //Click on //Credit Chk// Button
	// BranchPlus.btnCreditChk_CoApplication.HoverMouse ()
	// BranchPlus.btnCreditChk_CoApplication.Click()	
// //This will handel the USPS Window for Co-Applicant
// // // handleUSPSWindow_CoApplicant()
	// // // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // // if BranchPlus.CreditDecision.USPS_Window.IsPresent() 
		// // // BranchPlus.CreditDecision.USPS_Window.btnUseAddressAbove.Click()
		// // // Print("USPS Window for Co-Applicant appeared and Handeled","Passed")
	// // // else
		// // // LogError("USPS Window for Co-Applicant does not exist if Failed")
	// // // 
// //Update CoApplicant Details
// // // Update_CoApplicant_Details(String row_num,String Co_Applicant_Last_Name,String Co_Applicant_First_Name,String Co_Applicant_SSN,String Co_Applicant_DOB,String customer_Type)
	// // // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // // //Select //Add Row// Button
	// // // Click_Add_Row_Button()
	// // // //Enter Co-Applicant Details in Credit Decision Window
	// // // enter_Co_ApplicantDetails_CreditDecisionWindow(row_num,Co_Applicant_Last_Name,Co_Applicant_First_Name,Co_Applicant_SSN,Co_Applicant_DOB,customer_Type)
	// // // //Error Handling
// 
// //Select Cell in CoApplicant Window
// // Select_Cell_CoApplicant_Window(String rowNum,String colName)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // //Select Cell in CoApplicant Window
	// // AppObject aoCoAppWnd = CreditDecisionSTEP.CoApplicantTable
	// // Select_PBDataWindow(aoCoAppWnd, rowNum,colName)
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to Select_Cell_CoApplicant_Window","Failed", Error_Description ,"")
// 
// //@Author Devaraju
// //@Date 20 Apr 2018
// //@Description This is to Validate the Dual Loan SSN Number
// //@Param SSNNumber--> SSN Number
// //Ex  ValidateDualLoanSSN("503765393")
// // ValidateDualLoan_SSN(String SSNNumber)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // if BranchPlus.CreditDecision.PbWindow("pbname:=w_message", "regexpwndtitle:=Branch PLUS").WaitWhileExists(5) 
	// // writeReportLog("Looks Like there is already a Customer on file with the above SSN Number"& SSNNumber,"Failed",FailComments,"")
	// // BranchPlus.CreditDecision.PbWindow("pbname:=w_message").PbButton("pbname:=cb_1").Click()   
	// // ExitTest
	// // //Error Handling
		// // if GetErrorCount()>0  			
			// // writeReportLog("Failed to ValidateDualLoan_SSN","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: select_Account_Type_Stats_Page(accountType)
// //@Author Ranjitha
// //@Date 11 June 2018
// //@Description This is will select the Account type in Stats page
// //Ex:  select_Account_Type_Stats_Page(Automobile Loan - Interest Bearing")
// //********************************************************************************************************
// select_Account_Type_Stats_Page(String accountType)
	// %FuncInfo[Desc="This is will select the Account type in Stats page.",Group="BranchPlusFunctions"]
	// //Select account type
	// AppObject aoDw_Search = w_bp_frame.CreditDecisionSearchWindow.dw_search
	// SetValue_PBDataWindow(aoDw_Search, "#1","acct_type",accountType)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/select_Account_Type_Stats_Page","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: select_Period_Type_Stats_Page(periodName)
// //@Author Ranjitha
// //@Date 11 June 2018
// //@Description This is will select the period type in Stats page
// //Ex:  select_Period_Type_Stats_Page("Daily")
// //********************************************************************************************************
// select_Period_Type_Stats_Page(String periodName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Select period
	// AppObject apDwSearch = w_bp_frame.CreditDecisionSearchWindow.dw_search
	// SetValue_PBDataWindow(apDwSearch, "#1","period_type",periodName)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/select_Period_Type_Stats_Page","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: clickButton_InWindow(windowName,buttonName)
// //@Author Ranjitha
// //@Date 11 June 2018
// //@Description This is will Click on the button wrt to window name
// //Ex:  clickButton_InWindow("w_search","Ok")
// //********************************************************************************************************
// clickButton_InWindow(String sWindowName,String sButtonName)
	// %FuncInfo[Desc="This is will Click on the button wrt to window name.",Group="BranchPlusFunctions"]
	// String sW_Bp_Frame = "w_bp_frame"
	// if ($sW_Bp_Frame.$sWindowName.$sButtonName.WaitWhileExists(15))
		// $sW_Bp_Frame.$sWindowName.$sButtonName.Click()
	// else
		// writeReportLog("Failed to Click on Button : " + sButtonName + " in window: " + sWindowName,"Failed",FailComments,"Button not found")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/clickButton_InWindow","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: Click_Button_Search_Window(buttonName)
// //@Author Ranjitha
// //@Date 11 June 2018
// //@Description This is will Click on the button in search window
// //Ex: Click_Button_Search_Window("Ok")
// //********************************************************************************************************
// Click_Button_Search_Window(String buttonName)
	// %FuncInfo[Desc="This is will Click on the button in search windo.",Group="BranchPlusFunctions"]
	// //Click on Button
	// clickButton_InWindow("w_search",buttonName)	
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/Click_Button_Search_Window","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: capture_Smileys_In_StatisticsReport()
// //@Author Ranjitha
// //@Date 11 June 2018
// //@Description This is will Capture the smileys in Stats page
// //Ex:  capture_Smileys_In_StatisticsReport()
// //********************************************************************************************************
// capture_Smileys_In_StatisticsReport()
	// %FuncInfo[Desc="This is will Capture the smileys in Stats page.",Group="BranchPlusFunctions"]
	// //Before Scrolling
	// Sleep (5)
	// waitTillMessageAppearsInStatusBar("Ready")
	// BranchPlus.Statistics_Report.IsPresent()
	// if w_bp_frame.ReportsFrame.dw_report.WaitWhileExists(5)
		// w_bp_frame.ReportsFrame.dw_report.HoverMouse ()
		// Sleep (2)
		// writeReportLog("Capturing Statistics Report","Passed",FailComments,"Y")
		// Sleep (3)
		// MouseScroll ("2", "down")
		// //After Scrolling
		// writeReportLog("Capturing Smileys in Statistics Report","Passed",FailComments,"Y")
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/capture_Smileys_In_StatisticsReport","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: MLAVerification_Credit_Decision_Window()
// //@Author Ranjitha
// //@Date 12 June 2018
// //@Description This is will click on Verify MLA Status button in Credit Decision window
// //Ex:  MLAVerification_Credit_Decision_Window()
// //********************************************************************************************************
// MLAVerification_Credit_Decision_Window()
	// %FuncInfo[Desc="This is will click on Verify MLA Status button in Credit Decision window.",Group="BranchPlusFunctions"]
	// AppObject tblPBDataWindow = BranchPlus.CreditDecision.tbldwStep
	// Sleep(3)
	// if BranchPlus.CreditDecision.tbldwStep.WaitWhileExists(5) 
		// //BranchPlus.InsightObject("btn_VerifyMLAStatus_CreditDecision").Click()
		// //#####################
		// //for window 10 Special Handling 
		// //#####################
		// clickMLAVerificationButton()
		// AppObject aoMlaVerificationWindow = BranchPlus.CreditDecision.verifyMLAPopUp.GetReport
		// if (BranchPlus.CreditDecision.verifyMLAPopUp.GetReport.WaitWhileExists(30))
			// Sleep(10)
			// BranchPlus.CreditDecision.verifyMLAPopUp.GetReport.HoverMouse ()
			// BranchPlus.CreditDecision.verifyMLAPopUp.GetReport.Click()
			// //Handle Security Alert Popup
			// handle_Level2PBWindow_DialogPopup("Credit Decision.*","Branch PLUS","Security Alert","Yes")
			// BranchPlus.CreditDecision.verifyMLAPopUp.CreditReport.Close.WaitWhileExists(20)
			// //Logger
			// writeReportLog("MLA Report has been Printed successfully","Passed",FailComments,"Y")
			// //click on Close button
			// BranchPlus.CreditDecision.verifyMLAPopUp.CreditReport.Close.Click()
			// //Verify MLA Covered checkbox
			// Sleep(4)
			// String MlaCoveredstatus = GetValue_PBDataWindow(tblPBDataWindow,"#1","mla_value")
			// //MsgBox MlaCoveredstatus
			// Sleep(2)
			// if MlaCoveredstatus == "No" 
				// writeReportLog("MLA Covered autopopulated to //No//","Passed",FailComments,"YES")				
			// else
				// writeReportLog("MLA Covered autopopulated to //Yes//","Failed",FailComments,"")				
		// else
			// writeReportLog("MLA Lending Verification window not displayed","Failed",FailComments,"")			
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in MLA verification_CreditDecision_Window","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: MLAVerification_Credit_Decision_Window_CoApplicant()
// //@Author Chandra
// //@Date 25 March 2019
// //@Description This is will click on Verify MLA Status button in Credit Decision window for Co Applicant window
// //Ex:  MLAVerification_Credit_Decision_Window_CoApplicant()
// //********************************************************************************************************
// // MLAVerification_Credit_Decision_Window_CoApplicant()
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // Set tblPBDataWindow = BranchPlus.CreditDecision.PbDataWindow("pbname:=dw_coapp")
	// // Sleep(3)
	// // if BranchPlus.CreditDecision.PbDataWindow("pbname:=dw_coapp").WaitWhileExists(5) 
		// // //#####################
		// // //for window 10 Special Handling 
		// // //#####################
		// // clickMLAVerificationButton_CoApplicant()
		// // mlaVerificationWindow = BranchPlus.CreditDecision.verifyMLAPopUp.GetReport.WaitWhileExists(30)
		// // if mlaVerificationWindow 
			// // Sleep(10)
			// // //Click on //GetReport// button
			// // BranchPlus.CreditDecision.verifyMLAPopUp.GetReport.HoverMouse ()
			// // BranchPlus.CreditDecision.verifyMLAPopUp.GetReport.Click()
			// // //Logger
			// // writeReportLog("MLA Report has been Printed successfully","Passed",FailComments,"Y")
			// // //click on Close button
			// // BranchPlus.CreditDecision.verifyMLAPopUp.CreditReport.Close.Click()
			// // //Verify MLA Covered checkbox
			// // Sleep(4)
			// // MlaCoveredstatus = GetValue_PBDataWindow(tblPBDataWindow,"#1","mla_value")
			// // //MsgBox MlaCoveredstatus
			// // Sleep(2)
			// // if MlaCoveredstatus = "No" 
				// // writeReportLog("MLA Covered autopopulated to //No//","Passed",FailComments,"YES")				
			// // else
				// // writeReportLog("MLA Covered autopopulated to //Yes//","Failed",FailComments,"")				
		// // else
			// // writeReportLog("MLA Lending Verification window not displayed","Failed",FailComments,"")			
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed in MLAVerification_Credit_Decision_Window_CoApplicant","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: enter_Primary_Employer_Details_CreditDecision_Window(emplrName,position,dept,shift,supervisor,workyrs,workmos,salSource,payday,salPeriodType,grossSal)
// //@Author Ranjitha
// //@Date 12 June 2018
// //@Description This is will enter the Primary Employer details in Credit Decision window
// //Ex:  enter_Primary_Employer_Details_CreditDecision_Window("Security Finance","Tester","Testing","Day","John Edwards","2","5","Full-time Job","Every Other Monday","Biweekly","3000")
// //********************************************************************************************************
// // enter_Primary_Employer_Details_CreditDecision_Window(String emplrName,String position,String dept,String shift,String supervisor,String workyrs,String workmos,String salSource,String payday,String salPeriodType,String grossSal)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // Sleep(3)
	// // if BranchPlus.CreditDecision.tbldwStep.WaitWhileExists(5) 
		// // Set crdtDecisionwindow = BranchPlus.CreditDecision.tbldwStep
		// // Sleep(3)
		// // //Enter Employer Details
		// // TypeText_PBDataWindow(crdtDecisionwindow,"#1","emplr_name",emplrName)
		// // TypeText_PBDataWindow(crdtDecisionwindow,"#1","position",position)
		// // TypeText_PBDataWindow(crdtDecisionwindow,"#1","dept",dept)
		// // TypeText_PBDataWindow(crdtDecisionwindow,"#1","shift",shift)
		// // TypeText_PBDataWindow(crdtDecisionwindow,"#1","sup",supervisor)
		// // SetValue_PBDataWindow(crdtDecisionwindow,"#1","work_yrs",workyrs)
		// // SetValue_PBDataWindow(crdtDecisionwindow,"#1","work_mos",workmos)
		// // SetValue_PBDataWindow(crdtDecisionwindow,"#1","salary_source",salSource)
		// // SetValue_PBDataWindow(crdtDecisionwindow,"#1","payday",payday)
		// // SetValue_PBDataWindow(crdtDecisionwindow,"#1","salary_period_type",salPeriodType)
		// // SetValue_PBDataWindow(crdtDecisionwindow,"#1","gross_salary",grossSal)
		// // Sleep(3)
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed in entering Primary employer details_CreditDecision_Window","Failed", Error_Description ,"")
// 
// //**************************************************************************************************************************************************************************
// //@methodName: enter_Stipulated_Details_CreditDecision_Window(completed_Signed_Application,coMaker_agreement,copy_of_Valid_Driver_License,PFS_Credit_Verifictn_Authorizn_form,list_of_Relatives,proof_of_Residence,proof_of_Income,PFS_Insurance_Verification_form)
// //@Author Ranjitha
// //@Date 12 June 2018
// //@Description This is will enter the stipulated details in Credit Decision window
// //Ex:  enter_Stipulated_Details_CreditDecision_Window(completed_Signed_Application,coMaker_agreement,copy_of_Valid_Driver_License,PFS_Credit_Verifictn_Authorizn_form,list_of_Relatives,proof_of_Residence,proof_of_Income,PFS_Insurance_Verification_form)
// //***********************************************************************************************************************************************************************
// // enter_Stipulated_Details_CreditDecision_Window(String completed_Signed_Application,String coMaker_agreement,String copy_of_Valid_Driver_License,String PFS_Credit_Verifictn_Authorizn_form,String list_of_Relatives,String proof_of_Residence,String proof_of_Income,String PFS_Insurance_Verification_form)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // if BranchPlus.CreditDecision.tbldwStep.WaitWhileExists(5) 
		// // Set crdDecision = BranchPlus.CreditDecision.tbldwStep
	// // //Enter Stipulate Details
	// // TypeText_PBDataWindow(crdDecision,"#1","other_stipulation",completed_Signed_Application)
	// // TypeText_PBDataWindow(crdDecision,"#2","other_stipulation",coMaker_agreement)
	// // TypeText_PBDataWindow(crdDecision,"#3","other_stipulation",copy_of_Valid_Driver_License)
	// // TypeText_PBDataWindow(crdDecision,"#4","other_stipulation",PFS_Credit_Verifictn_Authorizn_form)
	// // TypeText_PBDataWindow(crdDecision,"#5","other_stipulation",list_of_Relatives)
	// // TypeText_PBDataWindow(crdDecision,"#6","other_stipulation",proof_of_Residence)
	// // TypeText_PBDataWindow(crdDecision,"#7","other_stipulation",proof_of_Income)
	// // TypeText_PBDataWindow(crdDecision,"#8","other_stipulation",PFS_Insurance_Verification_form)
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed in entering stipulated details_CreditDecision_Window","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: click_BlackBook_Button_CreditDecision_Window()
// //@Author Ranjitha
// //@Date 12 June 2018
// //Modified By:Chandra (for windows 10 Blabk Book button Insight object was addded)
// //Modified Date: 18 Mar 2019
// //@Description This is will Click on Black Book button in Credit Decision window
// //Ex: click_BlackBook_Button_CreditDecision_Window()
// //****************************************************************************************************************
// click_BlackBook_Button_CreditDecision_Window()
	// %FuncInfo[Desc="This is will Click on Black Book button in Credit Decision window.",Group="BranchPlusFunctions"]
	// Sleep(5)
	// String sOSVersion
	// if BranchPlus.CreditDecision.tbldwStep.WaitWhileExists(5) 
		// sOSVersion = System.GetEnvVar("OS")
		// sOSVersion = sOSVersion.Replace("Workstation","")
		// if sOSVersion.Trim() == "Windows 10" 
			// BranchPlus.btn_BlackBook_win10.Click()
		// else
			// BranchPlus.btn_BlackBook.Click()
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in clicking on Black Book Button in CreditDecision Window","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: click_NADA_Button_CreditDecision_Window()
// //@Author Ranjitha
// //@Date 12 June 2018
// //@Description This is will Click on NADA button in Credit Decision window
// //Ex: click_NADA_Button_CreditDecision_Window()
// //****************************************************************************************************************
// click_NADA_Button_CreditDecision_Window()
	// %FuncInfo[Desc="This is will Click on NADA button in Credit Decision window.",Group="BranchPlusFunctions"]
	// if BranchPlus.CreditDecision.tbldwStep.WaitWhileExists(5) 
		// BranchPlus.btn_NADA.Click()
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in clicking on NADA Button in CreditDecision Window","Failed", Error_Description ,"")
// 
// //***********************************GENERIC FUNCTION*********************************************
// //@methodName: validate_SpecificPage_Displayed_InBrowser(pageName)
// //@Author Ranjitha
// //@Date 12 June 2018
// //@Description This is will validate that specific page is displayed in IE browser
// //Ex:  validate_SpecificPage_Displayed_InBrowser("blackbook")
// //************************************************************************************************************
// validate_SpecificPage_Displayed_InBrowser(String sPageName)
	// %FuncInfo[Desc="This is will validate that specific page is displayed in IE browser.",Group="BranchPlusFunctions"]
	// Sleep(5)
	// if IEMainPage.WaitWhileExists(5) 
		// writeReportLog ("Display of "+ sPageName + " web page was successful","Passed","","Y")
	// else if ChromeMainPage.WaitWhileExists(5) 
			// writeReportLog ("Display of "+ sPageName + " web page was successful","Passed","","Y")
	// else if ChromeMainPage.ChromeLegacyWindow.WaitWhileExists(5)  	
			// writeReportLog ("Display of "+ sPageName + " web page was successful","Passed","","Y"	)
	// else
		// writeReportLog ("Display of "+ sPageName + " web page was NOT successful","Failed","","")
	// Sleep (2)
// 
// //***********************************GENERIC FUNCTION*******************************************
// //@methodName: close_SpecificTab_InBrowser(pageName)
// //@Author Ranjitha
// //@Date 12 June 2018
// //@Description This is will close the tab of specifica page displayed in IE browser
// //Ex:  close_SpecificTab_InBrowser("NADA")
// //********************************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// //	 
// //	Wait(10)
// ////	if Browser("application version:=internet explorer 11","title:=.*"+ pageName +".*").Exit(2) 
// ////		Browser("application version:=internet explorer 11","title:=.*"+ pageName +".*").close()
// ////		Browser("application version:=internet explorer 11","title:=.*"+ pageName +".*").Dialog("regexpwndtitle:=Windows Internet Explorer").WinButton("regexpwndtitle:=&Leave this page").Click()
// ////	else if Browser("application version:=Chrome"&".*").WaitWhileExists(3) 
// ////		 KillProcess("chrome.exe")
// ////	else
// ////		writeReportLog "Closing "& pageName + " tab in IE Browser is NOT successful","Failed","",""
// ////		
// //		
// //	if Browser("application version:=internet explorer 11","title:=.*"+ pageName +".*").WinObject("regexpwndclass:=DirectUIHWND").WinButton("acc_name:=Close Tab.*").WaitWhileExists(2) 
// //		Browser("application version:=internet explorer 11","title:=.*"+ pageName +".*").WinObject("regexpwndclass:=DirectUIHWND").WinButton("acc_name:=Close Tab.*").Click()
// //	else if Browser("application version:=Chrome"&".*").WaitWhileExists(3) 
// //		 KillProcess("chrome.exe")
// //	else
// //		writeReportLog "Closing "& pageName + " tab in IE Browser is NOT successful","Failed","",""
// //	
// //	if GetErrorCount()>0  			
// //		 writeReportLog("Failed in closing the specific tab in Browser","Failed", Error_Description ,"")
// //	
// //	Sleep(3)
// //
// close_SpecificTab_InBrowser(String sPageName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Sleep(5)		
	// if IEMainPage.WaitWhileExists(5) 
		// IEMainPage.Close()
		// KillProcess("iexplorer.exe")
	// else if ChromeMainPage.WaitWhileExists(3) 
		// ChromeMainPage.Close()
		// KillProcess("chrome.exe")
	// else
		// writeReportLog ("Closing "+ sPageName + " tab in IE Browser is NOT successful","Failed","","")
	// Sleep(3)
// 
// //********************************************************************************************************
// //@methodName: enter_DirectLoan_FinanceDetails_CreditDecisionWindow(purchaseAmt,terms,intRate)
// //@Author Ranjitha
// //@Date 13 June 2018
// //@Description This is will enter the Direct loan finance details in credit decision window
// //Ex:  enter_DirectLoan_FinanceDetails_CreditDecisionWindow("3000","60","0.16")
// //*************************************************************************************************************
// // enter_DirectLoan_FinanceDetails_CreditDecisionWindow(String purchaseAmt,String terms,String intRate)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // if BranchPlus.CreditDecision.tbldwStep.WaitWhileExists(5) 
		// // Set tblPBWindow = BranchPlus.CreditDecision.tbldwStep
		// // //Enter Finance Details
		// // SetValue_PBDataWindow(tblPBWindow,"#1","purch_amt",purchaseAmt)
		// // SetValue_PBDataWindow(tblPBWindow,"#1","nbr_of_months",terms)
		// // SetValue_PBDataWindow(tblPBWindow,"#1","cust_rate",intRate)		
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed in Step/enter_DirectLoan_FinanceDetails_CreditDecisionWindow","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: enter_ChargeAmount_InTitleFee(chrgAmt)
// //@Author Ranjitha
// //@Date 13 June 2018
// //@Description This is will enter the Charge Amount in Title fee in credit decision window
// // enter_ChargeAmount_InTitleFee("500")
// //**********************************************************************************************************
// // enter_ChargeAmount_InTitleFee(String chrgAmt)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // if BranchPlus.CreditDecision.PbDataWindow("pbname:=dw_component").WaitWhileExists(5) 
		// // Set compPBWindow = BranchPlus.CreditDecision.PbDataWindow("pbname:=dw_component")
		// // //Set Charge Amount
		// // if System.GetEnvVar("currentState") = "FL" 
			// // SetValue_PBDataWindow(compPBWindow,"#2","charge_amt",chrgAmt)
		// // else
			// // SetValue_PBDataWindow(compPBWindow,"#1","charge_amt",chrgAmt)
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed in to enter Charge Amount for Title Fee","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: get_Total_FinanceValue_CreditDecision_Window()
// //@Author Ranjitha
// //@Date 14 June 2018
// //@Description This is will fetch Total Finance Amount in credit decision window
// //Ex:  get_Total_FinanceValue_CreditDecision_Window()
// //*********************************************************************************************************
// get_Total_FinanceValue_CreditDecision_Window()
	// %FuncInfo[Desc="This is will fetch Total Finance Amount in credit decision window.",Group="BranchPlusFunctions"]
	// String get_Total_FinanceValue_CreditDecision_Window = getValue_In_PBDataWindow_DP("dw_step","#1","amt_fincd")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to get_Total_FinanceValue_CreditDecision_Window","Failed", Error_Description ,"")
// 
// //********************************GENERIC FUNCTION***********************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// //Ex:  getValue_In_PBDataWindow_DP("dw_step","#1","amt_fincd")
// //*********************************************************************************************************
// String getValue_In_PBDataWindow_DP(String tblPBDataWindow,String RowNumber,String ColumnName)
	// %FuncInfo[Desc="This is will fetch Total Finance Amount in credit decision window.",Group="BranchPlusFunctions"]
	// AppObject aoChildCreditWnd= BranchPlus.CreditDecision.$tblPBDataWindow
	// String GetChildCreditWndValue = ""
	// if BranchPlus.CreditDecision.$tblPBDataWindow.WaitWhileExists(10) 
		// GetChildCreditWndValue = GetValue_PBDataWindow(aoChildCreditWnd,RowNumber,ColumnName)	
	// return GetChildCreditWndValue
// 
// //********************************************************************************************************
// //@methodName: get_AcctType_AccountTab()
// //@Author Ranjitha
// //@Date 14 June 2018
// //@Description This is will fetch Account Type in Account Tab
// //Ex:  get_AcctType_AccountTab()
// //********************************************************************************************************
// String get_AcctType_AccountTab()
	// %FuncInfo[Desc="This is will fetch Account Type in Account Tab.",Group="BranchPlusFunctions"]
	// //By Aravinda - Moved SET statement under IF condition for Executive Demo + added Sleep
	// AppObject aoCustTable
	// String sGet_AcctType_AccountTab
	// if BranchPlus.CustomerF2Window.dw_cust.WaitWhileExists(10) 
		// aoCustTable = BranchPlus.CustomerF2Window.dw_cust
		// Sleep(3)
		// sGet_AcctType_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","acct_type")
	// //AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// //get_AcctType_AccountTab = GetValue_PBDataWindow(custTable,"#1","acct_type")
	// return sGet_AcctType_AccountTab
// //********************************************************************************************************
// //@methodName: get_CashToCustomer_AccountTab()
// //@Author Ranjitha
// //@Date 14 June 2018
// //@Description This is will fetch Cash to Customer Amount in Account Tab
// //Ex:  get_CashToCustomer_AccountTab()
// //********************************************************************************************************
// String get_CashToCustomer_AccountTab()
	// %FuncInfo[Desc="This is will fetch Cash to Customer Amount in Account Tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// String sGet_CashToCustomer_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","purch_amt")
	// return sGet_CashToCustomer_AccountTab
// 
// //********************************************************************************************************
// //@methodName: get_TotalCharges_AccountTab()
// //@Author Ranjitha
// //@Date 14 June 2018
// //@Description This is will fetch Total Other Charges Amount in Account Tab
// //Ex:  get_TotalCharges_AccountTab()
// //********************************************************************************************************
// String get_TotalCharges_AccountTab()
	// %FuncInfo[Desc="This is will fetch Total Other Charges Amount in Account Tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// String sGet_TotalCharges_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","cmpnt_amt")
	// //Error Handling
	// if GetErrorCount()>0 
			// writeReportLog("Failed to fetch Total Other Charges value in Account tab","Failed", Error_Description,"")
	// return sGet_TotalCharges_AccountTab
// 
// //********************************************************************************************************
// //@methodName: get_InterestRate_AccountTab()
// //@Author Ranjitha
// //@Date 14 June 2018
// //@Description This is will fetch Interest rate in Account Tab
// //Ex:  get_TotalCharges_AccountTab()
// //********************************************************************************************************
// String get_InterestRate_AccountTab()
	// %FuncInfo[Desc="This is will fetch Interest rate in Account Tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// String sGet_InterestRate_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","cust_rate")
	// sGet_InterestRate_AccountTab = sGet_InterestRate_AccountTab.Replace("0","")
	// return sGet_InterestRate_AccountTab
// 
// //********************************************************************************************************
// //@methodName: get_Terms_AccountTab()s
// //@Author Ranjitha
// //@Date 14 June 2018
// //@Description This is will fetch Term in Account Tab
// //Ex:  get_Terms_AccountTab()
// //********************************************************************************************************
// String get_Terms_AccountTab()
	// %FuncInfo[Desc="This is will fetch Term in Account Tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// String sGet_Terms_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","nbr_of_months")
	// return sGet_Terms_AccountTab
// 
// //********************************************************************************************************
// //@methodName: processDirectLoan_ToMakeActive(reason,payToName)
// //@Author Ranjitha
// //@Date 14 June 2018
// //@Description This is will Process the Direct Loan
// //Ex:  processDirectLoan_ToMakeActive("Automation Testing","Test Employer")
// //********************************************************************************************************
// processDirectLoan_ToMakeActive(String sReason,String sPayToName)
	// %FuncInfo[Desc="This is will Process the Direct Loan.",Group="BranchPlusFunctions"]
	// Sleep (2)
	// clickButton_Process()
	// //for Joint Customer Popup
	// // clickButton_Level1PBwindow_DP("Process Loan Validation","Yes")
	// // validate_for_DualLoan_Warning_Popup()
	// //Redirecting To Test popup
	// if System.GetEnvVar("currentState") == "NC" 
		// clickButtonInPBWindow("Redirecting To Test","OK")
	// //Handle Dual Loan Pop up
	// if System.GetEnvVar("currentState") == "NC" 
		// handle_DualLoan_PopUp()
		// 
	// // //Check below process for Loan validation for other State,This is Not applicable to GA(10.0.0)
	// // //Process Loan Validation popup Click on Yes button
	// // // clickButtonInPBWindow("Process Loan Validation ","Yes")
	// // //Click ok button in Truth in lending Disclosure window
	// // // writeReportLog("Capturing screenshot in Truth in lending Disclosure window during Direct Loan process","Passed","","Y")
	// // w_bp_frame.PbWindow("pbname:=w_acct_loan_disclosure").PbButton("pbname:=cb_ok").Click()	
	// // //Click Yes button in Process Loan pop up
	// // // writeReportLog("Capturing screenshot in Process Loan pop up during Direct Loan process","Passed","","Y")
	// // w_bp_frame.PbWindow("pbname:=w_acct_loan_disclosure").PbWindow("pbname:=w_message").PbButton("pbname:=cb_1").Click()
	// // //enter reason in Check Book Payment Load Proceeds window
	// // w_bp_frame.PbWindow("pbname:=w_checkbook_pmt_split").IsPresent()
	// // w_bp_frame.PbWindow("pbname:=w_checkbook_pmt_split").PbDataWindow("pbname:=dw_list").SetValue(CellData "#1","reason",reason
	// // //enter Pay to in Check Book Payment Load Proceeds window
	// // w_bp_frame.PbWindow("pbname:=w_checkbook_pmt_split").IsPresent()
	// // w_bp_frame.PbWindow("pbname:=w_checkbook_pmt_split").PbDataWindow("pbname:=dw_list").SetValue(CellData "#2","pay_to",payToName
	// // w_bp_frame.PbWindow("pbname:=w_checkbook_pmt_split").PbDataWindow("pbname:=dw_list").SetValue(CellData "#2","reason",reason
	// // // writeReportLog("Capturing screenshot in Check Book Payment Load Proceeds window during Direct Loan process","Passed","","Y")
	// // //Clickin on Process Button
	// // BranchPlus.w_checkbook_pmt_split.PbButton("pbname:=cb_process").Click()
	// // //Handling Check Number Popup by clicking on Yes button
	// //	if w_bp_frame.PbWindow("pbname:=w_message").WaitWhileExists(140) 
	// //	Sleep (10)
	// //	// writeReportLog("Capturing screenshot in Is Check Number pop up during Direct Loan process","Passed","","Y")
	// //	w_bp_frame.PbWindow("pbname:=w_message").PbButton("pbname:=cb_1").Click()
	// //		Sleep (10)
	// //		if w_bp_frame.PbWindow("pbname:=w_message").WaitWhileExists(30) 
	// //			w_bp_frame.PbWindow("pbname:=w_message").PbButton("pbname:=cb_1").Click()
	// //						
	// //		w_bp_frame.PbWindow("pbname:=w_message").PbButton("pbname:=cb_1").Click()
	// //	
	// //	Sleep (5) 
	// //	w_bp_frame.PbWindow("pbname:=w_message").PbButton("pbname:=cb_1").Click()
	// //	w_bp_frame.PbWindow("pbname:=w_message").PbButton("pbname:=cb_1").Click()
	// Sleep (50)
	// //Click on Mailing validation dailog -- 9.2.0 Release handled
	// handle_PbWindow("w_message","OK")
	// //Handeling Check Number Popup
	// BranchPlus.NextCheckNumberPopUp.IsPresent()
	// BranchPlus.NextCheckNumberPopUp.btnYes.Click()
	// BranchPlus.NextCheckNumberPopUp.IsPresent()
	// Sleep (30)
	// //Handling Multiple Checks
	// if BranchPlus.NextCheckNumberPopUp.WaitWhileExists(30) 
		// BranchPlus.NextCheckNumberPopUp.btnYes.Click()
	// //Error Handling
	// if GetErrorCount()>0 
			// writeReportLog("Failed to Process the Direct Loan","Failed", Error_Description,"")
// 
// //********************************************************************************************************
// //@methodName: get_AmountFinance_AccountTab()
// //@Author Ranjitha
// //@Date 14 June 2018
// //@Description This is will fetch Amount Finance Amount in Account Tab
// //Ex:  get_AmountFinance_AccountTab()
// //********************************************************************************************************
// String get_AmountFinance_AccountTab()
	// %FuncInfo[Desc="This is will fetch Amount Finance Amount in Account Tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// String sGet_AmountFinance_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","amt_fincd")
	// return sGet_AmountFinance_AccountTab
// //********************************************************************************************************
// //@methodName: Select_ComponentDescription_FinanceDetail_CreditDecision_Window(rownum,valuetoset)
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to select Component description value(Finance Detail section) in credit decision window
// //Ex:  Select_ComponentDescription_FinanceDetail_CreditDecision_Window("1","OTHER")
// //********************************************************************************************************
// Select_ComponentDescription_FinanceDetail_CreditDecision_Window(String sRowNum,String sValueToSet)
	// %FuncInfo[Desc="This is to select Component description value(Finance Detail section) in credit decision window.",Group="BranchPlusFunctions"]
	// Sleep  (2)
	// AppObject aoTbldwComponent = BranchPlus.CreditDecision.tbldwcomponent
	// Integer irownum = Integer.Parse(sRowNum)+1
	// String sAddedRowNum = [String] irownum
	// if BranchPlus.CreditDecision.tbldwcomponent.WaitWhileExists(10) 
		// //Set Component Description Value
		// if System.GetEnvVar("currentState") == "FL" 
			// SetValue_PBDataWindow (aoTbldwComponent,sAddedRowNum,"opt",sValueToSet)
		// else
			// //BranchPlus.CreditDecision.PbDataWindow("pbname:=dw_component").SetValue(CellData "#" + rownum,"opt",valuetoset
			// TypeText_PBDataWindow(aoTbldwComponent, sRowNum, "opt",sValueToSet)
	// //Error Handling
	// if GetErrorCount()>0 
			// writeReportLog("Select_ComponentDescription_FinanceDetail_CreditDecision_Window","Failed", Error_Description,"")
// 
// //********************************************************************************************************
// //@methodName: click_AddRow_Button_CreditDecisionWindow(buttonName)
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to click on AddRow button in credit decision window
// //Ex:  click_AddRow_Button_CreditDecisionWindow("AddRow")
// //********************************************************************************************************
// click_AddRow_Button_CreditDecisionWindow(String sButtonName)
	// %FuncInfo[Desc="This is to click on AddRow button in credit decision window.",Group="BranchPlusFunctions"]
	// if BranchPlus.CreditDecision.$sButtonName.WaitWhileExists(10) 
		// //Click on //AddRow// button
		// BranchPlus.CreditDecision.$sButtonName.Click()
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("click_AddRow_Button_CreditDecisionWindow","Failed", Error_Description,"")
// 
// //********************************************************************************************************
// //@methodName: GetValue_In_PBDataWindow_DP(tblPBDataWindow,RowNumber,ColumnName)
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get value in credit decision window
// //Ex:  GetValue_In_PBDataWindow_DP("w_cust","#1","Chg_Amt")
// //********************************************************************************************************
// String GetValue_In_PBDataWindow_DP(String tblPBDataWindow,String sRowNumber,String sColumnName)
	// %FuncInfo[Desc="This is to get value in credit decision window.",Group="BranchPlusFunctions"]
	// AppObject aoTbldwComponent = BranchPlus.CreditDecision.$tblPBDataWindow
	// String sGetValue_In_PBDataWindow_DP
	// if BranchPlus.CreditDecision.tbldwcomponent.WaitWhileExists(10) 
		// //Get Cell Data
		// sGetValue_In_PBDataWindow_DP = GetValue_PBDataWindow(aoTbldwComponent,sRowNumber,sColumnName)	
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("GetValue_In_PBDataWindow_DP","Failed", Error_Description,"")
	// return sGetValue_In_PBDataWindow_DP
// 
// //********************************************************************************************************
// //@methodName: SetValue_In_PBDataWindow_DP(tblPBDataWindow,RowNumber,ColumnName,CellValue)
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to set value in credit decision window
// //Ex:  SetValue_In_PBDataWindow_DP("w_cust","#1","Chg_Amt","100")
// //********************************************************************************************************
// SetValue_In_PBDataWindow_DP(String tblPBDataWindow,String sRowNumber,String sColumnName,String sCellValue)
	// %FuncInfo[Desc="This is to set value in credit decision window.",Group="BranchPlusFunctions"]
	// AppObject aoTbldwComponent = BranchPlus.CreditDecision.$tblPBDataWindow
	// 
	// if BranchPlus.CreditDecision.$tblPBDataWindow.WaitWhileExists(10) 
		// //Set cell
		// SetValue_PBDataWindow (aoTbldwComponent, sRowNumber,sColumnName,sCellValue)
	// //Error Handling
	// if GetErrorCount()>0 
			// writeReportLog("SetValue_In_PBDataWindow_DP","Failed", Error_Description,"")
// 
// //********************************************************************************************************
// //@methodName: enter_SurchargeAmount_CreditDecision_window(rownum,surChargeAmount)
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to enter Surcharge Amount in credit decision window
// //Ex:  enter_SurchargeAmount_CreditDecision_window("100")
// //********************************************************************************************************
// enter_SurchargeAmount_CreditDecision_window(String sRowNum,String sSurChargeAmount)
	// %FuncInfo[Desc="This is to enter Surcharge Amount in credit decision window.",Group="BranchPlusFunctions"]
	// Integer irownum = Integer.Parse(sRowNum)+1
	// String sAddedRowNum = [String] irownum
	// 
	// if System.GetEnvVar("currentState") == "FL" 
		// //Set SurCharge Amount
		// SetValue_In_PBDataWindow_DP("dw_component",sAddedRowNum,"surcharge_amt",sSurChargeAmount)
	// else
		// SetValue_In_PBDataWindow_DP("dw_component",sRowNum,"surcharge_amt",sSurChargeAmount)
	// //Error Handling
	// if GetErrorCount()>0 
			// writeReportLog("enter_SurchargeAmount_CreditDecision_window","Failed", Error_Description,"")
// 
// //********************************************************************************************************
// //@methodName: enter_RepoComm_CreditDecision_window(rownum,RepoComm)
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to enter Repo comm Amount in credit decision window
// //Ex:  enter_RepoComm_CreditDecision_window("1","100")
// //********************************************************************************************************
// enter_RepoComm_CreditDecision_window(String sRowNum,String sRepoComm)
	// %FuncInfo[Desc="This is to enter Repo comm Amount in credit decision window.",Group="BranchPlusFunctions"]
	// Integer irownum = Integer.Parse(sRowNum)+1
	// String sAddedRowNum = [String] irownum
	// 
	// if System.GetEnvVar("currentState") == "FL" 
		// //Set RepoCom Value
		// SetValue_In_PBDataWindow_DP("dw_component",sAddedRowNum,"rep_comm",sRepoComm)
	// else
		// SetValue_In_PBDataWindow_DP("dw_component", + sRowNum,"rep_comm",sRepoComm)
// 
// //********************************************************************************************************
// //@methodName: get_RepoCheck_CreditDecision_window()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get Repo comm Amount in credit decision window
// //Ex:  get_RepoCheck_CreditDecision_window()
// //********************************************************************************************************
// String get_RepoCheck_CreditDecision_window()
	// %FuncInfo[Desc="This is to get Repo comm Amount in credit decision window.",Group="BranchPlusFunctions"]
	// String sGet_RepoCheck_CreditDecision_window= GetValue_In_PBDataWindow_DP("dw_step","#1","rep_check")
	// return sGet_RepoCheck_CreditDecision_window
// 
// //********************************************************************************************************
// //@methodName: get_DealerCheck_CreditDecision_window()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get Dealer Check in credit decision window
// //Ex:  get_DealerCheck_CreditDecision_window()
// //********************************************************************************************************
// String get_DealerCheck_CreditDecision_window()
	// %FuncInfo[Desc="This is to get Dealer Check in credit decision window.",Group="BranchPlusFunctions"]
	// //Get Dealer Check Value in Credit Decision Window
	// String sGet_DealerCheck_CreditDecision_window= GetValue_In_PBDataWindow_DP("dw_step","#1","dealer_check")
	// return sGet_DealerCheck_CreditDecision_window
// //********************************************************************************************************
// //@methodName: enter_DealerComm_CreditDecision_window(rownum,DealerComm)
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get Dealer comm in credit decision window
// //Ex:  enter_DealerComm_CreditDecision_window("1","100")
// //********************************************************************************************************
// enter_DealerComm_CreditDecision_window(String sRowNum,String sDealerComm)
	// %FuncInfo[Desc="This is to get Dealer comm in credit decision window.",Group="BranchPlusFunctions"]
	// Integer irownum = Integer.Parse(sRowNum)+1
	// String sAddedRowNum = [String] irownum
	// 
	// if System.GetEnvVar("currentState") == "FL" 
		// SetValue_In_PBDataWindow_DP("dw_component",sAddedRowNum,"dealer_comm",sDealerComm)
	// else
		// SetValue_In_PBDataWindow_DP("dw_component",sRowNum,"dealer_comm",sDealerComm)
// //********************************************************************************************************
// //@methodName:  get_TotalFinance_CreditDecision_window()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get Total Finance in credit decision window
// //Ex:   get_TotalFinance_CreditDecision_window()
// //********************************************************************************************************
// String get_TotalFinance_CreditDecision_window()
	// %FuncInfo[Desc="This is to get Total Finance in credit decision window.",Group="BranchPlusFunctions"]
	// //Get Total Finance CreditDecision window
	// String sGet_TotalFinance_CreditDecision_window = GetValue_In_PBDataWindow_DP("dw_step","#1","amt_fincd")
	// return sGet_TotalFinance_CreditDecision_window
// 
// //********************************************************************************************************
// //@methodName:  get_BranchComm_CreditDecision_window(rownum)
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get Branch Comm in credit decision window
// //Ex:  get_BranchComm_CreditDecision_window("1")
// //********************************************************************************************************
// String get_BranchComm_CreditDecision_window(String sRowNum)
	// %FuncInfo[Desc="This is to get Branch Comm in credit decision window.",Group="BranchPlusFunctions"]
	// Integer irownum = Integer.Parse(sRowNum)+1
	// String sAddedRowNum = [String] irownum
	// String sGet_BranchComm_CreditDecision_window
	// if System.GetEnvVar("currentState") == "FL" 
		// //Get BranchCom
		// sGet_BranchComm_CreditDecision_window = GetValue_In_PBDataWindow_DP("dw_component",sAddedRowNum,"branch_comm")
	// else
		// sGet_BranchComm_CreditDecision_window = GetValue_In_PBDataWindow_DP("dw_component",sRowNum,"branch_comm")
	// return sGet_BranchComm_CreditDecision_window
// 
// //********************************************************************************************************
// //@methodName: enter_ChargeAmount_CreditDecision_window(rownum,ChrgeAmt)
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to enter charge amount in credit decision window
// //Ex:  enter_ChargeAmount_CreditDecision_window("1","100")
// //********************************************************************************************************
// enter_ChargeAmount_CreditDecision_window(String sRowNum,String sChrgeAmt)
	// %FuncInfo[Desc="This is to enter charge amount in credit decision window.",Group="BranchPlusFunctions"]
	// Integer irownum = Integer.Parse(sRowNum)+1
	// String sAddedRowNum = [String] irownum
	// 
	// if System.GetEnvVar("currentState") == "FL" 
		// //Set Charge Amount
		// SetValue_In_PBDataWindow_DP("dw_component",sAddedRowNum,"charge_amt",sChrgeAmt)
	// else
		// SetValue_In_PBDataWindow_DP("dw_component",sRowNum,"charge_amt",sChrgeAmt)
// 
// //********************************************************************************************************
// //@methodName: get_AccountType_AccountTab()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get account type in Account tab
// //Ex:  get_AccountType_AccountTab()
// //********************************************************************************************************
// String get_AccountType_AccountTab()
	// %FuncInfo[Desc="This is to get account type in Account tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// String sGet_AccountType_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","acct_type")
	// return sGet_AccountType_AccountTab
	// 
// //********************************************************************************************************
// //@methodName: get_DealerCheck_AccountTab()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get dealer check in Account tab
// //Ex:  get_DealerCheck_AccountTab()
// //********************************************************************************************************
// String get_DealerCheck_AccountTab()
	// %FuncInfo[Desc="This is to get dealer check in Account tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// String sGet_DealerCheck_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","dealer_check")
	// return sGet_DealerCheck_AccountTab
// //********************************************************************************************************
// //@methodName: get_DealerName_AccountTab()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get dealer name in Account tab
// //Ex:  get_DealerName_AccountTab()
// //********************************************************************************************************
// String get_DealerName_AccountTab()
	// %FuncInfo[Desc="This is to get dealer name in Account tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// String sGet_DealerName_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","dealer_id")
	// return sGet_DealerName_AccountTab
// 
// //********************************************************************************************************
// //@methodName: get_RepoCheck_AccountTab()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get Repo Check in Account tab
// //Ex:  get_RepoCheck_AccountTab()
// //********************************************************************************************************
// String get_RepoCheck_AccountTab()
	// %FuncInfo[Desc="This is to get Repo Check in Account tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// String sGet_RepoCheck_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","rep_check")
	// return sGet_RepoCheck_AccountTab
	// 
// //********************************************************************************************************
// //@methodName: get_ContractDate_AccountTab()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get contract date in Account tab
// //Ex:  get_ContractDate_AccountTab()
// //********************************************************************************************************
// String get_ContractDate_AccountTab()
	// %FuncInfo[Desc="This is to get contract date in Account tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// String sGet_ContractDate_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","funding_dt")
	// return sGet_ContractDate_AccountTab
	// 
// //********************************************************************************************************
// //@methodName: get_firstPmtDate_AccountTab()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get first payment date in Account tab
// //Ex:  get_firstPmtDate_AccountTab()
// //********************************************************************************************************
// String get_firstPmtDate_AccountTab()
	// %FuncInfo[Desc="This is to get first payment date in Account tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// String sGet_firstPmtDate_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","first_pmt_due_dt")
	// return sGet_firstPmtDate_AccountTab
	// 
// //********************************************************************************************************
// //@methodName: get_TradeDesc_AccountTab()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get Trade desc in Account tab
// //Ex:  get_TradeDesc_AccountTab()
// //********************************************************************************************************
// String get_TradeDesc_AccountTab()
	// %FuncInfo[Desc="This is to get Trade desc in Account tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// String sGet_TradeDesc_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","trade_in_descr")
	// return sGet_TradeDesc_AccountTab
	// 
// //********************************************************************************************************
// //@methodName: get_AcountTerm_AccountTab()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get Account term in Account tab
// //Ex:  get_AcountTerm_AccountTab()
// //********************************************************************************************************
// String get_AcountTerm_AccountTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// String sGet_AcountTerm_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","nbr_of_months")
	// return sGet_AcountTerm_AccountTab
// //********************************************************************************************************
// //@methodName: get_TotalFinance_AccountTab()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get total finance in Account tab
// //Ex:  get_TotalFinance_AccountTab()
// //********************************************************************************************************
// String get_TotalFinance_AccountTab()
	// %FuncInfo[Desc="This is to get total finance in Account tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// String sGet_TotalFinance_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","amt_fincd")
	// return sGet_TotalFinance_AccountTab
	// 
// //********************************************************************************************************
// //@methodName: get_TotalRepayable_AccountTab()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get total repayable in Account tab
// //Ex:  get_TotalRepayable_AccountTab()
// //********************************************************************************************************
// String get_TotalRepayable_AccountTab()
	// %FuncInfo[Desc="This is to get total repayable in Account tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// String Get_TotalRepayable_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","cf_total_financed")
	// return Get_TotalRepayable_AccountTab
// //********************************************************************************************************
// //@methodName: get_InterestRate_MotorcycleLoan_AccountTab()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get interset rate in Account tab
// //Ex:  get_InterestRate_MotorcycleLoan_AccountTab()
// //********************************************************************************************************
// String get_InterestRate_MotorcycleLoan_AccountTab()
	// %FuncInfo[Desc="This is to get interset rate in Account tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// //Get Interest Rate of Motor Cycle Loan in Account Tab
	// String sGet_InterestRate_MotorcycleLoan_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","int_rate")
	// sGet_InterestRate_MotorcycleLoan_AccountTab = sGet_InterestRate_MotorcycleLoan_AccountTab.Replace("0","")
	// return sGet_InterestRate_MotorcycleLoan_AccountTab
// 
// //********************************************************************************************************
// //@methodName: get_MonthlyPmt_AccountTab()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get monthly payment in Account tab
// //Ex:  get_MonthlyPmt_AccountTab()
// //********************************************************************************************************
// String get_MonthlyPmt_AccountTab()
	// %FuncInfo[Desc="This is to get monthly payment in Account tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// //Get Monthly Payment in Account Tab
	// String sGet_MonthlyPmt_AccountTab
	// sGet_MonthlyPmt_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","pmt_amt")
	// return sGet_MonthlyPmt_AccountTab
// 
// //********************************************************************************************************
// //@methodName: get_dealerName_creditdecision_window()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get dealer name in credit ecision window
// //Ex:  get_dealerName_creditdecision_window()
// //********************************************************************************************************
// String get_dealerName_creditdecision_window()
	// %FuncInfo[Desc="This is to get dealer name in credit ecision window.",Group="BranchPlusFunctions"]
	// String sGet_dealerName_creditdecision_window = GetValue_In_PBDataWindow_DP("dw_step","#1","dealer_id")
	// return sGet_dealerName_creditdecision_window
	// 
// //********************************************************************************************************
// //@methodName: get_Contractdate_CreditDecision_window()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get Contractdate in CreditDecision window
// //Ex:  get_Contractdate_CreditDecision_window()
// //********************************************************************************************************
// String get_Contractdate_CreditDecision_window()
	// %FuncInfo[Desc="This is to get Contractdate in CreditDecision window.",Group="BranchPlusFunctions"]
	// String sGet_Contractdate_CreditDecision_window = GetValue_In_PBDataWindow_DP("dw_step","#1","funding_dt")
	// return sGet_Contractdate_CreditDecision_window
	// 
// //********************************************************************************************************
// //@methodName: get_FirstPmtDate_CreditDecision_window()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get FirstPmtDate in CreditDecision window
// //Ex:  get_FirstPmtDate_CreditDecision_window()
// //********************************************************************************************************
// String get_FirstPmtDate_CreditDecision_window()
	// %FuncInfo[Desc="This is to get FirstPmtDate in CreditDecision window.",Group="BranchPlusFunctions"]
	// String sGet_FirstPmtDate_CreditDecision_window = GetValue_In_PBDataWindow_DP("dw_step","#1","first_pmt_due_dt")
	// return sGet_FirstPmtDate_CreditDecision_window
	// 
// //********************************************************************************************************
// //@methodName: get_TotalRepayable_CreditDecision_window()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get TotalRepayable in CreditDecision window
// //Ex:  get_TotalRepayable_CreditDecision_window()
// //********************************************************************************************************
// String get_TotalRepayable_CreditDecision_window()
	// %FuncInfo[Desc="This is to get TotalRepayable in CreditDecision window.",Group="BranchPlusFunctions"]
	// String sGet_TotalRepayable_CreditDecision_window = GetValue_In_PBDataWindow_DP("dw_step","#1","total_repayable_amt")
	// return sGet_TotalRepayable_CreditDecision_window
	// 
// //********************************************************************************************************
// //@methodName: get_MonthlyPmt_CreditDecision_window()
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to get MonthlyPmt in CreditDecision window
// //Ex:  get_MonthlyPmt_CreditDecision_window()
// //********************************************************************************************************
// String get_MonthlyPmt_CreditDecision_window()
	// %FuncInfo[Desc="This is to get MonthlyPmt in CreditDecision window.",Group="BranchPlusFunctions"]
	// String sGet_MonthlyPmt_CreditDecision_window = GetValue_In_PBDataWindow_DP("dw_step","#1","pmt_amt")
	// return sGet_MonthlyPmt_CreditDecision_window
	// 
// //********************************************************************************************************
// //@methodName: process_MotorCyleLoan_ToMakeActive(reason)
// //@Author Sumithra
// //@Date 14 June 2018
// //@Description This is to process MotorCyleLoan ToMakeActive in Account tab
// //Ex:  process_MotorCyleLoan_ToMakeActive("Test")
// //********************************************************************************************************
// process_MotorCyleLoan_ToMakeActive(String sReason)
	// %FuncInfo[Desc="This is to process MotorCyleLoan ToMakeActive in Account tab.",Group="BranchPlusFunctions"]
	// clickButton_Process()
	// Sleep (2)
	// AppObject aoCheckBook_dwList = BranchPlus.w_checkbook_pmt_split.dw_list
	// //for Joint Customer Popup
	// // clickButton_Level1PBwindow_DP("Process Loan Validation","Yes")
	// //Click ok button in Truth in lending Disclosure window
	// // writeReportLog("Capturing screenshot in Truth in lending Disclosure window during Motorcycle Loan process","Passed","","Yes")
	// BranchPlus.w_acct_loan_disclosure.btnOK.Click()	
	// //Click Yes button in Process Loan pop up
	// // writeReportLog("Capturing screenshot in Process Loan pop up during Motorcycle Loan process","Passed","","Yes")
	// BranchPlus.w_acct_loan_disclosure.w_message.btnYes.Click()
	// //enter reason in Check Book Payment Load Proceeds window
	// if BranchPlus.w_checkbook_pmt_split.IsPresent()
		// SetValue_PBDataWindow (aoCheckBook_dwList, "#1","reason",sReason)
	// //enter reason in Check Book Payment Load Proceeds window
	// if BranchPlus.w_checkbook_pmt_split.IsPresent()
		// SetValue_PBDataWindow (aoCheckBook_dwList, "#2","reason",sReason)
	// // writeReportLog("Capturing screenshot in Check Book Payment Load Proceeds window during Motorcycle Loan process","Passed","","Yes")
	// //Clickin on Process Button
	// BranchPlus.w_checkbook_pmt_split.btnProcess.Click()
	// //Handling Check Number Popup by clicking on Yes button
	// if w_message.WaitWhileExists(60) 
		// // writeReportLog("Capturing screenshot in Is Check Number pop up during Motorcycle Loan process","Passed","","Yes")
		// w_message.Yes.Click()
		// if w_message.WaitWhileExists(40) 
			// w_message.Yes.Click()
	// Sleep (50)
	// //Click on Mailing validation dailog -- 9.2.0 Release handled
	// handle_PbWindow("w_message","OK")
	// //Handeling Check Number Popup
	// if BranchPlus.NextCheckNumberPopUp.WaitWhileExists (50)
		// BranchPlus.NextCheckNumberPopUp.btnYes.Click()
		// BranchPlus.NextCheckNumberPopUp.WaitWhileExists (50)
		// Sleep (30)
	// //Handling Multiple Checks
	// if BranchPlus.NextCheckNumberPopUp.WaitWhileExists(30) 
		// BranchPlus.NextCheckNumberPopUp.btnYes.Click()
	// //Error Handling
	// if GetErrorCount()>0 
			// writeReportLog("Failed : process_MotorCyleLoan_ToMakeActive ","Failed", Error_Description,"")
// 
// 
// // List<String> get_Entire_File_Content(String filePath)
	// // %FuncInfo[Desc="Read text file",Group="BranchPlusFunctions"]
	// // String sData
	// // List<String> lsData
	// // TextFile textFile
	// // 
	// // // forReading = 1
	// // // Set objFSO = CreateObject("Scripting.FileSystemObject")	
	// // // Set objTextFile = objFSO.Open(filePath, forReading)
	// // // strText = objTextFile.ReadAll	
	// // // objTextFile.Close	
	// // 
	// // textFile.Open (filePath, FileMode.Read, FileEncoding.Auto)// Reading from Source file
	// // while textFile.Read (sData) //fetching all data into a list
		// // lsData.Add (sData)
		// // // Print (lsData)
	// // textFile.Close()
	// // return lsData
// 
// //********************************************************************************************************
// //@methodName: openCustomerformsWindow()
// //@Author Ranjitha
// //@Date 18 June 2018
// //@Description This will open the Customer forms
// //Ex:  openCustomerformsWindow()
// //********************************************************************************************************
// openCustomerformsWindow()
	// %FuncInfo[Desc="This will open the Customer forms",Group="BranchPlusFunctions"]
	// w_bp_frame.WaitWhileExists(5)
	// BranchPlus.SetActive()
	// UA.GenKeyEvents("<F6>")
	// w_bp_frame.ReportsFrame.GetAttr(("IsPresent"))
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed to openCustomerformsWindow ","Failed", Error_Description,"")
// 
// openReportFromPBTree_Customerforms(String sReportPath)
	// %FuncInfo[Desc="This will open the particular Customer forms from PB Tree.",Group="BranchPlusFunctions"]
	// List <String> lsIndivNode = sReportPath.Split(";")	
	// //Setting.WebPackage("ReplayType") == 2
	// w_bp_frame.ReportsFrame.tv_report.Item[lsIndivNode[1]].Expand()
	// w_bp_frame.ReportsFrame.tv_report.Item[lsIndivNode[2]].Expand()
	// w_bp_frame.ReportsFrame.tv_report.SelectPath(sReportPath)
	// 
	// // w_bp_frame.ReportsFrame.tv_report.$str1.Select()
	// // w_bp_frame.ReportsFrame.tv_report.$str2.Select()
	// // w_bp_frame.ReportsFrame.tv_report.WaitUntilExists(2)
	// //Setting.WebPackage("ReplayType") = 1	
// 
// //********************************************************************************************************
// //@methodName: openReportFromPBTree_Customerforms(reportPath)
// //@Author Ranjitha
// //@Date 18 June 2018
// //@Description This will open the particular Customer forms from PB Tree
// //Ex:  openReportFromPBTree_Customerforms("English;Contract;Arbitration Agreement File Copy")
// //********************************************************************************************************
// openReportFromPBTree_Customerforms_old(String sReportPath)
	// %FuncInfo[Desc="This will open the particular Customer forms from PB Tree.",Group="BranchPlusFunctions"]
	// List <String> lsIndivNode = sReportPath.Split(";")	
	// w_bp_frame.ReportsFrame.tv_report.Item[lsIndivNode[1]].Expand()
	// w_bp_frame.ReportsFrame.tv_report.Item[lsIndivNode[2]].Expand()
	// w_bp_frame.ReportsFrame.tv_report.SelectPath(sReportPath)
	// //Click on Find Button
	// clickButton_Find()
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed to openReportFromPBTree_Customerforms_old","Failed", Error_Description,"")
// 
// //********************************************************************************************************
// //@methodName: enter_Stipulated_Details_CreditDecision_MotorLoan_Window()
// //@Author Sumithra
// //@Date 18 June 2018
// //@Description This is to enter stipulated details in cerdit decision window
// //Ex:  enter_Stipulated_Details_CreditDecision_MotorLoan_Window(completed_Signed_Application,completed_Signed_Contract,coMaker_agreement,signed_Bill_of_Sale,copy_of_PFS_GAP_VSC,copy_of_Valid_Driver_License,PFS_Credit_Verifictn_Authorizn_form,list_of_Relatives,proof_of_Residence,proof_of_Income)
// //********************************************************************************************************
// enter_Stipulated_Details_CreditDecision_MotorLoan_Window(String completed_Signed_Application,String completed_Signed_Contract,String coMaker_agreement,String signed_Bill_of_Sale,String copy_of_PFS_GAP_VSC,String copy_of_Valid_Driver_License,String PFS_Credit_Verifictn_Authorizn_form,String list_of_Relatives,String proof_of_Residence,String proof_of_Income)
	// %FuncInfo[Desc="This is to enter stipulated details in cerdit decision window.",Group="BranchPlusFunctions"]
	// AppObject aoCrdDecision = BranchPlus.CreditDecision.tbldwStep
	// if BranchPlus.CreditDecision.tbldwStep.WaitWhileExists(5) 
		// aoCrdDecision = BranchPlus.CreditDecision.tbldwStep
	// //Enter Stipulate Details
	// TypeText_PBDataWindow(aoCrdDecision,"#1","other_stipulation",completed_Signed_Application)
	// TypeText_PBDataWindow(aoCrdDecision,"#2","other_stipulation",completed_Signed_Contract)
	// TypeText_PBDataWindow(aoCrdDecision,"#3","other_stipulation",coMaker_agreement)
	// TypeText_PBDataWindow(aoCrdDecision,"#4","other_stipulation",signed_Bill_of_Sale)
	// TypeText_PBDataWindow(aoCrdDecision,"#5","other_stipulation",copy_of_PFS_GAP_VSC)
	// TypeText_PBDataWindow(aoCrdDecision,"#6","other_stipulation",copy_of_Valid_Driver_License)
	// TypeText_PBDataWindow(aoCrdDecision,"#7","other_stipulation",PFS_Credit_Verifictn_Authorizn_form)
	// TypeText_PBDataWindow(aoCrdDecision,"#8","other_stipulation",list_of_Relatives)
	// TypeText_PBDataWindow(aoCrdDecision,"#9","other_stipulation",proof_of_Residence)
	// TypeText_PBDataWindow(aoCrdDecision,"#10","other_stipulation",proof_of_Income)
// 
// //*********************************************************************************************
// //@methodName: get_DefermentRecvdAmt_ProcessPaymentWindow(paymentType)
// //@Author Chandra
// //@Date 18 Jun 2018
// //@Description This is for Check Deferment Payment Process Amount Received is exist to get that
// //Ex  get_DefermentRecvdAmt_ProcessPaymentWindow("Deferment") 
// //*********************************************************************************************
// get_DefermentRecvdAmt_ProcessPaymentWindow(String sPaymentType)
	// %FuncInfo[Desc="This is for Check Deferment Payment Process Amount Received is exist to get that.",Group="BranchPlusFunctions"]
	// //Get Row count Customers Tree in Account Tab
	// Integer rowcount = BranchPlus.CustomerF2Window.tv_cust.GetAttr("NumItems")  //Need to provide Attr Name
	// //STEP: Navigating to Payment Tab
	// navigateToTab_CustomerSubTabs("Payment")
	// //Click on "Process" Button in Payment Tab
	// clickButton_Process() 
	// AppObject ao_WindowPayment 
	// String DefermentAmtRecvd
	// Real rDefermentAmtRecvd
	// for (Integer itr = 1; itr<= rowcount; itr++)
		// if (BranchPlus.CustomerF2Window.dw_payments.WaitWhileExists(30))
			// //Select the Payment Type
			// SetValue_PBDataWindow(ao_WindowPayment,"#1","pmt_class",sPaymentType)
			// //Get Received Amount
			// DefermentAmtRecvd = GetValue_PBDataWindow(ao_WindowPayment,"#1","amt_recvd")
			// rDefermentAmtRecvd = Real.Parse(DefermentAmtRecvd)
			// rDefermentAmtRecvd = Math.Round(rDefermentAmtRecvd, 4)
		// if rDefermentAmtRecvd == Math.Round(0, 4) 
			// //Click "Cancel" button 
			// clickButton_InWindow("w_payment","Cancel")
			// //Click on "" Button in Payment Tab
			// clickButton_Next()
			// //Click on "Process" Button in Payment Tab
			// clickButton_Process() 
		// else
			// //Amount Received is not equal to zero
			// clickButton_InWindow("w_payment","Cancel")
	// sEnvDefermentAmtRecvd = DefermentAmtRecvd
	// if GetErrorCount()>0 
				// writeReportLog("Failed in step/get_DefermentRecvdAmt_ProcessPaymentWindow","Failed", Error_Description,"Y")
// 
// //*************************************************************************************************************************************************
// //@methodName: clickButton_()
// //@Author Chandra
// //@Date 14 Jun 2018                                                                                                                                                                                                                   
// //@Description This will click on  Button
// //Ex // clickButton_()
// //*************************************************************************************************************************************************
// clickButton_()
	// %FuncInfo[Desc="This will click on  Button.",Group="BranchPlusFunctions"]
	// BranchPlus.btnNext.Click()
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/clickButton_","Failed", Error_Description,"Y")
// 
// //*************************************************************************************************************************************************
// //@methodName: customerPaymentProcess()  
// //@Author Chandra
// //@Date 13 Jun 2018
// //@Description This is for Process the Customer Payments(Cash,Cash by mail,Check,Check by Mail,Cashier//s CHeck,MoneyOrder)
// //Ex // customerPaymentProcess(paymentType,paymentMethod,CheckNumber, amtReceived, amtPaid, printReceipt,Payment_Reason,Deferment_Character,PrincipalOnly_Character,Payoff_Acc_Status)  
// //*************************************************************************************************************************************************
// customerPaymentProcess(String paymentType,String paymentMethod,String CheckNumber,String amtReceived,String amtPaid,String printReceipt,String Payment_Reason,String Deferment_Character,String PrincipalOnly_Character,String Payoff_Acc_Status)
	// %FuncInfo[Desc="This is for Process the Customer Payments(Cash,Cash by mail,Check,Check by Mail,Cashier//s CHeck,MoneyOrder).",Group="BranchPlusFunctions"]
	// //STEP: Navigating to Payment Tab
	// navigateToTab_CustomerSubTabs("Payment")
	// //Snap Shot
	// writeReportLog("Snap shot from Payment Tab - Before Payment","Passed","","Y")
	// //Get the Total Principal Balance Before Payment 
	// Real rPrincipleBalBeforePayment = getTotalPrincipalBalance()
	// //Get the total Charge And Paid Amount for Intrest Due before payment
	// Real rChargeAndPaidAmtIntrestDueAmtBeforepayment = get_DiffrenceAmount_ChargeAmtAndPaidAmt_SingleChargeType_PaymentTab("Interest Due")
	// //Get Charge Amount and Paid Amount of Late Charge and Nsf Charge Sum of Difference
	// Real rDiff_Sum_LateAndNSFCharge = get_DiffrenceAmount_ChargeAmtAndPaidAmt_TwoChargeTypes_PaymentTab("Late Charge","Nsf Charge")
	// //Click on Process Button
	// clickButton_Process()
	// //Process Payment
	// processPayment_for_AllTypes(paymentType,paymentMethod,CheckNumber, amtReceived, amtPaid, printReceipt)
	// //*************** Click on Yes Button if Account is assigned to Repo **********
	// click_Button_InWindow_if_WindowExistDP("w_payment","w_message","Yes")	
	// //Handle Mutiple Payments Pop Up Window
	// handleMultiplePaymentsWindow("Yes")
	// //if payment type is forein colletion enter Branch Id, city Reason
	// String sCity, sBranchID
	// if (paymentMethod == "foreign Collection" )
		// //Get Branch ID from DB
		// sBranchID = get_BranchID_FromDB()
		// //Get Branch City Name from DB
		// sCity = get_BranchPlus_CityName_FromDB()
		// //Handle foreign Collection
		// handleforeignCollectionPayment(sBranchID,sCity,Payment_Reason)
	// //Based on Payment type handling the popups
	// if (paymentType == "Principal Only")
		// //Deferment Reson Window Enter an Reason
		// TypeText_DefermentReasonWindow(Payment_Reason)
		// //Handle CashDrawer Window
		// handleMultiple_cashdrawerWindow()
	// else if (paymentType == "Payoff")
		// //Handle IRF Pop Up Window
		// if BranchPlus.w_payment.w_message.WaitWhileExists(5)       
			// BranchPlus.w_payment.w_message.OK.Click()	
		// //Handle CashDrawer Window
		// handleMultiple_cashdrawerWindow()
		// //for Payoff no need Enter any Amount, for Validation purpose before Payment will get the Amount
		// amtReceived = System.GetEnvVar("AmtReceived")
		// amtPaid = System.GetEnvVar("AmtReceived")
		// CheckNumber = ""
	// else if (paymentType == "Deferment")
		// //Deferment Reson Window Enter an Reason
		// TypeText_DefermentReasonWindow(Payment_Reason)
		// //Handle Coupon Printer Window
		// handleMultiplePaymentsWindow("Yes")
		// //for Deferment Received amount as amtReceived and AmtPaid
		// amtReceived = System.GetEnvVar("AmtReceived")
		// amtPaid = System.GetEnvVar("AmtReceived")
	// else if (paymentType == "Regular Payment") 
		// //for some states Enter the reason
		// TypeText_DefermentReasonWindow(Payment_Reason)
		// //Handle CashDrawer Window
		// handleMultiple_cashdrawerWindow()
	// //for Payment details refreshment NavigatTab function ing
	// navigateToTab_CustomerSubTabs("Payment")
	// //Get the Total Principal Balance After Payment
	// Real rNewPrincipal = getTotalPrincipalBalance()
	// //Pick Current Date
	// Date dProcessDate = Date.Now()  
	// String sProcessDate = dProcessDate.Format("dd/MM/yyyy")
	// String sUpdateProcessDate = sProcessDate.Replace("#","")
	// //Snap Shot
	// writeReportLog("Snap shot from Payment Tab - After Payment","Passed","","Y")
	// //Validate the Customer Process Payment Details
	// ValidatePaymentDetails(sUpdateProcessDate,Deferment_Character,PrincipalOnly_Character,Payoff_Acc_Status,paymentType,paymentMethod,amtReceived,amtPaid,CheckNumber,[String]rNewPrincipal,[String]rPrincipleBalBeforePayment,[String]rChargeAndPaidAmtIntrestDueAmtBeforepayment,[String]rDiff_Sum_LateAndNSFCharge)
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/customerPaymentProcess","Failed", Error_Description,"Y")
// 
// //*********************************************************************************************
// //@methodName: processPayment_for_AllTypes(paymentType,paymentMethod,CheckNumber, amtReceived, amtPaid, printReceipt)
// //@Author: Chandra
// //@Date 11 June 2018
// //@Description: This function will do the Payments(Cash,Cash by mail,Check,Check by Mail,Cashier//s CHeck,MoneyOrder)
// //Ex:  processPayment_for_AllTypes("Regular Payment","Check","65432","10","10","third_party_receipt")
// //*********************************************************************************************
// processPayment_for_AllTypes(String paymentType,String paymentMethod,String CheckNumber,String amtReceived,String amtPaid,String printReceipt)
	// %FuncInfo[Desc="This function will do the Payments(Cash,Cash by mail,Check,Check by Mail,Cashier//s CHeck,MoneyOrder).",Group="BranchPlusFunctions"]
	// AppObject ao_pbWindowPayment = BranchPlus.w_payment.dw_payment
	// if (BranchPlus.w_payment.dw_payment.WaitWhileExists(5))
		// // NO need to Select the Radio buttion for Regular pament as by default "Regular Payment" will be selected
		// if (paymentType.ToUpper() == "REGULAR PAYMENT")
			// //Selecting the Payment Type
			// // SetValue_PBDataWindow(pbWindowPayment,"#1","pmt_class",paymentType) 	
			// SetValue_PBDataWindow(ao_pbWindowPayment,"#1","pmt_class", paymentType)
			// Sleep(2)
	// // 	//**** Setting Current Date
	// // 	//Modified by Karthik on 20th April 2020
	// //	todaysDate = getTodaysDate_mmddyyyy_format()
	// //	 SetValueInPBDataWindow_DP("w_payment","dw_payment","#1","pmt_dt","")
	// //	Sleep (1)
	// //	 sendKeys("{BACKSPACE}")
	// //	 typeText_In_PBDatWindow_DP("w_payment","dw_payment","#1","pmt_dt",todaysDate)
	// //
	// //*******
	// //Selecting the Payment Method
	// String paymentMethodToSelect = paymentMethod
	// // SetValue_PBDataWindow(pbWindowPayment,"#1","pmt_type",paymentMethod) 	 	
	// SetValue_PBDataWindow(ao_pbWindowPayment,"#1","pmt_type", paymentMethodToSelect)
	// 
	// //Handling Check Number Data based on PaymentType
	// if (paymentMethod == "Cash" || paymentMethod == "Cash by Mail" || paymentMethod == "Allotment" || paymentMethod == "Dealer Discount" || paymentMethod == "Bankruptcy" || paymentMethod == "Garnish" || paymentMethod == "HO CPI Claim Check" || paymentMethod == "HO GAP Claim Check" || paymentMethod == "HO Warranty Claim Check" || paymentMethod == "Home Office" || paymentMethod == "Mobile Payment")
	// //Ignoring The Check Number if Payment Type is example : Cash and Cash by Mail
	// else
		// SetValue_PBDataWindow(ao_pbWindowPayment,"#1","check_nbr",CheckNumber)	
	// Real rEnvAmtReceived
	// if paymentType == "Deferment" || paymentType == "Payoff" 
		// //for Deferment and Payoff No need to enter Amount
		// rEnvAmtReceived = Math.Round (Real.Parse(GetValue_PBDataWindow(ao_pbWindowPayment,"#1","amt_recvd")), 4)
		// sEnvAmtReceived = [String]rEnvAmtReceived
	// else
		// SetValue_PBDataWindow(ao_pbWindowPayment,"#1","amt_recvd",amtReceived)
		// SetValue_PBDataWindow(ao_pbWindowPayment,"#1","amt_applied",amtPaid)
	// 
	// SetValue_PBDataWindow(ao_pbWindowPayment,"#1",printReceipt,"ON")
	// //Click Ok button in Process Payment Window
	// clickButton_InWindow("w_payment","OK")
	// 
// //*************************************************************************************************************************************************
// //@MethodName: ValidatePaymentDetails()
// //@Author Chandra
// //@Date 13 Jun 2018
// //@Description This is to validate the Payment Details in Payment Tab 
// //Ex  ValidatePaymentDetails(updateprocessDate,paymentType,paymentMethod,amtReceived,amtPaid,CheckNumber,newPrincipal,principleBalBeforePayment,ChargeAndPaidAmtIntrestDueAmtBeforepayment,Diff_Sum_LateAndNSFCharge)
// //*************************************************************************************************************************************************
// ValidatePaymentDetails(String updateprocessDate,String Deferment_Character,String PrincipalOnly_Character,String Payoff_Acc_Status,String paymentType,String paymentMethod,String amtReceived,String amtPaid,String CheckNumber,String newPrincipal,String principleBalBeforePayment,String ChargeAndPaidAmtIntrestDueAmtBeforepayment,String Diff_Sum_LateAndNSFCharge)
	// %FuncInfo[Desc="This is to validate the Payment Details in Payment Tab.",Group="BranchPlusFunctions"]
	// //Validate Payment Processed Date
	// validate_Process_PaymentDate(updateprocessDate)
	// AppObject aoReportwindow = BranchPlus.CustomerF2Window.dw_payments
	// //Validate Payment Method 
	// String paymentT = GetValue_PBDataWindow(aoReportwindow,"#1","pmt_type")
	// validateDataAndReport(paymentMethod.Trim(),paymentT.Trim() , "Validation of Payment Type: " + paymentMethod)
	// //Validate Amount Received and Amount Paid
	// Real amountReceived = [Real]validate_AmountReceived_AmountPaid_Process_Payment(amtReceived,amtPaid)
	// //Getting Principal Balance
	// Real rPrincipleBalance = Math.Round(Real.Parse(GetValue_PBDataWindow(aoReportwindow,"#1","princ_amt")), 4)
	// Print("Validation of Payment Principal Balance has been displayed" + "Payment Principal Balance: $ " +[String]rPrincipleBalance)
	// //Getting other Balance
	// Real rOtherBalance = Math.Round(Real.Parse(GetValue_PBDataWindow(aoReportwindow,"#1","other_amt")), 4)
	// Print("Validation of Payment other Balance has been displayed" + "Payment other Balance: $" + [String]rOtherBalance)
	// //Getting Intrest Balance
	// Real rInterestBalance = Math.Round(Real.Parse(GetValue_PBDataWindow(aoReportwindow,"#1","int_amt")), 4)
	// Print("Validation of Payment Interest Balance has been displayed" + "Payment Interest Balance: $" +[String]rInterestBalance)
	// //Total Sum for Principal, other and Intrest Balance
	// Real rtotalSum_Principal_Other_Intrest_Balance = rPrincipleBalance +rOtherBalance +rInterestBalance
	// Print("Validation of Sum of Principal, Other, Interest Amount Amount has been displayed" + "Sum of Principal, Other, Interest Amount: $" +[String]rtotalSum_Principal_Other_Intrest_Balance)
	// 
	// //Validate Check Number
	// validate_CheckNumber_Payments(CheckNumber)
	// //Validate All Payment Types (Deferment,Regular,Principal Only,Payoff)
	// validate_Payments_AllTypes(paymentType,paymentMethod,Deferment_Character,PrincipalOnly_Character,Payoff_Acc_Status,principleBalBeforePayment,newPrincipal,[String]amountReceived,[String]rtotalSum_Principal_Other_Intrest_Balance,[String]rOtherBalance,[String]rInterestBalance,Diff_Sum_LateAndNSFCharge)
// 
// //***********************************************************************************************************************************************
// //@MethodName: validate_Regular_Payments()
// //@Author Chandra
// //@Date 10 July 2018
// //@Description This is validate Regular Payment for Check, CheckbyMail and Casheir//s check
// //Ex  validate_Regular_Payments(paymentMethod,Diff_LateAndNSFCharge,amountReceived,totalSum_Principal_Other_Intrest_Balance)
// //***********************************************************************************************************************************************
// validate_Regular_Payments(String paymentMethod,Real Diff_LateAndNSFCharge,Real amountReceived,Real totalSum_Principal_Other_Intrest_Balance)
	// %FuncInfo[Desc="This is validate Regular Payment for Check, CheckbyMail and Casheir//s check.",Group="BranchPlusFunctions"]
	// if paymentMethod == "Check" 
		// //Regular check Validations
		// if Math.Round(Diff_LateAndNSFCharge, 4) == Math.Round(amountReceived, 4)
			// validateDataAndReport(Math.Round(Diff_LateAndNSFCharge, 4),Math.Round(amountReceived, 4) , "Validation of Charges Amount: " + [String] Diff_LateAndNSFCharge + " and Amount Paid for Check payment: $" + [String]amountReceived)
		// //total sum of Principal, other, Intrest Balance is equal to AMount received
		// else
			// validateDataAndReport(Math.Round(totalSum_Principal_Other_Intrest_Balance,4),Math.Round(amountReceived,4) , "Validation of Principle Amount: $" + [String]totalSum_Principal_Other_Intrest_Balance + " and Amount Paid for Check payment: $" + [String]amountReceived)
	// else if paymentMethod == "Check by Mail" 
		// //Regular check by mail Validations
		// if Math.Round(Diff_LateAndNSFCharge, 4) == Math.Round(amountReceived, 4)
			// validateDataAndReport(Math.Round(Diff_LateAndNSFCharge, 4),Math.Round(amountReceived, 4) , "Validation of Charges Amount: " + [String] Diff_LateAndNSFCharge + " and Amount Paid for Check by Mail payment: $" + [String]amountReceived)
		// //total sum of Principal, other, Intrest Balance is equal to AMount received
		// else
			// validateDataAndReport(Math.Round(totalSum_Principal_Other_Intrest_Balance,4),Math.Round(amountReceived,4) , "Validation of Principle Amount: $" + [String]totalSum_Principal_Other_Intrest_Balance + " and Amount Paid for Check by Mail payment: $" + [String]amountReceived)
	// else if paymentMethod == "Cashier//s Check" 
		// //Get Charge and paid amt Except Intrest Due
		// if Math.Round(Diff_LateAndNSFCharge, 4) == Math.Round(amountReceived, 4)
			// validateDataAndReport(Math.Round(Diff_LateAndNSFCharge, 4),Math.Round(amountReceived, 4) , "Validation of Charges Amount: " + [String] Diff_LateAndNSFCharge + " and Amount Paid for Cashier//s Check payment: $" + [String]amountReceived)
		// //total sum of Principal, other, Intrest Balance is equal to AMount received
		// else
			// validateDataAndReport(Math.Round(totalSum_Principal_Other_Intrest_Balance,4),Math.Round(amountReceived,4) , "Validation of Principle Amount: $" + [String]totalSum_Principal_Other_Intrest_Balance + " and Amount Paid for Cashier//s Check payment: $" + [String]amountReceived)
// 
// //***************************************************************************************************************************
// //@Method: TypeText_DefermentReasonWindow(cellValue)
// //@Author: Chandra
// //@Date 14 June 2018
// //@Description: This function will type an Text in Payment tab
// //Ex:  TypeText_DefermentReasonWindow("Text")
// //***************************************************************************************************************************
// TypeText_DefermentReasonWindow(String cellValue)
	// %FuncInfo[Desc="This function will type an Text in Payment tab.",Group="BranchPlusFunctions"]
	// if BranchPlus.w_payment.w_search.Txt_Search.WaitWhileExists(5) 
		// //Input Reason
		// BranchPlus.w_payment.w_search.Txt_Search.TypeKeys (cellValue)
		// // writeReportLog("Deferment Payment Reason :" + cellValue,"Passed",FailComments,"")
		// if BranchPlus.w_payment.w_search.WaitWhileExists(5) 
			// //Click on //Ok// button
			// BranchPlus.w_payment.w_search.btnOk.Click()
// 
// //***************************************************************************************************************************
// //@Method: handleMultiple_cashdrawerWindow()
// //@Author: Chandra
// //@Date 14 June 2018
// //@Description: This function handled Multiple Cash Drawer Payment tab
// //Ex:  handleMultiple_cashdrawerWindow()
// //***************************************************************************************************************************
// handleMultiple_cashdrawerWindow()
	// %FuncInfo[Desc="This function handled Multiple Cash Drawer Payment tab.",Group="BranchPlusFunctions"]
	// if Cash_Drawer.Ok.WaitWhileExists(5)   
		// //Click on //Ok// button
		// Cash_Drawer.Ok.Click()
	// //  writeReportLog("Payments Window CashDrawer Pop Up Appeared and that has been handeled","Passed","","")
	// else if Cash_Drawer.Ok.WaitWhileExists(3)    
		// //Click on //Ok// button
		// Cash_Drawer.Ok.Click()
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/handleMultiple_cashdrawerWindow","Failed",FailComments,"Y")
// 
// //*************************************************************************************************************************************************
// //@Method: handleMultiplePaymentsWindow()
// //@Author Chandra
// //@Date 13 June 2018
// //@Description This function handled Multiple Window Payment tab
// //Ex:  handleMultiplePaymentsWindow("Yes") || "No" || "Ok"
// //*************************************************************************************************************************************************
// handleMultiplePaymentsWindow(String buttonName)
	// %FuncInfo[Desc="This function handled Multiple Window Payment tab.",Group="BranchPlusFunctions"]
	// BranchPlus.w_payment.w_message.WaitWhileExists(5)
	// if BranchPlus.w_payment.w_message.buttonName.WaitWhileExists(10)   
		// //Click on //Ok// button //text:=&Yes//
		// BranchPlus.w_payment.w_message.buttonName.Click()	
	// else if BranchPlus.w_payment.w_message.buttonName.WaitWhileExists(3)            
		// //Click on //Ok// button //text:=&Yes//      
		// BranchPlus.w_payment.w_message.buttonName.Click() 
	// Sleep (3)
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/handleMultiplePaymentsWindow","Failed",FailComments,"Y")
// 
// //***************************************************************************************************************************
// //@Method: getTotalPrincipalBalance()
// //@Author: Chandra
// //@Date 13 June 2018
// //@Description: This function is get the Principal bal in Payment tab
// //@Return field value which is required
// //Ex:  getTotalPrincipalBalance()
// //***************************************************************************************************************************
// Real getTotalPrincipalBalance ()
	// %FuncInfo[Desc="This function is get the Principal bal in Payment tab.",Group="BranchPlusFunctions"]
	// AppObject tblPrincipalWindow
	// String sTotalPrincBal
	// Real rTotalPrincBal
	// if BranchPlus.CustomerF2Window.dw_payments.WaitWhileExists(5) 
		// tblPrincipalWindow = BranchPlus.CustomerF2Window.dw_payments
		// if BranchPlus.CustomerF2Window.dw_payments.IsPresent()
			// sTotalPrincBal = GetValue_PBDataWindow(tblPrincipalWindow,"#1","princ_bal")
			// rTotalPrincBal= Real.Parse(sTotalPrincBal)
			// rTotalPrincBal = Math.Round(rTotalPrincBal,4)
			// // writeReportLog("Get total Principal Balance  >> " + totalPrincBal,"Passed","","")
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/getTotalPrincipalBalance","Failed", Error_Description ,"Y")
	// return rTotalPrincBal
// 
// 
// // getTotalPrincipalBalance()
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // String totalPrincBal
	// //  if BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_payments").WaitWhileExists 
		// // Set tblPrincipalWindow = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_payments")
		// // if tblPrincipalWindow.IsPresent() 
			// // totalPrincBal = CCur(GetValue_PBDataWindow(tblPrincipalWindow,"#1","princ_bal"))
			// // // writeReportLog("Get total Principal Balance  >> " + totalPrincBal,"Passed","","")
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed in step/getTotalPrincipalBalance","Failed", Error_Description ,"Y")
	// // getTotalPrincipalBalance = totalPrincBal
// // RemoveFunction
// 
// 
// //*********************************************************************************************
// //@methodName: get_DiffrenceAmount_ChargeAmtAndPaidAmt_PaymentTab()
// //@Author Chandra
// //@Date 12 Jun 2018
// //@Description This is for get the Diffrence Amount for Charge Amount and Paid Amount in PaymentsTab 
// //Ex  get_DiffrenceAmount_ChargeAmtAndPaidAmt_PaymentTab()
// //*********************************************************************************************
// Real get_DiffrenceAmount_ChargeAmtAndPaidAmt_PaymentTab()
	// %FuncInfo[Desc="This is for get the Diffrence Amount for Charge Amount and Paid Amount in PaymentsTab.",Group="BranchPlusFunctions"]
	// //Get Difference Amount
	// Real rGet_TotalSumOf_ChargeAmount_PaymentsTab = get_TotalSumOf_ChargeAmount_PaymentsTab ()
	// Real rGet_TotalSumOf_PaidAmount_PaymentsTab = get_TotalSumOf_PaidAmount_PaymentsTab ()
	// Real rDiffrenceAmount_ChargeAndPaid = Math.Round ((rGet_TotalSumOf_ChargeAmount_PaymentsTab - rGet_TotalSumOf_PaidAmount_PaymentsTab), 4)
	// return rDiffrenceAmount_ChargeAndPaid
// 
// //*********************************************************************************************
// //@methodName: get_DiffrenceAmount_ChargeAmtAndPaidAmt_ExceptIntrestDue_PaymentTab()
// //@Author Chandra
// //@Date 12 Jun 2018
// //@Description This is for get the Diffrence Amount for Charge Amount and Paid Amount Except Intrest Due in PaymentsTab 
// //Ex  get_DiffrenceAmount_ChargeAmtAndPaidAmt_ExceptIntrestDue_PaymentTab()
// //*********************************************************************************************
// Real get_DiffrenceAmount_ChargeAmtAndPaidAmt_ExceptIntrestDue_PaymentTab()
	// %FuncInfo[Desc="This is for get the Diffrence Amount for Charge Amount and Paid Amount Except Intrest Due in PaymentsTab.",Group="BranchPlusFunctions"]
	// Real rGet_TotalSumOf_ChargeAmount_ExceptIntrestDueAmt_PaymentsTab = get_TotalSumOf_ChargeAmount_ExceptIntrestDueAmt_PaymentsTab ()
	// Real rGet_TotalSumOf_PaidAmount_ExceptIntrestDue_PaymentsTab = get_TotalSumOf_PaidAmount_ExceptIntrestDue_PaymentsTab ()
	// 
	// Real rDiffrenceAmount_ChargeAndPaid_ExceptIntrestDue = Math.Round ((rGet_TotalSumOf_ChargeAmount_ExceptIntrestDueAmt_PaymentsTab - rGet_TotalSumOf_PaidAmount_ExceptIntrestDue_PaymentsTab), 4)
	// return rDiffrenceAmount_ChargeAndPaid_ExceptIntrestDue
// 
// //*********************************************************************************************
// //@methodName: get_DiffrenceAmount_ChargeAmtAndPaidAmt_SingleChargeType_PaymentTab(singleChargeType)
// //@Author Chandra
// //@Date 15 Jun 2018
// //@Description This is for get the Diffrence Amount for Charge Amount and Paid Amount for Intrest Due in PaymentsTab 
// //Ex  get_DiffrenceAmount_ChargeAmtAndPaidAmt_SingleChargeType_PaymentTab("lateCharge")
// //*********************************************************************************************
// Real get_DiffrenceAmount_ChargeAmtAndPaidAmt_SingleChargeType_PaymentTab(String singleChargeType)
	// %FuncInfo[Desc="This is for get the Diffrence Amount for Charge Amount and Paid Amount for Intrest Due in PaymentsTab.",Group="BranchPlusFunctions"]
	// Real rget_TotalSumOf_ChargeAmount_singleChargeType_PaymentsTab = /*get_TotalSumOf_ChargeAmount_singleChargeType_PaymentsTab*/([Real]singleChargeType)
	// Real rGet_TotalSumOf_PaidAmount_singleChargeType_PaymentsTab = get_TotalSumOf_PaidAmount_singleChargeType_PaymentsTab(singleChargeType)
	// 
	// Real rDiffrenceAmount_ChargeAndPaid_IntrestDue = Math.Round((rget_TotalSumOf_ChargeAmount_singleChargeType_PaymentsTab - rGet_TotalSumOf_PaidAmount_singleChargeType_PaymentsTab), 4)
	// return rDiffrenceAmount_ChargeAndPaid_IntrestDue
// 
// //*********************************************************************************************
// //@methodName: get_TotalSumOf_ChargeAmount_PaymentsTab()
// //@Author Chandra
// //@Date 12 Jun 2018
// //@Description This is for get the Charge Amount in PaymentsTab 
// //Ex  get_TotalSumOf_ChargeAmount_PaymentsTab()
// //*********************************************************************************************
// Real get_TotalSumOf_ChargeAmount_PaymentsTab()
	// %FuncInfo[Desc="This is for get the Charge Amount in PaymentsTab .",Group="BranchPlusFunctions"]
	// Integer iRowCount = getRowCount_PbDataWindow("w_cust","dw_charges")
	// Real rTotalCharge, rCurrentCharge
	// String sChargeType, sChargeAmount
	// rTotalCharge = 0
	// AppObject aoDWCharges = BranchPlus.CustomerF2Window.dw_charges
	// for (Integer itr = 1; itr<= iRowCount; itr++)
		// sChargeType = GetValue_PBDataWindow(aoDWCharges, [String]itr ,"charge_type")
		// if sChargeType.Trim() == "" 
			// sChargeAmount = GetValue_PBDataWindow(aoDWCharges, [String]itr ,"charge_amt")
			// rCurrentCharge = Math.Round (Real.Parse(sChargeAmount), 4)
			// rTotalCharge = rTotalCharge + rCurrentCharge
	// // writeReportLog("Get Total Sum of Charge Amount >> " + totalCharge,"Passed","","")
	// return rTotalCharge
// 
// //*********************************************************************************************
// //@methodName: get_TotalSumOf_ChargeAmount_ExceptIntrestDueAmt_PaymentsTab()
// //@Author Chandra
// //@Date 15 Jun 2018
// //@Description This is for get the Charge Amount except Intrest Due in PaymentsTab 
// //Ex  get_TotalSumOf_ChargeAmount_ExceptIntrestDueAmt_PaymentsTab()
// //*********************************************************************************************
// Real get_TotalSumOf_ChargeAmount_ExceptIntrestDueAmt_PaymentsTab()
	// %FuncInfo[Desc="This is for get the Charge Amount except Intrest Due in PaymentsTab.",Group="BranchPlusFunctions"]
	// Integer iRowCount =  getRowCount_PbDataWindow("w_cust","dw_charges")
	// Real rTotalCharge, rCurrentCharge
	// String sChargeType, sChargeAmount
	// rTotalCharge = 0
	// AppObject aoDWCharges = BranchPlus.CustomerF2Window.dw_charges
	// for (Integer itr = 1; itr<= iRowCount; itr++)
		// sChargeType = GetValue_PBDataWindow(aoDWCharges, [String]itr ,"charge_type")
		// if sChargeType.Trim() == "Interest Due" 
			// //Get Paid Charge Amt except Intrest Due Amt
		// else
			// sChargeAmount = GetValue_PBDataWindow(aoDWCharges, [String]itr ,"charge_amt")
			// rCurrentCharge = Math.Round (Real.Parse(sChargeAmount), 4)
			// rTotalCharge = rTotalCharge + rCurrentCharge
	// return rTotalCharge
// 
// //*********************************************************************************************
// //@methodName: get_TotalSumOf_ChargeAmount_singleChargeType_PaymentsTab(singleChargeType)
// //@Author Chandra
// //@Date 15 Jun 2018
// //@Description This is for get the Charge Amount for Intrest Due in PaymentsTab 
// //Ex  get_TotalSumOf_ChargeAmount_singleChargeType_PaymentsTab("Interest Due")
// //*********************************************************************************************
// Real get_TotalSumOf_ChargeAmount_SingleChargeType_PaymentsTab(String sSingleChargeType)
	// %FuncInfo[Desc="This is for get the Charge Amount for Intrest Due in PaymentsTab .",Group="BranchPlusFunctions"]
	// Integer iRowCount =  getRowCount_PbDataWindow("w_cust","dw_charges")
	// Real rTotalCharge, rCurrentCharge
	// String sChargeType, sChargeAmount
	// rTotalCharge = 0
	// AppObject aoDWCharges = BranchPlus.CustomerF2Window.dw_charges
	// for (Integer itr = 1; itr<= iRowCount; itr++)
		// sChargeType = GetValue_PBDataWindow(aoDWCharges, [String]itr ,"charge_type")
		// if sChargeType.Trim() == sSingleChargeType 
			// sChargeAmount = GetValue_PBDataWindow(aoDWCharges, [String]itr ,"charge_amt")
			// rCurrentCharge = Math.Round (Real.Parse(sChargeAmount), 4)
			// rTotalCharge = rTotalCharge + rCurrentCharge
	// return rTotalCharge
// 
// //*********************************************************************************************
// //@methodName: get_TotalSumOf_PaidAmount_PaymentsTab()
// //@Author Chandra
// //@Date 12 Jun 2018
// //@Description This is for get the Paid Amount in PaymentsTab 
// //Ex  get_TotalSumOf_PaidAmount_PaymentsTab()
// //*********************************************************************************************
// Real get_TotalSumOf_PaidAmount_PaymentsTab()
	// %FuncInfo[Desc="This is for get the Paid Amount in PaymentsTab.",Group="BranchPlusFunctions"]
	// Integer iRowCount =  getRowCount_PbDataWindow("w_cust","dw_charges")
	// Real rTotalPaidCharge, rCurrentPaidCharge
	// String sChargeType, sCurrentPaidCharge
	// rTotalPaidCharge = 0
	// AppObject aoDWCharges = BranchPlus.CustomerF2Window.dw_charges
	// for (Integer itr = 1; itr<= iRowCount; itr++)
		// sChargeType = GetValue_PBDataWindow(aoDWCharges, [String]itr ,"charge_type")
		// if sChargeType.Trim() == "" 
			// sCurrentPaidCharge = GetValue_PBDataWindow(aoDWCharges, [String]itr ,"paid_amt")
			// rCurrentPaidCharge = Math.Round (Real.Parse(sCurrentPaidCharge), 4)
			// rTotalPaidCharge = rTotalPaidCharge + rCurrentPaidCharge
	// return rTotalPaidCharge
// 
// //*********************************************************************************************
// //@methodName: get_TotalSumOf_PaidAmount_ExceptIntrestDue_PaymentsTab()
// //@Author Chandra
// //@Date 15 Jun 2018
// //@Description This is for get the Paid Amount except Intrest Due amt in PaymentsTab 
// //Ex  get_TotalSumOf_PaidAmount_ExceptIntrestDue_PaymentsTab()
// //*********************************************************************************************
// Real get_TotalSumOf_PaidAmount_ExceptIntrestDue_PaymentsTab()
	// %FuncInfo[Desc="This is for get the Paid Amount except Intrest Due amt in PaymentsTab.",Group="BranchPlusFunctions"]
	// Integer iRowCount =  getRowCount_PbDataWindow("w_cust","dw_charges")
	// Real rTotalPaidCharge, rCurrentPaidCharge
	// String sChargeType, sCurrentPaidCharge
	// rTotalPaidCharge = 0
	// AppObject aoDWCharges = BranchPlus.CustomerF2Window.dw_charges
	// for (Integer itr = 1; itr<= iRowCount; itr++)
		// sChargeType = GetValue_PBDataWindow(aoDWCharges, [String]itr ,"charge_type")
		// if sChargeType.Trim() == "Interest Due" 
			// //Get Paid Charge Amt except Intrest Due Amt
		// else
			// sCurrentPaidCharge = GetValue_PBDataWindow(aoDWCharges, [String]itr ,"paid_amt")
			// rCurrentPaidCharge = Math.Round (Real.Parse(sCurrentPaidCharge), 4)
			// rTotalPaidCharge = rTotalPaidCharge + rCurrentPaidCharge
	// return rTotalPaidCharge
// 
// //*********************************************************************************************
// //@methodName: get_TotalSumOf_PaidAmount_singleChargeType_PaymentsTab(singleChargeType)
// //@Author Chandra
// //@Date 15 Jun 2018
// //@Description This is for get the Paid Amount for Intrest Due amt in PaymentsTab 
// //Ex  get_TotalSumOf_PaidAmount_singleChargeType_PaymentsTab(singleChargeType)
// //*********************************************************************************************
// Real get_TotalSumOf_PaidAmount_singleChargeType_PaymentsTab(String sSingleChargeType)
	// %FuncInfo[Desc="This is for get the Paid Amount for Intrest Due amt in PaymentsTab.",Group="BranchPlusFunctions"]
	// Integer iRowCount =  getRowCount_PbDataWindow("w_cust","dw_charges")
	// Real rTotalPaidCharge, rCurrentPaidCharge
	// String sChargeType, sCurrentPaidCharge
	// rTotalPaidCharge = 0
	// AppObject aoDWCharges = BranchPlus.CustomerF2Window.dw_charges
	// for (Integer itr = 1; itr<= iRowCount; itr++)
		// sChargeType = GetValue_PBDataWindow(aoDWCharges, [String]itr ,"charge_type")
		// if sChargeType.Trim() == sSingleChargeType 
			// sCurrentPaidCharge = GetValue_PBDataWindow(aoDWCharges, [String]itr ,"paid_amt")
			// rCurrentPaidCharge = Math.Round (Real.Parse(sCurrentPaidCharge), 4)
			// rTotalPaidCharge = rTotalPaidCharge + rCurrentPaidCharge
	// return rTotalPaidCharge
// 
// //*********************************************************************************************
// //@methodName: getValueInPBDataWindow_DP(windowName, dataWindowName, rowNumber, colID)
// //@Author Chandra
// //@Date 12 Jun 2018
// //@Description This is for get the Cell value given window name, DataWindowName, RowNumber, ColID  
// //Ex  getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"paid_amt")
// //*********************************************************************************************
// String getValueInPBDataWindow_DP(String sWindowName,String sDataWindowName,String sRowNumber,String colID)
	// %FuncInfo[Desc="This is for get the Cell value given window name, DataWindowName, RowNumber, ColID.",Group="BranchPlusFunctions"]
	// String sCellValue = ""
	// AppObject aoDataWnd = BranchPlus.$sWindowName.$sDataWindowName
	// if BranchPlus.$sWindowName.$sDataWindowName.WaitWhileExists(10)	
		// sCellValue = GetValue_PBDataWindow(aoDataWnd, sRowNumber,colID)
		// if GetErrorCount()>0  			
			// writeReportLog("Failed in step/getValueInPBDataWindow_DP","Failed", Error_Description ,"Y")
		// return (sCellValue)
// 
// //**********************************Generic Function***********************************************
// //@methodName: getRowCount_PbDataWindow(windowName,tableName)
// //@Author Chandra
// //@Date 12 Jun 2018
// //@Description This is for get the Row Count 
// //Ex  getRowCount_PbDataWindow("w_cust","dw_charges")
// //*********************************************************************************************
// Integer getRowCount_PbDataWindow(String sWindowName,String sTableName)
	// %FuncInfo[Desc="This is for get the Row Count.",Group="BranchPlusFunctions"]
	// Sleep(2)
	// Integer iRowCount = 0
	// if (BranchPlus.$sWindowName.$sTableName.WaitWhileExists(10))
			// iRowCount =BranchPlus.$sWindowName.$sTableName.GetAtrr("NumItems")
	// else
		// writeReportLog( sTableName + " : Table not found/visible. Please verify","Failed","","")
	// return iRowCount
// 
// //************************************************************************************************************************************************************
// //@methodName : select_PaymentMethod_PbDataWindow(CellValue)
// //@Author : Chandra
// //@Date 12 June 2018
// //@Description This function will select PaymentType in Payment Window 
// //Ex:  select_PaymentMethod_PbDataWindow("Check") 
// //************************************************************************************************************************************************************
// select_PaymentMethod_PbDataWindow(String CellValue)
	// %FuncInfo[Desc="This function will select PaymentType in Payment Window.",Group="BranchPlusFunctions"]
	// AppObject PaymentMethodWindow =  BranchPlus.w_payment.dw_payment
	// if PaymentMethodWindow.IsPresent() 
		// PaymentMethodWindow.SetValue("#1","#6",CellValue )
		// // writeReportLog("Payment Method is Select with >> " + CellValue,"Passed","","")
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/select_PaymentMethod_PbDataWindow","Failed", Error_Description,"Y")
// 
// //************************************************************************************************************************************************************
// //@methodName : select_AccountStatus_CustomerSearchWindow(valueToSelect)
// //@Author : Chandra
// //@Date 11 June 2018
// //@Description This function will select AccountStatus in Search Window 
// //Ex:  select_AccountStatus_CustomerSearchWindow("Active")
// //************************************************************************************************************************************************************
// select_AccountStatus_CustomerSearchWindow(String valueToSelect)
	// %FuncInfo[Desc="This function will select AccountStatus in Search Window.",Group="BranchPlusFunctions"]
	// //Click on Acct Status button
	// w_bp_frame.CreditDecisionSearchWindow.dw_search.SetActive()
	// //Select Account Status as "Active"
	// AppObject AccountStatusWindow =  BranchPlus.w_payment.w_search.w_choosemany
	// if AccountStatusWindow.IsPresent() 
		// AccountStatusWindow.PbList("pbname:=lb_list").Select (valueToSelect)
		// if AccountStatusWindow.IsPresent() 
			// AccountStatusWindow.PbButton("pbname:=cb_ok").Click()
			// // writeReportLog("Account Status has been selected : " + valueToSelect,"Passed","","")
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/select_AccountStatus_CustomerSearchWindow","Failed", Error_Description,"") //give all failed cases
// 
// //************************************************************************************************************************************************************
// //@methodName : enterValuesIn_CustmerSearch(colName, CellValue)
// //@Author : Chandra
// //@Date 11 June 2018
// //@Description This function will Enter values in Customer search Window 
// //Ex:  EnterValuesIn_CustmerSearch("last_name","D")
// //************************************************************************************************************************************************************ 
// // enterValuesIn_CustmerSearch(String colName,String CellValue)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // Set CustomerSearchWindow =  w_bp_frame.w_search.PbDataWindow("pbname:=dw_search")
		// // if CustomerSearchWindow.IsPresent() 
			// // TypeText_PBDataWindow(CustomerSearchWindow, "#1", colName, CellValue)
			// // // writeReportLog("Customer search with : " + colName + "," + CellValue ,"Passed","","")
	// // if GetErrorCount()>0 
			// // writeReportLog("Failed in step/enterValuesIn_CustmerSearch","Failed", Error_Description,"")
// //************************************************************************************************************************************************************
// //@methodName : clickOkButton_CustomerSearchWindow
// //@Author : Chandra
// //@Date 11 June 2018
// //@Description This function will Click OK button in customer search Window 
// //Ex:  clickOkButton_CustomerSearchWindow()
// //************************************************************************************************************************************************************
// // clickOkButton_CustomerSearchWindow()
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // Set CustomerSearchWindow =  w_bp_frame.w_search.PbButton("regexpwndtitle:=Ok")
		// // if CustomerSearchWindow.IsPresent() 
			// // CustomerSearchWindow.Click()
			// // Sleep (5)
			// // //Sleep (till) accounts load
			// // Sleep_Till_Accounts_Load_F2()
// //*********************************************************************************************
// //@methodName: openF2Screen()
// //@Author Chandr
// //@Date 13 Jun 2018
// //@Description This press the F2 Key which will open the Customer Maintenance/Activity WIndow
// //Ex  openF2Screen()
// //********************************************************************************************* 
// openF2Screen()
	// %FuncInfo[Desc="This press the F2 Key which will open the Customer Maintenance/Activity WIndow.",Group="BranchPlusFunctions"]
	// BranchPlus.SetActive()
	// sendKeys("F2")
// //*********************************************************************************************
// //@MethodName navigateToTab_CustomerSubTabs(tabName)
// //@Author Chandra
// //@Date 14 Jun 2018
// //@Description This is Navigate Tab
// //Ex  navigateToTab_CustomerSubTabs("Payment")
// //*********************************************************************************************
// navigateToTab_CustomerSubTabs(String tabName)
	// %FuncInfo[Desc="This is Navigate Tab.",Group="BranchPlusFunctions"]
	// Sleep(3)
	// if BranchPlus.CustomerF2Window.TabStripe.WaitWhileExists (5)
		// BranchPlus.CustomerF2Window.TabStripe.Select()
		// Sleep(2)
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/navigateToTab_CustomerSubTabs","Failed", Error_Description,"")
// 
// //*********************************************************************************************
// //@MethodName select_AccountType_CustomerSearch_window(tabName)
// //@Author Chandra
// //@Date 14 Jun 2018
// //@Description This is Navigate Tab
// //Ex  select_AccountType_CustomerSearch_window("Automobile Loan - Interest Bearing")
// //*********************************************************************************************
// select_AccountType_CustomerSearch_window(String AccountType)
	// %FuncInfo[Desc="This is Navigate Tab.",Group="BranchPlusFunctions"]
	// AppObject AccountType_PbDataWindow =  BranchPlus.CustomerSearchWindow.dw_search
	// SetValue_PBDataWindow(AccountType_PbDataWindow,"#1","#14",AccountType)
	// //writeReportLog("Customer Search Window Select Account type >> "+AccountType,"Passed",FailComments,"YES")
	// //Error handling
	// if GetErrorCount()>0 
			// LogError("Failed in select_AccountType_CustomerSearch_window")
// 
// //********************************************************************************************************
// //@methodName: get_WorkAuthorization_Customerforms()
// //@Author Sumithra
// //@Date 18 June 2018
// //@Description This is to get work authorization package in customer forms
// //Ex:  get_WorkAuthorization_Customerforms()
// //********************************************************************************************************
// String get_WorkAuthorization_Customerforms()
	// %FuncInfo[Desc="This is to get work authorization package in customer forms.",Group="BranchPlusFunctions"]
	// if UIO_BranchPLUS_Frame.UIO_CustomerForms.WorkAutho_Form_Subject.WaitWhileExists(10)
		// UIO_BranchPLUS_Frame.UIO_CustomerForms.WorkAutho_Form_Subject.SetActive()
	// String sGet_WorkAuthorization_Customerforms = UIO_BranchPLUS_Frame.UIO_CustomerForms.WorkAutho_Form_Subject.GetAttr("Text")
	// if GetErrorCount()>0 
			// LogError("Failed :get_WorkAuthorization_Customerforms ")
	// return sGet_WorkAuthorization_Customerforms
// //********************************************************************************************************
// //@methodName: get_Insurance_Requirement_Customerforms()
// //@Author Sumithra
// //@Date 18 June 2018
// //@Description This is to get Insurance_Requirement package in customer forms
// //Ex:  get_Insurance_Requirement_Customerforms()
// //********************************************************************************************************
// String get_Insurance_Requirement_Customerforms()
	// %FuncInfo[Desc="This is to get Insurance_Requirement package in customer forms.",Group="BranchPlusFunctions"]
	// if UIO_BranchPLUS_Frame.UIO_CustomerForms.InsReq_Form_Subject.WaitWhileExists(10)
		// UIO_BranchPLUS_Frame.UIO_CustomerForms.InsReq_Form_Subject.SetActive()
	// String sGet_Insurance_Requirement_Customerforms = UIO_BranchPLUS_Frame.UIO_CustomerForms.InsReq_Form_Subject.GetAttr("Text")
	// if GetErrorCount()>0 
			// LogError("Failed :get_Insurance_Requirement_Customerforms ")
	// return sGet_Insurance_Requirement_Customerforms
// //********************************************************************************************************
// //@methodName: get_PrivacyStatement_Customerforms()
// //@Author Sumithra
// //@Date 18 June 2018
// //@Description This is to get PrivacyStatement package in customer forms
// //Ex:  get_PrivacyStatement_Customerforms()
// //********************************************************************************************************
// String get_PrivacyStatement_Customerforms()
	// %FuncInfo[Desc="This is to get PrivacyStatement package in customer forms.",Group="BranchPlusFunctions"]
	// if UIO_BranchPLUS_Frame.UIO_CustomerForms.PriVacyNotice_Form_Subject.WaitWhileExists(10)
		// UIO_BranchPLUS_Frame.UIO_CustomerForms.PriVacyNotice_Form_Subject.SetActive()
	// String sGet_PrivacyStatement_Customerforms = UIO_BranchPLUS_Frame.UIO_CustomerForms.PriVacyNotice_Form_Subject.GetAttr("Text")
	// if GetErrorCount()>0 
			// writeReportLog("Failed :get_PrivacyStatement_Customerforms ","Failed", Error_Description,"")
	// return sGet_PrivacyStatement_Customerforms
// //********************************************************************************************************
// //@methodName: get_TextMessageDisclosure_Customerforms()
// //@Author Sumithra
// //@Date 18 June 2018
// //@Description This is to get TextMessageDisclosure package in customer forms
// //Ex:  get_TextMessageDisclosure_Customerforms()
// //********************************************************************************************************
// String get_TextMessageDisclosure_Customerforms()
	// %FuncInfo[Desc="This is to get TextMessageDisclosure package in customer forms.",Group="BranchPlusFunctions"]
	// if UIO_BranchPLUS_Frame.UIO_CustomerForms.TextMsg_Form_Subject.WaitWhileExists(10)
		// UIO_BranchPLUS_Frame.UIO_CustomerForms.TextMsg_Form_Subject.SetActive()
	// String sGet_TextMessageDisclosure_Customerforms = UIO_BranchPLUS_Frame.UIO_CustomerForms.TextMsg_Form_Subject.GetAttr("Text")
	// if GetErrorCount()>0 
			// writeReportLog("Failed :get_TextMessageDisclosure_Customerforms ","Failed", Error_Description,"")
	// return sGet_TextMessageDisclosure_Customerforms
// //********************************************************************************************************
// //@methodName: get_Welcome_Checklist_Customerforms()
// //@Author Sumithra
// //@Date 18 June 2018
// //@Description This is to get Welcome_Checklist package in customer forms
// //Ex:  get_Welcome_Checklist_Customerforms()
// //********************************************************************************************************
// String get_Welcome_Checklist_Customerforms()
	// %FuncInfo[Desc="This is to get Welcome_Checklist package in customer forms.",Group="BranchPlusFunctions"]
	// if UIO_BranchPLUS_Frame.UIO_CustomerForms.WelcomeCall_Form_Subject.WaitWhileExists(10)
	// UIO_BranchPLUS_Frame.UIO_CustomerForms.WelcomeCall_Form_Subject.SetActive()
	// //Get Welcome  Check List from Customer forms
	// String sGet_Welcome_Checklist_Customerforms = UIO_BranchPLUS_Frame.UIO_CustomerForms.WelcomeCall_Form_Subject.GetAttr("Text")
	// if GetErrorCount()>0 
			// writeReportLog("Failed : get_Welcome_Checklist_Customerforms ","Failed", Error_Description,"")
	// return sGet_Welcome_Checklist_Customerforms
// 
// //********************************************************************************************************
// //@methodName: handle_DualLoan_PopUp()
// //@Author Ranjitha
// //@Date 18 June 2018
// //@Description This is will Handle the Dual Loan Pop up in Account Tab 
// //Ex:  handle_DualLoan_PopUp()
// //********************************************************************************************************
// // handle_DualLoan_PopUp()
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // if w_bp_frame.w_view_report.WaitWhileExists(10) 
		// // //Click on Close button in Dual Loan Pop up
		// // w_bp_frame.w_view_report.PbButton("pbname:=cb_close").Click()
		// // if w_bp_frame.w_search.WaitWhileExists(10) 
		// // //Enter Reason
		// // w_bp_frame.CreditDecisionSearchWindow.dw_search.SetValue(CellData "#1","reason","Test123"
		// // //Click on Close button in Dual Loan Pop up
		// // w_bp_frame.w_search.PbButton("pbname:=cb_ok").Click()		
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to handle_DualLoan_PopUp","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: get_WelcomeLetter_Customerforms()
// //@Author Sumithra
// //@Date 18 June 2018
// //@Description This is to get Welcomeletter package in customer forms
// //Ex:  get_WelcomeLetter_Customerforms()
// //********************************************************************************************************
// String get_WelcomeLetter_Customerforms()
	// %FuncInfo[Desc="This is to get Welcomeletter package in customer forms.",Group="BranchPlusFunctions"]
	// if UIO_BranchPLUS_Frame.UIO_CustomerForms.WelcomeLetter_AccNum.WaitWhileExists(10)
		// UIO_BranchPLUS_Frame.UIO_CustomerForms.WelcomeLetter_AccNum.SetActive()
	// //get Account number in Welcome  package
	// String sGet_WelcomeLetter_Customerforms = UIO_BranchPLUS_Frame.UIO_CustomerForms.WelcomeLetter_AccNum.GetAttr("Text")
	// if GetErrorCount()>0 
			// writeReportLog("Failed :get_WelcomeLetter_Customerforms ","Failed", Error_Description,"")
	// return sGet_WelcomeLetter_Customerforms
// //********************************************************************************************************
// //@methodName: setValuesIn_CustomerTab_MotorCycleLoan(USResident, creditScore, Email)
// //@Author Sumithra
// //@Date 18 June 2018
// //@Description This is to setValues in customerTab MotorCycleLoan
// //Ex:  setValuesIn_CustomerTab_MotorCycleLoan(USResident, creditScore, Email)
// //********************************************************************************************************
// setValuesIn_CustomerTab_MotorCycleLoan(String USResident,String creditScore,String Email)
	// %FuncInfo[Desc="This is to setValues in customerTab MotorCycleLoan.",Group="BranchPlusFunctions"]
	// AppObject custTabPbWindow = BranchPlus.CustomerF2Window.dw_cust
	// if custTabPbWindow.IsPresent() 
		// SetValue_PBDataWindow(custTabPbWindow,"#1","us_resident_yn",USResident)
		// SetValue_PBDataWindow(custTabPbWindow,"#1","credit_score",creditScore)
		// SetValue_PBDataWindow(custTabPbWindow,"#1","email",Email)
		// writeReportLog("All Data in Customer Tab has been Updated","Passed","","")	
	// else
		// writeReportLog("Failed : setValuesIn_CustomerTab_MotorCycleLoan ","Failed", Error_Description,"")
// 
// //*********************************GENERIC FUNCTION************************************************
// //@methodName: SleepTillF2ScreenLoads
// //@Author Sumithra
// //@Date 19 June 2018
// //@Description This is to setValues in customerTab MotorCycleLoan
// //Ex:  SleepTillF2ScreenLoads()
// //**************************************************************************************************
// waitTillF2ScreenLoads()
	// %FuncInfo[Desc="This is to setValues in customerTab MotorCycleLoan.",Group="BranchPlusFunctions"]
	// //NExt 
	// for(Integer itr=1; itr<=10; itr++) 
		// //Get Window Title
		// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
		// if aoCustTable.WaitWhileExists(20) 
			// break
// 
// //***********************************************************************************************************************************
// //@Method: enter_AcountTerm_AccountTab(AccountTerm)
// //@Author Sumithra
// //@Date 22 June 2018
// //@Description This function is to Enter account term in account tab
// //Ex:  enter_AcountTerm_AccountTab(AccountTerm)
// //************************************************************************************************************************************ 
// enter_AcountTerm_AccountTab(String AccountTerm)
	// %FuncInfo[Desc="This function is to Enter account term in account tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// SetValue_PBDataWindow(aoCustTable,"#1","nbr_of_months",AccountTerm)
	// //Error Handling
	// if GetErrorCount()>0 
			// writeReportLog("Failed :enter_AcountTerm_AccountTab ","Failed", Error_Description,"")		
// 
// //*************************************************************************************************
// //@methodName: get_ChgAmt_CreditDecision_window
// //@Author Sumithra
// //@Date 19 June 2018
// //@Description This is to get Charge Amount in Credit Decision Window
// //Ex:  get_ChgAmt_CreditDecision_window("1")
// //**************************************************************************************************
// String get_ChgAmt_CreditDecision_window(String rownum)
	// %FuncInfo[Desc="This is to get Charge Amount in Credit Decision Window.",Group="BranchPlusFunctions"]
	// //Get Charge Amount
	// String sGet_ChgAmt_CreditDecision_window = GetValue_In_PBDataWindow_DP("dw_component","#" + rownum,"charge_amt")
	// if GetErrorCount()>0 
			// writeReportLog("Failed : get_ChgAmt_CreditDecision_window ","Failed", Error_Description,"")
	// return sGet_ChgAmt_CreditDecision_window
// //***************************************************************************************************************************
// //@Method: handleCreditDecision_Popup(buttonName)
// //@Author: Ranjitha
// //@Date 21 June 2018
// //@Description: This function handled Credit Decision pop up
// //Ex:  handleCreditDecision_Popup("Yes")
// //*********************************************************************************
// // handleCreditDecision_Popup(String buttonName)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // if w_bp_frame.PbWindow("pbname:=w_message").WaitWhileExists(20)   
		// // //Click on //Yes// button
	// // w_bp_frame.PbWindow("pbname:=w_message").PbButton("text:=&"&buttonName).Click()	
	// // else 
	// // w_bp_frame.PbWindow("pbname:=w_message").PbButton("text:="&buttonName).Click()
	// // if GetErrorCount()>0  			
		// // writeReportLog("Credit Decision pop up NOT Found. Please verify","Failed",FailComments,"Y")
// 
// //***************************************************************************************************************************
// //@Method: select_DisAllow_Check_Payment_InCustomerTab(USResident,cellValue)
// //@Author: Meena
// //@Date: 21 June 2018
// //@Description: This function will check/uncheck the //Dis-Allow Check payment// checkbox and US resident radio button in customer tab
// //Ex:  select_DisAllow_Check_Payment_InCustomerTab("Yes","OFF")
// //***************************************************************************************************************************
// select_DisAllow_Check_Payment_InCustomerTab(String USResident,String cellValue)
	// %FuncInfo[Desc="This function will check/uncheck the //Dis-Allow Check payment// checkbox and US resident radio button in customer tab.",Group="BranchPlusFunctions"]
	// AppObject tblPBDataWindow = BranchPlus.CustomerF2Window.dw_cust
	// //to set USRadio button
	// SetValue_PBDataWindow(tblPBDataWindow,"#1","us_resident_yn",USResident)
	// //check || uncheck the Dis-allow check payments checkbox option in customer tab
	// SetValue_PBDataWindow(tblPBDataWindow,"#1","disallow_checks_yn",cellValue)
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/select_Dis-select_DisAllow_Check_Payment_InCustomerTab","Failed",Error_Description,"Y")
// 
// //***************************************************************************************************************************
// //@Method: validate_DisallowCheckPayment_Warning_Popup()
// //@Author: Meena
// //@Date: 21 June 2018
// //@Description: This function will validate the //Dis-Allow Check Payment// warning popup in payments tab
// //Ex:  validate_DisallowCheckPayment_Warning_Popup() 
// //***************************************************************************************************************************
// validate_DisallowCheckPayment_Warning_Popup()
	// %FuncInfo[Desc="This function will validate the //Dis-Allow Check Payment// warning popup in payments tab.",Group="BranchPlusFunctions"]
	// String sDisAllowWarningText = BranchPlus.w_payment.w_message.Edit.GetAttr("Text")
	// //Validation of //Disallow check payment// warning message
	// if (sDisAllowWarningText.ToUpper()=="FLAGGED FOR DISALLOW CHECKS") 
		// Sleep (2)
		// writeReportLog("Validation of Dis-allow Check Payment Warning Pop Up: " + "//" + sDisAllowWarningText + "//" +" is displayed successfully" ,"Passed",FailComments,"Y")
	// //error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in validate_DisallowCheckPayment_Warning_Popup","Failed",Error_Description,"")
// 
// //@methodName : search_Customers_InF2Screen(AccountStatus, CellValue)
// //@Author : Meena
// //@Date 25 June 2018
// //@Description This function will search for customers in F2 window
// //Ex:  search_Customers_InF2Screen("Active","D")
// //************************************************************************************************************************************************************ 
// search_Customers_InF2Screen (String AccountStatus, String CellValue)
	// %FuncInfo[Desc="This function will search for customers in F2 window.",Group="BranchPlusFunctions"]
	// //Selecting an Account Status
	// select_AccountStatus_CustomerSearchWindow(AccountStatus)
	// //Enter the Last Name
	// enterValuesIn_CustmerSearch("last_name",CellValue)
	// //Click on OK Button 
	// clickOkButton_CustomerSearchWindow ()
// 
// //@methodName : clickButton_ProcessPayment_Window(buttonName)
// //@Author : Meena
// //@Date 25 June 2018
// //@Description This function will handle OK/Cancel buttons in ProcessPayment page
// //Ex:  clickButton_ProcessPayment_Window("OK")
// //**************************************************************************************************************
// clickButton_ProcessPayment_Window(String buttonName)
	// %FuncInfo[Desc="This function will handle OK/Cancel buttons in ProcessPayment page.",Group="BranchPlusFunctions"]	
	// //Click on OK/Cancel buttons in process payments page
	// clickButton_InWindow("w_payment",buttonName)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/clickButton_ProcessPayment_Window","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: validate_for_DualLoan_Warning_Popup()
// //@Author Ranjitha
// //@Date 26 June 2018
// //@Description This is will handle Dual Loan Validation pop up
// //EX:  validate_for_DualLoan_Warning_Popup()
// //*********************************************************************************************************
// validate_for_DualLoan_Warning_Popup()
	// %FuncInfo[Desc="This is will handle Dual Loan Validation pop up.",Group="BranchPlusFunctions"]
	// if DualLoanValidation.WaitWhileExists(5) 
		// DualLoanValidation.Close.Click()
		// Print("Dual loan validation Pop-Up Appeared and has been handled.")	
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed in Step/validate_for_DualLoan_Warning_Popup")
// 
// //*************************************************************************************************************************************************
// //@methodName: customerReversePaymentProcess()
// //@Author Chandra
// //@Date 22 Jun 2018
// //@Description This is for Process the Customer Reverse Payments(Cash,Cash by mail,Check,Check by Mail,Cashier//s CHeck,MoneyOrder)
// //Ex // customerReversePaymentProcess("Insufficient Funds","Cash by Mail","Test","Active","P","D","Payment Reversal","NSF Reversal")
// //*************************************************************************************************************************************************
// // customerReversePaymentProcess(String NsfReason,String paymentType,String Payment_Reason,String Active_Acc_Status,String PrincipalOnly_Character,String Deferment_Character,String ReversePaymentMethod,String NSF_ReversePaymentMethod)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // //STEP: Navigating to Payment Tab
	// // navigateToTab_CustomerSubTabs("Payment")
	// // //Snap Shot
	// // writeReportLog("Snap shot from Payment Tab - Before Reverse Payment","Passed","","Y")
	// // //Get the Total Principal Balance Before Payment 
	// // Real principleBal_BeforeReversePayment = getTotalPrincipalBalance()
	// // //Get the total Charge And Paid Amount for Intrest Due before payment
	// // Real ChargeAndPaidAmtIntrestDueAmtBeforeReversepayment = get_DiffrenceAmount_ChargeAmtAndPaidAmt_SingleChargeType_PaymentTab("Interest Due")
	// // //Get the total Charge And Paid Amount for Late Charge, NSF Charge before payment
	// // Real ChargeAndPaidAmtLateNSFChargeAmtBeforeReversepayment = get_DiffrenceAmount_ChargeAmtAndPaidAmt_TwoChargeTypes_PaymentTab("Late Charge","Nsf Charge")
	// // //Getting the Pay Date, Payment Type, Amount Paid, Anount Paid, Principal Balance. Check Number
	// // AppObject  pbReportWindow = BranchPlus.CustomerF2Window.dw_payments
	// // //Validate Payment Processed Date
	// // String CashProcessesDate = GetValue_PBDataWindow(pbReportWindow,"#1","entry_dt")	
	// // List<String> lsProcessDatecheck = CashProcessesDate.Split(" ")
	// // String CashProcessesDate_BeforeReversePayment = lsProcessDatecheck[0]
	// // //Validate Payment Method 
	// // String paymentType_BeforeReversePayment = GetValue_PBDataWindow(pbReportWindow,"#1","pmt_type")
	// // //Validate Amount Received
	// // Integer amountReceived_BeforeReversePayment = (Math.Round([Integer](GetValue_PBDataWindow(pbReportWindow,"#1","recvd_amt")),4))
	// // //Validate Amount Paid
	// // Integer amountPaid_BeforeReversePayment = (Math.Round([Integer](GetValue_PBDataWindow(pbReportWindow,"#1","applied_amt")),4))
	// // //Getting Principal Balance
	// // Integer principleBalance_BeforeReversePayment = (Math.Round([Integer](GetValue_PBDataWindow(pbReportWindow,"#1","princ_amt")),4))
	// // //Getting other Balance
	// // Integer otherBalance_BeforeReversePayment = (Math.Round([Integer](GetValue_PBDataWindow(pbReportWindow,"#1","other_amt")),4))
	// // //Getting Intrest Balance
	// // Integer interestBalance_BeforeReversePayment = (Math.Round([Integer](GetValue_PBDataWindow(pbReportWindow,"#1","int_amt")),4))
	// // //Validate Check Number
	// // Integer checkNumber_BeforeReversePayment = [Integer](GetValue_PBDataWindow(pbReportWindow,"#1","check_nbr"))
	// // //Selecting First Row 
	// // pbReportWindow.SetActive()
	// // //Click on Reverse Button
	// // clickOnButton_Reverse()
	// // //Click on Yes Button
	// // clickButton_InWindow("w_message","Yes")
	// // //Handle the Multiple Reasons Reverse Payments(Cash,Cash by mail,Check,Check by Mail,Cashier//s Check,MoneyOrder)
	// // handle_MultipleReasons_Reverse_Payments(paymentType_BeforeReversePayment,Payment_Reason,NsfReason)
	// // //Validation of Reverse Payment Details
	// // ValidateReversePaymentDetails(principleBal_BeforeReversePayment,ReversePaymentMethod,NSF_ReversePaymentMethod,Payment_Reason,PrincipalOnly_Character,Deferment_Character,Active_Acc_Status,ChargeAndPaidAmtIntrestDueAmtBeforeReversepayment,ChargeAndPaidAmtLateNSFChargeAmtBeforeReversepayment,CashProcessesDate_BeforeReversePayment,paymentType_BeforeReversePayment,amountReceived_BeforeReversePayment,amountPaid_BeforeReversePayment,principleBalance_BeforeReversePayment,otherBalance_BeforeReversePayment,interestBalance_BeforeReversePayment,checkNumber_BeforeReversePayment)
	// // //Snap Shot
	// // writeReportLog("Snap shot from Payment Tab - After Reverse Payment","Passed","","Y")
	// // //Error handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed in step/customerReversePaymentProcess","Failed",Error_Description,"")
// 
// //*************************************************************************************************************************************************
// //@MethodName: ValidateReversePaymentDetails()
// //@Author Chandra
// //@Date 25 Jun 2018
// //@Description This is to validate the Reverse Payment Details in Payment Tab 
// //Ex  ValidateReversePaymentDetails("8738","Payment Reversal",NSF Reversal","Test,"P","D","Active","57","20","6/25/2018","342.18",183.11,"Cash","10","10","10","","","1432")
// //*************************************************************************************************************************************************
// // ValidateReversePaymentDetails(principleBal_BeforeReversePayment,ReversePaymentMethod,NSF_ReversePaymentMethod,Payment_Reason,PrincipalOnly_Character,Deferment_Character,Active_Acc_Status,ChargeAndPaidAmtIntrestDueAmtBeforeReversepayment,ChargeAndPaidAmtLateNSFChargeAmtBeforeReversepayment,CashProcessesDate_BeforeReversePayment,paymentType_BeforeReversePayment,amountReceived_BeforeReversePayment,amountPaid_BeforeReversePayment,principleBalance_BeforeReversePayment,otherBalance_BeforeReversePayment,interestBalance_BeforeReversePayment,checkNumber_BeforeReversePayment)
	// // //To (Refresh) the Table intstead of giving hard Sleep ing the navigate tab function 	
	// // navigateToTab_CustomerSubTabs("Payment")
	// // Set pbReportWindow = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_payments")	
	// // //Validate Payment Processed Date
	// // CashProcessesDate = GetValue_PBDataWindow(pbReportWindow,"#1","entry_dt")	
	// // processDatecheck = Split(CashProcessesDate," ")
	// // CashProcessesDate = processDatecheck(0)
	// // Reporter.ReportEvent micPass,"Validation of Processes Payment Date and Reverese Payment Date has been displayed","Payment Processes Date : "& CashProcessesDate_BeforeReversePayment &"and Reverse Payment Date : "& CashProcessesDate &" is Matching"	
	// // //Validate Payment Method 
	// // validate_Reverse_paymentMethod(ReversePaymentMethod,NSF_ReversePaymentMethod)
	// // //Validate Amount Received and Amount Paid
	// // amountReceived = validate_AmountPaid_AmountReceived_Reverse_Payments(amountReceived_BeforeReversePayment,amountPaid_BeforeReversePayment)
	// // //	amountReceived = System.GetEnvVar("amountReceived")
	// // //Getting Principal Balance
	// // principleAmount = Abs(Ccur(GetValue_PBDataWindow(pbReportWindow,"#1","princ_amt")))
	// // Reporter.ReportEvent micPass,"Validation of Reverese Payment Principal Balance has been displayed","Reverese Payment Principal Balance : $ "&principleAmount
	// // //Getting other Balance 
	// // otherAmount = Abs(Ccur(GetValue_PBDataWindow(pbReportWindow,"#1","other_amt")))
	// // Reporter.ReportEvent micPass,"Validation of Reverese Payment Other Amount has been displayed","Reverese Payment Other Amount : $ "&otherAmount
	// // //Getting Intrest Balance
	// // intrestAmount = Abs(Ccur(GetValue_PBDataWindow(pbReportWindow,"#1","int_amt")))
	// // Reporter.ReportEvent micPass,"Validation of Reverese Payment Interest Balance has been displayed","Reverese Payment Interest Balance : $ "&intrestAmount
	// // //Total Sum for Principal, other and Intrest Balance
	// // totalSum_Principal_Other_Intrest_Balance = Abs(Ccur(principleAmount + otherAmount +intrestAmount))
	// // //Total Sum for Principal, other and Intrest Balance Before Reverse Payment 
	// // total_Sum_Principal_Other_Intrest_BeforeReversePayment = Abs(Ccur(principleBalance_BeforeReversePayment + otherBalance_BeforeReversePayment + interestBalance_BeforeReversePayment))
	// // Reporter.ReportEvent micPass,"Validation of Processes Payment Sum of Principal, Other, Interest Amount is equal to Reverese Payment Sum of Principal, Other and Principal Amount has been displayed","Payment Processes Sum of Principal, Other, Interest Amount : $"& Ccur(total_Sum_Principal_Other_Intrest_BeforeReversePayment) &" and Reverse Payment Sum of Principal, Other and Principal Amount: $"& Ccur(totalSum_Principal_Other_Intrest_Balance) &" is Matching"	    
	// // //Validate Check Number
	// // validate_CheckNumber_Payments(checkNumber_BeforeReversePayment)
	// // //Validate After Reverse paymnet Principal Balance
	// // principleBal_AfterReversePayment = Abs(getTotalPrincipalBalance())
	// // //PaymentType Principal Only	
	// // if paymentType_BeforeReversePayment = "Cash" || paymentType_BeforeReversePayment = "Check - Insurance Claim" || paymentType_BeforeReversePayment = "foreign Collection" || paymentType_BeforeReversePayment = "Auction Check" || paymentType_BeforeReversePayment = "HO Warranty Claim Check" || paymentType_BeforeReversePayment = "Dealer Reserve" || paymentType_BeforeReversePayment = "Auction Check" || paymentType_BeforeReversePayment = "Check - Insurance Claim" || paymentType_BeforeReversePayment = "foreign Collection" 
		// // validate_Reverse_PrincipalOnly_Payment(PrincipalOnly_Character,principleBal_BeforeReversePayment,amountReceived,principleBal_AfterReversePayment)
	// // //PaymentType Regular
	// // else if paymentType_BeforeReversePayment = "Check" || paymentType_BeforeReversePayment = "Purchased Account" || paymentType_BeforeReversePayment = "Check by Mail" || paymentType_BeforeReversePayment = "Cashier//s Check" || paymentType_BeforeReversePayment = "Home Office" || paymentType_BeforeReversePayment = "Cash by Mail" || paymentType_BeforeReversePayment = "Allotment" || paymentType_BeforeReversePayment = "Dealer GAP Claim Check" 
		// // validate_Reverse_Regular_Payment(paymentType_BeforeReversePayment,Payment_Reason,amountReceived,principleBal_BeforeReversePayment,principleBal_AfterReversePayment,checkNumber_BeforeReversePayment,totalSum_Principal_Other_Intrest_Balance,ChargeAndPaidAmtLateNSFChargeAmtBeforeReversepayment)
	// // //PaymentType Deferment
	// // else if paymentType_BeforeReversePayment = "Money Order" || paymentType_BeforeReversePayment = "Bank Draft" || paymentType_BeforeReversePayment = "eComplish Check" || paymentType_BeforeReversePayment = "eComplish Check" || paymentType_BeforeReversePayment = "Bank Draft" || paymentType_BeforeReversePayment = "Dealer Check" || paymentType_BeforeReversePayment = "Garnish" 
		// // validate_Reverse_Deferment_Payment(Deferment_Character,otherAmount,intrestAmount,interestBalance_BeforeReversePayment,otherBalance_BeforeReversePayment)
	// // //PaymentType Pay off
	// // else if paymentType_BeforeReversePayment = "Bankruptcy" || paymentType_BeforeReversePayment = "eComplish Credit" || paymentType_BeforeReversePayment = "Money Order by Mail" || paymentType_BeforeReversePayment = "eComplish Credit" || paymentType_BeforeReversePayment = "HO GAP Claim Check" || paymentType_BeforeReversePayment = "Dealer Discount" 
		// // validate_Reverse_Payoff_Payment(total_Sum_Principal_Other_Intrest_BeforeReversePayment,amountReceived,Active_Acc_Status)
	// // //Error Handling
	// // if GetErrorCount()>0 
		// // writeReportLog("Failed in step/ValidateReversePaymentDetails","Failed", Error_Description,"")
	// //RemoveFunction
// //*************************************************************************************************************************************************
// //@methodName: NSF_Payment()
// //@Author Chandra
// //@Date 26 Jun 2018
// //@Description This will Process Payment for NSF charge 
// //Ex // NSF_Payment("4321","20")
// //*************************************************************************************************************************************************	
// NSF_Payment(String CheckNumber,String NsfChargeAmount,String Payment_Reason)
	// %FuncInfo[Desc="This will Process Payment for NSF charge .",Group="BranchPlusFunctions"]
	// //Select first Row of Charges
	// BranchPlus.CustomerF2Window.dw_charges.SetActive()
	// //Click on Process Button
	// clickButton_Process()
	// //Process Payment
	// processPayment_for_AllTypes("Regular Payment","Check",CheckNumber, NsfChargeAmount, NsfChargeAmount, "print_receipt")
	// //Handle Mutiple Payments Pop Up Window
	// handleMultiplePaymentsWindow("Yes")
	// //Handle Save the File As Pop Up Window for Some States
	// TypeText_DefermentReasonWindow(Payment_Reason)
	// Print("Validation of NSF Charge Amount Paid: $")
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/NSF_Payment","Failed", Error_Description,"")
// 
// //*************************************************************************************************************************************************
// //@methodName: NSF_Waive_Payment()
// //@Author Chandra
// //@Date 26 Jun 2018
// //@Description This will Waive Payment for NSF charge 
// //Ex // NSF_Waive_Payment("20")
// //*************************************************************************************************************************************************	
// NSF_Waive_Payment(String NsfChargeAmount,String Payment_Reason)
	// %FuncInfo[Desc="This will Process Payment for NSF charge .",Group="BranchPlusFunctions"]
	// //Select First Cell in Charges Section for Waive Process 
	// BranchPlus.CustomerF2Window.dw_charges.SetActive()
	// //Click on Waive Button
	// clickButton_Waive()
	// //Click on Yes Button in Reverse Payment PopUp
	// clickButton_InWindow("w_message","Yes")
	// //Enter Nsf Reason 
	// AppObject tblPBDataWindow = BranchPlus.CustomerSearchWindow.dw_search
	// SetValue_PBDataWindow(tblPBDataWindow,"#1","reason",Payment_Reason)
	// //Click on Yes Button
	// clickButton_InWindow("w_search","Ok")
	// //Verify Nsf Charge is striked out
	// Sleep (2)
	// if BranchPlus.NsfCharge_StrickedOut.WaitWhileExists (10)
		// BranchPlus.NsfCharge_StrickedOut.HoverMouse ()
		// Print("Validation NSF Charge Waived: $"+NsfChargeAmount+"Passed"+FailComments+"Y")
	// else
		// LogError("Failed in step/NSF Charge Waived")
	// if GetErrorCount()>0 
		// LogError("Failed in step/NSF_Waive_Payment")
// 
// //*************************************************************************************************************************************************
// //@methodName: clickOnButton_Reverse()
// //@Author Chandra
// //@Date 20 Jun 2018
// //@Description This will click on Reverse Button
// //Ex // clickOnButton_Reverse()
// //*************************************************************************************************************************************************
// clickOnButton_Reverse()
	// %FuncInfo[Desc="This will click on Reverse Button.",Group="BranchPlusFunctions"]
	// BranchPlus.btnReverse.Click()
	// if GetErrorCount()>0 
		// LogError("Failed in step/clickOnButton_Reverse")
// 
// //***************************************************************************************************************************
// //@Method: TypeText_ReversePaymentReasonWindow(cellValue)
// //@Author: Chandra
// //@Date 14 June 2018
// //@Description: This function will type an Text in Reverse Payment for Cash and Cash by Mail Reason Window
// //Ex:  TypeText_ReversePaymentReasonWindow("Text")
// //***************************************************************************************************************************
// TypeText_ReversePaymentReasonWindow(String cellValue)
	// %FuncInfo[Desc="This function will type an Text in Reverse Payment for Cash and Cash by Mail Reason Window.",Group="BranchPlusFunctions"]
	// if BranchPlus.CustomerSearchWindow.WaitWhileExists (10)
		// //Cash and Cash by Mail input Reason
		// BranchPlus.CustomerSearchWindow.TypeKeys (cellValue)
		// if BranchPlus.CustomerSearchWindow.WaitWhileExists (10)
			// //Click on //Ok// button
			// BranchPlus.CustomerSearchWindow.btnOK.Click()
			// Sleep (3)
	// if GetErrorCount()>0  			
		// LogError("Failed in step/TypeText_ReversePaymentReasonWindow , Failed"+Error_Description+"")
// 
// //*********************************************************************************************
// //@methodName: get_TotalSumOfAmount_ChargeAmt_TwoChargeTypes_PaymentTab(singleChargeType,singleChargeType)
// //@Author Chandra
// //@Date 22 Jun 2018
// //@Description This is for get the sum for Charge Amount for Two charge type PaymentsTab 
// //Ex  get_TotalSumOfAmount_ChargeAmt_TwoChargeTypes_PaymentTab("lateCharge","NsfCharge")
// //*********************************************************************************************
// Real get_TotalSumOfAmount_ChargeAmt_TwoChargeTypes_PaymentTab(String FirstChargeType,String SecondChargeType)
	// %FuncInfo[Desc="This is for get the sum for Charge Amount for Two charge type PaymentsTab.",Group="BranchPlusFunctions"]
	// Real ChargeAmountFirstType = get_TotalSumOf_ChargeAmount_SingleChargeType_PaymentsTab(FirstChargeType)
	// Real ChargeAmountSecondType = get_TotalSumOf_ChargeAmount_SingleChargeType_PaymentsTab(SecondChargeType)
	// Real TotalChargeAmount =  (Math.Round((ChargeAmountFirstType + ChargeAmountSecondType),4))
	// Real rGet_TotalSumOfAmount_ChargeAmt_TwoChargeTypes_PaymentTab = TotalChargeAmount
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/get_TotalSumOfAmount_ChargeAmt_TwoChargeTypes_PaymentTab","Failed", Error_Description ,"Y")
	// return rGet_TotalSumOfAmount_ChargeAmt_TwoChargeTypes_PaymentTab
// //*********************************************************************************************
// //@methodName: get_TotalSumOfAmount_PaidAmt_TwoChargeTypes_PaymentTab(singleChargeType,singleChargeType)
// //@Author Chandra
// //@Date 22 Jun 2018
// //@Description This is for get the sum for Paid Amount for Two charge types PaymentsTab 
// //Ex  get_TotalSumOfAmount_PaidAmt_TwoChargeTypes_PaymentTab("lateCharge","NsfCharge")
// //*********************************************************************************************
// Real get_TotalSumOfAmount_PaidAmt_TwoChargeTypes_PaymentTab(String FirstChargeType,String SecondChargeType)
	// %FuncInfo[Desc="This is for get the sum for Paid Amount for Two charge types PaymentsTab.",Group="BranchPlusFunctions"]
	// Real PaidAmountFirstType = get_TotalSumOf_PaidAmount_singleChargeType_PaymentsTab(FirstChargeType)
	// Real PaidAmountSecondType = get_TotalSumOf_PaidAmount_singleChargeType_PaymentsTab(SecondChargeType)
	// Real rTotaPaidAmount =  (Math.Round((PaidAmountFirstType + PaidAmountSecondType),4))
	// Real rGet_TotalSumOfAmount_PaidAmt_TwoChargeTypes_PaymentTab = rTotaPaidAmount
	// if GetErrorCount()>0  			
		// LogError("Failed in step/get_TotalSumOfAmount_PaidAmt_TwoChargeTypes_PaymentTab , Failed"+ Error_Description +"Y")
	// return rGet_TotalSumOfAmount_PaidAmt_TwoChargeTypes_PaymentTab
// //*********************************************************************************************
// //@methodName: get_DiffrenceAmount_ChargeAmtAndPaidAmt_TwoChargeTypes_PaymentTab(singleChargeType)
// //@Author Chandra
// //@Date 22 Jun 2018
// //@Description This is for get the Diffrence Amount for Charge Amount and Paid Amount for Intrest Due in PaymentsTab 
// //Ex  get_DiffrenceAmount_ChargeAmtAndPaidAmt_TwoChargeTypes_PaymentTab("lateCharge","NsfCharge")
// //*********************************************************************************************
// Real get_DiffrenceAmount_ChargeAmtAndPaidAmt_TwoChargeTypes_PaymentTab(String FirstChargeType,String SecondChargeType)
	// %FuncInfo[Desc="This is for get the Diffrence Amount for Charge Amount and Paid Amount for Intrest Due in PaymentsTab.",Group="BranchPlusFunctions"]
	// Real DiffrenceAmount_ChargeAndPaid = (get_TotalSumOfAmount_ChargeAmt_TwoChargeTypes_PaymentTab(FirstChargeType,SecondChargeType) - get_TotalSumOfAmount_PaidAmt_TwoChargeTypes_PaymentTab(FirstChargeType,SecondChargeType))
	// Real get_DiffrenceAmount_ChargeAmtAndPaidAmt_TwoChargeTypes_PaymentTab = DiffrenceAmount_ChargeAndPaid
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/get_DiffrenceAmount_ChargeAmtAndPaidAmt_TwoChargeTypes_PaymentTab","Failed", Error_Description ,"Y")
	// return get_DiffrenceAmount_ChargeAmtAndPaidAmt_TwoChargeTypes_PaymentTab
// //*************************************************************************************************************************************************
// //@methodName: clickButton_Waive()
// //@Author Chandra
// //@Date 22 Jun 2018
// //@Description This will click on Waive Button
// //Ex // clickButton_Waive()
// //*************************************************************************************************************************************************
// clickButton_Waive()
	// %FuncInfo[Desc="This will click on Waive Button.",Group="BranchPlusFunctions"]
	// BranchPlus.btnWaive.Click()
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/clickButton_Wive","Failed", Error_Description,"Y")
// 
// //*************************************************************************************************************************************************
// //@methodName: handle_VersionMismatch_Popup()
// //@Author Ranjitha
// //@Date 26 Jun 2018
// //@Description This will handle the Version mismatch pop up after Branchplus login
// //Ex:  handle_VersionMismatch_Popup()
// //***************************************************************************************************************************************************
// // handle_VersionMismatch_Popup()
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // if w_bp_frame.Dialog("regexpwndtitle:=Version Mismatch").WaitWhileExists(10) 
		// // //w_bp_frame.Dialog("regexpwndtitle:=Version Mismatch").PbButton("regexpwndtitle:=&Yes").Click()
		// // writeReportLog("Version Mismatch Pop-Up Appeared, Please deploy latest build","Failed", Error_Description,"Y")
	// // if GetErrorCount()>0 
		// // writeReportLog("Failed in step/handle_VersionMismatch_Popup","Failed", Error_Description,"Y")
// 
// //*************************************************************************************************************************************************
// //@methodName: enter_Stipulated_Details_AutoLoan_CreditDecision_Window(completed_Signed_Application,completed_Signed_Contract,coMaker_agreement,signed_Bill_of_Sale,copy_of_PFS_GAP_VSC,copy_of_Valid_Driver_License,PFS_Credit_Verifictn_Authorizn_form,list_of_Relatives,proof_of_Residence,proof_of_Income)
// //@Author Ranjitha
// //@Date 27 Jun 2018
// //@Description This will enter stipulated details for Auto Loan in Credit Decision window
// //Ex:  enter_Stipulated_Details_AutoLoan_CreditDecision_Window(completed_Signed_Application,completed_Signed_Contract,coMaker_agreement,signed_Bill_of_Sale,copy_of_PFS_GAP_VSC,copy_of_Valid_Driver_License,PFS_Credit_Verifictn_Authorizn_form,list_of_Relatives,proof_of_Residence,proof_of_Income)
// //*************************************************************************************************************************************************
// enter_Stipulated_Details_AutoLoan_CreditDecision_Window(String completed_Signed_Application,String completed_Signed_Contract,String coMaker_agreement,String signed_Bill_of_Sale,String copy_of_PFS_GAP_VSC,String copy_of_Valid_Driver_License,String PFS_Credit_Verifictn_Authorizn_form,String list_of_Relatives,String proof_of_Residence,String proof_of_Income)
	// %FuncInfo[Desc="This will enter stipulated details for Auto Loan in Credit Decision window.",Group="BranchPlusFunctions"]
	// if BranchPlus.CreditDecision.tbldwStep.WaitWhileExists(5) 
		// AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
		// TypeText_PBDataWindow(crdDecision,"#1","other_stipulation",completed_Signed_Application)
		// TypeText_PBDataWindow(crdDecision,"#2","other_stipulation",completed_Signed_Contract)
		// TypeText_PBDataWindow(crdDecision,"#3","other_stipulation",coMaker_agreement)
		// TypeText_PBDataWindow(crdDecision,"#4","other_stipulation",signed_Bill_of_Sale)
		// TypeText_PBDataWindow(crdDecision,"#5","other_stipulation",copy_of_PFS_GAP_VSC)
		// TypeText_PBDataWindow(crdDecision,"#6","other_stipulation",copy_of_Valid_Driver_License)
		// TypeText_PBDataWindow(crdDecision,"#7","other_stipulation",PFS_Credit_Verifictn_Authorizn_form)
		// TypeText_PBDataWindow(crdDecision,"#8","other_stipulation",list_of_Relatives)
		// TypeText_PBDataWindow(crdDecision,"#9","other_stipulation",proof_of_Residence)
		// TypeText_PBDataWindow(crdDecision,"#10","other_stipulation",proof_of_Income)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in enter_Stipulated_Details_AutoLoan_CreditDecision_Window","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: verify_CPIAdded_afterReversed_ComponentTab()
// //@Author: Sumithra
// //@Date 27 June 2018
// //@Description: This function is to verify CPI Insurance in component tab
// //Ex:  verify_CPIAdded_afterReversed_ComponentTab()
// //***************************************************************************************************************************
// verify_CPIAdded_afterReversed_ComponentTab()
	// %FuncInfo[Desc="This function is to verify CPI Insurance in component tab.",Group="BranchPlusFunctions"]
	// //navigate to Component tab
	// navigateToTab("Component")         
	// if BranchPlus.CollateralProtection.WaitWhileExists(10) 
		// Print("CPI is added back successfully"+"Passed"+""+"Y")
	// else
		// LogError("CPI is not added :verify"+"Failed"+ Error_Description+"")	
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed to verify_CPIAdded_afterReversed_ComponentTab"+"Failed"+ Error_Description+"") 
// 
// //***************************************************************************************************************************
// //@Method: select_Account_ToAdd_CPI_ComponentTab()
// //@Author: Sumithra
// //@Date 27 June 2018
// //@Description: This function is to select account to add CPI Insurance in component tab
// //Ex:  select_Account_ToAdd_CPI_ComponentTab()
// //***************************************************************************************************************************
// select_Account_ToAdd_CPI_ComponentTab()
	// %FuncInfo[Desc="This function is to select account to add CPI Insurance in component tab.",Group="BranchPlusFunctions"]
	// navigateToTab("Component")
	// Sleep (2)
	// //get row count of component description table
	// Integer rowCnt = getRowCount_PbDataWindow("w_cust","dw_component")
	// for(Integer iterator = 1; iterator<=rowCnt; iterator++)
		// //get component description name
		// String desc = getValueInPBDataWindow_DP("w_cust","dw_component","#"  +[String]iterator ,"descr")
		// if desc == "Collateral Protection" 
			// AppObject custTable = BranchPlus.CreditDecision.tbldwcomponent
			// custTable.Select("#" + [String]iterator,"descr")
			// Sleep (2)
			// custTable.Select("#" + [String]iterator,"descr")
			// //custTable.DoubleClick "#" + iterator,"descr"	
			// AppObject aocustTable = BranchPlus.w_checkbook_pmt_split.dw_list
			// aocustTable.TypeKeys ("deleted")
			// aocustTable.SetValue("#1","start_dt","")
			// aocustTable.SetValue("#1","end_dt","")
			// clickButton_InWindow("w_acct_component_detail","Save")
			// //w_bp_frame.PbWindow("pbname:=w_acct_component_detail").PbWindow("pbname:=w_message").PbButton("text:=OK").Click()			 
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/select_Account_ToAdd_CPI_ComponentTab","Failed", Error_Description,"")
// 
// //***************************************************************************************************************************
// //@Method: cancel_CPI_ComponentTab()
// //@Author: Sumithra
// //@Date 27 June 2018
// //@Description: This function is to cancel CPI Insurance in component tab
// //Ex:  cancel_CPI_ComponentTab()
// //***************************************************************************************************************************
// cancel_CPI_ComponentTab()
	// %FuncInfo[Desc="This function is to cancel CPI Insurance in component tab.",Group="BranchPlusFunctions"]
		// //Navigate to Component tab
	// navigateToTab("Component")
	// //get row count
	// Integer rowCnt = getRowCount_PbDataWindow("w_cust","dw_component")
	// for(Integer itr = 1; itr<=rowCnt; itr++)
		// //get component description name
		// String desc = getValueInPBDataWindow_DP("w_cust","dw_component","#" +[String]itr ,"descr")
		// if desc == "Collateral Protection" 	
			// //select cell in component description table
			// AppObject custTable = BranchPlus.CreditDecision.tbldwcomponent
			// custTable.Select("#" +[String]itr,"descr")
			// //click on cancel button
			// clickCancelButton()
			// //click on cancel component button
			// //click on ok button
			// clickButton_InWindow("w_cancel_component","C&ancel Component")
			// //click on yes button in cancel popup
			// click_Button_InWindow_DP("w_cancel_component","w_message","Yes")	
			// //click on OK button in cancel popup
			// click_Button_InWindow_DP("w_cancel_component","w_message","OK")
			// //click on No in payment coupon popup
			// click_Button_InWindow_if_WindowExistDP("w_cancel_component","w_message","No")
			// Sleep(5)
			// //click on cancel button in late charge adjustement popup
			// if BranchPLUS.w_cancel_Component.w_late_charge_adjustment.WaitWhileExists(3) 
				// BranchPLUS.w_cancel_Component.w_late_charge_adjustment.cb_cancel.Click()
			// // click_Button_InWindow_DP("w_cancel_component","w_late_charge_adjustment","Cancel")
			// //click on close button in component to cancel popup
			// clickButton_InWindow("w_cancel_component","Close")			
	// //	if BranchPlus.InsightObject("CollateralProtection_StrikedOff").WaitWhileExists(20) 
	// //		 writeReportLog("CPI is cancelled successfully","Passed",FailComments,"Y")
	// //	else
	// //		 writeReportLog("CPI is not cancelled :verify ","Failed", Error_Description,"")				
	// //	 
	// //Opening Component Details Popup 
	// openComponentDetail_ComponentTab("Component Description","Collateral Protection")
	// //Fetching the Value
	// String cancelValue = getValueFrom_ComponentDetail_Window_ComponentTab("Cancel Y/N")
	// //Validation
	// if cancelValue == "ON" 
		// writeReportLog("Validation, CPI has been Cancelled successfully","Passed","","Y")
	// else
		// writeReportLog("CPI has not been canceled. Please Check","Failed","","")
	// //Closing the Component Detail Window
	// clickButton_Level1PBwindow_DP("Component Detail","Cancel")
	// Sleep (2)
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : cancel_CPI_ComponentTab ","Failed", Error_Description,"")
// 
// //***************************************************************************************************************************
// //@Method: add_CPI_Insurance_Component_Tab(startDate,endDate,ChargeAmt)
// //@Author: Sumithra
// //@Date 27 June 2018
// //@Description: This function is to add CPI Insurance in component tab
// //Ex:  add_CPI_Insurance_Component_Tab("27/06/2018","27/07/2018","500")
// //***************************************************************************************************************************
// add_CPI_Insurance_Component_Tab(String startDate,String endDate,String ChargeAmt)
	// %FuncInfo[Desc="This function is to add CPI Insurance in component tab.",Group="BranchPlusFunctions"]
	// if w_bp_frame.CreditDecisionSearchWindow.dw_search.WaitWhileExists(10) 
	// AppObject custTable = w_bp_frame.CreditDecisionSearchWindow.dw_search
	// //enter start date
		// SetValue_PBDataWindow(custTable,"#1","start_date",startDate)
	// //enter end date
		// SetValue_PBDataWindow(custTable,"#1","end_date",endDate)
		// //enter charge amount
		// SetValue_PBDataWindow(custTable,"#1","charge_amt",ChargeAmt)
	// //click on ok button
		// clickButton_InWindow("w_search","Ok")
	// //click on payment coupon popup
	// //  clickButton_InWindow("w_message","No")
		// handle_PbWindow("w_message","No")
		// if BranchPlus.InsightObject("CollateralProtection").WaitWhileExists(20) 
			// writeReportLog("CPI is added successfully from: " + startDate + " To: " + endDate + " with Charge Amount of $" + ChargeAmt ,"Passed",FailComments,"Y")
		// else
			// writeReportLog("CPI is not added, Verify","Failed",FailComments,"")
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : add_CPI_Insurance_Component_Tab ","Failed", Error_Description,"")
// 
// //***************************************************************************************************************************
// //@Method: selectValue_From_ChooseAnItem_Popup_ComponentTab(valueToSelect)
// //@Author: Sumithra
// //@Date 27 June 2018
// //@Description: This function is to select option from choose an item popup
// //Ex:  selectValue_From_ChooseAnItem_Popup_ComponentTab("New CPI Insurance")
// //***************************************************************************************************************************
// selectValue_From_ChooseAnItem_Popup_ComponentTab(String sValueToSelect)
	// %FuncInfo[Desc="This function is to select option from choose an item popup.",Group="BranchPlusFunctions"]
	// if BranchPlus.w_chooseone.lb_list.WaitWhileExists(10) 
		// //select value from Choose an item popup
		// BranchPlus.w_chooseone.lb_list.Select(sValueToSelect)
		// //click on ok button in popup
		// BranchPlus.w_chooseone.btnOk.Click()
// 
// //***************************************************************************************************************************
// //@Method: selectValue_From_GiveCustomerChange_Popup_InPaymentTab(valueToSelect,buttonName)
// //@Author: Chandra
// //@Date 08 Aug 2019
// //@Description: This function is to select option from Give Customer Change Popup In PaymentTab
// //Ex:  selectValue_From_GiveCustomerChange_Popup_InPaymentTab("Give change from CHECK BOOK","Ok")
// //***************************************************************************************************************************
// selectValue_From_GiveCustomerChange_Popup_InPaymentTab(String valueToSelect,String buttonName)
	// %FuncInfo[Desc="This function is to select option from Give Customer Change Popup In PaymentTab.",Group="BranchPlusFunctions"]
	// if BranchPlus.w_chooseone.lb_list.WaitWhileExists(10) 
		// //select value from Choose an item popup
		// BranchPlus.w_chooseone.lb_list.Select (valueToSelect)
		// //click on ok button in popup
		// clickButton_In_Level2PBwindow_DP("w_payment", "w_chooseone", buttonName)
	// //error handling
	// if GetErrorCount()>0 
		// LogError("Failed in selectValue_From_GiveCustomerChange_Popup_InPaymentTab ")
// 
// //***************************************************************************************************************************
// //@Method: clickNewButton()
// //@Author: Sumithra
// //@Date 27 June 2018
// //@Description: This function is to click on new button
// //Ex:  clickNewButton()
// //***************************************************************************************************************************
// clickNewButton()
	// %FuncInfo[Desc="This function is to click on new button.",Group="BranchPlusFunctions"]
	// Sleep (2)
	// //click on New button
	// BranchPlus.btnNew.Click()
	// //error handling
	// if GetErrorCount()>0 
		// LogError("Failed to clickNewButton")
// 
// //***************************************************************************************************************************
// //@Method: clickCancelButton()
// //@Author: Sumithra
// //@Date 27 June 2018
// //@Description: This function is to click on cancel button
// //Ex:  clickCancelButton()
// //***************************************************************************************************************************
// clickCancelButton()
	// %FuncInfo[Desc="This function is to click on cancel button.",Group="BranchPlusFunctions"]
	// //click on Cancel button
	// BranchPlus.btnCancel.Click()
	// //error handling
	// if GetErrorCount()>0 
		// LogError("Failed to clickCancelButton")
// 
// //***************************************************************************************************************************
// //@Method: checkPaymentTab_CPI(startDate,PayMethod,ChargeAmt)
// //@Author: Sumithra
// //@Date 27 June 2018
// //@Description: This function is to check CPI details in payment tab
// //Ex:  checkPaymentTab_CPI("26/6/2018","CPI_Refund","500")
// //***************************************************************************************************************************
// checkPaymentTab_CPI(String startDate,String PayMethod,String ChargeAmt)
	// %FuncInfo[Desc="This function is to check CPI details in payment tab.",Group="BranchPlusFunctions"]
	// //navigate to Payment tab
	// navigateToTab("Payment")
	// AppObject aoReportWindow = BranchPlus.CustomerF2Window.dw_payments
	// //Validate Paid Date
	// String payDate = GetValue_PBDataWindow(aoReportWindow,"#1","entry_dt")	
	// List<String> lsProcessDatecheck = payDate.Split(" ")
	// payDate = lsProcessDatecheck[0]	
	// validateDataAndReport(DateTime.Parse("dd-MM-yyyy", payDate), DateTime.Parse("dd-MM-yyyy", startDate) , "Validation of Pay Date :- ActualResult:  { DateTime.Parse("dd-MM-yyyy", payDate) }  ExpectedResult: {DateTime.Parse("dd-MM-yyyy", startDate)}")
	// //Validate Payment Method 
	// String payment = GetValue_PBDataWindow(aoReportWindow,"#1","pmt_type")
	// validateDataAndReport((payment).Trim(),(PayMethod).Trim() , "Validation of Pay Method :- ActualResult: " + "//" + (payment).Trim() + "//" + " ExpectedResult: " +"//" + (PayMethod).Trim() + "//")
	// //Validate Amount Received
	// Real amountReceived = (Math.Round([Real](GetValue_PBDataWindow(aoReportWindow,"#1","recvd_amt")),4))
	// String sAmountReceived=amountReceived.Format ()
	//  sAmountReceived=sAmountReceived.Replace("-","")
	// amountReceived = Real.Parse(sAmountReceived)
	// Real rChargeAmt = Real.Parse(ChargeAmt)
	// validateDataAndReport((Math.Round((amountReceived),4)), (Math.Round((rChargeAmt),4)), "Validation of Amount Received:- ActualResult: ${ (Math.Round((amountReceived),4))}   ExpectedResult: $ { (Math.Round((rChargeAmt),4))}")
	// //validation of principle balance
	// Real old_PrincipleBal=(Math.Round(Real.Parse(GetValue_PBDataWindow(aoReportWindow,"#2","princ_bal")),4))
	// Real new_PrincipleBal= (Math.Round(Real.Parse(GetValue_PBDataWindow(aoReportWindow,"#1","princ_bal")),4))
	// Real principleBal
	// if PayMethod == "CPI Added"  
		// principleBal = old_PrincipleBal + Real.Parse(ChargeAmt)
		// validateDataAndReport((Math.Round((principleBal),4)), (Math.Round((new_PrincipleBal),4)), "Validation of Principle balance after CPI added:- ActualResult: $ { (Math.Round((principleBal),4))}   ExpectedResult: $ {(Math.Round((new_PrincipleBal),4))}") 
		// 
	// else if  PayMethod == "CPI_FIX" 	
		// principleBal = old_PrincipleBal + Real.Parse(ChargeAmt)
		// validateDataAndReport((Math.Round((principleBal),4)), (Math.Round((new_PrincipleBal),4)) ,"Validation of Principle balance after CPI Refund reversed:- ActualResult: $ { (Math.Round((principleBal),4))}  ExpectedResult: $ {(Math.Round((new_PrincipleBal),4))}") 
	// else
		// principleBal = old_PrincipleBal - Real.Parse(ChargeAmt)
		// validateDataAndReport((Math.Round((principleBal),4)), (Math.Round((new_PrincipleBal),4)) ,"Validation of Principle balance after CPI Refund reversed:- ActualResult: $ { (Math.Round((principleBal),4))}  ExpectedResult: $ {(Math.Round((new_PrincipleBal),4))}") 
	// //error handling
	// if GetErrorCount()>0 
		// LogError("Failed to checkPaymentTab_CPI , Failed"+ Error_Description+"Y")
// 
// //***************************************************************************************************************************
// //@Method: reverse_CPI_Refund_PaymentTab()
// //@Author: Sumithra
// //@Date 27 June 2018
// //@Description: This function is to reverse CPI Refund in payment tab
// //Ex:  reverse_CPI_Refund_PaymentTab()
// //***************************************************************************************************************************
// reverse_CPI_Refund_PaymentTab()
	// %FuncInfo[Desc="This function is to reverse CPI Refund in payment tab.",Group="BranchPlusFunctions"]
	// //navigate to Payment tab
	// navigateToTab("Payment")
	// AppObject aoReportWindow = BranchPlus.CustomerF2Window.dw_payments
	// //select cell to reverse
	// aoReportWindow.Select( "#1","pmt_type")
	// //click on reverse button
	// clickOnButton_Reverse()	
	// //	w_bp_frame.PbWindow("pbname:=w_message").PbButton("regexpwndtitle:=&Yes").WaitWhileExists(5)
	// //	//click on Reverse refund popup
	// //	w_bp_frame.PbWindow("pbname:=w_message").PbButton("regexpwndtitle:=&Yes").Click()	
	// //Click Yes on Confirmation 
	// clickButtonInPBWindow("REVERSE COMPONENT ADJUSTMENT","Yes")	
	// //9.6.0 Specific Handling
	// enter_Payment_ReversalTypeAndReason("Other","Automation Testing")
	// //	//Click Yes on Confirmation 
	// //	 clickButtonInPBWindow("REVERSE COMPONENT REFUND","Yes")
	// //	
	// //	//Selecting Reason	
	// //	 TypeText_In_WinEditor_DP("Enter reason for reversal","Automation Testing")
	// //		
	// //	//Click on Ok Button
	// //	 clickButton_Level1PBwindow_DP("Enter reason for reversal","Ok")
	// Print("CPI is reversed in payment tab,Passed"+""+"Y")
	// //error handling
	// if GetErrorCount()>0 
		// LogError("Failed to reverse_CPI_Refund_PaymentTab , Failed"+ Error_Description+"Y")
// 
// //***************************************************************************************************************************
// //@Method: customer_Search_In_F2Screen(AccountStatus,AccountType,LastName)
// //@Author: Sumithra
// //@Date 27 June 2018
// //@Description: This function will open accounts by giving serach details in customer search window
// //Ex:  customer_Search_In_F2Screen("Active","Interest Bearing","S")
// //***************************************************************************************************************************
// customer_Search_In_F2Screen(String AccountStatus,String AccountType,String LastName)
	// %FuncInfo[Desc="This function will open accounts by giving serach details in customer search window.",Group="BranchPlusFunctions"]
	// //Selecting an Account Status
	// select_AccountStatus_CustomerSearchWindow(AccountStatus)
	// //selct account type
	// select_AccountType_CustomerSearch_window(AccountType)
	// //Enter the Last Name
	// enterValuesIn_CustmerSearch("last_name",LastName)
	// //Click on OK Button in customer search window
	// clickOkButton_CustomerSearchWindow()
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/customer_Search_In_F2Screen","Failed", Error_Description,"")
// //***************************************************************************************************************************
// //@Method: Sleep_Till_Accounts_Load_F2()
// //@Author: Sumithra
// //@Date 28 June 2018
// //@Description: (This) function will Sleep till accounts get load
// //Ex:  Sleep_Till_Accounts_Load_F2()
// //***************************************************************************************************************************
// // wait_Till_Accounts_Load_F2()
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // NExt 
	// // for itr = 1 To 20 Step 1
	// // Sleep(2)
	// // data = getLoanNumbeGenerated_AccountTab()
	// // if data <> Empty 
		// // Exit for
	// // //error handling
	// // if GetErrorCount()>0 
		// // writeReportLog("Failed to Sleep_Till_Accounts_Load_F2","Failed", Error_Description,"")
// 
// //***************************************************************************************************************************
// //@Method: get_CPI_endDate(MaturityDate,startDate,endDate)
// //@Author: Sumithra
// //@Date 28 June 2018
// //@Description: This function is to get end date
// //Ex:  get_CPI_endDate(MaturityDate,startDate,endDate)
// //***************************************************************************************************************************  
// get_CPI_endDate(String MaturityDate,String startDate,String endDate)
	// %FuncInfo[Desc="This function is to get end date.",Group="BranchPlusFunctions"]
	// if Integer.Parse(endDate) < Integer.Parse(MaturityDate) 
		// get_CPI_endDate=(DateAdd("d",45,startDate)).Trim()
	// else
		// endDate = DateDiff("d",startDate,MaturityDate)
		// if endDate > 45 
			// //get end date
			// get_CPI_endDate=(DateAdd("d",45,startDate)).Trim()
		// else 	
			// endDate=(DateDiff("d",1,endDate))	.Trim()
			// //get end date
			// get_CPI_endDate =(DateAdd("d",endDate,startDate)).Trim()
	// //error handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/get_CPI_endDate"+"Failed"+ Error_Description+"")
// //******************************************* ********************************************************************************
// //@Method: get_maturityDate_AccountTab()
// //@Author: Sumithra
// //@Date 28 June 2018
// //@Description: This function is to get maturity date in account tab
// //Ex:  get_maturityDate_AccountTab()
// //***************************************************************************************************************************  
// String get_maturityDate_AccountTab()
	// %FuncInfo[Desc="This function is to get maturity date in account tab.",Group="BranchPlusFunctions"]
	// //Navigating to Account Tab
	// navigateToTab("Account")
	// AppObject custwind = BranchPlus.CustomerF2Window.dw_acct
	// //get maturity date
	// String sGet_maturityDate_AccountTab = GetValue_PBDataWindow(custwind,"#1","maturity_dt")
	// //error handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/get_maturityDate_AccountTab"+"Failed"+ Error_Description+"")
	// return sGet_maturityDate_AccountTab
// //***************************************************************************************************************************
// //@Method: click_Button_InWindow_DP(windowName,PbwindowName,buttonName)
// //@Author: Sumithra
// //@Date 28 June 2018
// //@Description: This function is to click on button
// //Ex:  click_Button_InWindow_DP("w_cancel_component","w_late_charge_adjustment","Cancel")
// //*************************************************************************************************************************** 	
// click_Button_InWindow_DP(String windowName,String PbwindowName,String buttonName)
	// %FuncInfo[Desc="This function is to click on button.",Group="BranchPlusFunctions"]
	// if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("pbname:=" + windowName).Pbwindow("pbname:=" + PbwindowName).PbButton("text:=&" + buttonName).WaitWhileExists(10) 
		// Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("pbname:=" + windowName).Pbwindow("pbname:=" + PbwindowName).PbButton("text:=&" + buttonName).Click()
	// else if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("pbname:=" + windowName).Pbwindow("pbname:=" + PbwindowName).PbButton("text:=" + buttonName).WaitWhileExists(5) 
		// Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("pbname:=" + windowName).Pbwindow("pbname:=" + PbwindowName).PbButton("text:=" + buttonName).Click()
	// else
		// LogError("Failed to Click on Button : "+"Failed"+FailComments+"Button not found")
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed in Step/click_Button_InWindow_DP"+"Failed"+ Error_Description +"")
// 
// //***************************************************************************************************************************
// //@Method: get_ChargeAmount_Component_Tab(1)
// //@Author: Sumithra
// //@Date 29 June 2018
// //@Description: This function is to add add ComponentDescription in component tab
// //Ex:  get_ChargeAmount_Component_Tab(1)
// //****************************************************************************************************************************
// String get_ChargeAmount_Component_Tab(String rownum)
	// %FuncInfo[Desc="This function is to add add ComponentDescription in component tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable
	// if BranchPlus.CreditDecision.tbldwcomponent.WaitWhileExists(20) 
		// aoCustTable = BranchPlus.CreditDecision.tbldwcomponent
	// //Get Charge Amount
	// Sleep(5)
	// String sGet_ChargeAmount_Component_Tab =GetValue_PBDataWindow(aoCustTable,"#" +rownum,"charge_amt")
	// if GetErrorCount()>0 
			// LogError("Failed : get_ChargeAmount_Component_Tab ")
	// return sGet_ChargeAmount_Component_Tab
// //***************************************************************************************************************************
// //@Method: get_InterestRate_Component_Tab(1)
// //@Author: Sumithra
// //@Date 29 June 2018
// //@Description: This function is to add add ComponentDescription in component tab
// //Ex:  get_InterestRate_Component_Tab(1)
// //****************************************************************************************************************************
// String get_InterestRate_Component_Tab(String rownum)
	// %FuncInfo[Desc="This function is to add add ComponentDescription in component tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable
	// if BranchPlus.CreditDecision.tbldwcomponent.WaitWhileExists(20)  
		// aoCustTable = BranchPlus.CreditDecision.tbldwcomponent
	// //Get Charge Amount
	// Sleep(5)
	// String sGet_InterestRate_Component_Tab =GetValue_PBDataWindow(aoCustTable,"#" + rownum,"int_amt")
	// if GetErrorCount()>0 
			// LogError("Failed : get_InterestRate_Component_Tab")
	// return sGet_InterestRate_Component_Tab
// //***************************************************************************************************************************
// //@Method: add_ComponentDescription_Component_Tab(rowNum,valuetoset)
// //@Author: Sumithra
// //@Date 29 June 2018
// //@Description: This function is to add add ComponentDescription in component tab
// //Ex:  add_ComponentDescription_Component_Tab(1,"GAP")
// //****************************************************************************************************************************
// add_ComponentDescription_Component_Tab(String rowNum,String valuetoset)
	// %FuncInfo[Desc="This function is to add add ComponentDescription in component tab.",Group="BranchPlusFunctions"]
	// AppObject custTable
	// if BranchPlus.CreditDecision.tbldwcomponent.WaitWhileExists(10) 
		// //click on AddRow button
		// clickButton_AddRow()
		// Sleep (2)
		// custTable = BranchPlus.CreditDecision.tbldwcomponent
		// if System.GetEnvVar("currentState") == "FL" 
			// //add Component Description Value
			// //custTable.SetValue(CellData "#" + rowNum+1,"#4",valuetoset
			// custTable.SetValue("#"+[String]([Integer]rowNum+1),"opt",valuetoset)
		// else
			// //add Component Description Value
			// //custTable.SetValue(CellData "#" + rowNum,"#4",valuetoset
			// custTable.SetValue("#" + rowNum,"opt",valuetoset)
		// Print("Component description : " + valuetoset + " is added successfully, Passed")
	// //Error Handling
	// if GetErrorCount()>0 
			// LogError("add_ComponentDescription_Component_Tab ,Failed")
// 
// //***************************************************************************************************************************
// //@Method: enter_ChargeAmount_Component_Tab(rownum,RepoComm)
// //@Author: Sumithra
// //@Date 29 June 2018
// //@Description: This function is to enter charge amount in component tab
// //Ex:  enter_ChargeAmount_Component_Tab(1,"100")
// //****************************************************************************************************************************
// enter_ChargeAmount_Component_Tab(String rownum,String ChargeAmt)
	// %FuncInfo[Desc="This function is to enter charge amount in component tab.",Group="BranchPlusFunctions"]
	// //On error Resume 
	// AppObject custTable
	// if BranchPlus.CreditDecision.tbldwcomponent.WaitWhileExists(10) 
		//  custTable = BranchPlus.CreditDecision.tbldwcomponent	
	// if System.GetEnvVar("currentState") == "FL" 
		// //enter Charge Amount
		// custTable.SetValue("#" + [String]([Integer]rownum+1),"charge_amt",ChargeAmt)
		// //custTable.SetActive()Cell "#" + rownum+1,"charge_amt"
		// //custTableTypeKeys ChargeAmt
	// else
		// custTable.SetValue("#" + rownum,"charge_amt",ChargeAmt)
	// //Error Handling
	// if GetErrorCount()>0 
			// LogError("Failed to enter_ChargeAmount_Component_Tab , Failed")
// 
// //***************************************************************************************************************************
// //@Method: enter_SurchargeAmount_Component_Tab(rownum,RepoComm)
// //@Author: Sumithra
// //@Date 29 June 2018
// //@Description: This function is to enter surcharge value in component tab
// //Ex:  enter_SurchargeAmount_Component_Tab(1,"100")
// //****************************************************************************************************************************
// enter_SurchargeAmount_Component_Tab(String rownum,String surChargeAmount)
	// %FuncInfo[Desc="This function is to enter surcharge value in component tab.",Group="BranchPlusFunctions"]
	// //On error Resume 
	// AppObject custTable
	// if BranchPlus.CreditDecision.tbldwcomponent.WaitWhileExists(10) 
		// custTable = BranchPlus.CreditDecision.tbldwcomponent	
	// if System.GetEnvVar("currentState") == "FL" 
		// //enter surcharge Amount
		// custTable.SetValue("#" + [String]([Integer]rownum+1),"surcharge_amt",surChargeAmount)
	// else
		// custTable.SetValue("#" + rownum,"surcharge_amt",surChargeAmount)
	// //Error Handling
	// if GetErrorCount()>0 
			// LogError("Failed to enter_SurchargeAmount_Component_Tab, Failed")
// 
// //***************************************************************************************************************************
// //@Method: enter_RepoComm_Component_Tab(rownum,RepoComm)
// //@Author: Sumithra
// //@Date 29 June 2018
// //@Description: This function is to enter repo comm value in component tab
// //Ex:  enter_RepoComm_Component_Tab(1,"100")
// //****************************************************************************************************************************
// enter_RepoComm_Component_Tab(String rownum,String RepoComm)
	// %FuncInfo[Desc="This function is to enter repo comm value in component tab.",Group="BranchPlusFunctions"]
	// //On error Resume 
	// AppObject custTable
	// if BranchPlus.CreditDecision.tbldwcomponent.WaitWhileExists(10) 
		// custTable = BranchPlus.CreditDecision.tbldwcomponent 	
	// if System.GetEnvVar("currentState") == "FL" 
		// //enter repocom  Amount
		// custTable.SetValue("#" + [String]([Integer]rownum+1),"rep_comm",RepoComm)
	// else
		// custTable.SetValue( "#" + [String]rownum,"rep_comm",RepoComm)
	// //Error Handling
	// if GetErrorCount()>0 
			// LogError("Failed to enter_RepoComm_Component_Tab, Failed")
// 
// //***************************************************************************************************************************
// //@Method: enter_DealerComm_Component_Tab(rownum,DealerComm)
// //@Author: Sumithra
// //@Date 29 June 2018
// //@Description: This function is to enter dealer comm value in component tab
// //Ex:  enter_DealerComm_Component_Tab(1,"100")
// //****************************************************************************************************************************
// enter_DealerComm_Component_Tab(String rownum,String DealerComm)
	// %FuncInfo[Desc="This function is to enter dealer comm value in component tab.",Group="BranchPlusFunctions"]
	// //On error Resume 
	// AppObject aoCustTable 
	// if BranchPlus.CreditDecision.tbldwcomponent.WaitWhileExists(10) 
		// aoCustTable = BranchPlus.CreditDecision.tbldwcomponent	
	// if System.GetEnvVar("currentState") == "FL" 
		// //enter repocom  Amount
		// aoCustTable.SetValue("#" +[String]([Integer]rownum+1),"dealer_comm",DealerComm)
	// else
		// aoCustTable.SetValue("#" + rownum,"dealer_comm",DealerComm)
	// //Error Handling
	// if GetErrorCount()>0 
			// LogError("Failed to enter_DealerComm_Component_Tab , Failed")
// 
// //***************************************************************************************************************************
// //@Method: get_TotalOtherCharges_AccountTab()
// //@Author: Sumithra
// //@Date 29 June 2018
// //@Description: This function is to get total other charges in account tab
// //Ex:  get_TotalOtherCharges_AccountTab()
// //****************************************************************************************************************************
// String get_TotalOtherCharges_AccountTab()
	// %FuncInfo[Desc="This function is to get total other charges in account tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// //get total other charges
	// String sGet_TotalOtherCharges_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","cmpnt_amt")
	// //Error Handling
	// if GetErrorCount()>0 
			// LogError("Failed: get_TotalOtherCharges_AccountTab ,Failed")
	// return sGet_TotalOtherCharges_AccountTab
// //***************************************************************************************************************************
// //@Method: delete_ComponentDescription_ComponentTab_Approved()
// //@Author: Sumithra
// //@Date 29 June 2018
// //@Description: This function is to delete component descriptions in component tab
// //Ex:  delete_ComponentDescription_ComponentTab_Approved()
// //****************************************************************************************************************************
// delete_ComponentDescription_ComponentTab_Approved()
	// %FuncInfo[Desc="This function is to delete component descriptions in component tab.",Group="BranchPlusFunctions"]
	// //Navigate to Component tab
	// navigateToTab("Component")
	// //get row count
	// Integer rowCnt = getRowCount_PbDataWindow("w_cust","dw_component")
	// for (Integer itr = 1; itr<=rowCnt; itr++)
		// //get component description name
		// String desc = getValueInPBDataWindow_DP("w_cust","dw_component","#1" ,"descr")
		// if desc == "Doc Stamp" && rowCnt == itr 		    
			// //Exit for
		// AppObject custTable = BranchPlus.CreditDecision.tbldwcomponent		
		// if desc == "Doc Stamp"  
			// //select cell		
			// custTable.Select( "#2","descr")
			// //click on delete button
			// clickButton_Delete()
			// //click on yes button
			// clickButton_InWindow("w_message","Yes")			    	 			 
		// else		
			// //select cell	    
			// custTable.Select( "#1","descr")
			// //click on delete button
			// clickButton_Delete()
			// //click on yes button
			// clickButton_InWindow("w_message","Yes")	     		
	// //next	 
	// //click on save button
	// clickOnSaveButon()
	// //error handling
	// if GetErrorCount()>0 
		// LogError("Failed to delete_ComponentDescription_ComponentTab_Approved , Failed")
// 
// //***************************************************************************************************************************
// //@Method: clickButton_Delete()
// //@Author: Sumithra
// //@Date 28 June 2018
// //@Description: This function is to click on delete button
// //Ex:  clickButton_Delete()
// //***************************************************************************************************************************
// clickButton_Delete()
	// %FuncInfo[Desc="This function is to click on delete button.",Group="BranchPlusFunctions"]
	// //click on delete button
	// BranchPlus.btnDelete.Click()
	// //error handling
	// if GetErrorCount()>0 
		// LogError("Failed to clickButton_Delete , Failed")
// 
// //***************************************************************************************************************************
// //@Method: get_TotalInterest_AccountTab()
// //@Author: Sumithra
// //@Date 29 June 2018
// //@Description: This function is to get total interest in account tab
// //Ex:  get_TotalInterest_AccountTab()
// //****************************************************************************************************************************
// String get_TotalInterest_AccountTab()
	// %FuncInfo[Desc="This function is to get total interest in account tab.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// //get total other charges
	// String sGet_TotalInterest_AccountTab = GetValue_PBDataWindow(aoCustTable,"#1","orig_int_amt")	
	// //Error Handling
	// if GetErrorCount()>0 
			// LogError("Failed: get_TotalInterest_AccountTab , Failed")
	// return sGet_TotalInterest_AccountTab
// //***************************************************************************************************************************
// //@methodName: setValue_PBDataWindow_CollectionPage(activity_type,activity_code,assign_userid,Note,Amount)
// //@Author Meena
// //@Date 28 June 2018
// //@Description This to set value in PBDataWindow in Collection Page during Runtime
// //Ex:  setValue_PBDataWindow_CollectionPage("Notes","First Notice","Rachel Calhoun","test",100)
// //***************************************************************************************************************************
// setValue_PBDataWindow_CollectionPage(String activity_type,String activity_code,String assign_userid,String Note,String Amount)
	// %FuncInfo[Desc="This to set value in PBDataWindow in Collection Page during Runtime.",Group="BranchPlusFunctions"]
	// AppObject tblPBDataWindow = BranchPlus.CustomerF2Window.dw_cust.dw_note
	// //Select Activity Type
	// SetValue_PBDataWindow(tblPBDataWindow,"#1","activity_type",activity_type)
	// //Select Activity Code
	// TypeText_PBDataWindow(tblPBDataWindow,"#1","#5",activity_code)
	// //Select Assign userid
	// TypeText_PBDataWindow(tblPBDataWindow,"#1","#11",assign_userid)
	// //To type text in Note Editor
	// if activity_type == "Notes" || activity_type == "Instructions" 
		// TypeText_Note_CollectionWindow(Note)
	// if activity_type == "Promise" 
		// //Code to set future date and time(promise date) for "Promise" Activity
		// get_Future_Date_CurrentTime_AMPM(Promise_FutureDate,Promise_FutureDate_Time,time_period)
		// //To enter amount in promise Amount field
		// SetValue_PBDataWindow(tblPBDataWindow,"#1","promise_amt",Amount)
		// if BranchPlus.CustomerF2Window.Edit.WaitWhileExists (10)
			// //Input Reason
			// Note = " "+Note
			// BranchPlus.CustomerF2Window.Edit.Click()
			// BranchPlus.CustomerF2Window.Edit.TypeKeys( Note)
	// //Click on save button
	// clickOnSaveButon()
	// //Get Current Date
	// String Process_Date = getTodaysDate_mmddyyyy_format()
	// //Validate the data for all activity types
	// validation_Collection_Activities(Process_Date,activity_type,activity_code,assign_userid,Note,Amount,Promise_FutureDate)
	// //	Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed in Step/setValue_PBDataWindow_CollectionPage , Failed")
// 
// //***************************************************************************************************************************
// //@methodName: validation_Collection_Activities(Process_Date,activity_code,assign_userid,Note,Promise_FutureDate,Promise_Amount,LastChange_date,Entry_date)
// //@Author Meena
// //@Date 28 June 2018
// //@Description This to validate the data in PBDataWindow in Collection Page
// //Ex:  validation_Collection_Activities("6/28/2018","1ST_NOTC","RSC","test",8/2018,100,6/28/2018,6/28/2018)
// //****************************************************************************************************************************
// validation_Collection_Activities(String Process_Date,String activity_type,String activity_code,String assign_userid,String Note,String Amount,String Promise_FutureDate)
	// %FuncInfo[Desc="This to validate the data in PBDataWindow in Collection Page.",Group="BranchPlusFunctions"]
	// validate_Activity_Date_CollectionPage(Process_Date)
	// //to validate the Activity code during run time
	// validate_Activity_Code_CollectionPage(activity_code)
	// //to validate the Results Description during run time
	// validate_Notes_Results_CollectionPage()
	// if activity_type == "Promise" 
		// //to validate the Promise Date during run time
		// validate_Promise_Date_CollectionPage(Promise_FutureDate)
		// //to validate the Promise Amount during run time
		// validate_Promise_Amount_CollectionPage(Amount)
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed in Step/validation_Collection_Activities , Failed")
// 
// //************************************************************************************************************************************************
// //@methodName: select_NewActivityItem_CollectionTab(itemValue)
// //@Author Meena
// //@Date 27 Jun 2018
// //@Description This will select a New Activity item || New credit Decission in Collection tab
// //Ex // select_NewActivityItem_CollectionTab("New Collection Activity") || "New Credit Decission"
// //*************************************************************************************************************************************************
// select_NewActivityItem_CollectionTab(String itemValue,String buttonName)
	// %FuncInfo[Desc="This will select a New Activity item || New credit Decission in Collection tab.",Group="BranchPlusFunctions"]
	// //select a new Activity Item from the list
	// AppObject NewActivityList = BranchPlus.w_chooseone.lb_list
	// if NewActivityList.WaitWhileExists(10) 
		// NewActivityList.Select (itemValue)
	// //click on "OK/Cancel" button
	// clickButton_InWindow("w_chooseone",buttonName)
	// if GetErrorCount()>0 
		// LogError("Failed in step/select_NewActivityItem_CollectionTab , Failed")
// 
// //***************************************************************************************************************************
// //@Method: TypeText_Note_CollectionWindow(cellValue)
// //@Author: Meena
// //@Date 29 June 2018
// //@Description: This function will type Text in Collection tab
// //Ex:  TypeText_Note_CollectionWindow("Test")
// //***************************************************************************************************************************
// TypeText_Note_CollectionWindow(String cellValue)
	// %FuncInfo[Desc="This function will type Text in Collection tab.",Group="BranchPlusFunctions"]
	// if BranchPlus.CustomerF2Window.Edit.WaitWhileExists(20) 
		// BranchPlus.CustomerF2Window.Edit.TypeKeys(CaretPos 0,0)
		// //Input Reason
		// BranchPlus.CustomerF2Window.Edit.TypeKeys (cellValue)
	// if GetErrorCount()>0  			
		// LogError("Failed in step/TypeText_Note_CollectionWindow, Failed")
// 
// //***************************************************************************************************************************
// //@Method: delete_Record_CollectionTab()
// //@Author: Meena
// //@Date 2 July 2018
// //@Description: This function will delete the recent Promise Record and save in Collection window
// //Ex:  delete_Record_CollectionTab()
// //***************************************************************************************************************************
// delete_Record_CollectionTab()
	// %FuncInfo[Desc="This function will delete the recent Promise Record and save in Collection window.",Group="BranchPlusFunctions"]
	// //click on Delete button
	// clickButton_Delete()	
	// //to delete the row in collection window
	// handleCreditDecision_Popup("Yes")
	// //click on save button
	// clickOnSaveButon()
	// if GetErrorCount()>0  			
		// LogError("Failed in step/delete_Record_CollectionTab , Failed")
// 
// //***************************************************************************************************************************
// //@Method: DoRefresh_F5()
// //@Author: Sumithra
// //@Date 4 july 2018
// //@Description: This function is to do refresh
// //Ex:  DoRefresh_F5()
// //***************************************************************************************************************************
// DoRefresh_F5()
	// %FuncInfo[Desc="This function is to do refresh.",Group="BranchPlusFunctions"]
	// BranchPlus.SetActive()
	// UA.GenKeyEvents("<F5>")
	// if GetErrorCount()>0 
		// LogError("Failed to DoRefresh_F5 , Failed")
// 
// //***************************************************************************************************************************
// //@Method: change_TextOpt_Address_Tab(TextNumber)
// //@Author: Sumithra
// //@Date 9th july 2018
// //@Description: This function is to change text number in Text Opt
// //Ex:  change_TextOpt_Address_Tab("123-123-4353")
// //***************************************************************************************************************************
// String change_TextOpt_Address_Tab(String ChangeTextNumber)
	// %FuncInfo[Desc="This function is to change text number in Text Opt.",Group="BranchPlusFunctions"]
	// AppObject custTable
	// String TextNum
	// if BranchPlus.CustomerF2Window.dw_loc.WaitWhileExists(10)
		// custTable = BranchPlus.CustomerF2Window.dw_cust_phone
		// custTable.SetValue(CellData +"#1","phone_nbr","   -   -    ")
		// custTable.SetValue(CellData +"#1","phone_nbr","1234567899")
		// clickOnSaveButon()
		// TextNum = ChangeTextNumber.Substring (1,3)+"-"+ChangeTextNumber.Substring (4,3)+"-"+ChangeTextNumber.Substring (7,4)
		// Print("Text number is changed successfully. Text #:  " + TextNum  +"Passed"+FailComments+"")
	// if GetErrorCount()>0  			
		// LogError("Failed to change_TextOpt_Address_Tab , Failed"+ Error_Description +"")
	// return TextNum
// //***************************************************************************************************************************
// //@Method: handle_AuditWindow(windowname,ButtonName,reason)
// //@Author: Sumithra
// //@Date 9th july 2018
// //@Description: This function is to handle audit window
// //Ex:  handle_AuditWindow("w_search","OK",reason)
// //***************************************************************************************************************************
// handle_AuditWindow(String windowname,String ButtonName,String reason)
	// %FuncInfo[Desc="This function is to handle audit window.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("pbname:=" + windowname).WaitWhileExists (10)
		// //type reason
		// w_bp_frame.PbWindow("pbname:=" + windowname).TypeKeys (reason)
		// //click on popup
		// w_bp_frame.PbWindow("pbname:=" + windowname).PbButton("regexpwndtitle:=" + ButtonName).Click()
	// if GetErrorCount()>0  			
		// LogError("Failed to handle_AuditWindow , Failed"+ Error_Description +"")
// 
// //***************************************************************************************************************************
// //@Method: add_TextOpt_Address_Tab(TextNumber)
// //@Author: Sumithra
// //@Date 9th july 2018
// //@Description: This function is to enter text number in Text opt
// //Ex:  add_TextOpt_Address_Tab("123-231-3732")
// //***************************************************************************************************************************
// String Stringadd_TextOpt_Address_Tab(String TextNumber)
	// %FuncInfo[Desc="This function is to enter text number in Text opt.",Group="BranchPlusFunctions"]
	// Sleep (3)
	// String TextNum
	// if BranchPlus.CustomerF2Window.dw_loc.WaitWhileExists(10)
		// AppObject custTable = BranchPlus.CustomerF2Window.dw_cust_phone
		// //clear test filed
		// custTable.SetValue(CellData +"#1","phone_nbr","   -   -    ")
		// //click on save button
		// clickOnSaveButon()
		// //enter text number 
		// custTable.SetValue(CellData +"#1","phone_nbr",TextNumber)
		// //click on save button
		// clickOnSaveButon()
		// TextNum = TextNumber.Substring (1,3)+"-"+TextNumber.Substring (4,3)+"-"+TextNumber.Substring (7,4)
		// writeReportLog("Text number is added successfully. Text # : " + TextNum  ,"Passed",FailComments,"")
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to add_TextOpt_Address_Tab","Failed", Error_Description ,"")
	// return TextNum
// //***************************************************************************************************************************
// //@Method:  select_Yes_RadioButton_MarketingInfo_AddressTab()
// //@Author: Sumithra
// //@Date 9th july 2018
// //@Modified by: Chandra (Updated Marketing Info //Yes// readio button Insight Object in Object Repository and handled the same)
// //@Modified Date: 03 Mar 2019
// //@Description: This function is to select Yes radio button in Marketing info 
// //Ex:   select_Yes_RadioButton_MarketingInfo_AddressTab()
// //***************************************************************************************************************************
// select_Yes_RadioButton_MarketingInfo_AddressTab()
	// %FuncInfo[Desc="This function is to select Yes radio button in Marketing info.",Group="BranchPlusFunctions"]
	// osVersion = System.GetEnvVar("OS")
	// osVersion = osVersion.Replace("Workstation","")
	// if (osVersion).Trim() == "Windows 10" 
		// BranchPlus.Yes_MarketingInfoRadio_win10.Click()
		// Print("MarketingInfo radio button is selected for YES , Passed"+FailComments+"")
	// else
		// BranchPlus.Yes_MarketingInfoRadio.Click()
		// Print("MarketingInfo radio button is selected for YES , Passed"+FailComments+"")
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed to select_Yes_RadioButton_MarketingInfo_AddressTab , Failed"+ Error_Description +"")
// 
// //***************************************************************************************************************************
// //@Method: select_Yes_RadioButton_AccountInfo_AddressTab()
// //@Author: Sumithra
// //@Date 9th july 2018
// //@Modified by: Chandra (Updated Account Info //Yes// readio button Insight Object in Object Repository and handled the same)
// //@Modified Date: 03 Mar 2019
// //@Description: This function is to select Yes radio button in Account info 
// //Ex:  select_Yes_RadioButton_AccountInfo_AddressTab()
// //***************************************************************************************************************************
// select_Yes_RadioButton_AccountInfo_AddressTab()
	// %FuncInfo[Desc="This function is to select Yes radio button in Account info.",Group="BranchPlusFunctions"]
	// osVersion = System.GetEnvVar("OS")
	// osVersion = osVersion.Replace("Workstation","")
	// if (osVersion).Trim() == "Windows 10" 
		// BranchPlus.Yes_AccountInfoRadio_win10.Click()
		// Print("Account Info radio button is selected for YES , Passed"+FailComments+"")
	// else
		// //select yes radio button
		// BranchPlus.Yes_AccountInfoRadio.Click()
		// Print("Account Info radio button is selected for YES , Passed"+FailComments+"")
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed to select_Yes_RadioButton_AccountInfo_AddressTab , Failed"+ Error_Description +"")
// 
// //***************************************************************************************************************************
// //@Method: select_No_RadioButton_AccountInfo_MarketingInfo_AddressTab()
// //@Author: Sumithra
// //@Date 9th july 2018
// //@Description: This function is to select NO radio button in Account and marketing info in Address tab
// //Ex:  select_No_RadioButton_AccountInfo_MarketingInfo_AddressTab()
// //***************************************************************************************************************************
// select_No_RadioButton_AccountInfo_MarketingInfo_AddressTab()
	// %FuncInfo[Desc="This function is to select NO radio button in Account and marketing info in Address tab.",Group="BranchPlusFunctions"]
	// if BranchPlus.No_Radio_Acc_Mar.WaitWhileExists(10) 
		// //select No radio button
		// BranchPlus.No_Radio_Acc_Mar.Click()
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed to select_No_RadioButton_AccountInfo_MarketingInfo_AddressTab , Failed"+ Error_Description +"")
// 
// //***************************************************************************************************************************
// //@Method: validate_StaticText_In_IndependentDialog(dialogName, staticText, buttonToClick)
// //@Author: Sumithra
// //@Date 9th july 2018
// //@Description: This function is to validate static text in popup
// //Ex:  validate_StaticText_In_IndependentDialog(InfoDialogName,Mrkt_StaticText, "Yes")
// //***************************************************************************************************************************
// validate_StaticText_In_IndependentDialog(String dialogName,String staticText,String buttonToClick)
	// %FuncInfo[Desc="This function is to validate static text in popup.",Group="BranchPlusFunctions"]
	// if Dialog("regexpwndtitle:=" + dialogName).WaitWhileExists(10) 
		// if Dialog("regexpwndtitle:=" + dialogName).Static("regexpwndtitle:=" + staticText).WaitWhileExists(7) 
		// //get static text
		// StaticMesssage= w_bp_frame.Dialog("regexpwndtitle:=" + dialogName).Static("nativeclass:=static","index:=1").GetAttr( ("text")
			// writeReportLog("As expected, Static Text displayed in popup: " + "//" + StaticMesssage + "//" + " is available in Dialog: " + "//" + dialogName + "//","Passed","","Y")
			// Sleep(2)
			// //Clicking on Button
			// if Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).WaitWhileExists(2) 
				// Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).Click()
			// else if  Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).WaitWhileExists(2) 
				// Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).Click()	     				
			// else
				// writeReportLog("Clicking on Button " + buttonToClick + "Failed in Dialog: " + dialogName,"Failed","","Y")	
		// else
			// writeReportLog("Static Text value does not match in Dialog" + dialogName,"Failed","","Y")	
	// else
		// writeReportLog("Dialog " + dialogName + " does not exist","Failed","","Y")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to validate_StaticText_In_IndependentDialog","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: customer_Search_Using_LoanNumber_F2(Loan_Number)
// //@Author: Sumithra
// //@Date 9th july 2018
// //@Description: This function is to search customer using loan number in F2 screen
// //Ex:  customer_Search_Using_LoanNumber_F2(Loan_Number)
// //***************************************************************************************************************************
// customer_Search_Using_LoanNumber_F2(String Loan_Number)
	// %FuncInfo[Desc="This function is to search customer using loan number in F2 screen.",Group="BranchPlusFunctions"]
	// //Enter loan number
	// enterValuesIn_CustmerSearch("loan_nbr",Loan_Number)
	// //Click on OK Button in customer search window
	// clickOkButton_CustomerSearchWindow()
	// Sleep (7)
	// if GetErrorCount()>0 
		// LogError("Failed in step/customer_Search_Using_LoanNumber_F2 , Failed"+ Error_Description+"")
	// // Remove 
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //******************************************************************************************************************************************************
// //@Method: Validate_Bankrupt_Label()
// //@Author Chandra
// //@Date 04 July 2018
// //@Description: This function is Validate Bankrupt label in Account and Payment Tab
// //Ex:  Validate_Bankrupt_Label("Account","Bankrupt ()")
// //******************************************************************************************************************************************************
// Validate_Bankrupt_Label(String TabName,String Bankrupt_label)
	// %FuncInfo[Desc="This function is Validate Bankrupt label in Account and Payment Tab.",Group="BranchPlusFunctions"]
	// AppObject AccountStatus_Label
	// if BranchPlus.CustomerF2Window.dw_account_status_display.WaitWhileExists (10)
		// AccountStatus_Label = BranchPlus.CustomerF2Window.dw_account_status_display.GetCellData("#1","account_msg")
		// if (AccountStatus_Label).Trim() == (Bankrupt_label).Trim()
			// Print("Validation of Bankrupt Label is displayed in "+TabName+" Tab"+"Passed"+FailComments+"Y")
	// else
		// LogError("Failed in Bankrupt Label is not displayed in "+TabName+" Tab"+"Failed"+ Error_Description +"Y")
	// if GetErrorCount()>0  			
		// LogError("Failed in Validate_Bankrupt_Label  , Failed"+ Error_Description +"")
// 
// //******************************************************************************************************************************************************
// //@Method: Get_TodaysDate_yyyymmdd_format()
// //@Author Chandra
// //@Date 05 July 2018
// //@Description This function is get the Current system date in yyyymmdd format
// //Ex:  Get_TodaysDate_yyyymmdd_format
// //******************************************************************************************************************************************************
// String Get_TodaysDate_yyyymmdd_format()
	// %FuncInfo[Desc="This function is get the Current system date in yyyymmdd format.",Group="BranchPlusFunctions"]
	// //get Today//s Day in yyyymmdd formate
	// String sGet_TodaysDate_yyyymmdd_format ,todaysDate
	// DateTime dtCurrentDateTime = DateTime.Now()
	// todaysDate = dtCurrentDateTime.Format("yyyyMMdd")
	// 
	// //todaysDate = Year(Now) + "/" + Right("0" + Month(Now), 2) + "/" + Right("0" + Day(Now), 2) 
	// sGet_TodaysDate_yyyymmdd_format = todaysDate
	// //Error handling
	// if GetErrorCount()>0 
		// LogError("Failed in Get_TodaysDate_yyyymmdd_format , Failed"+ Error_Description+"")
	// return sGet_TodaysDate_yyyymmdd_format
// //******************************************************************************************************************************************************
// //@MethodName: get_Add_Date_Time_UserID_DB()
// //@Author Chandra
// //@Date 06 July 2018
// //@Description This is Convert Date, Time and UserID in Specific fomate(yyyymmdd hh:mm am/pnm CLS)
// //Ex  get_Add_Date_Time_UserID_DB("2018/07/06 02:20 am  CLS")
// //******************************************************************************************************************************************************
// String get_Add_Date_Time_UserID_DB(String Date_Time_DB)
	// %FuncInfo[Desc="This is Convert Date, Time and UserID in Specific fomate(yyyymmdd hh:mm am/pnm CLS).",Group="BranchPlusFunctions"]
	// String App_Date_Time_DB = Date_Time_DB
	// String Dateformt = Date_Time_DB.Replace("-","/")
	// List<String> lsDate_Timesplit = Dateformt.Split(" ")
	// String Dateslipt0 = lsDate_Timesplit[2]
	// List<String> lsDate_split = lsDate_Timesplit[1].Split("/")
	// String sMonth = lsDate_split[2]
	// if sMonth.Length()==2
		// //Do nothing
	// else
		// sMonth = "0"+sMonth
	// String sDay = lsDate_split[3]
	// if sDay.Length()==2
		// //Do nothing
	// else
		// sDay = "0"+sDay
	// String Dateformat= lsDate_split[1]+"/"+sMonth+ "/" +sDay
	// //String Dateformat = Year(Dateslipt0)  + "/" + Right("0" + Month(Dateslipt0), 2) + "/" + Right("0" + Day(Dateslipt0), 2)
	// List<String> lsTimesplit1 = lsDate_Timesplit[1].Split("/")
	// //Get Current Time in Hour and Minuts
	// String Curr_Hour = lsTimesplit1[1]
	// String Curr_Minuts =  lsTimesplit1[2]
	// //Length of Hour and Minut is > 12 append 0 and Time Period is PM
	// String TimeHour,TimeMinuts,Time_Period
	// if Integer.Parse(Curr_Hour) > 12 
		// if (Curr_Hour).Length() == 1 
			// TimeHour = TimeHour +"0"+ Curr_Hour
		// else
			// TimeHour = TimeHour + Curr_Hour
		// if (Curr_Minuts).Length() == 1 
			// TimeMinuts = TimeMinuts +"0"+ Curr_Minuts
		// else
			// TimeMinuts = TimeMinuts + Curr_Minuts
		// Time_Period = "pm"
	// else
		// //Length of Hour and Minut is < 12 append 0 and Time Period is AM
		// if (Curr_Hour).Length() == 1 
			// TimeHour = TimeHour +"0"+ Curr_Hour
		// else
			// TimeHour = TimeHour + Curr_Hour
		// if (Curr_Minuts).Length() == 1 
			// TimeMinuts = TimeMinuts +"0"+ Curr_Minuts
		// else
			// TimeMinuts = TimeMinuts + Curr_Minuts
		// Time_Period = "am"
	// String Timeformat = TimeHour+":"+TimeMinuts+" "+Time_Period
	// //Getting the User ID (Cashdrawer)
	// //System.GetEnvVar("userID") = get_Existing_CashDrawer_User()
	// String Date_Time_UserID = Dateformat +"  "+Timeformat+"  "+System.GetEnvVar("userID")
	// String sGet_Add_Date_Time_UserID_DB = Date_Time_UserID 
	// //Error handling
	// if GetErrorCount()>0 
		// LogError("Failed in get_Add_Date_Time_UserID_DB , Failed"+ Error_Description+"")
	// return sGet_Add_Date_Time_UserID_DB
// 
// String getAppVersionNumber_From_DB()
	// //On Error Resume Next
	// String sGetAppVersionNumber_From_DB = runSQLQuery("select VERSION from bp_branch_setup_tbl;","VERSION")
	// if GetErrorCount()>0 
		// Print("Failed to getAppVersionNumber_From_DB")
	// //End If
	// return sGetAppVersionNumber_From_DB
// //******************************************************************************************************************************************************
// //@Method: RepoCar_Collateral_Screen()
// //@Author Chandra
// //@Date 05 July 2018
// //@Description This function is Enter data into Mandatory fields in Collateral Tab 
// //Ex:  RepoCar_Collateral_Screen("Involuntary","#27","Abandoned","#45","5000","1500","Repair","5000","Test","Test")
// //******************************************************************************************************************************************************
// enter_RepoCar_Details_Collateral_Screen(String Repo_Type,String Repo_Type_Column_Name,String Repo_Reason,String Repo_Reason_Column_Name,String Estimated_Recovery,String Ending_Mileage,String Sales_Status,String Sales_Price,String Repo_OtherType_Reason,String Estimated_Recovery_Reason,String date)
	// %FuncInfo[Desc="This function is Enter data into Mandatory fields in Collateral Tab.",Group="BranchPlusFunctions"]
	// AppObject PbRepoCarWindow = BranchPlus.CustomerF2Window.dw_list_reference
	// //Wait until Pb window is visible
	// PbRepoCarWindow.IsPresent()
	// //Enter Repo Type
	// SetValue_PBDataWindow(PbRepoCarWindow,"#1",Repo_Type_Column_Name,Repo_Type)
	// //Select Repo Reason
	// if getAppVersionNumber_From_DB() == "9.2.2" 
		// SetValue_PBDataWindow(PbRepoCarWindow,"#1","#45",Repo_Reason)
	// else
		// SetValue_PBDataWindow(PbRepoCarWindow,"#1","#42",Repo_Reason)
	// //Repo Reason is Other Enter Additional Text field reason
	// if Repo_Reason == "Other" 
		// SetValue_PBDataWindow(PbRepoCarWindow,"#1","repo_reason",Repo_OtherType_Reason)
	// //Enter Current Date as Repo Date
	// TypeText_PBDataWindow(PbRepoCarWindow,"#1","repo_dt",date)
	// //Enter Estimated Recovery
	// SetValue_PBDataWindow(PbRepoCarWindow,"#1","repo_est_recovery",Estimated_Recovery)
	// //Enter Ending Mileage
	// SetValue_PBDataWindow(PbRepoCarWindow,"#1","ending_mileage",Ending_Mileage)
	// //Enter Sales Status
	// SetValue_PBDataWindow(PbRepoCarWindow,"#1","sales_status",Sales_Status)
	// //Enter Current Date as Sales Date
	// TypeText_PBDataWindow(PbRepoCarWindow,"#1","sales_dt",date)
	// //Enter Sales Price
	// SetValue_PBDataWindow(PbRepoCarWindow,"#1","sales_price",Sales_Price)
	// //System.GetEnvVar("ResultsReason") = "Repo estimate recovery changed from 0 to "+Sales_Price+ ".00 Reason: "+Estimated_Recovery_Reason
	// //Click on Save Button
	// clickOnSaveButon()
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/enter_RepoCar_Details_Collateral_Screen , Failed"+ Error_Description+"")
// 
// //******************************************************************************************************************************************************
// //@Method: get_LastChangeDate_CollateralTab()
// //@Author Chandra
// //@Date 09 July 2018
// //@Description This function is get last change date in Collateral Tab
// //Ex:  get_LastChangeDate_CollateralTab()
// //******************************************************************************************************************************************************
// get_LastChangeDate_CollateralTab()
	// %FuncInfo[Desc="This function is get last change date in Collateral Tab.",Group="BranchPlusFunctions"]
	// //STEP: Navigating to Collateral Tab
	// navigateToTab_CustomerSubTabs("Collateral")
	// String LastChanged_Date
	// if BranchPlus.CustomerF2Window.dw_list_reference.WaitWhileExists (10)
		// LastChanged_Date = BranchPlus.CustomerF2Window.dw_list_reference.GetCellData("#1","cf_last_chg")
	// String sGet_LastChangeDate_CollateralTab = LastChanged_Date
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/get_LastChangeDate_CollateralTab , Failed"+ Error_Description+"")
// 
// //******************************************************************************************************************************************************
// //@Method: enter_Estimated_Recovery_Reason(CellReason)
// //@Author Chandra
// //@Date 09 July 2018
// //@Description This function is get Repo, Last change, Redeemed Date in Account Tab
// //Ex:  enter_Estimated_Recovery_Reason("Repo_dt")
// //******************************************************************************************************************************************************
// enter_Estimated_Recovery_Reason(String CellReason)
	// %FuncInfo[Desc="This function is get Repo, Last change, Redeemed Date in Account Tab.",Group="BranchPlusFunctions"]
	// //Repo Reason Popup exist enter Reason
	// AppObject PBTblWindow
	// if w_bp_frame.CreditDecisionSearchWindow.dw_search.WaitWhileExists(5) 
		// PBTblWindow = BranchPlus.CustomerSearchWindow.dw_search
		// TypeText_PBDataWindow(PBTblWindow,"#1","reason",CellReason)
		// clickButton_InWindow("w_search","OK")
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/enter_Estimated_Recovery_Reason , Failed"+ Error_Description+"")
// 
// //******************************************************************************************************************************************************
// //@Method: get_Repo_LastChange_Redeemed_Date_AccountTab()
// //@Author Chandra
// //@Date 09 July 2018
// //@Description This function is get Repo, Last change, Redeemed Date in Account Tab
// //Ex:  get_Repo_LastChange_Redeemed_Date_AccountTab("Repo_dt")
// //******************************************************************************************************************************************************
// String get_Repo_LastChange_Redeemed_Date_AccountTab(String CellValue)
	// %FuncInfo[Desc="This function is get Repo, Last change, Redeemed Date in Account Tab.",Group="BranchPlusFunctions"]
	// AppObject PbAccountWindow = BranchPlus.CustomerF2Window.dw_acct
	// String sGet_Repo_LastChange_Redeemed_Date_AccountTab
	// if PbAccountWindow.IsPresent() 
		// sGet_Repo_LastChange_Redeemed_Date_AccountTab = GetValue_PBDataWindow(PbAccountWindow,"#1",CellValue)
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/get_Repo_LastChange_Redeemed_Date_AccountTab , Failed"+ Error_Description+"")
	// return sGet_Repo_LastChange_Redeemed_Date_AccountTab
// //******************************************************************************************************************************************************
// //@Method: get_Account_Status_AccountTab()
// //@Author Chandra
// //@Date 09 July 2018
// //@Description This function is get account status in Account Tab
// //Ex:  get_Account_Status_AccountTab
// //******************************************************************************************************************************************************
// String get_Account_Status_AccountTab()
	// %FuncInfo[Desc="This function is get account status in Account Tab.",Group="BranchPlusFunctions"]
	// AppObject PbAccountWindow = BranchPlus.CustomerF2Window.dw_acct
	// String AcctStatus = GetValue_PBDataWindow(PbAccountWindow,"#1","acct_status")
	// String sGet_Account_Status_AccountTab = AcctStatus
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/get_Account_Status_AccountTab","Failed", Error_Description,"")
	// return sGet_Account_Status_AccountTab
// //******************************************************************************************************************************************************
// //@Method: Validation_Collection_Insert()
// //@Author: Chandra
// //@Date 09 July 2018
// //@Description: This function is validate Activity Code, Activity Date, Results, Assigned UserID, Last change Date, Entry Date in Collection Tab
// //Ex:  Validation_Collection_Insert()
// //******************************************************************************************************************************************************
// Validation_Collection_Insert()
	// %FuncInfo[Desc="This function is validate Activity Code, Activity Date, Results, Assigned UserID, Last change Date, Entry Date in Collection Tab.",Group="BranchPlusFunctions"]
	// Sleep(20)
	// BranchPlus.CustomerF2Window.dw_account_status_display.WaitWhileExists(10)
	// AppObject tblPBresultWindow = BranchPlus.CustomerF2Window.dw_list_reference
	// //Get Row Count in Collection Tab records table
	// Integer rowCnt = tblPBresultWindow.Count()
	// String Activity_Code,Activity_Date_Collection,Activity_Date,Results,userID,AssignUserID,LastChangedDate,LastChanged_Date,LastChangeDate_DB,EntryDate,Entry_Date
	// List<String> lsActivity_Date_Split,LastChanged_Date_Split,EntryDate_Split
	// Integer itr
	// for (Integer itr = 1; itr<=rowCnt; itr++) 
		// //Get Activity Code 
		// Activity_Code = GetValue_PBDataWindow(tblPBresultWindow,"#" + [String]itr ,"activity_code")
		// //Get Activity Date
		// Activity_Date_Collection = GetValue_PBDataWindow(tblPBresultWindow,"#" + [String]itr ,"activity_dt")
		// lsActivity_Date_Split = Activity_Date_Collection.Split(" ")
		// Activity_Date = lsActivity_Date_Split[1]
		// List<String> lsDate = lsActivity_Date_Split[1].Split("/")
		// String sMonth = lsDate[1]
		// if sMonth.Length()==2
			//  //Do nothing
		// else
			// sMonth = "0"+sMonth
		// String sDate = lsDate[2]
		// if sDate.Length()==2
			//  //Do nothing
		// else
			// sDate = "0"+sDate
		// 
		// Activity_Date = sMonth + "/" + sDate + "/" + lsDate[2]
		// String LastChangDate = getTodaysDate_mmddyyyy_format()
		// //Validation Activity Code and Activity Date is equal to get the Entire Row Values
		// if (Activity_Code).Trim() == ("REPOESTM").Trim() 
			// Print("Validation of Activity Code: " + Activity_Code + " and Activity Date: " +Activity_Date+ ""+"Passed"+""+"")
			// //Get Results 
			// Results = GetValue_PBDataWindow(tblPBresultWindow,"#"+ [String]itr ,"results")
			// validateDataAndReport((System.GetEnvVar("ResultsReason").Trim()),Results.Trim(),"Validation of Expected Results: " +System.GetEnvVar("ResultsReason")+ " and Actual Results in List: "+Results)
			// //Getting the User ID (Cashdrawer)
			// userID = System.GetEnvVar("userID")
			// //Get Assigned UserID
			// AssignUserID = GetValue_PBDataWindow(tblPBresultWindow,"#" + [String]itr ,"assign_userid")
			// validateDataAndReport(userID,AssignUserID,"Validation of Expected Assigned UserID: " +userID+ " and Actual Assigned UserID in List: "+AssignUserID)
			// //Get Last change Date
			// LastChangedDate = GetValue_PBDataWindow(tblPBresultWindow,"#" + [String]itr ,"compute_1")
			// LastChanged_Date_Split = LastChangedDate.Split(" ")
			// LastChanged_Date = LastChanged_Date_Split[1]
			// LastChanged_Date = LastChanged_Date+" "+userID
			// LastChangeDate_DB = LastChangDate +" "+userID
			// //Get Entry Date
			// EntryDate = GetValue_PBDataWindow(tblPBresultWindow,"#" +  [String]itr ,"compute_2")
			// EntryDate_Split = EntryDate.Split(" ")
			// Entry_Date = EntryDate_Split[1]
			// Entry_Date = Entry_Date+" "+userID
			// //Validation of Last change and Entry Date
			// if LastChanged_Date == LastChangeDate_DB && Entry_Date == LastChangeDate_DB 
				// Print("Validation of Last Change Date in List: " + LastChanged_Date + " and Entry Date in List: " +Entry_Date+ ""+"Passed"+""+"")
				// Print("Validation Last Change Date and Entry Date has been displayed"+"Last Change Date:"+ LastChanged_Date+" and Entry Date:"+Entry_Date)
			// else
				// LogError("Validation Last Change Date has been displayed"+"Last Change Date and Entry Date both are not equal")
			// //Exit for
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/Validation_Collection_Insert"+"Failed"+ Error_Description+"")
// 
// //******************************************************************************************************************************************************
// //@Method: validate_AccountStatus_Display()
// //@Author: Chandra
// //@Date 09 July 2018
// //@Description: This function is validate Account status is exist in Accoount Tab
// //Ex:  validate_AccountStatus_Display()
// //******************************************************************************************************************************************************
// validate_AccountStatus_Display()
	// %FuncInfo[Desc="This function is validate Account status is exist in Accoount Tab.",Group="BranchPlusFunctions"]
	// String AccountStatus
	// AppObject PBAccount_Status = BranchPlus.CustomerF2Window.dw_account_status_display
	// //after click on Save button it will take time to display Repo Cart Time and Last changed time so that here validating Lable of Repossession
	// if PBAccount_Status.IsPresent() 
		// AccountStatus = PBAccount_Status.GetCellData("#1","account_msg")
		// Print("Validation of Account Status has been displayed"+"Account Status is:"+AccountStatus)
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/validate_AccountStatus_Display"+"Failed"+ Error_Description+"")
// 
// //******************************************************************************************************************************************************
// //@Method: get_RepoDate_AccountTab()
// //@Author Chandra
// //@Date 13 July 2018
// //@Description This function is get RepoDate from Account Tab
// //Ex:  get_RepoDate_AccountTab()
// //******************************************************************************************************************************************************
// String get_RepoDate_AccountTab()
	// %FuncInfo[Desc="This function is get RepoDate from Account Tab.",Group="BranchPlusFunctions"]
	// String sGet_RepoDate_AccountTab  = get_Repo_LastChange_Redeemed_Date_AccountTab("cf_repo_dt")
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/get_RepoDate_AccountTab"+"Failed"+ Error_Description+"")
	// return sGet_RepoDate_AccountTab
// 
// String get_Repo_LastChg_Redeemed_Date_AccountTab_DB(String RepoDate,String LastChangeDate,String RedeemedDate)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //On Error Resume Next
	// String Repo_Date_DB,Account_ID,get_Repo_LastChg_Redeemed_Date_AccountTab_DB,LastChange_Date_DB,Redeemed_Date_DB,sGetDateTimeUserID
	// if BranchPlus.CustomerF2Window.dw_acct.WaitWhileExists(10)
		// Account_ID = BranchPlus.CustomerF2Window.dw_acct.GetCellData("#1","acct_id")
	// //Get and return Repo, Lastchange, Redeemed Date in Account Tab
	// if RepoDate == "repo_dt"
		// Repo_Date_DB = runSQLQuery("SELECT repo_dt FROM support.bp_account_tbl where acct_id='"+ Account_ID +"' ORDER BY repo_dt DESC","repo_dt")
		// get_Repo_LastChg_Redeemed_Date_AccountTab_DB = Repo_Date_DB
	// else if LastChangeDate == "last_chg_dt"
		// LastChange_Date_DB = runSQLQuery("SELECT last_chg_dt FROM support.bp_account_tbl where acct_id='"+ Account_ID +"' ORDER BY last_chg_dt DESC","last_chg_dt")		
		// get_Repo_LastChg_Redeemed_Date_AccountTab_DB = LastChange_Date_DB
	// else if RedeemedDate == "redeemed_dt"
		// Redeemed_Date_DB = runSQLQuery("SELECT redeemed_dt FROM support.bp_account_tbl where acct_id='"+ Account_ID +"' ORDER BY redeemed_dt DESC","redeemed_dt")		
		// get_Repo_LastChg_Redeemed_Date_AccountTab_DB = Redeemed_Date_DB
	// sGetDateTimeUserID = get_Add_Date_Time_UserID_DB(get_Repo_LastChg_Redeemed_Date_AccountTab_DB)
	// get_Repo_LastChg_Redeemed_Date_AccountTab_DB = sGetDateTimeUserID
	// if GetErrorCount()>0 
		// LogError("Failed to get_Repo_LastChg_Redeemed_Date_AccountTab_DB")
	// return get_Repo_LastChg_Redeemed_Date_AccountTab_DB
// 
// //******************************************************************************************************************************************************
// //@Method: get_RepoDate_AccountTab_DB()
// //@Author Chandra
// //@Date 13 July 2018
// //@Description This function is get RepoDate from DB
// //Ex:  get_RepoDate_AccountTab_DB()
// //******************************************************************************************************************************************************
// String get_RepoDate_AccountTab_DB()
	// %FuncInfo[Desc="This function is get RepoDate from DB.",Group="BranchPlusFunctions"]
	// String sGet_RepoDate_AccountTab_DB  = get_Repo_LastChg_Redeemed_Date_AccountTab_DB("repo_dt","","")
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/get_RepoDate_AccountTab_DB"+"Failed"+ Error_Description+"")
	// return sGet_RepoDate_AccountTab_DB
// //******************************************************************************************************************************************************
// //@Method: get_RedeemedDate_AccountTab_DB()
// //@Author Chandra
// //@Date 13 July 2018
// //@Description This function is get Redeemed from DB
// //Ex:  get_RedeemedDate_AccountTab_DB()
// //******************************************************************************************************************************************************
// String get_RedeemedDate_AccountTab_DB()
	// %FuncInfo[Desc="This function is get Redeemed from DB.",Group="BranchPlusFunctions"]
	// String sGet_RedeemedDate_AccountTab_DB  = get_Repo_LastChg_Redeemed_Date_AccountTab_DB("","","redeemed_dt")
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/get_RedeemedDate_AccountTab_DB"+"Failed"+ Error_Description+"")
	// return sGet_RedeemedDate_AccountTab_DB
// //******************************************************************************************************************************************************
// //@Method: get_LastChangeDate_AccountTab_DB()
// //@Author: Chandra
// //@Date 13 July 2018
// //@Description: This function is get Last Change Date from DB
// //Ex:  get_LastChangeDate_AccountTab_DB()
// //******************************************************************************************************************************************************
// String get_LastChangeDate_AccountTab_DB()
	// %FuncInfo[Desc="This function is get Last Change Date from DB.",Group="BranchPlusFunctions"]
	// String sGet_LastChangeDate_AccountTab_DB = get_Repo_LastChg_Redeemed_Date_AccountTab_DB("","last_chg_dt","")
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/get_LastChangeDate_AccountTab_DB"+"Failed"+ Error_Description+"")
	// return sGet_LastChangeDate_AccountTab_DB
// //******************************************************************************************************************************************************
// //@Method: get_LastChangeDate_AccountTab()
// //@Author: Chandra
// //@Date 13 July 2018
// //@Description: This function is get Last Change Date from Accout Tab
// //Ex:  get_LastChangeDate_AccountTab()
// //******************************************************************************************************************************************************
// String get_LastChangeDate_AccountTab()
	// %FuncInfo[Desc="This function is get Last Change Date from Accout Tab.",Group="BranchPlusFunctions"]
	// String sGet_LastChangeDate_AccountTab = get_Repo_LastChange_Redeemed_Date_AccountTab("cf_last_chg")
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/get_LastChangeDate_AccountTab"+"Failed"+ Error_Description+"")
	// return sGet_LastChangeDate_AccountTab
// //******************************************************************************************************************************************************
// //@Method: get_RedeemedDate_AccountTab()
// //@Author: Chandra
// //@Date 13 July 2018
// //@Description: This function is get Redeemed from Account Tab
// //Ex:  get_RedeemedDate_AccountTab()
// //******************************************************************************************************************************************************
// String get_RedeemedDate_AccountTab()
	// %FuncInfo[Desc="This function is get Redeemed from Account Tab.",Group="BranchPlusFunctions"]
	// String sGet_RedeemedDate_AccountTab = get_Repo_LastChange_Redeemed_Date_AccountTab("compute_6")
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/get_RedeemedDate_AccountTab"+"Failed"+ Error_Description+"")
	// return sGet_RedeemedDate_AccountTab
// //********************************************************************************************************
// //@methodName: validate_F12_Window(buttonName)
// //@Author: Meena
// //@Date: 13 July 2018
// //@Description: This function will validate F12 Window
// //Ex:  validate_F12_Window(buttonName)
// //********************************************************************************************************
// validate_F12_Window(String buttonName)
	// %FuncInfo[Desc="This function will validate F12 Window.",Group="BranchPlusFunctions"]
	// //Validate F12(Loan Calculator) window
	// validate_WindowName("w_calc_loan")
	// //Click on Cancel button in Loan Calculator window
	// clickButton_InWindow("w_calc_loan",buttonName)
	// //Error Handling
	// if GetErrorCount()>0  			
			// LogError("Failed in Step/validate_F12_Window"+"Failed"+ Error_Description +"")
	// 
// //********************************************************************************************************
// //@methodName: validate_Recalculated_LoanPayments_Window(loanactivity,buttonName)
// //@Author: Meena
// //@Date: 13 July 2018
// //@Description: This function will validate Recalculated Loan Payments Window 
// //Ex:  validate_Recalculated_LoanPayments_Window(loanactivity,buttonName)
// //********************************************************************************************************
// validate_Recalculated_LoanPayments_Window(String loanactivity,String buttonName)
	// %FuncInfo[Desc="This function will validate Recalculated Loan Payments Window ",Group="BranchPlusFunctions"]
	// //To validate the sub menu in Tools -> Support -> Loan Adjustment option
	// validate_Menu_Tools_SupportOptions("w_loan_amortization",loanactivity)
	// //click on Cancel button
	// clickButton_InWindow("w_loan_amortization",buttonName)
	// if GetErrorCount()>0  			
			// LogError("Failed in Step/validate_Recalculated_LoanPayments_Window"+"Failed"+ Error_Description +"")
// //********************************************************************************************************
// //@methodName: validate_BranchPlus_Window_Tools_TCICredit(buttonName)
// //@Author: Meena
// //@Date: 13 July 2018
// //@Description: This function will validate Branch Plus Window
// //Ex:  validate_BranchPlus_Window_Tools_TCICredit(buttonName)
// //********************************************************************************************************
// validate_BranchPlus_Window_Tools_TCICredit(String buttonName)
	// %FuncInfo[Desc="This function will validate Branch Plus Window",Group="BranchPlusFunctions"]
	// //Click on Cancel button in Loan Calculator window
	// validate_Menu_Tools_TCICredit("w_tcicredit_import",buttonName)
	// //Error Handling
	// if GetErrorCount()>0  			
			// LogError("Failed in Step/validate_BranchPlus_Window_Tools_TCICredit"+"Failed"+ Error_Description +"")
// //********************************************************************************************************
// //@methodName: validate_PaymentSchedule_Window_PaymentsTab(PaymentRoll_LabelName,buttonName)
// //@Author: Meena
// //@Date: 13 July 2018
// //@Description: This function will validate Payment Schedule Window in Payments window
// //Ex:  validate_PaymentSchedule_Window_PaymentsTab(PaymentRoll_LabelName,buttonName)
// //********************************************************************************************************
// validate_PaymentSchedule_Window_PaymentsTab(String PaymentRoll_LabelName,String buttonName)
	// %FuncInfo[Desc="This function will validate Payment Schedule Window in Payments window",Group="BranchPlusFunctions"]
	// //Validate Payment Schedule window in Payments Tab
	// validate_paymentSchedule_Window("w_view_report",PaymentRoll_LabelName,buttonName)
	// //Error Handling
	// if GetErrorCount()>0  			
			// LogError("Failed in Step/validate_PaymentSchedule_Window_PaymentsTab"+"Failed"+ Error_Description +"")
// //********************************************************************************************************
// //@methodName: validate_paymentSchedule_Window(windowName,PaymentRoll_LabelName,buttonName)
// //@Author: Meena
// //@Date: 06 July 2018
// //@Description This is will validate Payment Schedule window in Payments Tab and will Click on the "Print/Close" button with respect to window name
// //Ex:  validate_paymentSchedule_Window("w_view_report","Close","Payment To Roll")
// //********************************************************************************************************
// validate_paymentSchedule_Window(String windowName,String PaymentRoll_LabelName,String buttonName)
	// %FuncInfo[Desc="This is will validate Payment Schedule window in Payments Tab and will Click on the 'Print/Close' button with respect to window name",Group="BranchPlusFunctions"]
	// Integer rowcount = BranchPlus.CustomerF2Window.dw_list_reference.GetText().Count()
	// String cellValue
	// for (Integer itr = 1; itr<=rowcount ; itr++)
		// cellValue = BranchPlus.CustomerF2Window.dw_list_reference.GetCellData("#"+[String]itr,"label_value")
		// if (cellValue).Trim() == (PaymentRoll_LabelName).Trim()
			// BranchPlus.CustomerF2Window.dw_list_reference.Select("#"+[String]itr,"label_value" )
	// //To validate the Payment schedule window in Payments Tab 
	// validate_WindowName(windowName)
	// //Click on the "Print/Close" button with respect to window name
	// clickButton_InWindow(windowName,buttonName)
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed in Step/validate_paymentSchedule_Window"+"Failed"+ Error_Description +"")
// 
// //********************************************************************************************************
// //@methodName: validate_WindowName(windowName)
// //@Author: Meena
// //@Date: 06 July 2018
// //@Description This will get window name during run time and  validate the window name
// //Ex:  validate_WindowName("w_view_report")
// //********************************************************************************************************
// validate_WindowName(String windowName)
	// %FuncInfo[Desc="This will get window name during run time and  validate the window name",Group="BranchPlusFunctions"]
	// String appwindowname
	// if  w_bp_frame.Pbwindow("pbname:=" + windowName).WaitWhileExists (10)
		// //To get the property value of window during run time
		// appwindowname = w_bp_frame.PbWindow("pbname:=" + windowName).GetAttr("Text")
		// //To generate custom Report log
		// Print("Validation of "+ "//" + appwindowname + "//" +" window has been displayed successfully"+"Passed"+""+"Y")
		// Sleep (2)
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed in Step/validate_WindowName"+"Failed"+ Error_Description +"")
// 
// //********************************************************************************************************
// //@methodName: validate_Menu_Tools_InternetOptions(webpage,pageName)
// //@Author: Meena
// //@Date: 05 July 2018
// //@Description: This function will validate the browser options in menu Tools -> Internet sub menus 
// //*********************************************************************************************
// //@modification Date: 18 Nov 2021
// //@Modified by: Arun Prakash R M
// //@Comments: added Send keys to select the Submenu everytime if Select method fails
// //Ex:  validate_Menu_Tools_InternetOptions("E-Mail","CommuniGate Pro branchusers.com Entrance")
// //********************************************************************************************************
// validate_Menu_Tools_InternetOptions(String webpage,String pageName)
	// %FuncInfo[Desc="This function will validate the browser options in menu Tools -> Internet sub menus ",Group="BranchPlusFunctions"]
	// //To select the webpage in Tools -> Internet menu
	// BranchPLUS.MenuItemBar.Tools.Internet.webpage.Select()
	// //To validate the browser options under Tools -> Internet sub menu 
	// UA.GenKeyEvents("<Enter>")
	// Sleep (5)
	// //Enter credentials in security pop up - In progresss
	// // enterCredentials_SecurityPopUp()
	// //handle security alert popup
	// handle_Browser_DialogPopup("NADA Used Car Guide","Security Alert","Yes")
	// Sleep (5)
	// //handle security alert popup
	// handle_Browser_DialogPopup("NADA Used Car Guide","Security Alert","Yes")
	// validate_SpecificPage_Displayed_InBrowser(pageName)
	// //To close the browser
	// close_SpecificTab_InBrowser(pageName)
	// //Error handling
	// if GetErrorCount()>0  			
			// LogError("Failed in Step/validate_Menu_Tools_InternetOptions"+"Failed"+ Error_Description +"")
// //********************************************************************************************************
// //@methodName: validate_Menu_Tools_TCICredit(windowName,buttonName)
// //@Author: Meena
// //@Date: 06 July 2018
// //@Description: This function will validate the option in menu Tools -> TCI Credit sub menu 
// //Ex:  validate_Menu_Tools_TCICredit("w_tcicredit_import","Close")
// //********************************************************************************************************
// validate_Menu_Tools_TCICredit(String windowName,String buttonName)
	// %FuncInfo[Desc="This function will validate the option in menu Tools -> TCI Credit sub menu ",Group="BranchPlusFunctions"]
	// //To select the sub menu in Tools menu
	// BranchPLUS.MenuItemBar.Tools.TCICredit.Select()
	// //To validate the Branch Plus window under Tools -> TCI Credit sub menu 
	// validate_WindowName(windowName)
		// //This is will Click on the button with respect to window name
		// clickButton_InWindow(windowName,buttonName)
	// if GetErrorCount()>0  			
			// LogError("Failed in Step/validate_Menu_Tools_TCICredit"+"Failed"+ Error_Description +"")
// //********************************************************************************************************
// //@methodName: validate_Menu_Tools_SupportOptions(windowName,loanactivity)
// //@Author: Meena
// //@Date: 06 July 2018
// //@Description: This function will validate the options in menu Tools -> Support sub menu 
// //Ex:  validate_Menu_Tools_SupportOptions("w_loan_amortization","Loan Adjustment")
// //********************************************************************************************************
// validate_Menu_Tools_SupportOptions(String windowName,String loanactivity)
	// %FuncInfo[Desc="This function will validate the options in menu Tools -> Support sub menu ",Group="BranchPlusFunctions"]
	// //To select the sub menu in Tools -> Support menu
	// BranchPLUS.MenuItemBar.Tools.Support.loanactivity.Select()
	// Sleep (5)
	// UA.GenKeyEvents("<Enter>")
	// Sleep (10)
	// //To validate the Recalculated Loan Payments window under Tools -> Support sub menu
	// validate_WindowName(windowName)
		// //Error Handling
	// if GetErrorCount()>0  			
			// LogError("Failed in Step/validate_Menu_Tools_SupportOptions"+"Failed"+ Error_Description +"")
// //***************************************************************************************************************************
// //@Method: handle_Changing_TextNumber_popup_Address_Tab(reason)
// //@Author: Sumithra
// //@Date 13th july 2018
// //@Description: This function is to handle popup when text number is changed
// //Ex:  handle_Changing_TextNumber_popup_Address_Tab(reason)
// //***************************************************************************************************************************
// handle_Changing_TextNumber_popup_Address_Tab(String reason)
	// %FuncInfo[Desc="This function is to handle popup when text number is changed",Group="BranchPlusFunctions"]
	// handle_AuditWindow("w_search","OK",reason)
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed to handle_Changing_TextNumber_popup_Address_Tab"+"Failed"+ Error_Description +"")
// 
// //***************************************************************************************************************************
// //@Method: customer_Search_Using_Account_ID_F2(acctNum)
// //@Author: Sumithra
// //@Date 13th July 2018
// //@Description: This function is to search customer using account id
// //Ex:  customer_Search_Using_Account_ID_F2(acctNum)
// //***************************************************************************************************************************
// customer_Search_Using_Account_ID_F2(String acctNum)
	// %FuncInfo[Desc="This function is to search customer using account id",Group="BranchPlusFunctions"]
	// //Enter account id
	// enterValuesIn_CustmerSearch("acct_id",acctNum)
	// //Click on OK Button in customer search window
	// clickOkButton_CustomerSearchWindow()
	// if GetErrorCount()>0 
		// LogError("Failed in step/customer_Search_Using_Account_ID_F2"+"Failed"+ Error_Description+"")
// 
// String validateCustomerName_CreditDecisionStatistics_Report(String customerName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Integer rowItr = 1
	// Boolean found = false
	// String validateCustomerName_CreditDecisionStatistics_Report
	// w_bp_frame.ReportsFrame.dw_report.WaitUntilExists(20)
	// //Looping for all Rows
	// while GetErrorCount()==0
		// custNameActual = w_bp_frame.ReportsFrame.dw_report.GetCellData("#" +[String] rowItr,"cf_customer")		
		// if ((custNameActual).Trim()).ToUpper() == ((customerName).Trim()).ToUpper()
			// found = true
			// validateCustomerName_CreditDecisionStatistics_Report = [String]rowItr
			// Print("REPORT: Customer Name:' { customerName }' is displayed at Row : { rowItr } in Credit Decision Statistics"+"Passed{FailComments}YES")			
		// rowItr = rowItr + 1
	// //'Validation if Record not Found
	// if found == false
		// Print("REPORT: Customer Name:'" + customerName + "' which you are looking is not available in Credit Decision Statistics" +"Failed"+FailComments+"")
		// //Msgbox "Customer Name which you are looking is not available in Account Detail (Processed) Report" 
	// if GetErrorCount()>0 
		// LogError("Failed to validateCustomerName_CreditDecisionStatistics_Report")
	// return validateCustomerName_CreditDecisionStatistics_Report
// // Remove ()
// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //***************************************************************************************************************************
// //@Method: valdiate_CreditDecisionStatistics_Data_for_Customer(custName, accStatus,refNum)
// //@Author: Sumithra
// //@Date 13th July 2018
// //@Modified BY: Chandra (Replacing the || object with Discriptive object Names)
// //@Modified Date: 15 May 2019
// //@Description: This function is to valdiate CreditDecisionStatistics Data for Customer
// //Ex:  valdiate_CreditDecisionStatistics_Data_for_Customer(custName, accStatus,refNum)
// //***************************************************************************************************************************
// valdiate_CreditDecisionStatistics_Data_for_Customer(String custName,String accStatus,String refNum)
	// %FuncInfo[Desc="This function is to valdiate CreditDecisionStatistics Data for Customer",Group="BranchPlusFunctions"]
	// //Validating Customer Name
	// String requiredRowNumber = validateCustomerName_CreditDecisionStatistics_Report(custName)
	// AppObject pbReportWindow = w_bp_frame.ReportsFrame.dw_report
	// if pbReportWindow.WaitWhileExists(10) 
		// Sleep(10)
		// //Validating Account Status
		// String actLoanStatus = GetValue_PBDataWindow(pbReportWindow, "#" + requiredRowNumber,"acct_status_descr")	
		// validateDataAndReport((actLoanStatus.Trim()).ToUpper(), ((accStatus).Trim()).ToUpper(), "REPORT: Validation of Loan //Account Status//: " + actLoanStatus)
		// //Validating Account Class
		// String actRefNum = GetValue_PBDataWindow(pbReportWindow,"#" + requiredRowNumber,"acct_id")	
		// validateDataAndReport((actRefNum).Trim(), (refNum).Trim(), "REPORT: Validation of //Reference Number//: " + actRefNum)
	// if GetErrorCount()>0  			
		// LogError("Failed to valdiate_CreditDecisionStatistics_Data_for_Customer"+"Failed"+ Error_Description +"")
// 
// //***************************************************************************************************************************
// //@Method: SelectCell_PBDataWindow(tblPBDataWindow,RowNumber,ColumnName)
// //@Author: Thirumal Reddy
// //@Date 21 Aug 2018
// //@Description: This function is to select the links in SAWS Tab
// //Ex:  SelectCell_PBDataWindow(tblPBDataWindow,RowNumber,ColumnName)
// //***************************************************************************************************************************
// SelectCell_PBDataWindow(AppObject tblPBDataWindow,String RowNumber,String ColumnName)
	// %FuncInfo[Desc="This function is to select the links in SAWS Tab",Group="BranchPlusFunctions"]
	// //tblPBDataWindow.HoverMouse ()
	// tblPBDataWindow.SelectCell RowNumber,ColumnName
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed to SetValue_PBDataWindow"+"Failed"+ Error_Description +"")
// 
// //***************************************************************************************************************************
// //@Method: select_Representative_CreditDecisionWindow()
// //@Author: Sumithra
// //@Date 13th July 2018
// //@Description: This function is to select Representative in CreditDecisionWindow
// //Ex:  select_Representative_CreditDecisionWindow()
// //***************************************************************************************************************************
// select_Representative_CreditDecisionWindow()
	// %FuncInfo[Desc="This function is to select Representative in CreditDecisionWindow",Group="BranchPlusFunctions"]
	// AppObject PbTable = BranchPlus.CreditDecision.tbldwStep
	// //	 SelectCell_PBDataWindow(PbTable,"#1","dealer_rep_id")
	// Sleep (2)
	// TypeText_PBDataWindow(PbTable,"#1","dealer_rep_id","Finance")
	// if GetErrorCount()>0 
		// LogError("Failed in step/select_Representative_CreditDecisionWindow"+"Failed"+ Error_Description+"")
// 
// //*************************************************************************************************************************************************
// //@MethodName: validate_Process_PaymentDate()
// //@Author Chandra
// //@Date 11 July 2018
// //@Description This is validate Process Payment Date
// //Ex  validate_Process_PaymentDate(updateprocessDate)
// //*************************************************************************************************************************************************
// validate_Process_PaymentDate(String updateprocessDate)
	// %FuncInfo[Desc="This is validate Process Payment Date",Group="BranchPlusFunctions"]
	// //Validate Payment Processed Date
	// AppObject pbReportWindow = BranchPlus.CustomerF2Window.dw_payments
	// String CashProcessesDate = GetValue_PBDataWindow(pbReportWindow,"#1","entry_dt")	
	// List<String> lsProcessDatecheck = CashProcessesDate.Split(" ")
	// CashProcessesDate = lsProcessDatecheck[1]
	// if CashProcessesDate == updateprocessDate 
		// Print("Validation of Processes Payment Date has been displayed","Payment Processes Date : "+ updateprocessDate +"and After Payment Date : "+ CashProcessesDate +" is Matching")
	// else
		// LogWarning("Failed Step/validate_Process_PaymentDate"+"Process Payment Date is not Matching")
	// if GetErrorCount()>0 
		// LogError("Failed in step/validate_Process_PaymentDate"+"Failed"+ Error_Description+"")
// 
// //*************************************************************************************************************************************************
// //@MethodName: validate_CheckNumber_Payments()
// //@Author Chandra
// //@Date 11 July 2018
// //@Description This is validate Check Number in Payments Tab
// //Ex  validate_CheckNumber_Payments(checkNumber)
// //*************************************************************************************************************************************************
// validate_CheckNumber_Payments(String checkNumber)
	// %FuncInfo[Desc="This is validate Check Number in Payments Tab",Group="BranchPlusFunctions"]
	// AppObject pbReportWindow = BranchPlus.CustomerF2Window.dw_payments
	// //Validate Check Number
	// if checkNumber == "" 
		// //if check Number is empty ignore
	// else
		// String checkNum = GetValue_PBDataWindow(pbReportWindow,"#1","check_nbr")
		// validateDataAndReport((checkNumber).Trim(),(checkNum).Trim() , "Validation of Check Number: " + checkNumber)
	// if GetErrorCount()>0 
		// LogError("Failed in step/validate_CheckNumber_Payments"+"Failed"+ Error_Description+"Y")
// 
// //*************************************************************************************************************************************************
// //@MethodName: get_PaymentType_Character()
// //@Author Chandra
// //@Date 11 July 2018
// //@Description This is get Payment Type Character in PaymentsTab(Deferment, Principal Only Payment Type)
// //@Return field value which is required
// //Ex  get_PaymentType_Character()
// //*************************************************************************************************************************************************
// String get_PaymentType_Character()
	// %FuncInfo[Desc="This is get Payment Type Character in PaymentsTab(Deferment, Principal Only Payment Type)",Group="BranchPlusFunctions"]
	// AppObject pbReportWindow = BranchPlus.CustomerF2Window.dw_payments
	// String PaymntTypeChar = GetValue_PBDataWindow(pbReportWindow,"#1","cf_pmt_class")
	// String sGet_PaymentType_Character =PaymntTypeChar
	// if GetErrorCount()>0 
		// LogError("Failed in step/get_PaymentType_Character"+"Failed"+ Error_Description+"Y")
	// return sGet_PaymentType_Character
// //*************************************************************************************************************************************************
// //@MethodName: validate_Payments_AllTypes()
// //@Author Chandra
// //@Date 11 July 2018
// //@Description This is validate All Types of Payments(Principal Only, Regular, Deferment, Payoff)
// //Ex  validate_Payments_AllTypes("Deferment","Cash","D","P","Paid Out","8721","8721","10","10","10","10","58.86")
// //*************************************************************************************************************************************************
// validate_Payments_AllTypes(String paymentType,String paymentMethod,String Deferment_Character,String PrincipalOnly_Character,String Payoff_Acc_Status,String principleBalBeforePayment,String newPrincipal,String amountReceived,String totalSum_Principal_Other_Intrest_Balance,String otherBalance,String interestBalance,String Diff_Sum_LateAndNSFCharge)
	// %FuncInfo[Desc="This is validate All Types of Payments(Principal Only, Regular, Deferment, Payoff)",Group="BranchPlusFunctions"]
	// String DefermentCharacter,PrincipalOnlyCharacter
	// Real AfterPayment_Diff_Sum_LateAndNSFCharge,Diff_LateAndNSFCharge,PrincipalBalancePaid
	// Real TotlSumIntrestOtherAmt
	// if paymentType == "Deferment" 
		// //Validate After Deferment Payment Type Character
		// DefermentCharacter = get_PaymentType_Character()
		// validateDataAndReport(Deferment_Character,DefermentCharacter, "Validation of Deferment Payment: "+ Deferment_Character)
		// //Validate Intrest + Other Balance = Deferment Amt Received
		// TotlSumIntrestOtherAmt =(Math.Round((Integer.Parse(otherBalance)+Integer.Parse(interestBalance)),4))
		// //Validate Deferment Amt Receievd and Other + Intrest Balance
		// validateDataAndReport(Math.Round((Integer.Parse(System.GetEnvVar("AmtReceived"))),4),Math.Round(TotlSumIntrestOtherAmt,4) , "Validation of Amount Paid: $" + System.GetEnvVar("AmtReceived") + " and Interest Due paid for Money Order payment: $" + [String]TotlSumIntrestOtherAmt)
		// 
	// else if paymentType == "Regular Payment" 
		// //After Payment Get Late Charge and Nsf Charge
		// AfterPayment_Diff_Sum_LateAndNSFCharge = get_DiffrenceAmount_ChargeAmtAndPaidAmt_TwoChargeTypes_PaymentTab("Late Charge","Nsf Charge")
		// Diff_LateAndNSFCharge = AfterPayment_Diff_Sum_LateAndNSFCharge - Real.Parse(Diff_Sum_LateAndNSFCharge)
		// //validate Regular Payment for Check, check by mail and cashier//s check
		// validate_Regular_Payments(paymentMethod,Diff_LateAndNSFCharge,Real.Parse(amountReceived),Real.Parse(totalSum_Principal_Other_Intrest_Balance))
	// else if paymentType == "Principal Only" 
		// //Validate After Deferment Payment Type Character
		// PrincipalOnlyCharacter = get_PaymentType_Character()
		// validateDataAndReport(PrincipalOnly_Character,PrincipalOnlyCharacter, "Validation of Principal Only Payment: "+ PrincipalOnly_Character)
		// //Validate PrincipalBal Before Payment and after Payment is equal to Amount Paid
		// PrincipalBalancePaid = Math.Round(((Real.Parse(principleBalBeforePayment)) - Real.Parse(newPrincipal)),4)
		// validateDataAndReport((Math.Round((Real.Parse(amountReceived)),4)),Math.Round(PrincipalBalancePaid,4) , "Validation of Principle Balance: ${ Math.Round(PrincipalBalancePaid,4)}  and Amount Paid for Cash Payment: ${ (Math.Round((Real.Parse(amountReceived)),4))}")
	// else if paymentType == "Payoff" 
		// //Validation of Amount Received and Total Sum of Principal, Other, Intrest Balance
		// validateDataAndReport((Math.Round((Real.Parse(totalSum_Principal_Other_Intrest_Balance)),4)),(Math.Round((Real.Parse(amountReceived)),4)) , "Validation of Pay Off Amount: $" + totalSum_Principal_Other_Intrest_Balance + " and Amount Paid for Cash by Mail payment: $"+amountReceived)
		// //STEP: Navigating to Account Tab
	// navigateToTab_CustomerSubTabs("Account")
	// //Get Account status from Account tab
	// String AcctStatus = get_Account_Status_AccountTab()
	// //Logger
	// validateDataAndReport(Payoff_Acc_Status.Trim(),AcctStatus.Trim(),"Validation of Account Status after Pay off: ExpAccountStatus: " +Payoff_Acc_Status +" and ActAccountStatus: " + AcctStatus)
		// //Logger
		// writeReportLog("Account status changed from Active to Paid Out","Passed",FailComments,"Y")
		// //STEP: Navigating to Payment Tab
	// navigateToTab_CustomerSubTabs("Payment")
	// if GetErrorCount()>0 
		// LogError("Failed in step/validate_Payments_AllTypes"+"Failed"+ Error_Description+"Y")
// 
// //*************************************************************************************************************************************************
// //@MethodName: validate_AmountReceived_AmountPaid_Process_Payment()
// //@Author Chandra
// //@Date 11 July 2018
// //@Description This is validate Amount Received and Amount Paid in Payments
// //@Return field value which is required
// //Ex  validate_AmountReceived_AmountPaid_Process_Payment("10","10")
// //*************************************************************************************************************************************************
// String validate_AmountReceived_AmountPaid_Process_Payment(String amtReceived,String amtPaid)
	// %FuncInfo[Desc="This is validate Amount Received and Amount Paid in Payments",Group="BranchPlusFunctions"]
	// AppObject pbReportWindow = BranchPlus.CustomerF2Window.dw_payments	
	// //Get Amount Received
	// String amountReceived = (GetValue_PBDataWindow(pbReportWindow,"#1","recvd_amt"))
	// //Get Amount Paid
	// String amountPaid = (GetValue_PBDataWindow(pbReportWindow,"#1","applied_amt"))
	// //Validate Amount Received
	// if (Math.Round([Integer]amountReceived,4)) == (Math.Round([Integer]amtReceived,4)) 
		// Print("Validation of Processes Payment Amount Received has been displayed","Payment Processes Amount Received : "+ amountReceived +"and After Payment Amount Received : "+ amtReceived +" is Matching"	 )  
		// //Validate Amount Paid
		// if (Math.Round([Integer]amountPaid,4)) == (Math.Round([Integer]amtPaid,4) )
			// Print("Validation of Processes Payment Amount Paid has been displayed","Payment Processes Amount Paid : "+ amountPaid +"and After Payment Amount Paid : "+ amtPaid +" is Matching"	  )  
		// else
			// LogError("Failed Step/validate_AmountReceived_AmountPaid_Process_Payment , Process Payment Amount Paid is not Matching")
	// else
		// LogError("Failed Step/validate_AmountReceived_AmountPaid_Process_Payment , Process Payment Amount Received is not Matching")
	// String validate_AmountReceived_AmountPaid_Process_Payment = amountReceived
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/validate_AmountReceived_AmountPaid_Process_Payment","Failed", Error_Description,"")
	// return validate_AmountReceived_AmountPaid_Process_Payment
// //*************************************************************************************************************************************************
// //@methodName: validate_Reverse_Regular_Payment()
// //@Author Chandra
// //@Date 26 Jun 2018
// //@Description This will validate Regular Payments for Reverse Payment 
// //Ex // validate_Reverse_Regular_Payment("Check","Test","10","8739","8729","42321,"10","54")
// //*************************************************************************************************************************************************	
// validate_Reverse_Regular_Payment(String paymentType_BeforeReversePayment,String Payment_Reason,String amountReceived,String principleBal_BeforeReversePayment,String principleBal_AfterReversePayment,String checkNumber_BeforeReversePayment,String totalSum_Principal_Other_Intrest_Balance,String ChargeAndPaidAmtLateNSFChargeAmtBeforeReversepayment)
	// %FuncInfo[Desc="This will validate Regular Payments for Reverse Payment ",Group="BranchPlusFunctions"]
	// //Get Diffrence of Principal Balance  
	// Real DiffPrincipalAmt = Integer.Parse(principleBal_BeforeReversePayment )- Real.Parse(principleBal_AfterReversePayment)
	// //Get the Nsf charge after reverse Payment
	// Real ChargeAndPaidAmt_LateNSFChargeAmt_AfterReversepayment = get_DiffrenceAmount_ChargeAmtAndPaidAmt_TwoChargeTypes_PaymentTab("Late Charge","Nsf Charge")
	// //Get Sum of Nsf Charges
	// Real Diff_Sum_NSFLateCharge = ChargeAndPaidAmt_LateNSFChargeAmt_AfterReversepayment - Real.Parse(ChargeAndPaidAmtLateNSFChargeAmtBeforeReversepayment)
	// //PaymentType Regular
	// //else if paymentType_BeforeReversePayment = "Check" || paymentType_BeforeReversePayment = "Check by Mail" || paymentType_BeforeReversePayment = "Cashier//s Check" || paymentType_BeforeReversePayment = "Home Office" || paymentType_BeforeReversePayment = "Cash by Mail" || paymentType_BeforeReversePayment = "Allotment" || paymentType_BeforeReversePayment = "Dealer GAP Claim Check" 
	// if paymentType_BeforeReversePayment == "Check" || paymentType_BeforeReversePayment == "Check by Mail" || paymentType_BeforeReversePayment == "Cashier//s Check" || paymentType_BeforeReversePayment == "Home Office" || paymentType_BeforeReversePayment == "Allotment" || paymentType_BeforeReversePayment == "Dealer GAP Claim Check" 
		// //Get Added Nsf Charge 
		// NsfChargeAmount = get_NSF_ChargeAmount()
		// //Validate Sum of Diffrence Nsf Charges and Added Nsf Charge
		// if Ccur(Diff_Sum_NSFLateCharge) == Ccur(NsfChargeAmount) 
			// writeReportLog("Validation of NSF Charge Added: $"+Diff_Sum_NSFLateCharge,"Passed",FailComments,"")
		// //Validate Diffrence of Principal balance and Amount Reeived 
		// else if Ccur(DiffPrincipalAmt) == Ccur(amountReceived) 
			// validateDataAndReport(CCur(DiffPrincipalAmt),CCur(amountReceived) , "Validation of Principle Balance: $" + DiffPrincipalAmt + " and Amount Added back to Account for Payment Type //Regular//: $"+amountReceived)
		// //Paying the NSF amt
		// if paymentType_BeforeReversePayment == "Check" 
			// //Validation of NSF Charge Paid Amount
			// NSF_Payment(checkNumber_BeforeReversePayment,NsfChargeAmount,Payment_Reason)
		// //Paying the NSF amt is Waived 
		// else if paymentType_BeforeReversePayment == "Check by Mail" 
			// //Validation of NSF waive
			// NSF_Waive_Payment(NsfChargeAmount,Payment_Reason)
	// else if paymentType_BeforeReversePayment == "Cashier//s Check" || paymentType_BeforeReversePayment == "Cash by Mail" 
		// //Validate Sum of Diffrence Nsf Charges and Added Nsf Charge
		// if Ccur(Diff_Sum_NSFLateCharge) == Ccur(amountReceived) 
			// validateDataAndReport(CCur(Diff_Sum_NSFLateCharge),CCur(amountReceived) , "Validation of Charges Amount: $" + Diff_Sum_NSFLateCharge + " and Amount Added back to Account for Payment Type //Regular//: $" + amountReceived)
		// //total sum of Principal, other, Intrest Balance is AMount received
		// else if CCur(totalSum_Principal_Other_Intrest_Balance) == Ccur(amountReceived) 
			// validateDataAndReport(CCur(totalSum_Principal_Other_Intrest_Balance),CCur(amountReceived) , "Validation of Principle Amount: $" + totalSum_Principal_Other_Intrest_Balance + " and Amount Added back to Account for Payment Type //Regular//: $"+amountReceived)
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/validate_Reverse_Regular_Payment","Failed",Error_Description,"")
// //*************************************************************************************************************************************************
// //@methodName: handle_MultipleReasons_Reverse_Payments()
// //@Author Chandra
// //@Date 12 July 2018
// //@Description This is handle the Multiple Reasons Reverse Payments(Cash,Cash by mail,Check,Check by Mail,Cashier//s Check,MoneyOrder)
// //Ex // handle_MultipleReasons_Reverse_Payments("Cash","Test","Insufficient Funds")
// //*************************************************************************************************************************************************
// handle_MultipleReasons_Reverse_Payments(String paymentType_BeforeReversePayment,String Payment_Reason,String NsfReason)
	// %FuncInfo[Desc="This is handle the Multiple Reasons Reverse Payments(Cash,Cash by mail,Check,Check by Mail,Cashier//s Check,MoneyOrder)",Group="BranchPlusFunctions"]
	// //Conversing the Sting
	// String appVersionWithoutDot = (System.GetEnvVar("appVersion")).Replace(".","").Trim()
	// if paymentType_BeforeReversePayment == "Cash" || paymentType_BeforeReversePayment == "HO CPI Claim Check" || paymentType_BeforeReversePayment == "HO GAP Claim Check" || paymentType_BeforeReversePayment == "HO Warranty Claim Check" || paymentType_BeforeReversePayment == "Home Office" || paymentType_BeforeReversePayment == "HO - 3rd Party Claims" 
		// //Handling for 9.6.0 Changes
		// if Integer.Parse(appVersionWithoutDot) >= 960 
			// enter_Payment_ReversalTypeAndReason("Other",Payment_Reason) 
		// else
			// TypeText_ReversePaymentReasonWindow(Payment_Reason)
	// //FCash by Mail for Payoff
	// else if paymentType_BeforeReversePayment == "Cash by Mail" || paymentType_BeforeReversePayment == "Allotment" || paymentType_BeforeReversePayment == "Garnish" || paymentType_BeforeReversePayment == "Bankruptcy" 
		// //Handling for 9.6.0 Changes
		// if Integer.Parse(appVersionWithoutDot) >= 960 
			// enter_Payment_ReversalTypeAndReason("Other",Payment_Reason) 
		// else
			// TypeText_ReversePaymentReasonWindow(Payment_Reason)
	// //Cashier//s Check Paymnet for Regular Payment
	// else if paymentType_BeforeReversePayment == "Cashier//s Check" || paymentType_BeforeReversePayment == "Purchased Account" || paymentType_BeforeReversePayment == "eComplish Credit" || paymentType_BeforeReversePayment == "Money Order by Mail" || paymentType_BeforeReversePayment == "foreign Collection" || paymentType_BeforeReversePayment == "Check - Insurance Claim" || paymentType_BeforeReversePayment == "Bank Draft" 
		// //Click on Nsf No Button
		// clickButton_InWindow("w_message","No")
		// //		//Enter Check reverse Payment Reason
		// //		Set tblPBDataWindow = w_bp_frame.w_search.PbDataWindow("pbname:=dw_search")
		// //		 SetValue_PBDataWindow(tblPBDataWindow,"#1","reason",Payment_Reason)
		// //		//Click on Yes Button
		// //		 clickButton_InWindow("w_search","Ok")
		// //Handling for 9.6.0 Changes
		// if Integer.Parse(appVersionWithoutDot) >= 960 
			// enter_Payment_ReversalTypeAndReason("Other",Payment_Reason) 
		// else
			// TypeText_ReversePaymentReasonWindow(Payment_Reason)
	// //Check by Mail Payment for Regular Payment
	// else if paymentType_BeforeReversePayment == "Check by Mail" || paymentType_BeforeReversePayment == "Auction Check"  
		// //Click on Nsf Charge Yes
		// clickButton_InWindow("w_message","Yes")
		// //Select Nsf Reason Ex://Insufficient Funds
		// enter_NSF_Reason_Reverse_Payment(NsfReason)
		// //Click on Ok button in Nsf Reason 
		// clickButton_InWindow("w_search","Ok")
		// //Nsf Letter Print //No"
		// clickButton_InWindow("w_message","Yes")
		// //Validation of Nsf Letter Log
		// writeReportLog("Validation of NSF Print letter was Successfull","Passed",FailComments,"")
	// //Check Payment for Regular Payment
	// else if paymentType_BeforeReversePayment == "Check" || paymentType_BeforeReversePayment == "Money Order by Mail" 
		// //Click on Nsf Charge Yes
		// clickButton_InWindow("w_message","Yes")
		// //Select Nsf Reason Ex://Insufficient Funds
		// enter_NSF_Reason_Reverse_Payment(NsfReason)
		// //Click on Ok button in Nsf Reason 
		// clickButton_InWindow("w_search","Ok")
		// //Nsf Letter Print //No"
		// clickButton_InWindow("w_message","No")
	// //Money Order Payment for Deferment
	// else if paymentType_BeforeReversePayment == "Money Order" || paymentType_BeforeReversePayment == "Dealer Check" || paymentType_BeforeReversePayment == "eComplish Check" || paymentType_BeforeReversePayment == "Bank Draft" 
		// //Nsf Letter Print //No"
		// clickButton_InWindow("w_message","No")
		// //Handling for 9.6.0 Changes
		// if Integer.Parse(appVersionWithoutDot) >= 960 
			// enter_Payment_ReversalTypeAndReason("Other",Payment_Reason) 
		// else
			// TypeText_ReversePaymentReasonWindow(Payment_Reason)
	// if GetErrorCount()>0  			
		// LogError("Failed in step/handle_MultipleReasons_Reverse_Payments"+"Failed"+Error_Description+"")
// 
// //*************************************************************************************************************************************************
// //@methodName: enter_NSF_Reason_Reverse_Payment()
// //@Author Chandra
// //@Date 12 July 2018
// //@Description This will Enter NSF Reason for Reverse Payment 
// //Ex // enter_NSF_Reason_Reverse_Payment("Insufficient Funds")
// //*************************************************************************************************************************************************
// enter_NSF_Reason_Reverse_Payment(String NsfReason)
	// %FuncInfo[Desc="This will Enter NSF Reason for Reverse Payment ",Group="BranchPlusFunctions"]
	// AppObject tblPBDataWindow = w_bp_frame.CreditDecisionSearchWindow.dw_search
	// if tblPBDataWindow.IsPresent() 
		// //Type NSF Reason Ex: //Insufficient Funds//
		// TypeText_PBDataWindow(tblPBDataWindow,"#1","nsf_reason",NsfReason) 
	// if GetErrorCount()>0  			
		// LogError("Failed in step/enter_NSF_Reason_Reverse_Payment"+"Failed"+Error_Description+"")
// 
// //*************************************************************************************************************************************************
// //@methodName: get_NSF_ChargeAmount()
// //@Author Chandra
// //@Date 12 July 2018
// //@Description This will get added NSF Charge Amount
// //@Return field value which is required
// //Ex // get_NSF_ChargeAmount()
// //*************************************************************************************************************************************************
// Real get_NSF_ChargeAmount()
	// %FuncInfo[Desc="This will get added NSF Charge Amount",Group="BranchPlusFunctions"]
	// AppObject PBWindowTable = BranchPlus.CustomerF2Window.dw_charges
	// //Get NSF Charge Amount
	// Real NsfChargeAmount = Math.Round((Real.Parse(GetValue_PBDataWindow(PBWindowTable,"#1","charge_amt"))),4)
	// Real rGet_NSF_ChargeAmount = NsfChargeAmount
	// if GetErrorCount()>0  			
			// LogError("Failed in step/get_NSF_ChargeAmount"+"Failed"+Error_Description+"")
		// return rGet_NSF_ChargeAmount
// //********************************************************************************************************************************************
// //@methodName: getNSF_ChargeAmount()
// //@Description: This function is to get the NSF amount in charges table of payment tab
// //@Author: Sumithra
// //@Date 27-03-2019
// //Ex:  getNSF_ChargeAmount()
// //*********************************************************************************************************************************************
// getNSF_ChargeAmount()
	// %FuncInfo[Desc="This function is to get the NSF amount in charges table of payment tab",Group="BranchPlusFunctions"]
	// Integer rowCnt = getRowCount_PbDataWindow("w_cust","dw_charges")
	// Real totalNSFCharge
	// String chargeType,getNSF_ChargeAmount
	// totalNSFCharge = Math.Round(0,4)
	// for (Integer itr = 1; itr<=rowCnt; itr++)
		// //get charge type
		// chargeType = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + [String]itr ,"charge_type")		
		// if chargeType.FuzzyMatch ("Nsf Charge") == 0 
			// //get NSF amount
			// getNSF_ChargeAmount = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + [String]itr ,"charge_amt")			
			// //Exit for
	// //Error handling 
	// if GetErrorCount()>0  			
			// LogError("Failed to getNSF_ChargeAmount"+"Failed"+ Error_Description +"")
// 
// //*************************************************************************************************************************************************
// //@methodName: validate_Reverse_PrincipalOnly_Payment()
// //@Author Chandra
// //@Date 12 July 2018
// //@Description This will validate Reverse Payment Principal Only PaymentType
// //@Return field value which is required
// //Ex // validate_Reverse_PrincipalOnly_Payment("P","8759","10","8769")
// //*************************************************************************************************************************************************
// validate_Reverse_PrincipalOnly_Payment(String PrincipalOnly_Character,String principleBal_BeforeReversePayment,String amountReceived,String principleBal_AfterReversePayment)
	// %FuncInfo[Desc="This will validate Reverse Payment Principal Only PaymentType",Group="BranchPlusFunctions"]
	// //Validate After Deferment Payment Type Character
	// String PrincipalOnlyCharacter = get_PaymentType_Character()
	// validateDataAndReport(PrincipalOnly_Character,PrincipalOnlyCharacter, "Validation of Principal Only Payment: "+ PrincipalOnly_Character)
	// //Validate PrincipalBal Before Reverse Payment + Amount Received equal to After Reverse Payment
	// Real PrincipalBalancePaid = Math.Round((Real.Parse(principleBal_BeforeReversePayment))+ (Real.Parse(amountReceived)),4)
	// validateDataAndReport(Math.Round(PrincipalBalancePaid,4),Math.Round((Real.Parse(principleBal_AfterReversePayment)),4) , "Validation of Principle Balance: $ { PrincipalBalancePaid} and Principle Balance Added back to Account for Payment Type //Principal Only//: $ { principleBal_AfterReversePayment}")
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/validate_Reverse_PrincipalOnly_Payment"+"Failed"+ Error_Description+"")
// 
// //*************************************************************************************************************************************************
// //@methodName: validate_Reverse_Payoff_Payment()
// //@Author Chandra
// //@Date 12 July 2018
// //@Description This will validate Reverse Payment Pay off PaymentType
// //@Return field value which is required
// //Ex // validate_Reverse_Payoff_Payment("8769","8769","Active")
// //*************************************************************************************************************************************************
// validate_Reverse_Payoff_Payment(String total_Sum_Principal_Other_Intrest_BeforeReversePayment,String amountReceived,String Active_Acc_Status)
	// %FuncInfo[Desc="This will validate Reverse Payment Pay off PaymentType",Group="BranchPlusFunctions"]
	// //Validation of Pay off Amount and Amount get Added		
	// validateDataAndReport(Math.Round((Real.Parse(total_Sum_Principal_Other_Intrest_BeforeReversePayment)),4),Math.Round((Real.Parse(amountReceived)),4) , "Validation of Pay Off Amount: $ {total_Sum_Principal_Other_Intrest_BeforeReversePayment}  and Amount Added back to Account for Payment Type //Payoff//: $ {amountReceived}")
	// //Logger
	// Math.Round((Real.Parse(amountReceived)),4)
	// writeReportLog("After making a Payoff in Payment Tab","Passed",FailComments,"Y")
	// //STEP: Navigating to Account Tab
	// navigateToTab_CustomerSubTabs("Account")
	// //Validation of Account Status
	// String AcctStatus = get_Account_Status_AccountTab()
	// //Logger
	// validateDataAndReport(Active_Acc_Status.ToUpper(),AcctStatus.ToUpper(),"Validation of Account Status after Reverse Pay off: ExpAccountStatus: " +Active_Acc_Status +" and ActAccountStatus: " + AcctStatus)
	// //Logger
	// Print("Account status changed from Paid Out to Active"+"Passed"+FailComments+"Y")
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/validate_Reverse_Payoff_PaymentType"+"Failed"+ Error_Description+"")
// //*************************************************************************************************************************************************
// //@methodName: validate_Reverse_Deferment_Payment()
// //@Author Chandra
// //@Date 12 July 2018
// //@Description This will validate Reverse Payment Pay off PaymentType
// //@Return field value which is required
// //Ex // validate_Reverse_Deferment_Payment("D","10","10","10","10")
// //*************************************************************************************************************************************************
// validate_Reverse_Deferment_Payment(String Deferment_Character,String otherAmount,String intrestAmount,String interestBalance_BeforeReversePayment,String otherBalance_BeforeReversePayment)
	// %FuncInfo[Desc="This will validate Reverse Payment Pay off PaymentType",Group="BranchPlusFunctions"]
	// //Validate After Deferment Payment Type Character
	// String DefermentCharacter = get_PaymentType_Character()
	// validateDataAndReport(Deferment_Character,DefermentCharacter, "Validation of Deferment Payment: "+ Deferment_Character)
	// //Validate Intrest + Other Balance = Deferment Amt Received
	// Real TotlSumIntrestOtherAmtAfterPayment = Math.Round(((Real.Parse(otherAmount)) + (Real.Parse(intrestAmount))),4)
	// //Sum of Other and Interest Balance
	// Real TotlSumIntrestOtherAmtBeforeReversePayment =  Math.Round(((Real.Parse(otherBalance_BeforeReversePayment)) + (Real.Parse(interestBalance_BeforeReversePayment))),4)
	// 
	// if Math.Round((TotlSumIntrestOtherAmtBeforeReversePayment),4) == Math.Round((TotlSumIntrestOtherAmtAfterPayment),4) 
		// //Validate Deferment Amt Receievd and Other + Intrest Balance
		// validateDataAndReport(Math.Round((TotlSumIntrestOtherAmtBeforeReversePayment),4) ,Math.Round((TotlSumIntrestOtherAmtAfterPayment),4)  , "Validation of Amount Paid: ${ TotlSumIntrestOtherAmtBeforeReversePayment} and Interest Due Amount Added back to Account for Payment Type //Deferment//: ${ TotlSumIntrestOtherAmtAfterPayment}")
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/validate_Reverse_Deferment_PaymentType"+"Failed"+ Error_Description+"")
// //RemoveFunction
// //*************************************************************************************************************************************************
// //@methodName: validate_Reverse_paymentMethod()
// //@Author Chandra
// //@Date 12 July 2018
// //@Description This will validate Reverse Payment Pay off PaymentType
// //@Return field value which is required
// //Ex // validate_Reverse_paymentMethod("Payment Reversal","NSF Reversal")
// //*************************************************************************************************************************************************
// validate_Reverse_paymentMethod(String ReversePaymentMethod,String NSF_ReversePaymentMethod)
	// %FuncInfo[Desc="This will validate Reverse Payment Pay off PaymentType",Group="BranchPlusFunctions"]
	// AppObject pbReportWindow = BranchPlus.CustomerF2Window.dw_payments	
	// //Get Payment Type Value
	// String ReversePayment_Method = GetValue_PBDataWindow(pbReportWindow,"#1","pmt_type")
	// if ReversePaymentMethod.Trim() == ReversePayment_Method.Trim()
		// validateDataAndReport((ReversePaymentMethod).Trim(),(ReversePayment_Method).Trim() ,"Validation of Reverse Payment Method: "+ReversePayment_Method)
	// else if (NSF_ReversePaymentMethod).Trim() == (ReversePayment_Method).Trim()
		// validateDataAndReport((NSF_ReversePaymentMethod).Trim(),(ReversePayment_Method).Trim() ,"Validation of Reverse Payment Method: "+ReversePayment_Method)
	// else
		// LogWarning("Validation of Reverse Payment Method is not Matching "+ReversePayment_Method+"Failed"+ Error_Description+"")
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/validate_Reverse_paymentMethod"+"Failed"+ Error_Description+"")
	// //RemoveFunction
// //*************************************************************************************************************************************************
// //@methodName: validate_AmountPaid_AmountReceived_Reverse_Payments()
// //@Author Chandra
// //@Date 12 July 2018
// //@Description This will validate Amount Paid and Amount Received in Reverse Payments
// //@Return field value which is required
// //Ex // validate_AmountPaid_AmountReceived_Reverse_Payments("10","10")
// //*************************************************************************************************************************************************
// Real validate_AmountPaid_AmountReceived_Reverse_Payments(String amountReceived_BeforeReversePayment,String amountPaid_BeforeReversePayment)
	// %FuncInfo[Desc="This will validate Amount Paid and Amount Received in Reverse Payments",Group="BranchPlusFunctions"]
	// AppObject pbReportWindow = BranchPlus.CustomerF2Window.dw_payments
	// //Get Amount Received
	// Real validate_AmountPaid_AmountReceived_Reverse_Payments
	// Real amountReceived = (Math.Round(Real.Parse(GetValue_PBDataWindow(pbReportWindow,"#1","recvd_amt")),4))
	// //System.GetEnvVar("amountReceived") = amountReceived
	// //Get Amount Paid
	// Real amountPaid = (Math.Round(Real.Parse(GetValue_PBDataWindow(pbReportWindow,"#1","applied_amt")),4))
	// //Validate Amount Received
	// if (Math.Round((amountReceived),4)) == (Math.Round(Real.Parse(amountReceived_BeforeReversePayment),4))
			// Print("Validation of Processes Payment Amount Received and Reverese Payment Amount Received has been displayed Payment Processes Amount Received : { amountReceived }and Reverse Payment Amount Received :${ amountReceived_BeforeReversePayment } is Matching"	 )   
			// //Validate Amount Paid
			// if (Math.Round((amountPaid),4)) == (Math.Round(Real.Parse(amountReceived_BeforeReversePayment),4))
				// Print("Validation of Processes Payment Amount Paid and Reverese Payment Amount Paid has been displayed Payment Processes Amount Paid : ${ amountPaid }and Reverse Payment Amount Paid : ${ amountPaid_BeforeReversePayment } is Matching")
			// else
				// LogError("Failed Step/validate_AmountPaid_AmountReceived_Reverse_Payments , Process Payment Amount Paid is not Matching")
	// else
		// LogError("Failed Step/validate_AmountPaid_AmountReceived_Reverse_Payments , Process Payment Amount Received is not Matching")
		// validate_AmountPaid_AmountReceived_Reverse_Payments = amountReceived
		// //Error Handling
		// if GetErrorCount()>0 
			// LogError("Failed in step/validate_AmountPaid_AmountReceived_Reverse_Payments","Failed", Error_Description,"")
		// return validate_AmountPaid_AmountReceived_Reverse_Payments
	// //RemoveFunction
// //***************************************************************************************************************************
// //@methodName: get_Future_Date_CurrentTime_AMPM(Promise_FutureDate,Promise_FutureDate_Time,time_period)
// //@Author: Meena
// //@Date: 11 July 2018
// //@Description This to get the Future Date in "MM/DD/YYYY" format and current time and to set in Promise date field
// //Ex:  get_Future_Date_CurrentTime_AMPM("10/28/2018",2:55 AM)
// //****************************************************************************************************************************
// get_Future_Date_CurrentTime_AMPM(String Promise_FutureDate,String Promise_FutureDate_Time,String time_period)
	// %FuncInfo[Desc="This to get the Future Date in "MM/DD/YYYY" format and current time and to set in Promise date field",Group="BranchPlusFunctions"]
	// AppObject tblPBDataWindow = BranchPlus.CustomerF2Window.dw_cust.dw_note
	// //to get current system date in "mm/dd/yyyy" format 
	// Date dt = Date.Now()
	// String current_System_Date = dt.Format("MM/dd/yyyy")
	// //to add future month to the current date
	// new_Date_Month = DateAdd("m",2,current_System_Date)	
	// //to get future date in "MM/DD/YYYY" format
	// Promise_FutureDate = Right("0" + Month(new_Date_Month), 2) + "/" + Right("0" + Day(new_Date_Month), 2) + "/" + Year(new_Date_Month)
	// //current time 
	// Cuur_Time_AMPM = Get_Time_HHMM_AMPM()
	// time_Split = Split(Cuur_Time_AMPM," ")
	// curr_time = time_Split(0)
	// time_period = time_Split(1)
	// //to concatenate both future date and current time
	// Promise_FutureDate_Time = Promise_FutureDate +" "+ curr_time
	// //Enter future date in "Promise Date" field
	// SetValue_PBDataWindow(tblPBDataWindow, "#1","promise_dt",Promise_FutureDate_Time)
	// //select 12 || 24 hrs format
	// SetValue_PBDataWindow(tblPBDataWindow,"#1","promise_am_pm",time_period)
	// //Error handling
	// if GetErrorCount()>0 
		// LogError("Failed in get_Future_Date_CurrentTime_AMPM"+"Failed"+"Failed in setting the future Date and Time")
	// 
	// //***************************************************************************************************************************
// //@methodName: Get_Time_HHMM_AMPM()
// //@Author: Meena
// //@Date: 11 July 2018
// //@Description This to get current time in 12 hrs format
// //Ex:  Get_Time_HHMM_AMPM()
// //****************************************************************************************************************************
// String Get_Time_HHMM_AMPM()
	// %FuncInfo[Desc="This to get current time in 12 hrs format.",Group="BranchPlusFunctions"]
	// //Get Current Time in Hour and Minuts
	// DateTime dt= DateTime.Now()
	// String TimeHour,TimeMinuts,Time_Period,Timeformat
	// Integer   Curr_Hour = dt.GetHour()
	// Integer Curr_Minuts = dt.GetMinute()
	// //Length of Hour and Minut is > 12 append 0 and Time Period is PM
	// if Curr_Hour > 12 
		// if ([String]Curr_Hour).Length() == 1 
			// TimeHour = TimeHour +"0"+ [String]Curr_Hour
		// else
			// TimeHour = TimeHour + [String]Curr_Hour
		// if ([String]Curr_Minuts).Length() == 1 
			// TimeMinuts = TimeMinuts +"0"+ [String]Curr_Minuts
		// else
			// TimeMinuts = TimeMinuts + [String]Curr_Minuts
		// Time_Period = "pm"
	// else
		// //Length of Hour and Minut is < 12 append 0 and Time Period is AM
		// if ([String]Curr_Hour).Length() == 1
			// TimeHour = TimeHour +"0"+ [String]Curr_Hour
		// else
			// TimeHour = [String]((Integer.Parse(TimeHour)) + Curr_Hour)
		// if ([String]Curr_Minuts).Length() == 1 
			// TimeMinuts = TimeMinuts +"0"+[String] Curr_Minuts
		// else
			// TimeMinuts = [String]((Integer.Parse(TimeMinuts)) + Curr_Minuts)
		// Time_Period = "am"
	// Timeformat = TimeHour+":"+TimeMinuts+" "+Time_Period
	// String sGet_Time_HHMM_AMPM = Timeformat
	// //Error handling
	// if GetErrorCount()>0 
		// LogError("Failed in Get_Time_HHMM_AMPM"+"Failed"+ Error_Description+"")
	// return sGet_Time_HHMM_AMPM
// //***************************************************************************************************************************
// //@methodName: validate_Activity_Date_CollectionPage(Activity_Date,Process_Date)
// //@Author: Meena
// //@Date: 11 July 2018
// //@Description This to validate the expected Activity Date and Actual Activity Date during run time
// //Ex:  validate_Activity_Date_CollectionPage("07/11/2018")
// //****************************************************************************************************************************
// validate_Activity_Date_CollectionPage1(String Activity_Date,String Process_Date)
	// %FuncInfo[Desc="This to validate the expected Activity Date and Actual Activity Date during run time",Group="BranchPlusFunctions"]
	// AppObject tbl_Validation = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list","index:=0")
	// //to get the Activity Date during run time 
	// Activity_Date_Collection = GetValue_PBDataWindow(tbl_Validation,"#1","activity_dt")	
	// //to split the date and time after getting the activity date
	// Activity_Date_Split = Split(Activity_Date_Collection," ")
	// //to get only date from the activity date after splitting
	// current_Activity_Date = Activity_Date_Split(0)
	// Activity_Date = Right("0" + Month(current_Activity_Date), 2) + "/" + Right("0" + Day(current_Activity_Date), 2) + "/" + Year(current_Activity_Date)
	// //validate the expected Activity Date and Actual Activity_Date
	// if CDate(Activity_Date) == CDate(Process_Date) 
			// validateDataAndReport(Activity_Date,Process_Date,"Validation of Expected Activity Date for{ activity_type }: { Activity_Date } and Actual Activity Date in List: { Process_Date}")
	// else
		// Print( "Validation of Activity Date"+"Activity Date is not Matching")
	// //Error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in validate_Activity_Date_CollectionPage","Failed", Error_Description,"")
// 
// validate_Activity_Date_CollectionPage(String Process_Date)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// AppObject tbl_Validation = w_bp_frame.w_dealer_setup.dw_list
	// //to get the Activity Date during run time 
	// String Activity_Date_Collection = GetValue_PBDataWindow(tbl_Validation,"#1","activity_dt")	
	// //to split the date and time after getting the activity date
	// List<String> lsActivity_Date_Split = Activity_Date_Collection.Split(" ")
	// //to get only date from the activity date after splitting
	// String current_Activity_Date = lsActivity_Date_Split[1]
	// Activity_Date = Right("0" + Month(current_Activity_Date), 2) + "/" + Right("0" + Day(current_Activity_Date), 2) + "/" + Year(current_Activity_Date)
	// //validate the expected Activity Date and Actual Activity_Date
	// if CDate(Activity_Date) == CDate(Process_Date) 
		// validateDataAndReport(Activity_Date,Process_Date,"Validation of Expected Activity Date for  activity_type: { Activity_Date } and Actual Activity Date in List: { Process_Date}")
	// else
		// Print( "Validation of Activity Date"+"Activity Date is not Matching")
	// //Error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in validate_Activity_Date_CollectionPage","Failed", Error_Description,"")
// 
// //***************************************************************************************************************************
// //@methodName: validate_Activity_Code_CollectionPage(activity_code)
// //@Author: Meena
// //@Date: 11 July 2018
// //@Description This to validate the expected Activity Date and Actual Activity Date 
// //Ex:  validate_Activity_Code_CollectionPage("Insrtuct")
// //****************************************************************************************************************************
// validate_Activity_Code_CollectionPage(String activity_code)
	// %FuncInfo[Desc="This to validate the expected Activity Date and Actual Activity Date .",Group="BranchPlusFunctions"]
	// AppObject tbl_Validation = w_bp_frame.w_dealer_setup.dw_list
	// //to validate the Activity code during run time
	// String ActivityCode = GetValue_PBDataWindow(tbl_Validation,"#1","activity_code")
	// List<String> lsNote_Code_Split = activity_code.Split(" ")
	// String Note_Activity_Code = lsNote_Code_Split[1]
	// if (Note_Activity_Code.ToLower()).Trim() == (ActivityCode.ToLower()).Trim() 
		// validateDataAndReport(activity_code,Note_Activity_Code,"Validation of Expected Activity Code for {Note_Activity_Code}: {ActivityCode } and Actual Activity Code in List:{ Note_Activity_Code}")
	// else
		// LogError( "Validation of Activity Code"+"Activity Code is not Matching")
	// //Error handling
	// if GetErrorCount()>0 
		// LogError("Failed in validate_Activity_Code_CollectionPage"+"Failed"+ Error_Description+"")
// 
// //***************************************************************************************************************************
// //@methodName: validate_Promise_Amount_CollectionPage(Amount)
// //@Author: Meena
// //@Date: 11 July 2018
// //@Description This to validate the expected Promise Amount and Actual Promise Amount 
// //Ex:  validate_Promise_Amount_CollectionPage("100")
// //****************************************************************************************************************************
// validate_Promise_Amount_CollectionPage(String Amount)
	// %FuncInfo[Desc="This to validate the expected Promise Amount and Actual Promise Amount ",Group="BranchPlusFunctions"]
	// AppObject tbl_Validation = w_bp_frame.w_dealer_setup.dw_list
	// Real Promise_Amount = Math.Round((Real.Parse(GetValue_PBDataWindow(tbl_Validation,"#1","promise_amt"))),4)
	// if Math.Round(Promise_Amount,4) ==  Math.Round(Real.Parse(Amount),4) 
		// validateDataAndReport(Math.Round(Promise_Amount,4),Math.Round(Real.Parse(Amount),4),"Validation of Expected Promise Amount for {Promise_Amount }: ${Amount} and Actual Promise Amount in List: ${ Promise_Amount}")
	// else
			// Print( "Validation of Promise Amount"+"Promise Amount is not Matching")
	// //Error handling
	// if GetErrorCount()>0 
		// LogError("Failed in validate_Promise_Amount_CollectionPage"+"Failed"+ Error_Description+"")
// 
// //***************************************************************************************************************************
// //@methodName: validate_Promise_Date_CollectionPage(Promise_FutureDate)
// //@Author: Meena
// //@Date: 12 July 2018
// //@Description This to validate the expected Promise Date and Actual Promise Date 
// //Ex:  validate_Promise_Date_CollectionPage("9/12/2018")
// //****************************************************************************************************************************
// validate_Promise_Date_CollectionPage(String Promise_FutureDate)
	// %FuncInfo[Desc="This to validate the expected Promise Date and Actual Promise Date ",Group="BranchPlusFunctions"]
	// AppObject tbl_Validation = w_bp_frame.w_dealer_setup.dw_list		
	// String Promise_Date_Result = GetValue_PBDataWindow(tbl_Validation,"#1","promise_dt")
	// List<String> lsPromise_Date_Split = Promise_Date_Result.Split(" ")
	// String Future_Date = lsPromise_Date_Split[1]
	// String Promise_Date = Right("0" + Month(Future_Date), 2) + "/" + Right("0" + Day(Future_Date), 2) + "/" + Year(Future_Date)	
	// if CDate(Promise_FutureDate) == CDate(Promise_Date) 
		// validateDataAndReport(Promise_Date,Promise_FutureDate,"Validation of Expected Promise Date for {Promise_Date}: {Promise_FutureDate} and Actual Promise Date in List:{Promise_Date}")
	// else
		// Print( "Validation of Promise Date"+"Promise Date is not Matching")
	// //Error handling
	// if GetErrorCount()>0 
		// LogError("Failed in validate_Promise_Amount_CollectionPage"+"Failed"+ Error_Description+"")
// 
// //***************************************************************************************************************************
// //@methodName: validate_Notes_Results_CollectionPage()
// //@Author: Meena
// //@Date: 13 July 2018
// //@Description This to validate the expected Notes and Actual Results Description
// //Ex:  validate_Notes_Results_CollectionPage()
// //****************************************************************************************************************************
// validate_Notes_Results_CollectionPage()
	// %FuncInfo[Desc="This to validate the expected Notes and Actual Results Description",Group="BranchPlusFunctions"]
	// AppObject tbl_Validation =  w_bp_frame.w_dealer_setup.dw_list  
	// String Promise_Note = BranchPlus.CustomerF2Window.Edit.GetAttr("regexpwndtitle")	
	// String Note = Promise_Note
	// //w_bp_frame.w_dealer_setup.dw_list  
	// String Results_Note = GetValue_PBDataWindow(tbl_Validation,"#1","results")
	// if ((Results_Note).ToLower()).Trim() == (Note.ToLower()).Trim()
		// validateDataAndReport(Results_Note,Note,"Validation of Expected Result for {Results_Note}: //{ Note }//  and Actual Result in List://{ Results_Note }//")
	// else
		// LogError("Validation of Results Description "+"Results Description is not Matching")
	// //Error handling
	// if GetErrorCount()>0 
		// LogError("Failed in validate_Promise_Amount_CollectionPage"+"Failed"+ Error_Description+"")
// 
// //*** NEED To Revisit this Function
// // handle_PbWindow(String windowName,String buttonName)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // if  Window["w_bp_frame"].Window[windowName].PushButton[buttonName].WaitWhileExists(5) 
		// // Window["w_bp_frame"].Window[windowName].PushButton[buttonName].Click()
	// // else if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("pbname:=" + windowName).PbButton("text:=" + buttonName).WaitWhileExists(5) 
		// // Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("pbname:=" + windowName).PbButton("text:=" + buttonName).Click()	
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed in Step/clickButton_InWindow","Failed", Error_Description ,"")
// 
// //*** NEED To Revisit this Function
// click_Button_InWindow_if_WindowExistDP(String windowName,String PbwindowName,String buttonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("pbname:=" + windowName).Pbwindow("pbname:=" + PbwindowName).PbButton("regexpwndtitle:=&" + buttonName).WaitWhileExists(5) 
		// Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("pbname:=" + windowName).Pbwindow("pbname:=" + PbwindowName).PbButton("regexpwndtitle:=&" + buttonName).HoverMouse ()
		// Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("pbname:=" + windowName).Pbwindow("pbname:=" + PbwindowName).PbButton("regexpwndtitle:=&" + buttonName).Click()
	// else if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("pbname:=" + windowName).Pbwindow("pbname:=" + PbwindowName).PbButton("regexpwndtitle:=" + buttonName).WaitWhileExists(5) 
		// Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("pbname:=" + windowName).Pbwindow("pbname:=" + PbwindowName).PbButton("regexpwndtitle:=" + buttonName).Click()	
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/click_Button_InWindow_DP","Failed", Error_Description ,"")
// 
// clickButton_In_Level2PBwindowTitle_WindowExistDP(String windowName,String PbwindowName,String buttonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowName).Pbwindow("regexpwndtitle:=" + PbwindowName).PbButton("text:=&" + buttonName).WaitWhileExists(5) 
		// Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowName).Pbwindow("regexpwndtitle:=" + PbwindowName).PbButton("text:=&" + buttonName).Click()
	// else if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowName).Pbwindow("regexpwndtitle:=" + PbwindowName).PbButton("text:=" + buttonName).WaitWhileExists(2) 
		// Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowName).Pbwindow("regexpwndtitle:=" + PbwindowName).PbButton("text:=" + buttonName).Click()	
	// Sleep (2)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/clickButton_In_Level2PBwindowTitle_WindowExistDP","Failed", Error_Description ,"")
// 
// //***********************************************************************************************************************************
// //@Method: getSSNNumber_CustomerTab_F2Screen()
// //@Author Ranjitha N
// //@Date 8 Oct 2018
// //@Description This function is to get the SSN Number from Customer Tab
// //Ex:  getSSNNumber_CustomerTab_F2Screen()
// //************************************************************************************************************************************
// String getSSNNumber_CustomerTab_F2Screen()
	// %FuncInfo[Desc="This function is to get the SSN Number from Customer Tab",Group="BranchPlusFunctions"]
	// Sleep(3)
	// String sGetSSNNumber_CustomerTab_F2Screen = getValueInPBDataWindow_DP("w_cust","dw_cust","#1","ssn")
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed Step/Function: getSSNNumber_CustomerTab_F2Screen"+"Failed"+ Error_Description+"Y")
	// return sGetSSNNumber_CustomerTab_F2Screen
// //**********************************************************************************************************************************
// //@methodName : selectValue_From_ChooseAnItem_Popup(valueToSelect)
// //@Author     : GG
// //@Date       : 04 OCT 2018
// //@Description: This will select option from choose an item pop up after clicking on New Button in any Tab from F2 window
// //Ex:    selectValue_From_ChooseAnItem_Popup("Payment Due Date Change")
// //**********************************************************************************************************************************
// selectValue_From_ChooseAnItem_Popup(String valueToSelect)
	// %FuncInfo[Desc="This will select option from choose an item pop up after clicking on New Button in any Tab from F2 window",Group="BranchPlusFunctions"]
	// if BranchPlus.w_chooseone.lb_list.WaitWhileExists(10) 
		// //select value from Choose an item popup
		// BranchPlus.w_chooseone.lb_list.Select (valueToSelect)
		// //click on ok button in popup
		// BranchPlus.w_chooseone.btnOk.Click()
	// //error handling
	// if GetErrorCount()>0 
		// LogError("Failed : selectValueFrom_ChooseAnItem_Popup"+"Failed"+ Error_Description+"")
// 
// //***********************************************************************************************************************************
// //@Method: chooseLoanType_CreditDecisionWindow_RefinanceCurrentCustomer(loanType)
// //@Author Thirumal Reddy
// //@Date 11 Oct 2018
// //@Description This function is to select the Loan Type in Choose Loan Type window for refinancing current customer
// //Ex:  chooseLoanType_CreditDecisionWindow_RefinanceCurrentCustomer("Automobile Loan - Interest Bearing")
// //************************************************************************************************************************************
// chooseLoanType_CreditDecisionWindow_RefinanceCurrentCustomer(String loanType)
	// %FuncInfo[Desc="This function is to select the Loan Type in Choose Loan Type window for refinancing current customer",Group="BranchPlusFunctions"]
	// //Choosing the Type of Loan	
	// // BranchPlus.CreditDecision.tbldwStep.IsPresent()
	// //Set crdDecision = BranchPlus.CreditDecision.PbDataWindow("pbname:=dw_step")
	// if BranchPlus.CreditDecision.tbldwStep.IsPresent()
		// AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
		// SetValue_PBDataWindow(crdDecision,"#1","acct_type",loanType)	
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed in chooseLoanType_CreditDecisionWindow_RefinanceCurrentCustomer"+"Failed"+ Error_Description +"")
// 
// //***********************************************************************************************************************************
// //@Method: clickOnButton_CreditDecisionWindow_RefinanceCurrentCustomer()
// //@Author Thirumal Reddy
// //@Date 11 Oct 2018
// //@Description This function is to click on next button in credit decision window for refinancing current customer
// //Ex:  clickOnButton_CreditDecisionWindow_RefinanceCurrentCustomer()
// //************************************************************************************************************************************
// clickOnButton_CreditDecisionWindow_RefinanceCurrentCustomer()
	// %FuncInfo[Desc="This function is to click on next button in credit decision window for refinancing current customer",Group="BranchPlusFunctions"]
	// //click on next
	// BranchPlus.CreditDecision.PbButton("text:=& >").Click()
	// Sleep (3)
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed to clickOnButton_CreditDecisionWindow_RefinanceCurrentCustomer"+"Failed"+ Error_Description +"")
// 
// //***************************************************************************************************************************
// //@Method: selectDealerInfo_CreditDecisionWindow_RefinanceCurrentCustomer()
// //@Author: Thirumal Reddy
// //@Date 11 Oct 2018
// //@Description: This function is to select Dealer in credit decision window for current customer refinance
// //Ex:  selectDealerInfo_CreditDecisionWindow_RefinanceCurrentCustomer()
// //***************************************************************************************************************************
// selectDealerInfo_CreditDecisionWindow_RefinanceCurrentCustomer()
	// %FuncInfo[Desc="This function is to select Dealer in credit decision window for current customer refinance",Group="BranchPlusFunctions"]
	// //select dealer
	// Real SetValue_PBDataWindow
	// String getdata
	// BranchPlus.CreditDecision.tbldwStep.IsPresent()
	// AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	// for(Integer i = 1; i<=30; i++) 
		// SetValue_PBDataWindow(crdDecision,"#1","dealer_id","#"+[String]i)	
		// getdata = BranchPlus.CreditDecision.tbldwStep.GetCellData("#1","#4")   
		// if getdata =="Finance  Dept" 
		// //Exit for
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed to selectDealerInfo_CreditDecisionWindow_RefinanceCurrentCustomer"+"Failed"+ Error_Description +"")
// 
// //***************************************************************************************************************************
// //@Method: select_Representative_CreditDecisionWindow_RefinanceCurrentCustomer()
// //@Author: Thirumal Reddy
// //@Date 11 Oct 2018
// //@Description: This function is to select Representative in credit decision window for current customer refinance
// //Ex:  select_Representative_CreditDecisionWindow_RefinanceCurrentCustomer()
// //***************************************************************************************************************************
// select_Representative_CreditDecisionWindow_RefinanceCurrentCustomer()
	// %FuncInfo[Desc="This function is to select Representative in credit decision window for current customer refinance",Group="BranchPlusFunctions"]
	// AppObject PbTable = BranchPlus.CreditDecision.tbldwStep
	// TypeText_PBDataWindow(PbTable,"#1","dealer_rep_id","Finance  Dept")
	// if GetErrorCount()>0 
		// LogError("Failed in step/select_Representative_CreditDecisionWindow"+"Failed"+ Error_Description+"")
// 
// //***************************************************************************************************************************
// //@Method: enterCollateralDetails_CreditDecisionWindow_RefinanceCurrentCustomer(vin, descr, make, model, style, mfyear, color, mileage, cylinder, other, tradeDesc)
// //@Author: Thirumal Reddy
// //@Date 11 Oct 2018
// //@Description: This function is to enter Collateral details in credit decision window for current customer refinance
// //Ex:  enterCollateralDetails_CreditDecisionWindow_RefinanceCurrentCustomer("vin", descr, make, model, style, mfyear, color, mileage, cylinder, other, tradeDesc)
// //***************************************************************************************************************************
// enterCollateralDetails_CreditDecisionWindow_RefinanceCurrentCustomer(String vin,String descr,String make,String model,String style,String mfyear,String color,String mileage,String cylinder,String other,String tradeDesc)
	// %FuncInfo[Desc="This function is to enter Collateral details in credit decision window for current customer refinance",Group="BranchPlusFunctions"]
	// //Enter details in Collateral section
	// Sleep(2)
	// AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	// SetValue_PBDataWindow(crdDecision,"#1","new_yn","Yes")
	// SetValue_PBDataWindow(crdDecision,"#1","vin",vin)
	// TypeText_PBDataWindow(crdDecision,"#1","descr",descr)
	// SetValue_PBDataWindow(crdDecision,"#1","make",make)
	// SetValue_PBDataWindow(crdDecision,"#1","model",model)
	// SetValue_PBDataWindow(crdDecision,"#1","style",style)
	// SetValue_PBDataWindow(crdDecision,"#1","year",mfyear)
	// SetValue_PBDataWindow(crdDecision,"#1","color",color)
	// SetValue_PBDataWindow(crdDecision,"#1","mileage",mileage)
	// SetValue_PBDataWindow(crdDecision,"#1","cylinder",cylinder)
	// SetValue_PBDataWindow(crdDecision,"#1","other",other)
	// SetValue_PBDataWindow(crdDecision,"#1","trade_in_descr",tradeDesc)
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed to enterCollateralDetails_CreditDecisionWindow"+"Failed"+ Error_Description +"")
// 
// //***************************************************************************************************************************
// //@Method: enterFinanceDetails_CreditDecisionWindow_RefinanceCurrentCustomer(dealerReserve, loanAmt, loanTerm, intRate)
// //@Author: Thirumal Reddy
// //@Date 11 Oct 2018
// //@Description: This function is to enter finance details in credit decision window for current customer refinance
// //Ex:  enterFinanceDetails_CreditDecisionWindow_RefinanceCurrentCustomer("100", "12000", "60", "0.16")
// //***************************************************************************************************************************
// enterFinanceDetails_CreditDecisionWindow_RefinanceCurrentCustomer(String dealerReserve,String loanAmt,String loanTerm,String intRate)
	// %FuncInfo[Desc="This function is to enter finance details in credit decision window for current customer refinance",Group="BranchPlusFunctions"]
	// //Enter value in Finance detail section
	// Sleep (3)
	// AppObject crdDecision = BranchPlus.CreditDecision.tbldwStep
	// if System.GetEnvVar("currentState") == "NC" 
		// SetValue_PBDataWindow(crdDecision,"#1","dealer_hldbck_amt",dealerReserve)
	// SetValue_PBDataWindow(crdDecision,"#1","purch_amt",loanAmt)
	// //Log
	// writeReportLog("Requested Loan Amount: $" + loanAmt,"Passed",FailComments,"YES")
	// // SetValue_PBDataWindow(crdDecision,"#1","payment_","")		
	// SetValue_PBDataWindow(crdDecision,"#1","nbr_of_months",loanTerm)	
	// UA.GenKeyEvents("<Tab>")
	// SetValue_PBDataWindow(crdDecision,"#1","int_rate",intRate)
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed to enterFinanceDetails_CreditDecisionWindow"+"Failed"+ Error_Description +"")
// 
// //***********************************************************************************************************************************
// //@Method: clickOnFinishButton_CreditDecisionWindow_RefinanceCurrentCustomer()
// //@Author Thirumal Reddy
// //@Date 11 Oct 2018
// //@Description This function is to click on finish button in credit decision window refinance current customer
// //Ex:  clickOnFinishButton_CreditDecisionWindow_RefinanceCurrentCustomer()
// //************************************************************************************************************************************
// clickOnFinishButton_CreditDecisionWindow_RefinanceCurrentCustomer()
	// %FuncInfo[Desc="This function is to click on finish button in credit decision window refinance current customer",Group="BranchPlusFunctions"]
	// BranchPlus.CreditDecision.Finish.Click()
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed in clickOnFinishButton_CreditDecisionWindow_RefinanceCurrentCustomer"+"Failed"+ Error_Description +"")
// 
// //******************************************GENERIC FUNCTION***************************************************
// //@methodName: SetValueInPBDataWindow_DP(windowName, dataWindowName, rowNumber, colID)
// //@Author Thirumal Reddy
// //@Date 06 Sep 2018
// //@Description This is for enter data in the Cell with given window name, DataWindowName, RowNumber, ColID  
// //Ex  SetValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"paid_amt")
// //*********************************************************************************************
// SetValueInPBDataWindow_DP(String windowName,String dataWindowName,String rowNumber,String colID,String value)
	// %FuncInfo[Desc="This is for enter data in the Cell with given window name, DataWindowName, RowNumber, ColID  ",Group="BranchPlusFunctions"]
	// if w_bp_frame.Pbwindow("pbname:=" + windowName).PbDataWindow("pbname:=" + dataWindowName).WaitWhileExists(20) 		
		// Sleep (4)
		// w_bp_frame.Pbwindow("pbname:=" + windowName).PbDataWindow("pbname:=" + dataWindowName).SetValue(CellData rowNumber,colID,value			
	// else
		// writeReportLog("Failed in function SetValueInPBDataWindow_DP as UFT could not find the PbWindow Name > " + windowName +  " and PbDataWindow Name > " + dataWindowName,"Failed","","")
	// if GetErrorCount()>0  			
			// writeReportLog("Failed in step/SetValueInPBDataWindow_DP","Failed", Error_Description ,"Y")
// 
// //*********************************************************************************************
// //@methodName: handleforeignCollectionPayment(branchid,City,reason)
// //@Author Ranjitha N
// //@Date 20 Sep 2018
// //@Description This is enter foreign collection details in payment tab
// //Ex  handleforeignCollectionPayment("1342","GA","Test")
// //*********************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// //	 
// //	if w_bp_frame.PbWindow("regexpwndtitle:=Process Payment").PbWindow("regexpwndtitle:=What branch sent this foreign Collection?").WaitWhileExists(5) 
// //		Set tblwindow= BranchPlus.w_payment.w_search.PbDataWindow("pbname:=dw_search")
// //		 SetValue_PBDataWindow(tblwindow,"#1","branch_id",branchid)
// //		 SetValue_PBDataWindow(tblwindow,"#1","city",City)
// //		 SetValue_PBDataWindow(tblwindow,"#1","reason",reason)
// //		//Click on OK button
// //		BranchPlus.w_payment.w_search.PbButton("text:=Ok").Click()
// //	
// //	
// //	//Error Handling
// //	if GetErrorCount()>0 
// //		 writeReportLog("Failed in step/handleforeignCollectionPayment","Failed", Error_Description,"Y")
// //	
// //
// handleforeignCollectionPayment(String branchid,String City,String reason)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// String windowTitle
	// if w_bp_frame.CreditDecisionSearchWindow.dw_search.WaitWhileExists(5) 
		// AppObject tblwindow= w_bp_frame.CreditDecisionSearchWindow.dw_search
		// String windowTitle =w_bp_frame.CreditDecisionSearchWindow.dw_search.GetAttr("regexpwndtitle")
		// if windowTitle.Trim() == "What branch sent this foreign Collection?" 
			// SetValue_PBDataWindow(tblwindow,"#1","branch_id",branchid)
			// SetValue_PBDataWindow(tblwindow,"#1","city",City)
			// SetValue_PBDataWindow(tblwindow,"#1","reason",reason)
			// //Click on OK button
			// click_Button_InWindow_DP("w_payment","w_search","Ok")
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in step/handleforeignCollectionPayment"+"Failed"+ Error_Description+"Y")
// 
// //*******************************************************************************************
// //@Method closeWindowByTitle(windowtitle)
// //@Author Sumithra
// //@Date 08 Sep 2018
// //@Description This is to close window which will be identified by Window Title
// //Ex:  closeWindowByTitle("Calculator")
// //*********************************************************************************************
// closeWindowByTitle(String windowtitle)
	// %FuncInfo[Desc="This is to close window which will be identified by Window Title",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("regexpwndtitle:=" + windowTitle).WaitWhileExists(10) 
		// w_bp_frame.PbWindow("regexpwndtitle:=" + windowTitle).Close()
	// else if PbWindow("regexpwndtitle:=" + windowTitle).WaitWhileExists(5) 
		// PbWindow("regexpwndtitle:=" + windowTitle).Close()
	// else
		// writeReportLog(windowTitle + "Window does not exist","Failed",Error.Description,"")
	// //error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/closeWindowByTitle","Failed", Error_Description ,"")
// 
// //****************************************************************************************************
// //@methodName: typeText_In_PBDatWindow_DP(windowName, dataWindowName, rowNumber, colID, valueToSet)
// //@Description: This function will type the value in the PBData Window
// //@Author: GG
// //@Date 20-03-2019
// //Ex:  typeText_In_PBDatWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_begin","G")
// //*****************************************************************************************************
// typeText_In_PBDatWindow_DP(String windowName,String dataWindowName,String rowNumber,String colID,String valueToSet)
	// %FuncInfo[Desc="This function will type the value in the PBData Window",Group="BranchPlusFunctions"]
	// selectCell_In_PBDatWindow_DP(windowName,dataWindowName,rowNumber, colID)
	// UA.GenKeyEvents("<HOME>") 
	// if w_bp_frame.Pbwindow("pbname:=" + windowName).PbDataWindow("pbname:=" + dataWindowName).WaitWhileExists(10) 
		// w_bp_frame.Pbwindow("pbname:=" + windowName).PbDataWindow("pbname:=" + dataWindowName)TypeKeys(valueToSet)
		// if GetErrorCount()>0  			
			// writeReportLog("typeText_In_PBDatWindow_DP: Looks like colID > " + colID + " is not Available","Failed", Error_Description ,"")
	// else
		// writeReportLog("typeText_In_PBDatWindow_DP","Failed","DataWindow >> " + dataWindowName + " Does not Exit inside the window " + windowName,"")
	// //Error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/Function: typeText_In_PBDatWindow_DP","Failed", Error_Description ,"")
// 
// //********************************************************************************************************************************************
// //@methodName: getDetails_EmployeeSetup_Window(fieldName)
// //@Description: This function is to get the Details based on Field ID under Employee Setup Window
// //@Author: GG
// //@Date 19-03-2019
// //Ex:  getDetails_EmployeeSetup_Window("First Name")
// //*********************************************************************************************************************************************
// getDetails_EmployeeSetup_Window(String fieldName)
	// %FuncInfo[Desc="This function is to get the Details based on Field ID under Employee Setup Window",Group="BranchPlusFunctions"]
	// //Fetching ColID based on Field Name
	// String fieldID = getfieldID_EmployeeSetup_Window(fieldName)
	// //Fetching the value from Employee Setup window based on field name
	// String sGetDetails_EmployeeSetup_Window = getValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1",fieldID)
	// //Error handling
	// if GetErrorCount()>0 
			// writeReportLog("Failed in getDetails_EmployeeSetup_Window","Failed", Error_Description,"")
// 
// //******************************************************************************************************************************
// //@methodName: openEmployeeFromPbTree(empPath)
// //@Description: This function will expand the Employee From PB Tree in Employee Setup Window based on the Employee Path
// //@Author: Karthik Shekar
// //@Date 26-03-2019
// //Ex: // openEmployeeFromPbTree("Assistant Manager;Hollie Stephens")
// //******************************************************************************************************************************
// openEmployeeFromPbTree(String empPath)
	// %FuncInfo[Desc="This function will expand the Employee From PB Tree in Employee Setup Window based on the Employee Path",Group="BranchPlusFunctions"]
	// w_bp_frame.PbWindow("pbname:=w_empl_setup").PbTreeView("pbname:=tv_empl")
		// //To select the Employee from the PB Tree
		// .Select empPath
		// //To activate the Employee based on the Employee Path given
		// .SetActive() empPath
	// //Handling Error
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to openEmployeeFromPbTree","Failed", Error_Description ,"")
// 
// //***********************************************************************************************************
// //@methodName: toClearFields_EmployeeSetupWindow()
// //@Description: This function is to clear the fields in Employee Setup Window
// //@Author: GG
// //@Date 28-03-2019
// //Ex:  toClearFields_EmployeeSetupWindow()
// //***********************************************************************************************************
// toClearFields_EmployeeSetupWindow()
	// %FuncInfo[Desc="This function is to clear the fields in Employee Setup Window",Group="BranchPlusFunctions"]
	// //	//To clear the Delinquency Begin Range Field of Potentials in Employee Setup Window
	// //	 SetValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_begin_pot","")
	// //	//To clear the Delinquency Range Field of Potentials Employee Setup Window
	// //	 SetValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_end_pot","")
	// //	//To clear the Delinquency Begin Range Field of 30//s Employee Setup Window
	// //	 SetValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_begin_30","")
	// //	//To clear the Delinquency Range Field of 30//s Employee Setup Window
	// //	 SetValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_end_30","")
	// //	//To clear the Delinquency Begin Range Field of 60//s/60//s plus Employee Setup Window
	// //	 SetValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_begin_60","")
	// //	//To clear the Delinquency Range Field of 60//s/60//s plus Employee Setup Window
	// //	 SetValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_end_60","")
	// //To clear the Potential Checkbox in Employee Setup Window
	// SetValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1","del_track_potential","OFF")
	// //To clear the 30//s Checkbox in Employee Setup Window
	// SetValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1","del_track_30","OFF")
	// //To clear the 60//s/60//s plus Checkbox in Employee Setup Window
	// SetValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1","del_track_60","OFF")
	// //Click on Save Button
	// clickOnSaveButon()
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed to toClearFields_EmployeeSetupWindow","Failed", Error_Description,"")
// 
// //****************************************************************************************************
// //@methodName: getChildNodes(nodeName)
// //@Description: This function will get the child Nodes in Employee Setup Window
// //@Author: Karthik Shekar
// //@Date 26-03-2019
// //Ex: // getChildNodes("Manager")
// //****************************************************************************************************
// getChildNodes(String nodeName)
	// %FuncInfo[Desc="This function will get the child Nodes in Employee Setup Window",Group="BranchPlusFunctions"]
	// w_bp_frame.PbWindow("pbname:=w_empl_setup").PbTreeView("pbname:=tv_empl").Expand(nodeName)
		// //Getting entire content of PbTree
		// getContent = .GetContent()
		// //Spliting for each node value
		// eachChildNodeArray = Split(getContent,Chr(10))
		// //Identifying the required child nodes		
		// for itr = 0 To UBound(eachChildNodeArray) Step 1
			// if  IndexOf(eachChildNodeArray(itr), (nodeName + ";")) > 0 
				// requiredChildNodeDetails = requiredChildNodeDetails + eachChildNodeArray(itr) +"|"
		// //Returning Value
		// if Len(requiredChildNodeDetails) > 1 
			// getChildNodes = Left(requiredChildNodeDetails,Len(requiredChildNodeDetails)-1)
	// //Handling Error
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to getChildNodes","Failed", Error_Description ,"")
// 
// //**********************************************************************************************************************************************************************************
// //@methodName: set_DelinquencyRanges_EmployeeSetupWindow(beginValue,endValue,fieldName)
// //@Description: This function is to set the Details(Delinquency Begin Range, Range and Delinquency Days - for all the Delinquency) based on Field Name in Employee Setup Window
// //@Author: GG
// //@Date 20-03-2019
// //Ex:  set_DelinquencyRanges_EmployeeSetupWindow("3","2","Del 30")
// //**********************************************************************************************************************************************************************************
// set_DelinquencyRanges_EmployeeSetupWindow(String beginValue,String endValue,String fieldName)
	// %FuncInfo[Desc="This function is to set the Details(Delinquency Begin Range, Range and Delinquency Days - for all the Delinquency) based on Field Name in Employee Setup Window",Group="BranchPlusFunctions"]
	// //Fetching ColID based on Field Name
	// String fieldID = getfieldID_EmployeeSetup_Window(fieldName)
	// if fieldName == "Potential Checkbox" 
		// //To set the Delinquency Begin Value
		// SetValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_begin_pot","")
		// //To set the Delinquency Value
		// SetValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_end_pot","")
		// //To set the Delinquency Begin Value
		// typeText_In_PBDatWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_begin_pot",beginValue)
		// //To set the Delinquency Value
		// typeText_In_PBDatWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_end_pot",endValue)
	// else if fieldName == "Del 30 Checkbox" 
		// SetValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_begin_30","")
		// //To set the Delinquency Value
		// SetValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_end_30","")
		// //To set the Delinquency Begin Value
		// typeText_In_PBDatWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_begin_30",beginValue)
		// //To set the Delinquency Value
		// typeText_In_PBDatWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_end_30",endValue)
	// else
		// SetValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_begin_60","")
		// //To set the Delinquency Value
		// SetValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_end_60","")
		// //To set the Delinquency Begin Value
		// typeText_In_PBDatWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_begin_60",beginValue)
		// //To set the Delinquency Value
		// typeText_In_PBDatWindow_DP("w_empl_setup","dw_empl","#1","delinquency_range_end_60",endValue)
	// //To select the Deliquency Value checkbox based on Field ID
	// SetValueInPBDataWindow_DP("w_empl_setup","dw_empl","#1",fieldID,"ON")
	// //Click on Save Button
	// clickOnSaveButon()
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed to set_DelinquencyRanges_EmployeeSetupWindow"+"Failed"+ Error_Description+"")
// 
// //********************************************************************************************************************************************
// //@methodName: getfieldID_EmployeeSetup_Window(fieldName)
// //@Description: This function is to get FieldName based on Field ID in Employee Setup Window
// //@Author: GG
// //@Date 19-03-2019
// //Ex:  getfieldID_EmployeeSetup_Window("Last Name")
// //*********************************************************************************************************************************************
// String getfieldID_EmployeeSetup_Window(String fieldName)
	// %FuncInfo[Desc="This function is to get FieldName based on Field ID in Employee Setup Window",Group="BranchPlusFunctions"]
	// //Fetching the value based on the Col ID in Employee Setup Window
	// String EmployeeID
	// if fieldName == "Middle Name" 
		// EmployeeID = "mi"
	// else if fieldName == "Last Name" 
		// EmployeeID = "last_name"
	// else if fieldName == "First Name" 
		// EmployeeID = "first_name"
	// else if fieldName == "SSN" 
		// EmployeeID = "ssn"	
	// else if fieldName == "Employee Type" 
		// EmployeeID = "empl_type"
	// else if fieldName ==  "User ID" 
		// EmployeeID = "userid" 		
	// else if fieldName == "Password" 
		// EmployeeID = "password"
	// else if fieldName == "Repeat Password" 
		// EmployeeID = "cc_password"
	// else if fieldName ==  "Security Level" 
		// EmployeeID = "security_level"		
	// else if fieldName == "Hire Date" 
		// EmployeeID = "hire_dt"
	// else if fieldName == "Potential Begin Range" 
		// EmployeeID = "delinquency_range_begin_pot"
	// else if fieldName ==  "Potential Range" 
		// EmployeeID = "delinquency_range_end_pot"
	// else if fieldName == "Del 30 Begin Range" 
		// EmployeeID = "delinquency_range_begin_30"
	// else if fieldName ==  "Del 30 Range" 
		// EmployeeID = "delinquency_range_end_30"
	// else if fieldName == "Del 60 Begin Range" 
		// EmployeeID = "delinquency_range_begin_60"
	// else if fieldName ==  "Del 60 Range" 
		// EmployeeID = "delinquency_range_end_60"
	// else if fieldName == "Primary Lang" 
		// EmployeeID = "primary_lang"
	// else if fieldName == "Status" 
		// EmployeeID = "empl_status"
	// else if fieldName == "Description" 
		// EmployeeID = "descr"
	// else if fieldName == "Del 30 Checkbox" 
		// EmployeeID = "del_track_30"
	// else if fieldName == "Del 60 Checkbox" 
		// EmployeeID = "del_track_60"
	// else if fieldName == "Potential Checkbox" 
		// EmployeeID = "del_track_potential"
	// else
		// LogError("fieldName >> " + fieldName + " is Not available in Employee Setup Window"+"Failed"+""+"")
	// String sGetfieldID_EmployeeSetup_Window = EmployeeID
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed in Step/getfieldID_EmployeeSetup_Window"+"Failed"+ Error_Description +"")
	// return sGetfieldID_EmployeeSetup_Window
// //*******************************************************************************************
// //@Method clickButtonInPBWindow(windowTitle,buttonName)
// //@Author Sumithra
// //@Date 05 Sep 2018
// //@Description This will click on the buttonName inside the Window Specified which will be identified by WIndow Title
// //Ex:  clickButtonInPBWindow("Branch Setup","Cancel")
// //*********************************************************************************************
// // clickButtonInPBWindow(String windowTitle,String buttonName)
	// // %FuncInfo[Desc="This will click on the buttonName inside the Window Specified which will be identified by WIndow Title",Group="BranchPlusFunctions"]
	// // if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowTitle).PbButton("regexpwndtitle:=&" + buttonName).WaitWhileExists(5) 
		// // Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowTitle).PbButton("regexpwndtitle:=&" + buttonName).Click()
	// // else if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowTitle).PbButton("regexpwndtitle:=" + buttonName).WaitWhileExists(5) 
		// // Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowTitle).PbButton("regexpwndtitle:=" + buttonName).Click()
	// // else
		// // writeReportLog("Failed to Click on Button : " + buttonName + " in window: " + windowTitle,"Failed",FailComments,"Button not found")
	// // Sleep (3)
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed in Step/: clickButtonInPBWindow","Failed", Error_Description ,"")
// 
// //*******************************************************************************************
// //@Method clickButton_Level1PBwindow_DP(windowTitle,buttonName)
// //@Author Chandra
// //@Date 2 May 2018
// //@Description This will click on the buttonName inside the Window Specified which will be identified by WIndow Title
// //Ex:  clickButton_Level1PBwindow_DP("Branch Setup","Cancel")
// //*********************************************************************************************
// // clickButton_Level1PBwindow_DP(String windowTitle,String buttonName)
	// // %FuncInfo[Desc="This will click on the buttonName inside the Window Specified which will be identified by WIndow Title",Group="BranchPlusFunctions"]
	// // Flage = False
	// // if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowTitle).PbButton("regexpwndtitle:=&" + buttonName).WaitWhileExists(10) 
		// // Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowTitle).PbButton("regexpwndtitle:=&" + buttonName).Click()
		// // Flage = True
	// // else if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("text:=" + windowTitle).PbButton("regexpwndtitle:=" + buttonName).WaitWhileExists(2) 
		// // Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("text:=" + windowTitle).PbButton("regexpwndtitle:=" + buttonName).Click()
		// // Flage = True
	// // else if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowTitle).PbButton("regexpwndtitle:=" + buttonName).WaitWhileExists(2) 
		// // Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowTitle).PbButton("regexpwndtitle:=" + buttonName).Click()
		// // Flage = True
	// // clickButton_Level1PBwindow_DP = Flage
	// // //Sleep (1)
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed in Step/: clickButton_Level1PBwindow_DP","Failed", Error_Description ,"")
// 
// //*******************************************************************************************
// //@Method clickMLAVerificationButton
// //@Author Chandra
// //@Date 18 MAr 2019
// //@Description This will click on the MLA button based on OS Name 
// //Ex:  clickMLAVerificationButton
// //*********************************************************************************************
// // clickMLAVerificationButton()
	// // %FuncInfo[Desc="This will click on the MLA button based on OS Name ",Group="BranchPlusFunctions"]
	// // osVersion = System.GetEnvVar("OS")
	// // osVersion = Replace(osVersion,"Workstation","")
	// // if Trim(osVersion) = "Windows 10" 
		// // BranchPlus.InsightObject("btn_VerifyMLAStatus_CreditDecision_Win10").Click()
	// // else
		// // BranchPlus.InsightObject("btn_VerifyMLAStatus_CreditDecision").Click()
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to clickMLAVerificationButton","Failed", Error_Description ,"")
// // 
// //**********************************************************************************************
// //@methodName: selectCell_In_PBDatWindow_DP(windowName, dataWindowName, rowNumber, colID)
// //@Description: This function will select the Cell in the PBData Window
// //@Author: Karthik Shekar
// //Ex:  selectCell_In_PBDatWindow_DP(windowName, dataWindowName, rowNumber, colID)
// //***********************************************************************************************
// selectCell_In_PBDatWindow_DP(String windowName,String dataWindowName,String rowNumber,String colID)
	// %FuncInfo[Desc="This function will select the Cell in the PBData Window",Group="BranchPlusFunctions"]
	// if w_bp_frame.Pbwindow("pbname:=" + windowName).PbDataWindow("pbname:=" + dataWindowName).WaitWhileExists(10) 
		// Sleep (2)
		// w_bp_frame.Pbwindow("pbname:=" + windowName).PbDataWindow("pbname:=" + dataWindowName).SelectCell(rowNumber,colID)
		// if GetErrorCount()>0  			
			// writeReportLog("selectCell_In_PBDatWindow_DP: Looks like colID > " + colID + " is not Available","Failed", Error_Description ,"")
	// else
		// writeReportLog("selectCell_In_PBDatWindow_DP","Failed","DataWindow >> " + dataWindowName + " Does not Exit inside the window " + windowName,"")
	// //Error handling 
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to selectCell_In_PBDatWindow_DP","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: selectChargeTypeFrom_PayCollectionChargePopup_PaymentTab(valueToSelect)
// //@Author: Thirumal Reddy
// //@Date 10 Oct 2018
// //@Description: This function is to select option from //pay collection charge using// pop up in paymentwindow
// //Ex:  selectChargeTypeFrom_PayCollectionChargePopup_PaymentTab("CASH DRAWER")
// //***************************************************************************************************************************
// selectChargeTypeFrom_PayCollectionChargePopup_PaymentTab(String valueToSelect)
	// %FuncInfo[Desc="This function is to select option from //pay collection charge using// pop up in paymentwindow",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("pbname:=w_checkbook_pmt").PbWindow("pbname:=w_chooseone").PbList("pbname:=lb_list").WaitWhileExists(10) 
		// //select value from Choose an item popup
		// w_bp_frame.PbWindow("pbname:=w_checkbook_pmt").PbWindow("pbname:=w_chooseone").PbList("pbname:=lb_list").Select valueToSelect
		// //click on ok button in popup
		// w_bp_frame.PbWindow("pbname:=w_checkbook_pmt").PbWindow("pbname:=w_chooseone").PbButton("regexpwndtitle:=&Ok").Click()
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : selectChargeTypeFrom_PayCollectionChargePopup_PaymentTab ","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: setValue_CheckbookPayment_window(colName,valueToSet)
// //@Author Thirumal Reddy
// //@Date 8 Oct 2018
// //@Description This function is to set the value in check book payment window based on column name
// //Ex:  setValue_CheckbookPayment_window("Payment To","John")
// //************************************************************************************************************************************
// setValue_CheckbookPayment_window(String colName,String valueToSet)
	// %FuncInfo[Desc="This function is to set the value in check book payment window based on column name",Group="BranchPlusFunctions"]
	// //Get ColId 
	// String colID = getColumnID_for_CheckbookPayment_Fields(colName)
	// //Enter value in checkbook window
		// SetValueInPBDataWindow_DP("w_checkbook_pmt","dw_list","#1",colID,valueToSet)
	// //  writeReportLog("Field Value"&valueToSet&" is set in Checkbook Payment Window for Field >> "&colName,"Passed",FailComments,"YES")
	// //Error handling
	// if GetErrorCount()>0 
			// LogError("Failed in setValue_CheckbookPayment_window"+"Failed"+ Error_Description+"")
// 
// //***********************************************************************************************************************************
// //@Method: getColumnID_for_CheckbookPayment_Fields(colName)
// //@Author Thirumal Reddy
// //@Date 8 Oct 2018
// //@Description This function is get the column ID in Check Book Payment window
// //Ex:  getColumnID_for_CheckbookPayment_Fields("Payment To")
// //Ex2:  getColumnID_for_CheckbookPayment_Fields("Address1")
// //************************************************************************************************************************************
// String getColumnID_for_CheckbookPayment_Fields(String colName)
	// %FuncInfo[Desc="This function is get the column ID in Check Book Payment window",Group="BranchPlusFunctions"]
	// String getColumnID_for_CheckbookPayment_Fields
	// if colName == "PAYMENT TO" 
		// getColumnID_for_CheckbookPayment_Fields = "to_name"
	// else if colName == "ADDRESS1" 
		// getColumnID_for_CheckbookPayment_Fields = "addr1"
	// else if colName == "ADDRESS2" 
		// getColumnID_for_CheckbookPayment_Fields = "addr2"
	// else if colName == "ADDRESS3" 
		// getColumnID_for_CheckbookPayment_Fields = "addr3"
	// else if colName == "ZIP CODE" 
		// getColumnID_for_CheckbookPayment_Fields = "zipcode"
	// else if colName == "AMOUNT" 
		// getColumnID_for_CheckbookPayment_Fields = "amt"
	// else if colName == "REASON" 
		// getColumnID_for_CheckbookPayment_Fields = "reason"
	// else if colName == "CHARGE TO" 
		// getColumnID_for_CheckbookPayment_Fields = "charge_to_coa"	
	// else if colName == "BANK" 
		// getColumnID_for_CheckbookPayment_Fields = "bank_id"
	// else
		// LogError("Wrong Value Passed to argument colName. Please check the getColumnID_for_CheckbookPayment_Fields"+"Failed"+""+"")
	// //Error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getColumnID_for_CheckbookPayment_Fields","Failed", Error_Description,"")
	// return getColumnID_for_CheckbookPayment_Fields
// //***********************************************************************************************************************************
// //@Method: clickButton_In_Level2Window_forProcessWindow(windowNameL1,WindowNameL2,buttonName)
// //@Author Thirumal Reddy
// //@Date 9 Oct 2018
// //@Description This function is to click on button with 2 level windows for process window
// //Ex:  clickButton_In_Level2Window_forProcessWindow("Loan Modification Utility","Enter reason for loan modification","Ok")
// //************************************************************************************************************************************
// clickButton_In_Level2Window_forProcessWindow(String windowNameL1,String WindowNameL2,String buttonName)
	// %FuncInfo[Desc="This function is to click on button with 2 level windows for process window",Group="BranchPlusFunctions"]
	// if  w_bp_frame.Pbwindow("title:=" &windowNameL1).PbWindow("title:="&WindowNameL2,"pbname:=w_message").PbButton("regexpwndtitle:=&" + buttonName).WaitWhileExists(5) 
		// w_bp_frame.Pbwindow("title:=" &windowNameL1).PbWindow("title:="&WindowNameL2,"pbname:=w_message").PbButton("regexpwndtitle:=&" + buttonName).Click()
	// else if  w_bp_frame.Pbwindow("title:=" &windowNameL1).PbWindow("title:="&WindowNameL2,"pbname:=w_message").PbButton("regexpwndtitle:=" + buttonName).WaitWhileExists(5) 
		// w_bp_frame.Pbwindow("title:=" &windowNameL1).PbWindow("title:="&WindowNameL2,"pbname:=w_message").PbButton("regexpwndtitle:=" + buttonName).Click()
	// else
		// writeReportLog("Failed to Click on Button : " + buttonName + " in window: " + windowNameL1,"Failed",FailComments,"Button not found")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/clickButton_In_Level2Window_forProcessWindow","Failed", Error_Description ,"")
// 
// //*******************************************************************************************
// //@Method clickMLAVerificationButton_CoApplicant
// //@Author Chandra
// //@Date 18 MAr 2019
// //@Description This will click on the MLA button based on OS Name in Co applicant Window
// //Ex:  clickMLAVerificationButton_CoApplicant
// //*********************************************************************************************
// // clickMLAVerificationButton_CoApplicant()
	// // %FuncInfo[Desc="This will click on the MLA button based on OS Name in Co applicant Window",Group="BranchPlusFunctions"]
	// // osVersion = System.GetEnvVar("OS")
	// // osVersion = Replace(osVersion,"Workstation","")
	// // if Trim(osVersion) = "Windows 10" 
		// // BranchPlus.InsightObject("btn_VerifyMLAStatus_CreditDecision_CoApplication_Win10").Click()
	// // else
		// // BranchPlus.InsightObject("btn_VerifyMLAStatus_CreditDecision_CoApplication").Click()
	// // //Error Handling
	// // if GetErrorCount()>0  			
		// // writeReportLog("Failed to clickMLAVerificationButton_CoApplicant","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: handle_MultiplePaymentsPopups_BasedOn_PaymentType(paymentType, Payment_Reason, branchid, City)
// //@Author: Chandra
// //@Date 05 Mar 2018
// //@Description: This function will handle popups based on payment type in Payment Tab
// //Ex:  handle_MultiplePaymentsPopups_BasedOn_PaymentType("Principal Only", "test")
// //*********************************************************************************************
// handle_MultiplePaymentsPopups_BasedOn_PaymentType(String paymentType,String Payment_Reason)
	// %FuncInfo[Desc="This function will handle popups based on payment type in Payment Tab",Group="BranchPlusFunctions"]
	// //*************** Click on Yes Button if Account is assigned to Repo **********
	// clickButton_In_Level2PBwindowTitle_WindowExistDP("Process Payment","Account Marked for Reposession","Yes")	
	// //*************** Click on Yes Button if confirm payment popup exist **********
	// clickButton_In_Level2PBwindowTitle_WindowExistDP("Process Payment","Please Confirm Payment","Yes")	
	// //Handle Mutiple Payments Pop Up Window
	// handleMultiplePaymentsWindow("Yes")
	// //Get Branch ID from DB
	// String branchID = get_BranchID_FromDB()
	// //Get Branch City Name from DB
	// String City = get_BranchPlus_CityName_FromDB()
	// //Handle foreign Collection
	// handleforeignCollectionPayment(branchID,City,Payment_Reason)
	// if paymentType == "Principal Only" 
		// //Handle CashDrawer Window
		// handleMultiple_cashdrawerWindow()
		// if BranchPlus.w_payment.w_search.WaitWhileExists(5)   
			// BranchPlus.w_payment.w_search.Edit.TypeKeys (Payment_Reason)
		// BranchPlus.w_payment.w_search.btnOk.Click()	
	// else if paymentType == "Payoff" 
		// //Handle IRF Pop Up Window
		// if BranchPlus.w_payment.w_message.WaitWhileExists(10)            
			// BranchPlus.w_payment.w_search.btnOk.Click() 	
		// //Handle CashDrawer Window
		// handleMultiple_cashdrawerWindow()
	// else if paymentType == "Deferment" 
		// //Deferment Reson Window Enter an Reason
		// TypeText_DefermentReasonWindow(Payment_Reason)
		// //Handle Coupon Printer Window
		// handleMultiplePaymentsWindow("Yes")
		// //Handle CashDrawer Window
		// handleMultiple_cashdrawerWindow()
	// else if paymentType == "Regular Payment" 
		// //Handle CashDrawer Window
		// handleMultiple_cashdrawerWindow()
		// //for some states Enter the reason
		// TypeText_DefermentReasonWindow(Payment_Reason)
	// if GetErrorCount()>0 
		// LogError("Failed in step/handle_MultiplePaymentsPopups_BasedOn_PaymentType"+"Failed"+ Error_Description+"Y")
// 
// //*********************************************************************************************
// //@methodName: processPayments_And_PrintReceipt(paymentType,paymentMethod,CheckNumber, amtReceived, amtPaid, printReceipt,mailingReceipt)
// //@Author: Chandra
// //@Date 22 Feb 2019
// //@Modified date 05 Apr 2019  --> Updated Print Receipt validation
// //@Description: This function will do the Payments(Cash,Cash by mail,Check,Check by Mail,Cashier//s CHeck,MoneyOrder)
// //Ex:  processPayments_And_PrintReceipt("Regular Payment","check","65432","10","10","third_party_receipt","cms_pint_receipt")
// //*********************************************************************************************
// processPayments_And_PrintReceipt(String paymentType,String paymentMethod,String CheckNumber,String amtReceived,String amtPaid,String printReceipt,String mailingReceipt)
	// %FuncInfo[Desc="This function will do the Payments(Cash,Cash by mail,Check,Check by Mail,Cashier//s CHeck,MoneyOrder)",Group="BranchPlusFunctions"]
	// AppObject pbWindowPayment = BranchPlus.w_payment.dw_payment
	// pbWindowPayment.Wa(20)
	// //Selecting the Payment Type
	// SetValue_PBDataWindow(pbWindowPayment,"#1","pmt_class",paymentType)
	// //Selecting the Payment Method
	// SetValue_PBDataWindow(pbWindowPayment,"#1","pmt_type",paymentMethod)
	// //Handling Check Number Data based on PaymentType
	// if paymentMethod == "Ins Claim IUI" 
		// if BranchPlus.w_payment.w_message.WaitWhileExists (10)           
			// BranchPlus.w_acct_loan_disclosure.w_message.btnOk.Click()
	// //Handling Check Number Data based on PaymentType
	// if paymentMethod == "Cash" || paymentMethod == "Cash by Mail" || paymentMethod == "Allotment" || paymentMethod == "Dealer Discount" || paymentMethod == "Bankruptcy" || paymentMethod == "Garnish" || paymentMethod == "HO CPI Claim Check" || paymentMethod == "HO GAP Claim Check" || paymentMethod == "HO Warranty Claim Check" || paymentMethod == "Home Office" || paymentMethod == "Mobile Payment" 
		// //Ignoring The Check Number if Payment Type is Cash and Cash by Mail
	// else
		// SetValue_PBDataWindow(pbWindowPayment,"#1","check_nbr",CheckNumber)	
	// if paymentType == "Deferment" || paymentType == "Payoff" 
	// //for Deferment and Payoff No need to enter Amount
			// System.GetEnvVar("AmtReceived") = CCur(GetValue_PBDataWindow(pbWindowPayment,"#1","amt_recvd"))
	// else
		// SetValue_PBDataWindow(pbWindowPayment,"#1","amt_recvd",amtReceived)
		// SetValue_PBDataWindow(pbWindowPayment,"#1","amt_applied",amtPaid)
	// //Validation of Customer print receipt validation
	// String printReceipt_Customer = GetValue_PBDataWindow(pbWindowPayment,"#1","print_receipt")
	// validateDataAndReport((printReceipt_Customer).ToUpper(),"OFF","Validation | Default value of //Customer Print Receipt//" )
		// //Validation of Thrid Party print receipt validation
	// String printReceipt_thirdParty = GetValue_PBDataWindow(pbWindowPayment,"#1","third_party_receipt")
	// validateDataAndReport((printReceipt_thirdParty).ToUpper(),"OFF","Validation | Default value of //Third Party Print Receipt//" )
		// //Validation of HO maling print receipt validation
	// String printReceipt_HOmailing = GetValue_PBDataWindow(pbWindowPayment,"#1","cms_print_option")
		// validateDataAndReport((printReceipt_HOmailing).ToUpper(),"OFF","Validation | Default value of //HO Mailing Print Receipt//" )
	// if printReceipt == "" 
		// //Set Print(Customer/3rd party) Receipt
		// set_PrintReceipt_FromPaymentTab(printReceipt)
	// if mailingReceipt == "" 
		// //Set Home Mailing Receipt
		// set_PrintReceipt_FromPaymentTab(mailingReceipt)
	// //Click Ok button in Process Payment Window
	// clickButton_InWindow("w_payment","OK")
	// if GetErrorCount()>0 
			// LogError("Failed in step/processPayments_And_PrintReceipt"+"Failed"+ Error_Description+"Y")
// 
// //*************************************************************************************************************************************************
// //@Method: valdiateDataInCollectionTab(fieldNameFieldValuePair)
// //@Author Karthik
// //@Date 11 Oct 2018
// //@Description This function is to validate the Accounting and marketing info with Yes and No value under Desciption in Collection Tab
// //Example Data:
// //fieldNameFieldValuePair = "Activity Date;" + CurrentDate + "||Activity Code;PRINTLTR||Results;System printed PAYMENT RECEIPT||Assign;" + userID
// //Ex: valdiateDataInCollectionTab(fieldNameFieldValuePair)
// //*************************************************************************************************************************************************
// valdiateDataInCollectionTab(String fieldNameFieldValuePair)
	// %FuncInfo[Desc="This function is to validate the Accounting and marketing info with Yes and No value under Desciption in Collection Tab",Group="BranchPlusFunctions"]
	// AppObject tblPBresultWindow = w_bp_frame.w_dealer_setup.dw_list
	// //Get Row Count in Collection Tab records table
	// Integer rowCnt = tblPBresultWindow.GetText().Count()
	// List<String> lsIndFieldNameValue = fieldNameFieldValuePair.Split("||")
	// //Iterating for all the Rows
	// //Flag Variable
	// Boolean found = false
	// Boolean allFieldValueFound 
	// for (Integer itr = 1; itr<=rowCnt-1; itr++)
		// allFieldValueFound = true
		// for colItr = 0 To UBound(indFieldNameValue) Step 1
			// fieldName = Split(indFieldNameValue(colItr),";")(0)
			// fieldValue = Split(indFieldNameValue(colItr),";")(1)
			// //Getting Column ID from Collection Tab
			// colID = getTable_ColID_From_CollectionTab(fieldName)
			// //Select Cell
			// SelectCell_PBDataWindow(tblPBresultWindow,"#" + itr+1,colID)
			// //Get Cell Data
			// actFieldValue = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list","index:=0").GetCellData("#" + itr+1,colID)
			// //Special handling for Date
			// if fieldName == "Activity Date" 
				// actFieldValue = Right("0" + Month(actFieldValue), 2) + "/" + Right("0" + Day(actFieldValue), 2) + "/" + Year(actFieldValue)
				// //Existing if any of the Field name Value is Not Matching in a Row
				// if Cdate(actFieldValue) > Cdate(fieldValue) 
					// allFieldValueFound = false
			// else if fieldName == "Results" 
				// //Verify Activity Type button in collection Tab
				// verify_ActivityType_Button_Exist_InCollectionTab(actFieldValue)
				// //Get the Notes Text
				// Notes_Text = BranchPlus.CustomerF2Window.WinEditor("regexpwndclass:=Edit").GetAttr("Text")
				// //Existing if any of the Field name Value is Not Matching in a Row
				// if Trim(actFieldValue) > Trim(fieldValue) 
					// allFieldValueFound = false
					// Exit for
				// validateDataAndReport(Trim(actFieldValue), Trim(Notes_Text), "Validation of Actvity Results")	
			// else
				// //Existing if any of the Field name Value is Not Matching in a Row
				// if Trim(actFieldValue) <> Trim(fieldValue) 
					// allFieldValueFound = false
					// Exit for
		// //Identifng if validation is Successful for all the Fields
		// if allFieldValueFound 			
			// found = true
			// writeReportLog("Data " + fieldNameFieldValuePair + " found in the Collection Table at Row Number " + (itr+1),"Passed","","")
			// //msgbox "PASS at Itr " + itr
	// //Identifying if validation is Failed
	// if found == false 
		// writeReportLog("Data Combination " + fieldNameFieldValuePair + " Could not be found in the Collection Table","Failed","","")
		// //msgbox "FAILED Could not find the Value"
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in valdiateDataInCollectionTab","Failed", Error_Description ,"")
// 
// //*************************************************************************************************************************************************
// //@Method: getTable_ColID_From_CollectionTab(colName)
// //@Author GG
// //@Date 11 Oct 2018
// //@Description This function is to get the Coulmn Name ID from Collection Tab
// //Ex:  getTable_ColID_From_CollectionTab("Activity Date")
// //*************************************************************************************************************************************************
// getTable_ColID_From_CollectionTab(String colName)
	// %FuncInfo[Desc="This function is to get the Coulmn Name ID from Collection Tab.",Group="BranchPlusFunctions"]
	// String getTable_ColID_From_CollectionTab
	// if colName == "Activity Date" 
		// getTable_ColID_From_CollectionTab = "activity_dt"
	// else if colName == "Activity Code" 
		// getTable_ColID_From_CollectionTab = "activity_code"
	// else if colName == "Results" 
		// getTable_ColID_From_CollectionTab = "results"
	// else if colName == "Promise date" 
		// getTable_ColID_From_CollectionTab = "promise_dt"
	// else if colName == "Amt" 
		// getTable_ColID_From_CollectionTab = "promise_amt"
	// else if colName == "Assign" 
		// getTable_ColID_From_CollectionTab = "assign_userid"
	// else if colName == "Last Chg" 
		// getTable_ColID_From_CollectionTab = "compute_1"
	// else if colName == "Entry by" 
		// getTable_ColID_From_CollectionTab = "compute_2"
	// else
		// LogError("Column Name " + colName + " is not found in Collection Table"+"Failed"+"Please Pass the Proper Column name to function getTable_ColID_From_CollectionTab"+"")	
	// //Error Handling
	// if GetErrorCount()>0 
		// LogError("Failed in getTable_ColID_From_CollectionTab"+"Failed"+ Error_Description +"")
// 
// //*********************************************************************************************
// //@methodName: get_RecordsTbl_RowCount_FromCollectionTab()(activityType)
// //@Author Chandra
// //@Date 07 Mar 2019
// //@Description This is get th Records rowcount in Collection Tab
// //Retruing the RowCount
// //Ex  get_RecordsTbl_RowCount_FromCollectionTab()
// //*********************************************************************************************
// Integer get_RecordsTbl_RowCount_FromCollectionTab()
	// %FuncInfo[Desc="This is get th Records rowcount in Collection Tab",Group="BranchPlusFunctions"]
	// AppObject tblPBresultWindow = w_bp_frame.w_dealer_setup.dw_list
	// //Get Row Count in Collection Tab records table
	// Integer rowCnt = tblPBresultWindow.GetText().Count()
	// Integer iGet_RecordsTbl_RowCount_FromCollectionTab = rowCnt
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in get_RecordsTbl_RowCount_FromCollectionTab","Failed", Error_Description ,"")
	// return iGet_RecordsTbl_RowCount_FromCollectionTab
// //***********************************************************************************************************************************
// //@Method: getValue_AccountTab(row_number,FieldName)
// //@Author Ranjitha N
// //@Date 9 Oct 2018
// //@Description This function is get the value from Account Tab based on field ID
// //Ex:  getValue_AccountTab("1","ACCOUNT TYPE")
// //************************************************************************************************************************************
// getValue_AccountTab(String row_number,String FieldName)
	// %FuncInfo[Desc="This function is get the value from Account Tab based on field ID",Group="BranchPlusFunctions"]
	// //Getting Field ID + fetching Value from Field
	// String  fieldID = getFieldID_AccountTab(FieldName)
	// String getValue_AccountTab = getValueInPBDataWindow_DP("w_cust","dw_acct","#"+row_number,fieldID)
	// //Error handling
	// if GetErrorCount()>0 
			// LogError("Failed in getValue_AccountTab"+"Failed"+ Error_Description+"")
// 
// //***********************************************************************************************************************************
// //@Method: getFieldID_AccountTab(fieldName)
// //@Author Ranjitha N
// //@Date 9 Oct 2018
// //@Description This function is get the field ID from Account Tab
// //Ex:  getFieldID_AccountTab("LOAN AMOUNT")
// //************************************************************************************************************************************
// String getFieldID_AccountTab(String fieldName)
	// %FuncInfo[Desc="This function is get the field ID from Account Tab",Group="BranchPlusFunctions"]
	// String getFieldID_AccountTab
	// if (fieldName).ToUpper() == "LOAN NBR" 
		// getFieldID_AccountTab = "cf_loan_nbr"
	// else if (fieldName).ToUpper() == "ACCOUNT TYPE" 
		// getFieldID_AccountTab = "acct_type"
	// else if (fieldName).ToUpper() == "ACCOUNT STATUS" 
		// getFieldID_AccountTab = "acct_status"
	// else if (fieldName).ToUpper() == "INT TYPE" 
		// getFieldID_AccountTab = "int_type"
	// else if (fieldName).ToUpper() == "INT RATE" 
		// getFieldID_AccountTab = "cf_int_rate"
	// else if (fieldName).ToUpper() == "ACCOUNT CLASS" 
		// getFieldID_AccountTab = "acct_class"
	// else if (fieldName).ToUpper() == "LOAN MODIFICATION" 
		// getFieldID_AccountTab = "compute_9"
	// else if (fieldName).ToUpper() == "ACCOUNT ID" 
		// getFieldID_AccountTab = "acct_id" 
	// else if (fieldName).ToUpper() == "DEALER NAME" 
		// getFieldID_AccountTab = "dealer_id"
	// else if (fieldName).ToUpper() == "CONTRACT DATE" 
		// getFieldID_AccountTab = "funding_dt"
	// else if (fieldName).ToUpper() == ("First Payment").ToUpper()
		// getFieldID_AccountTab = "first_pmt_due_dt"
	// else if (fieldName).ToUpper() == ("Maturity Date") .ToUpper()
		// getFieldID_AccountTab = "maturity_dt"
	// else if (fieldName).ToUpper() == ("Interest Rate") .ToUpper()
		// getFieldID_AccountTab = "compute_4"
	// else if (fieldName).ToUpper() == ("Total Interest").ToUpper()  // Which is Equal to Finance Charge
		// getFieldID_AccountTab = "orig_int_amt"
	// else if (fieldName).ToUpper() == ("Amt Finance").ToUpper()  // Amount Financed
		// getFieldID_AccountTab = "amt_fincd"
	// else if (fieldName).ToUpper() == ("Total Note").ToUpper()  // Total of Payments
		// getFieldID_AccountTab = "compute_5"
	// else if (fieldName).ToUpper() == ("Term").ToUpper() || (fieldName).ToUpper() == ("Months").ToUpper() || (fieldName).ToUpper() == ("Term (Months)").ToUpper()  // No. Of payments
		// getFieldID_AccountTab = "nbr_of_months"
	// else if (fieldName).ToUpper() == ("Payment Amt").ToUpper()  // EMI
		// getFieldID_AccountTab = "pmt_amt"
	// else if (fieldName).ToUpper() == ("Cash to Customer").ToUpper()  // Cash to Customer
		// getFieldID_AccountTab = "purch_amt"	
	// else if (fieldName).ToUpper() == ("Cust Rate").ToUpper()  // Interest rate
		// getFieldID_AccountTab = "cust_rate"	
	// else if (fieldName).ToUpper() == ("Total other Charges").ToUpper()  // Total Charges
		// getFieldID_AccountTab = "cmpnt_amt"	
	// else if (fieldName).ToUpper() == ("Payoff Amt").ToUpper()  // Pay off Amt
		// getFieldID_AccountTab = "related_payoff"	
	// else if (fieldName).ToUpper() == ("Dealer Reserve Amt")   
		// getFieldID_AccountTab = "dealer_hldbck_amt"	
	// else if (fieldName).ToUpper() == ("Dealer Discount Amt").ToUpper() || (fieldName).ToUpper() == ("Dealer Discount").ToUpper() 
		// getFieldID_AccountTab = "discount_amt"
	// else if (fieldName).ToUpper() == ("First Payment Date").ToUpper()  
		// getFieldID_AccountTab = "first_pmt_due_dt"
	// else if (fieldName).ToUpper() == ("Dealer Check").ToUpper()  
		// getFieldID_AccountTab = "dealer_check"
	// else if (fieldName).ToUpper() == ("Rep Check").ToUpper()  
		// getFieldID_AccountTab = "rep_check"
	// else if (fieldName).ToUpper() == ("Processed").ToUpper()  
		// getFieldID_AccountTab = "cf_procd"
	// else if (fieldName).ToUpper() == ("Reference ID").ToUpper()
		// getFieldID_AccountTab = "acct_id"	
	// else if (fieldName).ToUpper() == ("Credit Score").ToUpper() 
		// getFieldId_AccountTab = "credit_score"
	// else if (fieldName).ToUpper() == ("Loan Mod Notification").ToUpper() 
		// getFieldId_AccountTab = "compute_9"
	// else
		// writeReportLog("Wrong value Passed to argument colName. Please check the getFieldID_AccountTab","Failed","","")
	// //Error handling
	// if GetErrorCount()>0  			
		// LogError("Failed in Step/: getFieldID_AccountTab"+"Failed"+ Error_Description +"")
	// return getFieldID_AccountTab
// 
// //**********************************************************************************************
// //@methodName: set_PrintReceipt_FromPaymentTab(printReceipt)
// //@Description: This is to set Print check box in Payment window Payment Tab
// //@Author: Chandra
// //@Date 26 FEB 2018
// //Ex:  set_PrintReceipt_FromPaymentTab("customer_print")
// //*********************************************************************************************** 
// set_PrintReceipt_FromPaymentTab(String printReceipt)
	// %FuncInfo[Desc="This is to set Print check box in Payment window Payment Tab",Group="BranchPlusFunctions"]
	// AppObject pbWindowPayment = BranchPlus.w_payment.dw_payment
	// pbWindowPayment.WaitUntilExists(3)
	// //Get Print receipt value
		// printReceipt_Value = GetValue_PBDataWindow(pbWindowPayment,"#1",printReceipt)
	// //	if printReceipt_Value = "ON" 
	// //		//ignoring if print receipt checkbox is already checked
	// //	else
			// SetValue_PBDataWindow(pbWindowPayment,"#1",printReceipt,"ON")
	// //	
	// //Error handling
	// if GetErrorCount()>0 
		// LogError("Failed in set_PrintReceipt_FromPaymentTab"+"Failed"+ Error_Description+"")
// 
// //*********************************************************************************************
// //@methodName: verify_ActivityType_Button_Exist_InCollectionTab(activityType)
// //@Author Chandra
// //@Date 07 Mar 2019
// //@Description This is validate Activity Type is exist in Collection Tab
// //Ex  verify_ActivityType_Button_Exist_InCollectionTab("INSTRUCT")
// //*********************************************************************************************
// verify_ActivityType_Button_Exist_InCollectionTab(String activityType)
	// %FuncInfo[Desc="This is validate Activity Type is exist in Collection Tab",Group="BranchPlusFunctions"]
	// if (activityType).ToUpper() =="INSTRUCT" 
	// else if (activityType).ToUpper() == "PPO" 
	// else if (activityType).ToUpper() == "CEASECHG" 
		// if CMS_Validation.CMS_Audit_ActivityType.WaitWhileExists(10) 
			// Print("Cease Change audit Type : //"+ activityType +"// displayed in Collection Tab"+"Passed"+ ""+"Y")
		// else
			// LogError("Cease Change audit is not displayed in In CollectionTab"+"Failed"+ Error_Description +"")
	// else if (activityType).ToUpper() == "CNTRMAIL" || (activityType).ToUpper() == "PRINTLTR" 
		// if CMS_Validation.CMS_Audit_ActivityType.WaitWhileExists(10) 
			// Print("CMS payment audit Typ : //"+ activityType +"// displayed in Collection Tab"+"Passed"+ ""+"Y")
		// else
			// LogError("CMS payment audit is not displayed in In CollectionTab"+"Failed"+ Error_Description +"")
	// else if (activityType).ToUpper() == "PAYMENT" || (activityType).ToUpper() == "Payment" 
		// if BranchPlus.Notes_Button.WaitWhileExists(10) 
			// Print("Activity Type Notes Button is selected and displayed in Collection Tab"+"Passed"+ ""+"Y")
		// else
			// LogError("Activity Type Notes Button is not selected in In CollectionTab"+"Failed"+ Error_Description +"")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in verify_ActivityType_Button_Exist_InCollectionTab","Failed", Error_Description ,"")
// 
// //
// // 
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// //	 
// //	
// //	Window("Branch PLUS").WinMenu("Menu").Select menuOption
// //	
// //	//Error Handling
// //	if GetErrorCount()>0  			
// //		 writeReportLog("Failed in Step/selectMenu","Failed", Error_Description ,"")
// //		
// //
// //
// //
// //*****************************************************************************************************************
// //@methodName: selectMenu(menuOption)	
// //@Author Sumithra
// //@Date 07 Feb 2019
// //@Description This is to select menu option from menu
// //Ex:  selectMenu("File;Save As...")	
// //*****************************************************************************************************************
// selectMenu(String menuOption)
	// %FuncInfo[Desc="This is to select menu option from menu",Group="BranchPlusFunctions"]
	// Window("Branch PLUS").WinMenu("Menu").Select menuOption
	// Sleep (2)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/selectMenu","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: isPrintOptionWindowPresent()
// //@Author Karthik
// //@Date 9 May 2019
// //@Description This function will retrun the status of Print Option Window
// // (Basiy you can see this window/dialog when you print the CMS Enabled form)
// //@Return:(Boolean) True if Print Option window appears else it returns false
// //msgbox isPrintOptionWindowPresent()
// //*********************************************************************************************
// Boolean isPrintOptionWindowPresent()
	// %FuncInfo[Desc="This function will retrun the status of Print Option Window",Group="BranchPlusFunctions"]
	// //	//******************
	// //   //Windows Variation
	// //   //*******************
	// //   if System.GetEnvVar("OS") = "Windows 10" 
	// //   	orNameToAppend = "_Windows10"
	// //   else
	// //   	 orNameToAppend = ""
	// //   
	// //if w_bp_frame.PbWindow("pbname:=w_centralized_mailing").GetAttr(("Visible",True,10000) 
	// Boolean bisPrintOptionWindowPresent
	// if (w_bp_frame.w_centralized_mailing.WaitWhileExists(10) )
		// bisPrintOptionWindowPresent = true
	// else
		// bisPrintOptionWindowPresent = false
	// return bisPrintOptionWindowPresent
// //*********************************************************************************************
// //@methodName: isMailIconPresent()
// //@Author Karthik
// //@Date 9 May 2019
// //@Description This function will retrun the status of Mail Icon 
// //@Return:(Boolean) True if Mail icon is present in the page else it returns false
// //EX: isMailIconPresent()
// //*********************************************************************************************
// isMailIconPresent()
	// %FuncInfo[Desc="This function will retrun the status of Mail Icon ",Group="BranchPlusFunctions"]
	// if PbWindow("CMS_Validation").InsightObject("Mail_Icon_formsWindow").WaitWhileExists(10) 
	// //if PbWindow("CMS_Validation").InsightObject("Mail_Icon_formsWindow").GetAttr(("Visible",True,10000) 
		// isMailIconPresent = true
	// else
		// isMailIconPresent = false
	// //Error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in isMailIconPresent","Failed", Error_Description,"")
// 
// //*********************************************************************************************
// //@methodName: clickCancelButton_PaymentProcessDialog
// //@Author Karthik
// //@Date 9 May 2019
// //@Description This function will click on the Cancle Button which is available in the Payment Process Dialog
// //@Return: nothing
// //EX: clickCancelButton_PaymentProcessDialog()
// //*********************************************************************************************
// clickCancelButton_PaymentProcessDialog()
	// %FuncInfo[Desc="This function will click on the Cancle Button which is available in the Payment Process Dialog",Group="BranchPlusFunctions"]
	// //Click Ok button in Process Payment Window
	// clickButton_InWindow("w_payment","Cancel")
	// //Error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in clickCancelButton_PaymentProcessDialog","Failed", Error_Description,"")
// 
// //*********************************************************************************************
// //@methodName: is_HoMailingCheckBox_Available_PaymentProcessWindow
// //@Author Karthik
// //@Date 9 May 2019
// //@Description This function will return the status of HO Mailing Check Box In the Payment Process Window.
// //@Return: (Boolean) True if HO Check box is available else it will return false
// //EX: msgbox is_HoMailingCheckBox_Available_PaymentProcessWindow()
// //*********************************************************************************************
// is_HoMailingCheckBox_Available_PaymentProcessWindow()
	// %FuncInfo[Desc="This function will return the status of HO Mailing Check Box In the Payment Process Window.",Group="BranchPlusFunctions"]
	// //******************
	// //Windows Variation
	// //*******************
	// osVersion = System.GetEnvVar("OS")
	// osVersion = Replace(osVersion,"Workstation","")
	// if (osVersion.Trim() == "Windows 10") 
		// orNameToAppend = "_Windows10"
	// else
		// orNameToAppend = ""
	// if PbWindow("CMS_Validation").InsightObject("HOMailing_CheckBox_PaymentProcessDialog" + orNameToAppend).WaitWhileExists(10) 
	// //if PbWindow("CMS_Validation").InsightObject("HOMailing_CheckBox_PaymentProcessDialog" + orNameToAppend).GetAttr(("Visible",True,10000) 
	// is_HoMailingCheckBox_Available_PaymentProcessWindow = true
	// else
	// is_HoMailingCheckBox_Available_PaymentProcessWindow = false   		
		// //Error handling
		// if GetErrorCount()>0 
			// writeReportLog("Failed in is_HoMailingCheckBox_Available_PaymentProcessWindow","Failed", Error_Description,"")
// 
// //*********************************************************************************************
// //@methodName: clickButtonInPrintOptionWindow
// //@Author Karthik
// //@Date 8 May 2019
// //@Description This will click on the Button Name specified in the "Print Option" Popup/dialog 
// // (Basiy you can see this pop up when you click on PRINT for the CMS Enabled forms)
// //Ex: clickButtonInPrintOptionWindow("Cancel")
// //*********************************************************************************************
// clickButtonInPrintOptionWindow(String buttonName)
	// %FuncInfo[Desc="This will click on the Button Name specified in the "Print Option" Popup/dialog ",Group="BranchPlusFunctions"]
// //Click on Button
	// clickButton_InWindow("w_centralized_mailing",buttonName)
	// //Error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in clickButtonInPrintOptionWindow","Failed", Error_Description,"")
// 
// //*****************************************************************************************************************
// //@methodName: select_PrintOption_FromPrintOptionPopup(rowNumber,cellValue)
// //@Author Chandra
// //@Date 12 Mar 2019
// //@Description This is to select Print option from Print Option popup
// //Ex:  select_PrintOption_FromPrintOptionPopup("1","ON")
// //*****************************************************************************************************************
// select_PrintOption_FromPrintOptionPopup(String rowNumber,String cellValue)
	// %FuncInfo[Desc="This is to select Print option from Print Option popup",Group="BranchPlusFunctions"]
	// AppObject tblPBDataWindow = w_bp_frame.w_centralized_mailing.dw_print_select
	// SetValue_PBDataWindow(tblPBDataWindow,"#"+rowNumber,"print_option",cellValue)
	// //Logger
	// LogError("Home Office mailing to customer Print Option selected"+"Passed"+ "" +"Y")
	// //Error Handling
	// if GetErrorCount()>0  			
		// LogError("Failed in Step/select_PrintOption_FromPrintOptionPopup"+"Failed"+ Error_Description +"")
// 
// //*****************************************************************************************************************
// //@methodName: clickPrintButton_PrintOptionWindow()
// //@Author Chandra
// //@Date 12 Mar 2019
// //@Description This is to Click on Print Button from Print Option window
// //Ex:  clickPrintButton_PrintOptionWindow()
// //*****************************************************************************************************************
// clickPrintButton_PrintOptionWindow()
	// %FuncInfo[Desc="This is to Click on Print Button from Print Option window",Group="BranchPlusFunctions"]
	// clickButton_InWindow("w_print_options","Print")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/clickPrintButton_PrintOptionWindow","Failed", Error_Description ,"")
// 
// //*************************************************************************************************************************************************
// //@methodName: clickButton_Print()
// //@Author Chandra
// //@Date 11 Mar 2018
// //@Description This will click on Print Button
// //Ex // clickButton_Print()
// //*************************************************************************************************************************************************
// clickButton_Print()
	// %FuncInfo[Desc="This will click on Print Button",Group="BranchPlusFunctions"]
	// BranchPlus.btnPrint.Click()
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/clickButton_Print","Failed", Error_Description,"Y")
// 
// //*************************************************************************************************************************************************
// //@methodName: validate_StaticText_In_DialogPopup(windowName, dialogName, staticText, buttonToClick)
// //@Author Chandra
// //@Date 15 May 2018
// //@Description This will validate the Dialog popup, Static test in popup and click on button 
// //Ex:  validate_StaticText_In_DialogPopup("Print Option", "Selection Error", "You must select at least one option to hit the OK button.", "OK")
// //*************************************************************************************************************************************************
// validate_StaticText_In_DialogPopup(String windowName,String dialogName,String staticText,String buttonToClick)
	// %FuncInfo[Desc="This will validate the Dialog popup, Static test in popup and click on button ",Group="BranchPlusFunctions"]
	// Sleep (5)
	// if w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("regexpwndtitle:="& dialogName).Static("regexpwndtitle:=" + staticText).WaitWhileExists(10) 
		// //get static text
		// StaticMesssage = w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("regexpwndtitle:="& dialogName).Static("regexpwndtitle:="& staticText).GetAttr("Text")
		// writeReportLog("As expected, Static Text displayed in popup: //"  + StaticMesssage + "// is available in Dialog: //" + dialogName + "//","Passed","","Y")
		// Sleep(3)
		// //Clicking on Button
		// if w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).WaitWhileExists(3) 
			// w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).Click()
		// else if w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).WaitWhileExists(3) 
			// w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).Click()	     				
		// else
			// writeReportLog("Clicking on Button " + buttonToClick + "Failed in Dialog: " + dialogName,"Failed","","Y")	
	// else
		// writeReportLog("Dialog Popup //" + dialogName + "// and static text: "& staticText &"does not exist","Failed","","Y")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to validate_StaticText_In_DialogPopup","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: getValueFromCustomerTab
// //@Author Karthik
// //@Date 14 May 2019
// //@Description This will get the Field Value for the Field Name specified from Customer tab of F2 Screen
// //Ex  getValueFromCustomerTab("First Name")
// //*********************************************************************************************
// getValueFromCustomerTab(String fieldName)
	// %FuncInfo[Desc="This will get the Field Value for the Field Name specified from Customer tab of F2 Screen",Group="BranchPlusFunctions"]
	// fieldID = getFieldIDBasedOnFieldName_CustomerTab(fieldName)
	// //Getting the Customer Details
	// getValueFromCustomerTab = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_cust").GetCellData("#1",fieldID)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getValueFromCustomerTab","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: getFieldIDBasedOnFieldName_CustomerTab
// //@Author Karthik
// //@Date 14 May 2019
// //@Description This return the column/field ID for the Field Name specified for Customer tab of F2 Screen
// //Ex  getFieldIDBasedOnFieldName_CustomerTab("First Name")
// //*********************************************************************************************
// // getFieldIDBasedOnFieldName_CustomerTab(String fldName)
	// // %FuncInfo[Desc="This return the column/field ID for the Field Name specified for Customer tab of F2 Screen",Group="BranchPlusFunctions"]
	// // //Variable
	// // idToReturn = null
	// // //Fetching ID//s based on Name
	// // if fldName = "First Name" 
		// // idToReturn = "first_name"
	// // else if fldName = "Last Name" 
		// // idToReturn = "last_name"
	// // else if fldName = "Mid Name" 
		// // idToReturn = "middle_name"
	// // else if fldName = "Credit Score" 
		// // idToReturn = "credit_score"
	// // else if fldName = "Affiliation" 
		// // idToReturn = "affil_type"
	// // else if fldName = "Name Suffix" 	
		// // idToReturn = "suffix"
	// // else if fldName = "Opted Out" 	
		// // idToReturn = "opted_out"
	// // else if fldName = "Allow Solicitation" 	
		// // idToReturn = "allow_solicit_yn"
	// // else if fldName = "Welcome " 	
		// // idToReturn = "welcome__yn"
	// // else if fldName = "Email" 
		// // idToReturn = "email"
	// // else if fldName = "Cust ID" 
		// // idToReturn = "compute_3"
	// // else
		// // writeReportLog("Please pass the Proper parameter value to method getFieldIDBasedOnFieldName_CustomerTab","Failed","","")
	// // getFieldIDBasedOnFieldName_CustomerTab = idToReturn
// 
// //*********************************************************************************************
// //@methodName: getValueFromAddressTab
// //@Author Karthik
// //@Date 14 May 2019
// //@Description This will get the Field Value for the Field Name along with Section Name specified from Address tab of F2 Screen
// //Ex  getValueFromAddressTab("HomeAddress","Address1")
// //Ex  getValueFromAddressTab("MailingAddress","Address1")
// //Ex  getValueFromAddressTab("PreviousAddress","Address1") --> In previous address it will always fetch the value from 1st Row
// //*********************************************************************************************
// getValueFromAddressTab(String sectionName,String fieldName)
	// %FuncInfo[Desc="This will get the Field Value for the Field Name along with Section Name specified from Address tab of F2 Screen",Group="BranchPlusFunctions"]
	// LogSuccessMessage("getValueFromAddressTab","sectionName:" + sectionName + "Field Name:" + fieldName)
	// fieldID = getFieldIDBasedOnFieldName_AddressTab(fieldName)
	// //Getting the Customer Details
	// if (sectionName).ToLower() == "HOMEADDRESS" 
		// fieldValue = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_loc").GetCellData("#1",fieldID)
	// else if (sectionName).ToUpper() == "MAILINGADDRESS" 
		// fieldValue = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_mail").GetCellData("#1",fieldID)
	// else if (sectionName).ToUpper() == "PREVIOUSADDRESS" 
	// //Need to Update this Code currently it will fetch only 1st Row Data
	// fieldValue = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_prev").GetCellData("#1",fieldID)
	// else
		// writeReportLog("SectionName passed to fucntion getValueFromAddressTab is no proper. Please check","Failed","","")
	// //Returning the Value
	// getValueFromAddressTab = fieldValue
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getValueFromAddressTab","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: SetValueInAddressTab
// //@Author Chandra
// //@Date 02 Aug 2019
// //@Description This will Set the Field Value for the Field Name along with Section Name specified from Address tab of F2 Screen
// //Ex  SetValueInAddressTab("Set","HomeAddress",1,"Address1","309 ASHWOOD LN")
// //Ex  SetValueInAddressTab("Set","MailingAddress",1,"Address1","309 ASHWOOD LN")
// //Ex  SetValueInAddressTab("Set","PreviousAddress",1,"Address1","309 ASHWOOD LN") 
// //*********************************************************************************************
// SetValueInAddressTab(String dataSetType,String sectionName,String rowNumber,String fieldName,String cellValue)
	// %FuncInfo[Desc="This will Set the Field Value for the Field Name along with Section Name specified from Address tab of F2 Screen",Group="BranchPlusFunctions"]
	// String fieldID = getFieldIDBasedOnFieldName_AddressTab(fieldName)
	// if dataSetType == "Set" 
		// //Setting the Customer Details
		// if (sectionName).ToUpper() == "HOMEADDRESS" 
			// BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_loc").SetValue(CellData"#" + rowNumber,fieldID,cellValue
		// else if (sectionName).ToUpper() == "MAILINGADDRESS" 
			// BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_mail").SetValue(CellData"#" + rowNumber,fieldID,cellValue
		// else if (sectionName).ToUpper() == "PREVIOUSADDRESS" 
		// BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_prev").SetValue(CellData"#" + rowNumber,fieldID,cellValue
		// else
			// writeReportLog("SectionName passed to fucntion SetValueInAddressTab is no proper. Please check","Failed","","")
	// else if dataSetType == "Type" 
		// //Setting the Customer Details
		// if (sectionName).ToUpper() == "HOMEADDRESS" 
			// typeText_In_PBDatWindow_DP("w_cust", "dw_loc", "#" + rowNumber,fieldID,cellValue)
		// else if (sectionName).ToUpper() == "MAILINGADDRESS" 
			// typeText_In_PBDatWindow_DP("w_cust", "dw_mail", "#" + rowNumber,fieldID,cellValue)
		// else if (sectionName).ToUpper() == "PREVIOUSADDRESS" 
			// typeText_In_PBDatWindow_DP("w_cust", "dw_prev", "#" + rowNumber,fieldID,cellValue)
		// else
			// writeReportLog("SectionName passed to fucntion SetValueInAddressTab is no proper. Please check","Failed","","")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in SetValueInAddressTab","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: getFieldIDBasedOnFieldName_AddressTab
// //@Author Karthik
// //@Date 14 May 2019
// //@Description This return the column/field ID for the Field Name specified for Address tab of F2 Screen
// //Ex  getFieldIDBasedOnFieldName_AddressTab("First Name")
// //*********************************************************************************************
// String getFieldIDBasedOnFieldName_AddressTab(String fldName)
	// %FuncInfo[Desc="This return the column/field ID for the Field Name specified for Address tab of F2 Screen",Group="BranchPlusFunctions"]
	// //Variable
	// String idToReturn = null
	// //Fetching ID//s based on Name
	// if fldName == "Address1" 
		// idToReturn = "addr1"
	// else if fldName == "Address2" 
		// idToReturn = "addr2"
	// else if fldName == "Zipcode" 
		// idToReturn = "zipcode"
	// else if fldName == "City" 
		// idToReturn = "city"
	// else if fldName == "State" 
		// idToReturn = "state"
	// else
		// writeReportLog("Please pass the Proper parameter value to method getFieldIDBasedOnFieldName_CustomerTab","Failed","","")
	// String getFieldIDBasedOnFieldName_AddressTab = idToReturn
	// return getFieldIDBasedOnFieldName_AddressTab
// //*********************************************************************************************
// //@methodName: getValueFromCollateralTab
// //@Author Karthik
// //@Date 14 May 2019
// //@Description This get the field value for the Field Name specified for Colletral tab of F2 Screen
// //Ex //msgbox getValueFromCollateralTab("Year")
// //   msgbox getValueFromCollateralTab("Make")
// //   msgbox getValueFromCollateralTab("VIN:")
// //*********************************************************************************************
// getValueFromCollateralTab(String fieldName)
	// %FuncInfo[Desc="This get the field value for the Field Name specified for Colletral tab of F2 Screen",Group="BranchPlusFunctions"]
	// fieldID = getFieldIDBasedOnFieldName_CollateralTab(fieldName)
	// //Getting the Collateral Details
	// getValueFromCollateralTab = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list").GetCellData("#1",fieldID)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getValueFromCollateralTab","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: getFieldIDBasedOnFieldName_CollateralTab
// //@Author Karthik
// //@Date 14 May 2019
// //@Description This return the column/field ID for the Field Name specified for Colletral tab of F2 Screen
// //Ex  getFieldIDBasedOnFieldName_CollateralTab("VIN")
// //*********************************************************************************************
// String getFieldIDBasedOnFieldName_CollateralTab(String fldName)
	// %FuncInfo[Desc="This return the column/field ID for the Field Name specified for Colletral tab of F2 Screen",Group="BranchPlusFunctions"]
	// //Replacing the Colon
	// fldName = fldName.Replace(":","")
	// String idToReturn
	// //Fetching ID//s based on Name
	// if (fldName).ToUpper() == ("Lic Plate") .ToUpper()
		// idToReturn = "lic_plate_nbr"
	// else if (fldName).ToUpper() == ("New").ToUpper()
		// idToReturn = "new_yn"
	// else if (fldName).ToUpper() == ("Estimated Recovery") .ToUpper()
		// idToReturn = "repo_est_recovery"
	// else if (fldName).ToUpper() == ("Repo Date") .ToUpper()
		// idToReturn = "repo_dt"
	// else if (fldName).ToUpper() == ("Repo Type") .ToUpper()
		// idToReturn = "repo_type"
	// else if (fldName).ToUpper() == ("Repo Date") .ToUpper()
		// idToReturn = "repo_dt"
	// else if (fldName).ToUpper() == ("Clean Book Value") .ToUpper()
		// idToReturn = "clean_book_val"
	// else if (fldName).ToUpper() == ("Average Book Value") .ToUpper()
		// idToReturn = "avg_book_val"
	// else if (fldName).ToUpper() == ("Rough Book Value") .ToUpper()
		// idToReturn = "rough_book_val"
	// else if (fldName).ToUpper() == ("Year") .ToUpper()
		// idToReturn = "year"
	// else if (fldName).ToUpper() == ("Make") .ToUpper()
		// idToReturn = "make"
	// else if (fldName).ToUpper() == ("Model") .ToUpper()
		// idToReturn = "model"
	// else if (fldName).ToUpper() == ("Style") .ToUpper()
		// idToReturn = "style"
	// else if (fldName).ToUpper() == ("VIN") .ToUpper()
		// idToReturn = "vin"
	// else if (fldName).ToUpper() == ("Sales Status") .ToUpper()
		// idToReturn = "sales_status"
	// else
		// idToReturn = LCase(fldName)
		// // writeReportLog("Please pass the Proper parameter value to method getFieldIDBasedOnFieldName_CustomerTab","Failed","","")
	// //Returning the value
	// String getFieldIDBasedOnFieldName_CollateralTab = idToReturn
// return getFieldIDBasedOnFieldName_CollateralTab
// //*****************************************************************************************
// //@methodName : handle_Popup_Window_with_Button(windowName,PbwindowName,buttonName)	
// //@Author     : Chandra
// //@Date       : 20 FEB 2019
// //@Description: This will handle popup window if exist and clicks on the Button Specified
// //Ex:  handle_Popup_Window_with_Button("Daily Closing","WARNING","Yes")	
// //*****************************************************************************************
// handle_Popup_Window_with_Button(String windowName,String PbwindowName,String buttonName)
	// %FuncInfo[Desc="This will handle popup window if exist and clicks on the Button Specified",Group="BranchPlusFunctions"]
	// if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowName).Pbwindow("regexpwndtitle:=" + PbwindowName).PbButton("text:=&" + buttonName).WaitWhileExists(5) 
		// //Get the Static text
		// staticText = Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowName).Pbwindow("regexpwndtitle:=" + PbwindowName).WinEditor("regexpwndclass:=Edit").GetRoProperty("text")
		// //Snap Shot
		// writeReportLog("Popup window static text: //" + staticText + "// is displayed successfully","Passed", "","Y")
		// //Click on Button
		// Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowName).Pbwindow("regexpwndtitle:=" + PbwindowName).PbButton("text:=&" + buttonName).Click()		
	// else if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowName).Pbwindow("regexpwndtitle:=" + PbwindowName).PbButton("text:=" + buttonName).WaitWhileExists(5) 
		// //Get the Static text
		// staticText = Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowName).Pbwindow("regexpwndtitle:=" + PbwindowName).WinEditor("regexpwndclass:=Edit").GetRoProperty("text")
		// //Snap Shot from App
		// writeReportLog("Popup window static text: //" + staticText + "// is displayed successfully","Passed", "","Y")
		// //Click on Button
		// Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowName).Pbwindow("regexpwndtitle:=" + PbwindowName).PbButton("text:=" + buttonName).Click()			 
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/handle_Popup_Window_with_Button","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: handle_USPS_Window_AddressTab(buttonName)
// //@Author Chandra
// //@Date 10 Jun 2019
// //@Description This will handle the USPS window in Address Tab (When we change address) 
// //Ex  handle_USPS_Window_AddressTab("Use Address Above")
// //*********************************************************************************************
// handle_USPS_Window_AddressTab(String buttonName)
	// %FuncInfo[Desc="This will handle the USPS window in Address Tab (When we change address) ",Group="BranchPlusFunctions"]
	// //Handled USPS Widow in Address Tab
	// handle_PbWindow("w_usps_addressverification",buttonName)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in method handle_USPS_Window_AddressTab ","Failed", Error_Description,"")
// 
// //*********************************************************************************************
// //@methodName: get_NC_Text_From_Reportforms()
// //@Author Chandra
// //@Date 10 Jun 2019
// //@Description This will Get NC Text form Notice Of Default form 
// //@Returing the NC Text
// //Ex  get_NC_Text_From_Reportforms()
// //*********************************************************************************************
// get_NC_Text_From_Reportforms()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// %FuncInfo[Desc="This will Get NC Text form Notice Of Default form ",Group="BranchPlusFunctions"]
	// //Getting NC Text 
	// NC_Text = getValue_From_Reportsforms("nc_text")
	// get_NC_Text_From_Reportforms = NC_Text
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in method get_NC_Text_From_Reportforms ","Failed", Error_Description,"")
// 
// //*********************************************************************************************
// //@methodName: clickButton_InDeleteRowConfirmation_CreditDecisionWindow(buttonName)
// //@Author Chandra
// //@Date 04 Oct 2019
// //@Description This is click on button in Delete Confirmation popup in Credit decision window
// //@Retruing the Field ID(Column)
// //Ex  clickButton_InDeleteRowConfirmation_CreditDecisionWindow("Yes")
// //*********************************************************************************************
// clickButton_InDeleteRowConfirmation_CreditDecisionWindow(String buttonName)
	// %FuncInfo[Desc="This is click on button in Delete Confirmation popup in Credit decision window",Group="BranchPlusFunctions"]
	// //Click on Button
	// clickButton_In_Level2PBwindow_DP("w_wiz_new_cust", "w_message", buttonName)
	// if GetErrorCount()>0 
		// writeReportLog("Failed in clickButton_InDeleteRowConfirmation_CreditDecisionWindow","Failed", Error_Description,"")
// 
// //*********************************************************************************************
// //@methodName: enterValue_In_AddressTab
// //@Author Chandra
// //@Date 10 Jun 2019
// //@Description This will Enter the Field Value for the Field Name along with Section Name specified from Address tab of F2 Screen
// //Ex  enterValue_In_AddressTab("HomeAddress","Address1","3620 Westgate Center Cir")
// //Ex  enterValue_In_AddressTab("MailingAddress","Address1","3620 Westgate Center Cir")
// //Ex  enterValue_In_AddressTab("PreviousAddress","Address1","3620 Westgate Center Cir") --> In previous address it will always fetch the value from 1st Row
// //*********************************************************************************************
// enterValue_In_AddressTab(String sectionName,String fieldName,String fieldValue)
	// %FuncInfo[Desc="This will Enter the Field Value for the Field Name along with Section Name specified from Address tab of F2 Screen",Group="BranchPlusFunctions"]
	// //Getting field ID
	// fieldID = getFieldIDBasedOnFieldName_AddressTab(fieldName)
	// //Entering the Customer Details
	// if UCase(sectionName) = "HOMEADDRESS" 
		// fieldValue = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_loc").SetValue(CellData("#1",fieldID, fieldValue)
	// else if UCase(sectionName) = "MAILINGADDRESS" 
		// fieldValue = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_mail").SetValue(CellData("#1",fieldID, fieldValue)
	// else if UCase(sectionName) = "PREVIOUSADDRESS" 
	// //Need to Update this Code currently it will fetch only 1st Row Data
	// fieldValue = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_prev").SetValue(CellData("#1",fieldID, fieldValue)
	// else
		// writeReportLog("SectionName passed to fucntion enterValue_In_AddressTab is no proper. Please check","Failed","","")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in enterValue_In_AddressTab","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: enterValue_In_F2Screen_BasedOnId(fieldId,Value)
// //@Author: Sumithra
// //@Date 27 June 2018
// //@Description: This function will open accounts by giving serach details in customer search window
// //Ex:  enterValue_In_F2Screen_BasedOnId("Last Name","s")
// //***************************************************************************************************************************
// enterValue_In_F2Screen_BasedOnId(String fieldName,String Value)
	// %FuncInfo[Desc="This function will open accounts by giving serach details in customer search window",Group="BranchPlusFunctions"]
	// //get field id in F2 window
	// fieldId = getfieldID_CustomerSearch_window(fieldName)
	// //Enter the value the specified field
	// enterValuesIn_CustmerSearch(fieldId,Value)
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/enterValue_In_F2Screen_BasedOnId","Failed", Error_Description,"")
// //************************************************************************************************************************************************************
// //@methodName : enterValueIn_CustmerSearch_F2(colName, CellValue)
// //@Author : Chandra
// //@Date 11 June 2018
// //@Description This function will enter values in Customer search Window 
// //Ex:  enterValueIn_CustmerSearch_F2("last_name","D")
// //************************************************************************************************************************************************************ 
// enterValueIn_CustmerSearch_F2(String colName, String CellValue)
	// %FuncInfo[Desc="This function will enter values in Customer search Window ",Group="BranchPlusFunctions"]
	// Set CustomerSearchWindow =  w_bp_frame.w_search.PbDataWindow("pbname:=dw_search")
		// if CustomerSearchWindow.IsPresent() 
			// SetValue_PBDataWindow(CustomerSearchWindow, "#1", colName, CellValue)		
			// // writeReportLog("Customer search with : " + colName + "," + CellValue ,"Passed","","")
	// if GetErrorCount()>0 
			// writeReportLog("Failed in step/enterValueIn_CustmerSearch_F2","Failed", Error_Description,"")
// //***************************************************************************************************************************
// //@Method: typeValue_In_F2Screen_BasedOnId(fieldId,Value)
// //@Author: Sumithra
// //@Date 27 June 2018
// //@Description: This function will open accounts by giving serach details in customer search window
// //Ex:  typeValue_In_F2Screen_BasedOnId("Last Name","s")
// //***************************************************************************************************************************
// typeValue_In_F2Screen_BasedOnId(String fieldName,String Value)
	// %FuncInfo[Desc="This function will open accounts by giving serach details in customer search window",Group="BranchPlusFunctions"]
	// //get field id in F2 window
	// fieldId = getfieldID_CustomerSearch_window(fieldName)
	// //Enter the value the specified field
	// typeValueIn_CustmerSearch_F2(fieldId,Value)
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/typeValue_In_F2Screen_BasedOnId","Failed", Error_Description,"")
// //************************************************************************************************************************************************************
// //@methodName : typeValueIn_CustmerSearch_F2(colName, CellValue)
// //@Author : Chandra
// //@Date 11 June 2018
// //@Description This function will type values in Customer search Window 
// //Ex:  typeValueIn_CustmerSearch_F2("last_name","D")
// //************************************************************************************************************************************************************ 
// typeValueIn_CustmerSearch_F2(colName, CellValue)
	// %FuncInfo[Desc="This function will type values in Customer search Window ",Group="BranchPlusFunctions"]
	// Set CustomerSearchWindow =  w_bp_frame.w_search.PbDataWindow("pbname:=dw_search")
	// if CustomerSearchWindow.IsPresent() 	
		// TypeText_PBDataWindow(CustomerSearchWindow, "#1", colName, CellValue)
	// if GetErrorCount()>0 
			// writeReportLog("Failed in step/typeValueIn_CustmerSearch_F2","Failed", Error_Description,"")
// //********************************************************************************************************************************************
// //@methodName: getfieldID_CustomerSearch_window(fieldName)
// //@Description: This function is to get FieldName based on Field ID under F2
// //@Author: Sumithra
// //@Date 18-03-2019
// //@Return: It returns the field id 
// //Ex:  getfieldID_CustomerSearch_window("Customer Name")
// //*********************************************************************************************************************************************
// getfieldID_CustomerSearch_window(String fieldName)
	// %FuncInfo[Desc="This function is to get FieldName based on Field ID under F2",Group="BranchPlusFunctions"]
	// //Fetching the value based on the Col ID in Account Renewal Report
	// if fieldName = "Loan Number" 
		// ReportID ="loan_nbr"
	// else if fieldName = "Last Name" 
		// ReportID = "last_name"
	// else if fieldName = "First Name" 
		// ReportID = "first_name"
	// else if fieldName = "SSN" 
		// ReportID = "ssn"	
	// else if fieldName = "Reference Number" 
		// ReportID = "new_loan_nbr"
	// else if fieldName =  "Customer ID" 
		// ReportID = "cust_id" 		
	// else if fieldName = "Process From" 
		// ReportID = "process_start"
	// else if fieldName =  "Process To" 
		// ReportID = "process_end"
	// else if fieldName =  "Contract From" 
		// ReportID = "contract_start_dt"		
	// else if fieldName = "Contract To" 
		// ReportID = "contract_end_dt"
	// else if fieldName =  "Promise From" 
		// ReportID = "date_of_promise_begin"		
	// else if fieldName = "Promise To" 
		// ReportID = "date_of_promise_end"		
	// else if fieldName = "Delinquency All" 
		// ReportID = "del_all"
	// else if fieldName = "Current" 
		// ReportID = "del_current"
	// else if fieldName =  "Potential" 
		// ReportID = "del_potential"
	// else if fieldName =  "30" 
		// ReportID = "del_30"		
	// else if fieldName = "60" 
		// ReportID = "del_60"
	// else if fieldName =  "90" 
		// ReportID = "del_90"	
	// else if fieldName =  "Above90" 
		// ReportID = "del_greater_90"			
	// else
		// writeReportLog("fieldName >> " + fieldName + " is Not available in the F2 ID List","Failed","","")
	// //return report id
	// getfieldID_CustomerSearch_window = ReportID
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/getfieldID_CustomerSearch_window","Failed", Error_Description ,"")
// 
// //***********************************************************************************************************************
// //@methodName: get_Label_FromCustomerSubTabs()
// //@Author: Chandra
// //@Date 22 May 2018
// //@Description This will get label from customer sub tabs
// //@Modified Karthik.Shekar
// //@Descripion earlier it was returning only 1st Row data now fixed to pull all rows data
// //Ex:  get_Label_FromCustomerSubTabs()
// //***********************************************************************************************************************
// get_Label_FromCustomerSubTabs()
	// %FuncInfo[Desc="This will get label from customer sub tabs",Group="BranchPlusFunctions"]
	// if BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_account_status_display").WaitWhileExists 
		// rowCnt = getRowCount_PbDataWindow("w_cust","dw_account_status_display")
		// Label = ""
		// for itr = 1 To rowCnt Step 1
			// rowText = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_account_status_display").GetCellData("#" + itr,"account_msg")
			// Label = Label + " "  + rowText
	// else
		// writeReportLog("Failed in Label is not displayed Tab","Failed", Error_Description ,"Y")
	// get_Label_FromCustomerSubTabs = Label
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in get_Label_FromCustomerSubTabs","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: clickButton_Cease()
// //@Author: Chandra
// //@Date 20 May 2018
// //@Description: This function is to click on Cease button
// //Ex:  clickButton_Cease()
// //***************************************************************************************************************************
// clickButton_Cease()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //click on Cease button
	// BranchPlus.InsightObject("btnCease").Click()
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed to clickButton_Cease","Failed", Error_Description,"Y")
// 
// //***************************************************************************************************************************
// //@Method: clickButton_In_DailogPopup(windowName, dialogName, buttonToClick)
// //@Author: Chandra
// //@Date 31 may 2019
// //@Description: This function is to Click on Button in dailog popup 
// //@Returing the Dailog popup static text
// //Ex:  clickButton_In_DailogPopup("Do Not Contact", Print Option","OK")
// //***************************************************************************************************************************
// clickButton_In_DailogPopup(String dialogName,String buttonToClick)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).WaitWhileExists(5) 
		// w_bp_frame.Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).Click()
	// else if w_bp_frame.Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).WaitWhileExists(5) 
		// w_bp_frame.Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).Click()	     				
	// else
		// writeReportLog("Clicking on Button " + buttonToClick + "Failed in Dialog: " + dialogName,"Failed","","Y")	
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to clickButton_In_DailogPopup","Failed", Error_Description ,"")
// 
// //********************************************************************************************************************************************
// //@methodName: get_DescriptionValue_In_Rightpane_PaymentTab(LabelName)
// //@Description: This function is to get description value in the right pane of payment tab
// //@Author: Sumithra
// //@Date 20-03-2019
// //Ex:  get_DescriptionValue_In_Rightpane_PaymentTab("Payoff")
// //*********************************************************************************************************************************************
// get_DescriptionValue_In_Rightpane_PaymentTab(String LabelName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get row count
	// rowcount = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list").RowCount
	// for itr = 1 to rowcount 
		// //get label name
		// cellValue = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list").GetCellData("#"&itr,"label_value")
		// if Trim(cellValue) = Trim(LabelName) 
			// //get cell values
			// get_DescriptionValue_In_Rightpane_PaymentTab = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list").GetCellData( "#"&itr,"cc_value")			 
			// Exit for
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/get_DescriptionValue_In_Rightpane_PaymentTab","Failed", Error_Description ,"")
// 
// //*********************************************************************
// //@methodName: validateFolders_In_OnBaseformsUploadPage
// //@Author Karthik
// //@Date 17 July 2019
// //@Description This will valdiate for folder structue in the On Base forms  Upload page
// //EX:  validateFolders_In_OnBaseformsUploadPage()
// //*********************************************************************
// validateFolders_In_OnBaseformsUploadPage()	
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// osVersion = System.GetEnvVar("OS")
	// osVersion = Replace(osVersion,"Workstation","")
	// if Trim(osVersion) = "Windows 10" 
		// if BranchPlus.InsightObject("OnBase_FolderStructure_Win10").WaitWhileExists(10) 
			// writeReportLog("As expected, Folders are available in On Base form Upload Page","Passed","","")
		// else
			// writeReportLog("Folders are not available as expected in On base form Upload Page. Please Check","Failed","","")
	// else
		// if BranchPlus.InsightObject("OnBase_FolderStructure").WaitWhileExists(10) 
			// writeReportLog("As expected, Folders are available in On Base form Upload Page","Passed","","")
		// else
			// writeReportLog("Folders are not available as expected in On base form Upload Page. Please Check","Failed","","")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/validateFolders_In_OnBaseformsUploadPage","Failed", Error_Description ,"")
// 
// //*********************************************************************
// //@methodName: clickButton_ScanDocs
// //@Author Karthik
// //@Date 12 July 2019
// //@Description This will click on the button Scan Docs 
// //EX:  clickButton_ScanDocs()
// //*********************************************************************
// clickButton_ScanDocs()	
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if BranchPlus.InsightObject("btnScanDocs").WaitWhileExists(10) 
		// BranchPlus.InsightObject("btnScanDocs").Click()
	// else
		// writeReportLog("Scan Docs Button is Not Available. Please Check","Failed","","")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/clickButton_ScanDocs","Failed", Error_Description ,"")
// 
// //*********************************************************************
// //@methodName: clickButton_Scan
// //@Author Karthik
// //@Date 12 July 2019
// //@Description This will click on the button Scan 
// //EX:  clickButton_Scan()
// //*********************************************************************
// clickButton_Scan()	
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if BranchPlus.InsightObject("btnScan").WaitWhileExists(10) 
		// BranchPlus.InsightObject("btnScan").Click()
	// else
		// writeReportLog("Scan Button is Not Available. Please Check","Failed","","")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/clickButton_Scan","Failed", Error_Description ,"")
// 
// //*********************************************************************
// //@methodName: isScanDocsButtonAvailable()
// //@Author Karthik
// //@Date 12 July 2019
// //@Description This will return the status of the Scan Docs button 
// //EX: msgbox isScanDocsButtonAvailable()
// //*********************************************************************
// isScanDocsButtonAvailable()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// isScanDocsButtonAvailable = BranchPlus.InsightObject("btnScanDocs").WaitWhileExists(10) 
	// //Error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in method isScanDocsButtonAvailable","Failed", Error_Description,"")
// 
// //*********************************************************************
// //@methodName: isDialogExist_InsideBranchFrame()
// //@Author Karthik
// //@Date 17 July 2019
// //@Description This will return the status of Dialog inside Branch Frame 
// //EX: msgbox isDialogExist_InsideBranchFrame("Prepare To Scan")
// //*********************************************************************
// isDialogExist_InsideBranchFrame(String dialogName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// isDialogExist_InsideBranchFrame = w_bp_frame.Dialog("regexpwndtitle:=" + dialogName).WaitWhileExists(10)
	// if GetErrorCount()>0 
		// writeReportLog("Failed in method isDialogExist_InsideBranchFrame","Failed", Error_Description,"")
// 
// //*************************************************************************
// //@methodName: validate_StaticText_InDialog_InsideBranchFrame()
// //@Author Karthik
// //@Date 17 July 2019
// //@Description This will valdiate for the Static Text in Dialog whcih is inside Branch Frame
// //EX:  validate_StaticText_InDialog_InsideBranchFrame("Prepare To Scan","Prepare")
// //***************************************************************************
// validate_StaticText_InDialog_InsideBranchFrame(String dialogName,String expectedStaticText)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //
	// w_bp_frame.Dialog("regexpwndtitle:=" + dialogName).SleepProperty("visible", True, 10000)
	// //Fetching actual Static Text
	// actStaticText = w_bp_frame.Dialog("regexpwndtitle:=" + dialogName).Static("regexpwndclass:=Static", "index:=1").getRoProperty("regexpwndtitle")
	// //Replace if any new line date is available
	// StaticMesssage = Replace(actStaticText, vbNewLine, "")
	// //Validating
	// validateDataAndReport(StaticMesssage,expectedStaticText,"Validation of Static Text in Dialog " + dialogName)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in method validate_StaticText_InDialog_InsideBranchFrame","Failed", Error_Description,"")
// 
// //*************************************************************************
// //@methodName: clickButton_InDialog_InsideBranchFrame()
// //@Author Karthik
// //@Date 17 July 2019
// //@Description This will valdiate for the Static Text which is available inside the Branch Frame
// //EX:  clickButton_InDialog_InsideBranchFrame("Prepare To Scan")
// //***************************************************************************
// clickButton_InDialog_InsideBranchFrame(String dialogName,String buttonToClick)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).WaitWhileExists(10) 
		// w_bp_frame.Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).Click()
	// else if w_bp_frame.Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).WaitWhileExists(3) 
		// w_bp_frame.Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).Click()
	// else
		// writeReportLog("Looks like Button " + buttonToClick + " is not available in Dialog " + dialogName,"Failed","","")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in method clickButton_InDialog_InsideBranchFrame","Failed", Error_Description,"")
// 
// //**************************************************************
// //@Method waitTillMessageAppearsInStatusBar
// //@Description (This) method will Sleep till the Expected Message is displayed in the Status Bar of the Branch Plus Application
// //@Creation Date 18 July 2019
// //Ex:  waitTillMessageAppearsInStatusBar("Ready")
// //***************************************************************
// waitTillMessageAppearsInStatusBar(String expectedMsg)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// appVersionWithoutDot = Trim(Replace(getAppVersionNumber_From_DB,".",""))
	// for(Ineger itr=1; i<=10; itr++) Step 1
	// //Handling for 9.8.0 Changes
	// if appVersionWithoutDot >= 980 
		// //Get Window Title
	// currentMsg = w_bp_frame.WinObject("regexpwndclass:=FNHELP").GetAttr(("regexpwndtitle")
	// else  	
	// //Get Window Title
	// currentMsg = w_bp_frame.WinObject("regexpwndclass:=FNHELP170").GetAttr(("regexpwndtitle")
		// if IndexOf(currentMsg,expectedMsg) > 0 
				// Exit for
		// //Wait
		// Sleep (10)
	// //Error Handling
	// Wait 15
	// Err.clear
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to waitTillMessageAppearsInStatusBar","Failed", Error_Description ,"")
// 
// //*****************************************************************************************************************
// //@methodName: click_Print_CtrlP_InCustomerforms()
// //@Author Chandra
// //@Date 12 Mar 2019
// //@Description This is to Clic on Control + P using Send Keys
// //Ex:  click_Print_CtrlP_InCustomerforms()
// //*****************************************************************************************************************
// click_Print_CtrlP_InCustomerforms()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// BranchPlus.HoverMouse ()
	// sendKeys("^p")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/click_Print_CtrlP_InCustomerforms","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: validateDueAmountInRightPaneOfPaymentTab()
// //@Author: Sumithra
// //@Date 25 June 2018
// //@Description: This function is to validate the  Due amount amount in payment tab
// //Ex:  validateDueAmountInRightPaneOfPaymentTab()
// //**************************************************************************************************************************
// validateDueAmountInRightPaneOfPaymentTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //navigate to payment tab
	// navigateToTab_CustomerSubTabs("Payment")
	// //get Total Due Today amount
	// TotalDueTodayAmount = get_DescriptionValue_In_Rightpane_PaymentTab("Total Due Today")	
	// //get  Due Date
	// nextDueDate = Split(get_DescriptionValue_In_Rightpane_PaymentTab(" Due"))(0)
	// //get  Due amount
	// nextDueAmount = Split(get_DescriptionValue_In_Rightpane_PaymentTab(" Due"))(2)
	// //click on Payment To Roll option in the right pane of payment tab
	// select_Description_In_Rightpane_PaymentTab("Payment to Roll")
	// //get data from payment to schedule window
	// getDataInPaymentScheduleWindow_BasedOnDueDate(nextDueDate,nextDueContractAmt,nextDueCpiAmt,nextDueLateAmt,nextDueNSFAmt,nextDueCollAmt,nextDueChargeAmt,nextDuePaidAmt,nextDuePaidPecent)
	// //calculate expected due amount
	// expnextDueAmount = formatNumber(ccur(DueChargeAmt)-ccur(nextDuePaidAmt)+ccur(TotalDueTodayAmount))
	// //close the Payment Schedule window
	// clickButtonInPBWindow("Payment Schedule","Close")
	// //validate
	// validateDataAndReport(ccur(nextDueAmount),ccur(expnextDueAmount)," Due amount in right pane of Payment tab")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in method validateDueAmountInRightPaneOfPaymentTab ","Failed", Error_Description,"")
// 
// //***************************************************************************************************************************
// //@Method: getDataInPaymentScheduleWindow_BasedOnDueDate(DueDate,byref contractAmt,byref cpi_Amt,byref LateAmt,byref NSFAmt,byref CollAmt,byref ChargeAmt,byref PaidAmt,byref PaidPecent)
// //@Author: Sumithra
// //@Date 25 march 2018
// //@Description: This function will get the Data of all the rows based on next due date in Payment schedule window in payment tab
// //Ex:  getDataInPaymentScheduleWindow_BasedOnDueDate("07/06/2018",contractAmt,cpi_Amt,LateAmt,NSFAmt, CollAmt, ChargeAmt, PaidAmt, PaidPecent)
// //**************************************************************************************************************************
// getDataInPaymentScheduleWindow_BasedOnDueDate(String DueDate,String byref contractAmt,String byref cpi_Amt,String byref LateAmt,String byref NSFAmt,String byref CollAmt,String byref ChargeAmt,String byref PaidAmt,String byref PaidPecent)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// DueDate = formatDateWithSpecifiedDelimeter(DueDate,"MMDDYYYY","-")
	// //get row count
	// rowcnt = getRowCount_PbDataWindow("w_view_report","dw_list")
	// for itr = 1 To rowcnt
		// //get due date in payment schedule window
		// expdueDate = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"due_dt")
		// expdueDate = formatDateWithSpecifiedDelimeter(expdueDate,"MMDDYYYY","-")
		// if expdueDate = DueDate 
			// //get contract amount
			// contractAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"charge_amt")
			// //get cPI amount
			// cpi_Amt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"cpi_amt")
			// //Get Late charge amount				
			// LateAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"late_amt")			
			// //get NSF amount
			// NSFAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"nsf_amt")
			// //get Collection amount			
			// CollAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"coll_amt")		
			// //get charge amount
			// ChargeAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"contract_amt")
			// //get paid amount 			
			// PaidAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"paid_amt")
			// //get paid percentage
			// PaidPecent = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"paid_pct")
			// Exit for
	// getDataInPaymentScheduleWindow_BasedOnDueDate = itr
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getDataInPaymentScheduleWindow_BasedOnDueDate","Failed", Error_Description,"")
// 
// //***************************************************************************************************************************
// //@Method: getDataInPaymentScheduleWindow_BasedOnRow(RowNumber,byref contractAmt,byref cpi_Amt,byref LateAmt,byref NSFAmt,byref CollAmt,byref ChargeAmt,byref PaidAmt,byref PaidPecent)
// //@Author: Sumithra
// //@Date 25 march 2018
// //@Description: This function will get the Data of all the rows based on row in Payment schedule window in payment tab
// //Ex:  getDataInPaymentScheduleWindow_BasedOnRow(2,contractAmt,cpi_Amt,LateAmt,NSFAmt, CollAmt, ChargeAmt, PaidAmt, PaidPecent)
// //**************************************************************************************************************************
// getDataInPaymentScheduleWindow_BasedOnRow(String RowNumber,String byref contractAmt,String byref cpi_Amt,String byref LateAmt,String byref NSFAmt,String byref CollAmt,String byref ChargeAmt,String byref PaidAmt,String byref PaidPecent)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get contract amount
	// contractAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&RowNumber,"charge_amt")
	// //get cPI amount
	// cpi_Amt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&RowNumber,"cpi_amt")
	// //Get Late charge amount				
	// LateAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&RowNumber,"late_amt")			
	// //get NSF amount
	// NSFAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&RowNumber,"nsf_amt")
	// //get Collection amount			
	// CollAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&RowNumber,"coll_amt")		
	// //get charge amount
	// ChargeAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&RowNumber,"contract_amt")
	// //get paid amount 			
	// PaidAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&RowNumber,"paid_amt")
	// //get paid percentage
	// PaidPecent = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&RowNumber,"paid_pct")
	// //get due_dt
	// System.GetEnvVar("Due_Date") = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&RowNumber,"due_dt")
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getDataInPaymentScheduleWindow_BasedOnRow","Failed", Error_Description,"")
// 
// //***************************************************************************************************************************
// //@Method: getSumof_AllColumnsDataFrom_PaymentSchedule_Window_PaymentTab(byref ContractSum,byref CPISum,byref LateChgSum,byref NSFSum,byref CollSum,byref ChargeSum,byref PaidSum)
// //@Author: Sumithra
// //@Date 25 march 2018
// //@Description: This function will get the sum of all the columns data in Payment schedule window in payment tab
// //Ex:  getSumof_AllColumnsDataFrom_PaymentSchedule_Window_PaymentTab( ContractSum, CPISum, LateChgSum, NSFSum, CollSum, ChargeSum, PaidSum)
// //***************************************************************************************************************************
// getSumof_AllColumnsDataFrom_PaymentSchedule_Window_PaymentTab(String byref ContractSum,String byref CPISum,String byref LateChgSum,String byref NSFSum,String byref CollSum,String byref ChargeSum,String byref PaidSum)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get row count
	// rowcnt = getRowCount_PbDataWindow("w_view_report","dw_list")
	// //initialize variables
	// ContractSum = 0
	// CPISum = 0
	// LateChgSum = 0
	// NSFSum = 0
	// ollSum =0
	// ChargeSum = 0
	// PaidSum =0
	// for itr = 1 To rowcnt
		// //get contract amount and do the sum
		// contractAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"charge_amt")
		// ContractSum= ccur(ContractSum)+ccur(contractAmt)
		// //get CPI amount and do the sum
		// cpi_Amt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"cpi_amt")
		// CPISum= ccur(CPISum)+ccur(cpi_Amt)
		// //get Late charge amount and do the sum
		// LateAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"late_amt")
		// LateChgSum=ccur(LateChgSum)+ccur(LateAmt)
		// //get NSF amount and do the sum
		// NSFAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"nsf_amt")
		// NSFSum= ccur(NSFSum)+ccur(NSFAmt)
		// //get collection amount and do the sum
		// CollAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"coll_amt")
		// CollSum= ccur(CollSum)+ccur(CollAmt)
		// //get charge amount and do the sum
		// ChargeAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"contract_amt")
		// ChargeSum= ccur(ChargeSum)+ccur(ChargeAmt)
		// //get paid amount and do the sum
		// PaidAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"paid_amt")
		// PaidSum= ccur(PaidSum)+ccur(PaidAmt)
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getSumof_AllColumnsDataFrom_PaymentSchedule_Window_PaymentTab","Failed", Error_Description,"")
// 
// //***************************************************************************************************************************
// //@Method: getSum_In_PaymentSchedule_Window_PaymentTab(byref ContractSum,byref CPISum,byref LateChgSum,byref NSFSum,byref CollSum,byref ChargeSum,byref PaidSum)
// //@Author: Sumithra
// //@Date 25 march 2018
// //@Description: This function will get the sum of all the columns data in Payment schedule window in payment tab
// //Ex:  getSum_In_PaymentSchedule_Window_PaymentTab( ContractSum, CPISum, LateChgSum, NSFSum, CollSum, ChargeSum, PaidSum)
// //***************************************************************************************************************************
// getSum_In_PaymentSchedule_Window_PaymentTab(String byref ContractSum,String byref CPISum,String byref LateChgSum,String byref NSFSum,String byref CollSum,String byref ChargeSum,String byref PaidSum)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //App Version without Dot
	// appVersionWithoutDot = Trim(Replace(System.GetEnvVar("appVersion"),".",""))
	// //get row count
	// rowcnt = (getRowCount_PbDataWindow("w_view_report","dw_list"))+cint(1)
	// //get contract amount and do the sum
	// ContractSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"compute_2")
	// //get CPI amount and do the sum
	// CPISum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"compute_4")
	// //Handling for 9.7.0 Changes
	// if appVersionWithoutDot > 960 
		// if not BranchPlus.InsightObject("PaymentToRollColumnsOldLoans").WaitWhileExists(10) 
			// //get Late charge amount and do the sum
			// LateChgSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"compute_5")
			// //get NSF amount and do the sum
			// NSFSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"compute_6")
	// else
		// if not BranchPlus.InsightObject("PaymentToRollColumnsOldLoans_obsolete").WaitWhileExists(10) 
			// //get Late charge amount and do the sum
			// LateChgSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"compute_5")
			// //get NSF amount and do the sum
			// NSFSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"compute_6")
	// //get collection amount and do the sum
	// CollSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"compute_3")
	// //get charge amount and do the sum
	// ChargeSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"compute_7")
	// //get paid amount and do the sum
	// PaidSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"compute_1")
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getSum_In_PaymentSchedule_Window_PaymentTab","Failed", Error_Description,"")
// 
// //***************************************************************************************************************************
// //@Method: getDataInAmountDueTodayBreakdownWindow_BasedOnDueDate(DueDate,byref PmtDue_Ad ,byref cpiAmt_Ad,byref LateAmt_Ad,byref NSFAmt_Ad,byref CollAmt_Ad,byref totalDue_Ad,byref PaidAmt_Ad,byref overUnder_Ad,byref principleAdj_Ad)
// //@Author: Sumithra
// //@Date 25 march 2018
// //@Description: This function will get the data in Amount Due today break down window in payment tab based on next due date
// //Ex:  getDataInAmountDueTodayBreakdownWindow_BasedOnDueDate("10-10-2018", PmtDue_Ad ,cpiAmt_Ad, LateAmt_Ad, NSFAmt_Ad, CollAmt_Ad,totalDue_Ad, PaidAmt_Ad,overUnder_Ad,principleAdj_Ad)
// //***************************************************************************************************************************
// getDataInAmountDueTodayBreakdownWindow_BasedOnDueDate(String dueDate,String byref PmtDue_Ad,String byref cpiAmt_Ad,String byref LateAmt_Ad,String byref NSFAmt_Ad,String byref CollAmt_Ad,String byref totalDue_Ad,String byref PaidAmt_Ad,String byref overUnder_Ad,String byref principleAdj_Ad)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get row count
	// rowcnt = getRowCount_PbDataWindow("w_view_report","dw_list")
	// for itr = 1 To rowcnt
		// //get due date in payment schedule window
		// expDuedate = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"due_dt")
		// expDuedate = formatDateWithSpecifiedDelimeter(expDuedate,"MMDDYYYY","-")
		// dueDate = formatDateWithSpecifiedDelimeter(dueDate,"MMDDYYYY","-")
		// if dueDate = expDuedate 
			// //get Payment due amount
			// PmtDue_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"full_charge_amt")
			// //get CPI amount
			// cpiAmt_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"cpi_amt")
			// //get Late charge amount
			// LateAmt_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"late_amt")
			// //get Collection amount
			// CollAmt_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"coll_amt")
			// //get NSF amount
			// NSFAmt_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"nsf_amt")
			// //get Total due amount
			// totalDue_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"cf_total_due")
			// //get Paid amount
			// PaidAmt_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"paid_amt")
			// //get over/under amount
			// overUnder_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"cf_over_under")
			// //get principle adjustement bal
			// principleAdj_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"princ_adj_amt")
			// //get Paid Thru Date
			// System.GetEnvVar("PaidThru_Date") = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"paid_thru")
			// Exit for			
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getDataInAmountDueTodayBreakdownWindow_BasedOnDueDate","Failed", Error_Description,"")
// 
// //***************************************************************************************************************************
// //@Method: getDataInAmountDueTodayBreakdownWindow_BasedOnRow(rownum,byref PmtDue_Ad ,byref cpiAmt_Ad,byref LateAmt_Ad,byref NSFAmt_Ad,byref CollAmt_Ad,byref totalDue_Ad,byref PaidAmt_Ad,byref overUnder_Ad,byref principleAdj_Ad)
// //@Author: Sumithra
// //@Date 25 march 2018
// //@Description: This function will get the data in Amount Due today break down window in payment tab based on row 
// //Ex:  getDataInAmountDueTodayBreakdownWindow_BasedOnRow("10", PmtDue_Ad ,cpiAmt_Ad, LateAmt_Ad, NSFAmt_Ad, CollAmt_Ad,totalDue_Ad, PaidAmt_Ad,overUnder_Ad,principleAdj_Ad)
// //***************************************************************************************************************************
// getDataInAmountDueTodayBreakdownWindow_BasedOnRow(String rowNumber,String byref PmtDue_Ad,String byref cpiAmt_Ad,String byref LateAmt_Ad,String byref NSFAmt_Ad,String byref CollAmt_Ad,String byref totalDue_Ad,String byref PaidAmt_Ad,String byref overUnder_Ad,String byref principleAdj_Ad,String byref paidThru_Ad)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get Payment due amount
	// PmtDue_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowNumber,"full_charge_amt")
	// //get CPI amount
	// cpiAmt_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowNumber,"cpi_amt")
	// //get Late charge amount
	// LateAmt_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowNumber,"late_amt")
	// //get Collection amount
	// CollAmt_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowNumber,"coll_amt")
	// //get NSF amount
	// NSFAmt_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowNumber,"nsf_amt")
	// //get Total due amount
	// totalDue_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowNumber,"cf_total_due")
	// //get Paid amount
	// PaidAmt_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowNumber,"paid_amt")
	// //get over/under amount
	// overUnder_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowNumber,"cf_over_under")
	// //get principle adjustement bal
	// principleAdj_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowNumber,"princ_adj_amt")
	// //get Paid Thru Date
	// paidThru_Ad = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowNumber,"paid_thru")
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getDataInAmountDueTodayBreakdownWindow_BasedOnDueDate","Failed", Error_Description,"")
// 
// //***************************************************************************************************************************
// //@Method: getSum_In_AmountDueTodayBreakdown_Window_PaymentTab(byref PmtDueSum,byref CPIDueSum,byref LateChgDueSum,byref NSFDueSum,byref CollDueSum,byref totalDueSum,byref PaidAmtDueSum,byref overUnderDueSum,byref principleAdjSum)
// //@Author: Sumithra
// //@Date 25 march 2018
// //@Description: This function will get the sum of all the columd data in AMount Due today break down window in payment tab
// //Ex:  getSum_In_AmountDueTodayBreakdown_Window_PaymentTab(PmtDueSum,CPIDueSum, LateChgDueSum, NSFDueSum, CollDueSum,totalDueSum,PaidAmtDueSum,overUnderDueSum,principleAdjSum)
// //***************************************************************************************************************************
// getSum_In_AmountDueTodayBreakdown_Window_PaymentTab(String byref PmtDueSum,String byref CPIDueSum,String byref LateChgDueSum,String byref NSFDueSum,String byref CollDueSum,String byref totalDueSum,String byref PaidAmtDueSum,String byref overUnderDueSum,String byref principleAdjSum)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get row count
	// rowcnt =(getRowCount_PbDataWindow("w_view_report","dw_list"))+cint(1)
	// //get payment due amount and do the sum
	// PmtDueSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"cf_full_charge_amt_sum")
	// //get CPI charge amount and do the sum
	// CPIDueSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"cf_cpi_amt_sum")
	// //get Late charge amount and do the sum
	// LateChgDueSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"cf_late_amt_sum")
	// //get NSF amount and do the sum
	// NSFDueSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"cf_nsf_amt_sum")
	// //get collection amount and do the sum
	// CollDueSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"compute_3")
	// //get toatl amount and do the sum
	// totalDueSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"cf_total_due_sum")
	// //get Paid Amount amount and do the sum
	// PaidAmtDueSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"cf_paid_amt_sum")
	// //get over/Under amount and do the sum
	// overUnderDueSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"cf_cf_over_under_sum")
	// //get Principle adjustment and do the sum
	// principleAdjSum = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&rowcnt,"cf_princ_adj_amt_sum")
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getSum_In_AmountDueTodayBreakdown_Window_PaymentTab","Failed", Error_Description,"")
// 
// //********************************************************************************************************************************************
// //@methodName: update_DelinquencyCalcEffectiveDate_In_AppDB(featureName,effDate)
// //@Description: This function is to update the delinquency effective changed date in Application DB
// //@Author: Sumithra
// //@Date 20-03-2019
// //Ex:  update_DelinquencyCalcEffectiveDate_In_AppDB("description","20-04-2019")
// //*********************************************************************************************************************************************
// update_DelinquencyCalcEffectiveDate_In_AppDB(String featureName,String effDate)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// effDate = formatDateWithSpecifiedDelimeter(effDate,"MMDDYYYY","/")
	// //query
	// query = "UPDATE bp_feature_tbl SET description = //"&effDate&"// WHERE feature =//"&featureName&"//" 
	// //run query
	// runUpdateSQLQuery(query)
	// //logger
	// writeReportLog("Updated delinquency effective date in //feature table// to : "& effDate,"Passed","","")
		// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/update_DelinquencyCalcEffectiveDate_In_AppDB","Failed", Error_Description ,"")
// 
// //********************************************************************************************************************************************
// //@methodName: select_Description_In_Rightpane_PaymentTab(LabelName)
// //@Description: This function is to select the description in the right pane of payment tab
// //@Author: Sumithra
// //@Date 20-03-2019
// //Ex:  select_Description_In_Rightpane_PaymentTab("Payment To Roll")
// //*********************************************************************************************************************************************
// select_Description_In_Rightpane_PaymentTab(String LabelName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// BranchPlus.HoverMouse () ()	
	// //get row count
	// rowcount = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list").RowCount
	// for itr = 1 to rowcount 
		// //get label name
		// cellValue = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list").GetCellData("#"&itr,"label_value")
		// if Trim(cellValue) = Trim(LabelName) 
			// //selct the label
			// BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list").SetActive()Cell("#"&itr,"label_value") 			
			// select_Description_In_Rightpane_PaymentTab = itr
			// Exit for
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/select_Description_In_Rightpane_PaymentTab","Failed", Error_Description ,"")
// 
// //********************************************************************************************************************************************
// //@methodName: get_DescriptionValue_In_Rightpane_PaymentTab(LabelName)
// //@Description: This function is to get description value in the right pane of payment tab
// //@Author: Sumithra
// //@Date 20-03-2019
// //Ex:  get_DescriptionValue_In_Rightpane_PaymentTab("Payoff")
// //*********************************************************************************************************************************************
// get_DescriptionValue_In_Rightpane_PaymentTab(String LabelName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get row count
	// rowcount = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list").RowCount
	// for itr = 1 to rowcount 
		// //get label name
		// cellValue = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list").GetCellData("#"&itr,"label_value")
		// if Trim(cellValue) = Trim(LabelName) 
			// //get cell values
			// get_DescriptionValue_In_Rightpane_PaymentTab = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list").GetCellData( "#"&itr,"cc_value")			 
			// Exit for
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/get_DescriptionValue_In_Rightpane_PaymentTab","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: getStaticText(windowName)
// //@Author: Sumithra
// //@Date 14th may 2019
// //@Description: This function is to get static text from pbwindow
// //Ex:  getStaticText("REVERSE CHARGE")
// //***************************************************************************************************************************
// getStaticText(String windowName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("regexpwndtitle:=" + windowName).WaitWhileExists(5) 
		// //get static text
		// getStaticText= w_bp_frame.PbWindow("regexpwndtitle:=" + windowName).WinEditor("nativeclass:=Edit","index:=1").GetAttr("Text")
	// else
		// writeReportLog("Window " + windowName + " does not exist","Failed","","")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/getStaticText","Failed", Error_Description ,"")
// 
// //********************************************************************************************************************************************
// //@methodName: selectRowBasedOnTransId_ChgName_FromChargesTable_PaymentTab(transID,chgType)
// //@Description: This function is to select the charge based on charges in charges table
// //@Author: Sumithra
// //@Date 17-05-2019
// //Ex:  selectRowBasedOnTransId_ChgName_FromChargesTable_PaymentTab("01122233","Collection Charge")
// //*********************************************************************************************************************************************
// selectRowBasedOnTransId_ChgName_FromChargesTable_PaymentTab(String transID,String chgType)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Sleep (2)
	// resultFound = False
	// //get row count
	// rowCnt = getRowCount_PbDataWindow("w_cust","dw_charges")
	// if transID = ""  
		// for itr = 1 To rowCnt
			// //get charge type
			// chg_type = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")
			// if chg_type = chgType 		
	// selectCell_In_PBDatWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")
				// resultFound = True
				// Exit for						
	// else if chgType = "" 
		// for itr = 1 To rowCnt
			// //get transaction id
			// trans_id = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"trans_id")
			// if Trim(trans_id) = transID 		
	// selectCell_In_PBDatWindow_DP("w_cust","dw_charges","#" + itr ,"trans_id")
				// resultFound = True
				// Exit for						
	// else if transID <> "" and chgType <> ""  
		// for itr = 1 To rowCnt
			// //get charge type and transaction id
			// chg_type = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")
			// trans_id = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"trans_id")
			// if Trim(trans_id) = transID and chg_type = chgType 		
	// selectCell_In_PBDatWindow_DP("w_cust","dw_charges","#" + itr ,"trans_id")
				// resultFound = True
				// Exit for						
	// if resultFound = False 
	// writeReportLog("Charge name your searching is not exist in charges table "&chargeType,"Failed", Error_Description ,"")
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/selectRowBasedOnTransId_ChgName_FromChargesTable_PaymentTab","Failed", Error_Description ,"")
// 
// //********************************************************************************************************************************************
// //@methodName: validate_ActivityDateAndDescription_InDefermentPopup(activityDate,activityDesc)
// //@Description: This function is to select the charge based on charges in charges table
// //@Author: Sumithra
// //@Date 17-05-2019
// //Ex:  validate_ActivityDateAndDescription_InDefermentPopup(TodaysDate,activityDesc)
// //*****************************************************************************************************************************************
// validate_ActivityDateAndDescription_InDefermentPopup(String activityDate,String activityDesc)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get row count
	// rowCnt = getRowCount_PbDataWindow("w_view_report","dw_list")
	// for itr = 1 To rowCnt
		// resultFound = False
		// //get activity date and description
		// activity_Date = Split(getValueInPBDataWindow_DP("w_view_report","dw_list","#" + itr ,"activity_date"))(0)
		// activity_Description = getValueInPBDataWindow_DP("w_view_report","dw_list","#" + itr ,"activity_descr")
		// if cdate(activity_Date) = cdate(activityDate) and  activity_Description = activityDesc 
// writeReportLog("Activity date and decription is found at row "& itr &": "&activity_Description,"Passed","","Y")
			// resultFound = True
			// Exit for	
	// if resultFound = False 
	// writeReportLog("Activity date and decription is not found","Failed", Error_Description ,"")
	// //error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/validate_ActivityDateAndDescription_InDefermentPopup","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: validatePaymentToRollAmountInRightPaneOfPaymentTab()
// //@Author: Sumithra
// //@Date 25 June 2018
// //@Description: This function is to validate the Payment To Roll amount in payment tab
// //Ex:  validatePaymentToRollAmountInRightPaneOfPaymentTab()
// //**************************************************************************************************************************
// validatePaymentToRollAmountInRightPaneOfPaymentTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// navigateToTab_CustomerSubTabs("Payment")
	// //get Payment to ROll amount
	// pmtToRollAmount = get_DescriptionValue_In_Rightpane_PaymentTab("Payment to Roll")
	// //get next due date in payment tab
	// DueDate = Split(get_DescriptionValue_In_Rightpane_PaymentTab(" Due"))(0)
	// //click on Payment To Roll option in the right pane of payment tab
	// select_Description_In_Rightpane_PaymentTab("Payment to Roll")
	// //get row count
	// rowcnt = getRowCount_PbDataWindow("w_view_report","dw_list")
	// for itr = rowcnt To 1 step -1
		// //get due date in payment schedule window
		// paidPercentage = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"paid_pct")
		// if paidPercentage > 0 
			// DueDate = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"due_dt")
			// if cdate(DueDate) >= cdate(DueDate) 
			// expectedPmtToRollAmt = 0
			// //close the Payment Schedule window
				// clickButtonInPBWindow("Payment Schedule","Close")
				// //validate
				// validateDataAndReport(ccur(pmtToRollAmount),ccur(expectedPmtToRollAmt),"Payment To Roll amount in right pane of Payment tab")
				// Exit for
		// else
		// //get charge amount
				// LastPaidRowChargeAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"contract_amt")
				// //get charge amount
				// RowChargeAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr+1,"contract_amt")
				// //get paid amount 			
				// LastPaidRowPaidAmt = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"paid_amt")
				// //calculate expected Payment to Roll amount
				// expectedPmtToRollAmt = formatNumber(ccur((0.95*LastPaidRowChargeAmt))-ccur(LastPaidRowPaidAmt))
				// if expectedPmtToRollAmt < 0 
					// expectedPmtToRollAmt = ccur(expectedPmtToRollAmt) + ccur(RowChargeAmt)
				// //close the Payment Schedule window
				// clickButtonInPBWindow("Payment Schedule","Close")
				// //validate
				// validateDataAndReport(ccur(pmtToRollAmount),ccur(expectedPmtToRollAmt),"Payment To Roll amount in right pane of Payment tab")
				// Exit for
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/validatePaymentToRollAmountInRightPaneOfPaymentTab","Failed", Error_Description,"")
// 
// //***************************************************************************************************************************
// //@Method: getTotalPrinicpleBalance_From_PaymentTab()
// //@Author: Sumithra
// //@Date 14th may 2019
// //@Description: This function is to get total principle balance from payment tab
// //Ex:  getTotalPrinicpleBalance_From_PaymentTab()
// //***************************************************************************************************************************
// getTotalPrinicpleBalance_From_PaymentTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// getTotalPrinicpleBalance_From_PaymentTab = getValueInPBDataWindow_DP("w_cust","dw_payments","#1","princ_bal")
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getTotalPrinicpleBalance_From_PaymentTab","Failed", Error_Description,"")
// 
// //********************************************************************************************************************************************
// //@methodName: validate_StaticText_And_HandlePopup(staticText,WindowName,ButtonName)
// //@Description: This function is to handle the popup by validating static text
// //@Author: Sumithra
// //@Date 17-05-2019
// //Ex:  validate_StaticText_And_HandlePopup("Do you want to Waive the selected Charge","Waive Charge","OK")
// //*********************************************************************************************************************************************
// validate_StaticText_And_HandlePopup(String staticText,String WindowName,String ButtonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get static text
	// actStaticText = getStaticText(WindowName)
	// //Replace if any new line date is available
	// actStaticText = Replace(actStaticText, vbNewLine, " ")
	// //validate static text
	// validateDataAndReport(actStaticText,staticText,"Static text : "& actStaticText)
	// //click button in window
	// clickButtonInPBWindow(WindowName,ButtonName)
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/validate_StaticText_And_HandlePopup","Failed", Error_Description,"")
// 
// //**********************************************************************************************
// //@methodName: getRowCount_Of_Description_PaymentTab()
// //@Description: This is to get the number deferments in deferment window
// //@Author: Sumithra
// //@Date 16 May 2019
// //@Returning the row count
// //Ex:  getRowCount_Of_Description_PaymentTab()
// //*********************************************************************************************** 
// getRowCount_Of_Description_PaymentTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get row count
	// getRowCount_Of_Description_PaymentTab = getRowCount_PbDataWindow("w_view_report","dw_list")
	// //error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/getRowCount_Of_Description_PaymentTab","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: addCollectionExpense_PaymentTab(collectionExpenseAmt,payThru,PaymentTo,Reason)
// //@Author: Sumithra
// //@Date 10th may 2019
// //@Description: This function is to add the collection expense amount in Payment tab
// //Ex:  addCollectionExpense_PaymentTab("100","Cash Drawer","User1","Test")
// //***************************************************************************************************************************
// addCollectionExpense_PaymentTab(String collectionExpenseAmt,String payThru,String PaymentTo,String Reason)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Sleep (5)
	// //Clicking on new option
	// clickNewButton()
	// //Selecting new charge option in choose an item window
	// selectValue_From_ChooseAnItem_Popup_ComponentTab("New Charge")
	// //Selecting collection charge from choose an item window
	// selectValue_From_ChooseAnItem_Popup_ComponentTab("COLL_EXP - Collection Expense")												   
	// //Selecting cash drawer from pay collection charge pop up
	// selectChargeTypeFrom_PayCollectionChargePopup_PaymentTab(payThru)
// //	//Entering data in Payment To field
// //	 setValue_CheckbookPayment_window("PAYMENT TO",PaymentTo)
	// setValue_CheckbookPayment_window("PAYMENT TO","#1")
	// //Entering data in amount field
	// setValue_CheckbookPayment_window("AMOUNT",collectionExpenseAmt)
	// //Entering data in reason field
	// setValue_CheckbookPayment_window("REASON",Reason) 
	// //Click on process button
	// clickButtonInPBWindow("Add a charge to the account","Process")
	// //Handling process pop up
	// clickButton_In_Level2Window_forProcessWindow("Add a charge to the account","Process","Yes")
	// Sleep (5)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/addCollectionExpense_PaymentTab","Failed", Error_Description ,"")
// 
// //**********************************************************************************************
// //@methodName: validateData_in_PaymentHistoryTable_PaymentTab(payDate,payMethod,receivedAmt,appliedAmt,principle,other,interest,principleBalance,status,checkNumber,userId)
// //@Description: This function will validate the details in charges table
// //@Author: Sumithra
// //@Date 10 May 2018
// //Ex:  validateData_in_PaymentHistoryTable_PaymentTab(Date,"100","100","-100","-100",0,0,pricipleAmtAfter,"ChrgOff","",userId)
// //***********************************************************************************************
// validateData_in_PaymentHistoryTable_PaymentTab(String payDate,String payMethod,String receivedAmt,String appliedAmt,String exptotalAppliedAmt,String status,String checkNumber,String userId)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Sleep(7)
	// rowCnt = getRowCount_PbDataWindow("w_cust","dw_payments")	
	// found = false
	// for itr = 1  To rowCnt
		// actPayDate = Split(getValueInPBDataWindow_DP("w_cust","dw_payments","#" + itr ,"entry_dt")	)(0)	
		// actPayMethod = getValueInPBDataWindow_DP("w_cust","dw_payments","#" + itr ,"pmt_type")
		// actReceivedAmt = getValueInPBDataWindow_DP("w_cust","dw_payments","#" + itr ,"recvd_amt")
		// actAppliedAmt = getValueInPBDataWindow_DP("w_cust","dw_payments","#" + itr ,"applied_amt")
		// actPrinciple = getValueInPBDataWindow_DP("w_cust","dw_payments","#" + itr ,"princ_amt")
		// actOther = getValueInPBDataWindow_DP("w_cust","dw_payments","#" + itr ,"other_amt")		
		// actInterest = getValueInPBDataWindow_DP("w_cust","dw_payments","#" + itr ,"int_amt")
		// actPrincipleBalance = getValueInPBDataWindow_DP("w_cust","dw_payments","#" + itr ,"princ_bal")
		// PrincipleBalance = getValueInPBDataWindow_DP("w_cust","dw_payments","#" + itr+1 ,"princ_bal")
		// actstatus = getValueInPBDataWindow_DP("w_cust","dw_payments","#" + itr ,"contractual_status")
		// actcheckNumber = getValueInPBDataWindow_DP("w_cust","dw_payments","#" + itr ,"check_nbr")
		// actUserId = Split(getValueInPBDataWindow_DP("w_cust","dw_payments","#" + itr ,"cf_last_chg"))(2)
		// totalAppliedAmt = Ccur(actPrinciple)+ Ccur(actInterest)+ Ccur(actOther)
		// actPrincipleBalance = Ccur(PrincipleBalance)-Ccur(actPrinciple)
		// if status <> "" 
			// //Validating for Data		
			// if cdate(actPayDate) = cdate(payDate) and actPayMethod = payMethod and ccur(actReceivedAmt) = ccur(receivedAmt) and ccur(actAppliedAmt) = ccur(appliedAmt) and ccur(totalAppliedAmt) = ccur(exptotalAppliedAmt) and actStatus = status and actCheckNumber = checkNumber and actUserId = userId 			
				// //Updating Log Report
				// writeReportLog("Payment Details Expected is found at Row >>  " + itr,"Passed", payDate + " " + payMethod& " " + appliedAmt& " " + principleBalance ,"")
				// selectCell_In_PBDatWindow_DP("w_cust","dw_payments","#" + itr ,"entry_dt")
				// found = true
				// Exit for
		// else
			// //Validating for Data		
			// if cdate(actPayDate) = cdate(payDate) and actPayMethod = payMethod and ccur(actReceivedAmt) = ccur(receivedAmt) and ccur(actAppliedAmt) = ccur(appliedAmt) and ccur(totalAppliedAmt) = ccur(exptotalAppliedAmt) and actCheckNumber = checkNumber and actUserId = userId 			
				// writeReportLog("Payment Details Expected is found at Row >>  " + itr,"Passed", payDate + " " + payMethod& " " + appliedAmt& " " + principleBalance ,"")
				// selectCell_In_PBDatWindow_DP("w_cust","dw_payments","#" + itr ,"entry_dt")
				// found = true
				// Exit for
	// //Logger for Failure Scenario
	// if found = false 
		// writeReportLog("Payment Details Could not be Found in Payment history Table","Failed", appliedDate + " " + chargeType& " " + chargeAmount& " " + PaidDate ,"Y")
	// //Error handling 
// if GetErrorCount()>0  			
		// writeReportLog("Failed to validateData_in_PaymentHistoryTable_PaymentTab","Failed", Error_Description ,"")
// 
// //**********************************************************************************************
// //@methodName: validateData_in_ChargesTable_PaymentTab(pmtCharacter,appliedDate, chargeType, chargeAmount, PaidDate, transId)
// //@Description: This function will validate the details in charges table
// //@Author: Sumithra
// //@Date 10 May 2018
// //Ex:  validateData_in_ChargesTable_PaymentTab("P",Date,"Collection Charge",Ccur(100),"","")
// //***********************************************************************************************
// validateData_in_ChargesTable_PaymentTab(String pmtCharacter,String appliedDate,String chargeType,String chargeAmount,String PaidDate,String transId)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Sleep(7)
	// rowCnt = getRowCount_PbDataWindow("w_cust","dw_charges")	
	// found = false
	// for itr = 1  To rowCnt
		// actappliedDate = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"due_dt")		
		// actchargeType = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")
		// actchargeAmount = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_amt")
		// actPaidDate = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"pmt_dt")
		// if actPaidDate <> "" 
			// actPaidDate = cdate(Split(getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"pmt_dt"))(0))
// //		else
// //			actPaidDate = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"pmt_dt")
		// acttransId = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"trans_id")
		// actPmtChar = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"cf_princ_yn")				
		// Sleep (3)
		// //Validating for Data
		// if (actPmtChar = pmtCharacter) and (cdate(actappliedDate) = cdate(appliedDate)) and (actchargeType = chargeType) and (ccur(actchargeAmount) = ccur(chargeAmount)) 			
			// if actPaidDate <> "" 
				// if (cdate(actPaidDate) = cdate(PaidDate)) 
					// found = true
					// Exit for
				// else
					// found = false
			// else
				// found = true
				// Exit for			
			// //Updating Log Report
			// Sleep (3	)
	// //Logger for Failure Scenario
	// if found = false 
		// writeReportLog("Charge Details Could not be Found in Charges Table","Failed", appliedDate + " " + chargeType& " " + chargeAmount& " " + PaidDate ,"")
	// else
		// writeReportLog("Charge Details Expected is found at Row >>  " + itr,"Passed", appliedDate + " " + chargeType& " " + chargeAmount& " " + PaidDate ,"")
		// selectCell_In_PBDatWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")
	// //Error handling 
// if GetErrorCount()>0  			
		// writeReportLog("Failed to validateData_in_ChargesTable_PaymentTab","Failed", Error_Description ,"")
// 
// //********************************************************************************************************************************************
// //@methodName: selectRowBasedOnChargeType_Amount_FromChargesTable_PaymentTab(chgType,chgAmt)
// //@Description: This function is to select the charge based on charge name and amount in charges table
// //@Author: Sumithra
// //@Date 17-05-2019
// //Ex:  selectRowBasedOnChargeType_Amount_FromChargesTable_PaymentTab("Collection Charge","10.00")
// //*********************************************************************************************************************************************
// selectRowBasedOnChargeType_Amount_FromChargesTable_PaymentTab(String chgType,String chgAmt)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Sleep (2)
	// resultFound = False
	// rowCnt = getRowCount_PbDataWindow("w_cust","dw_charges")
	// if  chgAmt = ""  
		// for itr = 1 To rowCnt
			// chg_type = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")
			// if chg_type = chgType 		
	// selectCell_In_PBDatWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")
				// resultFound = True
				// Exit for						
	// else if  chgType = "" 
		// for itr = 1 To rowCnt
			// chg_Amt = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_amt")
			// if ccur(chg_Amt) = ccur(chgAmt) 		
	// selectCell_In_PBDatWindow_DP("w_cust","dw_charges","#" + itr ,"charge_amt")
				// resultFound = True
				// Exit for						
	// else if chgAmt <> "" and chgType <> ""  
		// for itr = 1 To rowCnt
			// chg_type = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")
			// chg_Amt = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_amt")
			// if  ccur(chg_Amt) = ccur(chgAmt) and chg_type = chgType 		
	// selectCell_In_PBDatWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")
				// resultFound = True
				// Exit for						
	// if resultFound = False 
	// writeReportLog("Charge name your searching is not exist in charges table "&chargeType,"Failed", Error_Description ,"")
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/selectRowBasedOnChargeType_Amount_FromChargesTable_PaymentTab","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: getValue_From_ChooseAnItem_Popup()
// //@Author: Sumithra
// //@Date 27 June 2018
// //@Description: This function is to get text from choose an item popup
// //Ex:  getValue_From_ChooseAnItem_Popup()
// //***************************************************************************************************************************
// getValue_From_ChooseAnItem_Popup()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("pbname:=w_chooseone").PbList("pbname:=lb_list").WaitWhileExists(10) 
		// //select value from Choose an item popup
		// getValue_From_ChooseAnItem_Popup = w_bp_frame.PbWindow("pbname:=w_chooseone").PbList("pbname:=lb_list").GetContent 
// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : getValue_From_ChooseAnItem_Popup ","Failed", Error_Description,"")
// 
// //********************************************************************************************************************************************
// //@methodName: selectRowBasedOnTransId_ChgName_FromChargesTable_PaymentTab(transID,chgType)
// //@Description: This function is to select the charge based on transaction id and charge name in charges table
// //@Author: Sumithra
// //@Date 17-05-2019
// //Ex:  selectRowBasedOnTransId_ChgName_FromChargesTable_PaymentTab("01122233","Collection Charge")
// //*********************************************************************************************************************************************
// selectRowBasedOnTransId_ChgName_FromChargesTable_PaymentTab(String transID,String chgType)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Sleep (2)
	// resultFound = False
	// rowCnt = getRowCount_PbDataWindow("w_cust","dw_charges")
	// if transID = ""  
		// for itr = 1 To rowCnt
			// chg_type = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")
			// if chg_type = chgType 		
	// selectCell_In_PBDatWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")
				// resultFound = True
				// Exit for						
	// else if  chgType  = "" 
		// for itr = 1 To rowCnt
			// trans_id = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"trans_id")
			// if Trim(trans_id) = transID 		
	// selectCell_In_PBDatWindow_DP("w_cust","dw_charges","#" + itr ,"trans_id")
				// resultFound = True
				// Exit for						
	// else if transID <> "" and chgType <> ""  
		// for itr = 1 To rowCnt
			// chg_type = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")
			// trans_id = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"trans_id")
			// if Trim(trans_id) = transID and chg_type = chgType 		
	// selectCell_In_PBDatWindow_DP("w_cust","dw_charges","#" + itr ,"trans_id")
				// resultFound = True
				// Exit for						
	// if resultFound = False 
	// writeReportLog("Charge name your searching is not exist in charges table "&chargeType,"Failed", Error_Description ,"")
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/selectRowBasedOnTransId_ChgName_FromChargesTable_PaymentTab","Failed", Error_Description ,"")
// 
// //****************************************************************************************************
// //@method getCountOfCollaterals_From_CollateralTabs
// //@Decription This method will get the Count of Colletrals from the Colletra
// //@author Karthik.Shekar
// //@Return count of Colletrals
// //@EX: getCountOfCollaterals_From_CollateralTabs()
// //***************************************************************************************************** 
// getCountOfCollaterals_From_CollateralTabs()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// getCountOfCollaterals_From_CollateralTabs = getRowCount_PbDataWindow("w_cust","dw_list")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in method getCountOfCollaterals_From_CollateralTabs ","Failed", Error_Description,"")
// 
// //*********************************************************************************************
// //@methodName: getValueFromCollateralTab_forSpecifiedCollateral
// //@Author Karthik
// //@Date 24 July 2019
// //@Description This get the field value for the Field Name specified from Colletral tab (F2 Screen)  for the specified collateral 
// //Ex //msgbox getValueFromCollateralTab_forSpecifiedCollateral(1, "Year")
// //   msgbox getValueFromCollateralTab_forSpecifiedCollateral(2, "Make")
// //   msgbox getValueFromCollateralTab_forSpecifiedCollateral(1, "VIN:")
// //*********************************************************************************************
// getValueFromCollateralTab_forSpecifiedCollateral(String colNumber,String fieldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// fieldID = getFieldIDBasedOnFieldName_CollateralTab(fieldName)
	// //Getting the Collateral Details
	// getValueFromCollateralTab_forSpecifiedCollateral = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list").GetCellData("#" + colNumber,fieldID)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getValueFromCollateralTab","Failed", Error_Description ,"")
// 
// //***********************************************************************************************************************************
// //@Method: clickButton_In_Level2PBwindowTitle_DP(windowNameL1,windowNameL2, buttonName)
// //@Author Chandra
// //@Date 24 May 2019
// //@Description This function is to click on button with 3 level windows 
// //Ex:  clickButton_In_Level2PBwindowTitle_DP(windowNameL1,windowNameL2, buttonName)
// //************************************************************************************************************************************
// clickButton_In_Level2PBwindowTitle_DP(String windowNameL1,String windowNameL2,String buttonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if  w_bp_frame.Pbwindow("title:=" + windowNameL1).PbWindow("title:=" + windowNameL2).PbButton("regexpwndtitle:=&" + buttonName).WaitWhileExists(5) 
		// w_bp_frame.Pbwindow("title:=" + windowNameL1).PbWindow("title:=" + windowNameL2).PbButton("regexpwndtitle:=&" + buttonName).Click()
	// else if w_bp_frame.Pbwindow("title:=" + windowNameL1).PbWindow("title:=" + windowNameL2).PbButton("regexpwndtitle:=" + buttonName).WaitWhileExists(5) 
		// w_bp_frame.Pbwindow("title:=" + windowNameL1).PbWindow("title:=" + windowNameL2).PbButton("regexpwndtitle:=" + buttonName).Click()
	// else
		// writeReportLog("Failed to Click on Button : " + buttonName + " in window: " + windowNameL1,"Failed",FailComments,"Button not found")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/clickButton_In_Level2PBwindowTitle_DP","Failed", Error_Description ,"")
// 
// //***********************************************************************************************************************************
// //@Method: SetValueIn2LevelPBDataWindow_DP(windowName1,windowName2, dataWindowName, rowNumber, colID,value)
// //@Author Sumithra
// //@Date 24 May 2019
// //@Description This function is to set the value in 2 level window
// //Ex:  SetValueIn2LevelPBDataWindow_DP"w_acct_claim_pend_detail","w_search","dw_search","#1","reason",reason)
// //************************************************************************************************************************************
// SetValueIn2LevelPBDataWindow_DP(String windowName1,String windowName2,String dataWindowName,String rowNumber,String colID,String value)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.Pbwindow("pbname:=" + windowName1).Pbwindow("pbname:=" + windowName2).PbDataWindow("pbname:=" + dataWindowName).WaitWhileExists(10) 
		// cellValue = w_bp_frame.Pbwindow("pbname:=" + windowName1).Pbwindow("pbname:=" + windowName2).PbDataWindow("pbname:=" + dataWindowName).SetValue(CellData(rowNumber,colID,value)
		// Sleep (1)
		// if GetErrorCount()>0  			
			// writeReportLog("Failed in step/SetValueIn2LevelPBDataWindow_DP","Failed", Error_Description ,"Y")
		// SetValueIn2LevelPBDataWindow_DP = cellValue
// 
// //***************************************************************************************************************************
// //@Method: clickButton_In_Level1PBwindow_DailogPopup(windowName, dialogName, buttonToClick)
// //@Author: Chandra
// //@Date 31 may 2019
// //@Description: This function is to Click on Button in dailog popup 
// //@Returing the Dailog popup static text
// //Ex:  clickButton_In_Level1PBwindow_DailogPopup("Do Not Contact", Print Option","OK")
// //***************************************************************************************************************************
// clickButton_In_Level1PBwindow_DailogPopup(String windowName,String dialogName,String buttonToClick)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).WaitWhileExists(5) 
		// w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).Click()
	// else if w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).WaitWhileExists(5) 
		// w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).Click()	     				
	// else
		// writeReportLog("Clicking on Button " + buttonToClick + "Failed in Dialog: " + dialogName,"Failed","","Y")	
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to clickButton_In_Level1PBwindow_DailogPopup","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: get_DealerDiscount_AccountTab()
// //@Author Chandra
// //@Date 28 Mar 2019
// //@Description This is get the Dealer Discount amount from Account Tab
// //@Returing the Dealer Reserve amount
// //Ex  get_DealerDiscount_AccountTab()
// //*********************************************************************************************
// get_DealerDiscount_AccountTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// get_DealerDiscount_AccountTab = getValueInPBDataWindow_DP("w_cust", "dw_acct", "#1", "discount_amt")
	// //Error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in get_DealerDiscount_AccountTab","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************
// //@methodName: generating_Cease_CollectionEntryRecordResultValue_forSetNoToYES_InCollectionTab(fldName, customerName, affilType, sourceName)
// //@Author: Chandra
// //@Date 24 July 2019
// //@Description This will get Collection entry records results value for Set NO to YES in collection tab 
// //Ex:  generating_Cease_CollectionEntryRecordResultValue_forSetNoToYES_InCollectionTab(fldName, customerName, affilType, sourceName)
// //***********************************************************************************************************************
// generating_Cease_CollectionEntryRecordResultValue_forSetNoToYES_InCollectionTab(String fldName,String customerName,String affilType,String sourceName,String noteReason)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// idToReturn = null
	// //Fetching ID//s based on Name
	// if fldName = "ALL" 
		// //Get Source ID based on source name
		// sourceID = generating_Cease_SourceID_BasedOnSourceName(sourceName)
		// idToReturn = "Cease All changed from NO to YES for "& customerName &" ("& affilType &")  Source - "& sourceID &" / Note  - "& noteReason &" [ALL]"
	// else if fldName = "ADDRESS" 
		// idToReturn = "By Mail changed from NO to YES for "& customerName &" ("& affilType &")  - "& noteReason &" [ADDRESS]"
	// else if fldName = "CELLPH" 
		// idToReturn = "Cell Phone changed from NO to YES for "& customerName &" ("& affilType &")  - "& noteReason &" [CELLPH]"
	// else if fldName = "HOMEPH" 
		// idToReturn = "Home Phone changed from NO to YES for "& customerName &" ("& affilType &")  - "& noteReason &" [HOMEPH]"
	// else if fldName = "REF" 
		// idToReturn = "References changed from NO to YES for "& customerName &" ("& affilType &")  - "& noteReason &" [REF]"
	// else if fldName = "TEXTNUM" 
		// idToReturn = "Text Number changed from NO to YES for "& customerName &" ("& affilType &")  - "& noteReason &" [TEXTNUM]"
	// else if fldName = "WORKADR" 
		// idToReturn = "Work Address changed from NO to YES for "& customerName &" ("& affilType &")  - "& noteReason &" [WORKADR]"
	// else if fldName = "WORKPH" 
		// idToReturn = "Work Phone changed from NO to YES for "& customerName &" ("& affilType &")  - "& noteReason &" [WORKPH]"
	// generating_Cease_CollectionEntryRecordResultValue_forSetNoToYES_InCollectionTab = idToReturn
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in generating_Cease_CollectionEntryRecordResultValue_forSetNoToYES_InCollectionTab","Failed", Error_Description ,"")
// 
// //***********************************************************************************************************************
// //@methodName: get_LastChgDateTime_FromDoNotContactWindow(rowNumber)
// //@Author: Chandra
// //@Date 24 July 2019
// //@Description This will get the last change date time from do not contact window
// //Ex:  get_LastChgDateTime_FromDoNotContactWindow(1)
// //***********************************************************************************************************************
// get_LastChgDateTime_FromDoNotContactWindow(String rowNumber)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Set tblPBwindow = w_bp_frame.PbWindow("pbname:=w_do_not_contact").PbDataWindow("pbname:=dw_donotcon")
	// lastChgDateTime =  GetValue_PBDataWindow(tblPBwindow,"#" + rowNumber,"compute_1")
	// get_LastChgDateTime_FromDoNotContactWindow = lastChgDateTime
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in get_LastChgDateTime_FromDoNotContactWindow","Failed", Error_Description ,"")
// 
// //***********************************************************************************************************************
// //@methodName: generating_Cease_CollectionEntryRecordValue(lastChangeDtaeTime,fldName, customerName, affilType, sourceName, noteReason)
// //@Author: Chandra
// //@Date 24 July 2019
// //@Description This will get Collection entry records results value based on last time change date time
// //Ex:  generating_Cease_CollectionEntryRecordValue("25/07/2019","ALL", "Albert Bent", "P", "Customer", "Automation Testing")
// //***********************************************************************************************************************
// generating_Cease_CollectionEntryRecordValue(String lastChangeDtaeTime,String fldName,String customerName,String affilType,String sourceName,String noteReason)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if lastChangeDtaeTime = "" 
		// CollEntryResults = generating_Cease_CollectionEntryRecordResultValue_forSetNullToYES_InCollectionTab(fldName, customerName, affilType, sourceName, noteReason)
	// else
		// CollEntryResults = generating_Cease_CollectionEntryRecordResultValue_forSetNoToYES_InCollectionTab(fldName, customerName, affilType, sourceName, noteReason)
	// generating_Cease_CollectionEntryRecordValue = CollEntryResults 
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in get_LastChgDateTime_FromDoNotContactWindow","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: select_DelinquencyType_In_F2Screen_BasedOnId(fieldName,Value)
// //@Author Chandra
// //@Date 22 July 2019
// //@Description This is to Select Deliquency Type in F2 Screen
// //Ex  select_DelinquencyType_In_F2Screen_BasedOnId("Delinquency All","ON")
// //*********************************************************************************************
// select_DelinquencyType_In_F2Screen_BasedOnId(String fieldName,String Value)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// fieldId = getfieldID_CustomerSearch_window(fieldName)
	// //Enter the value the specified field
	// Set CustomerSearchWindow =  w_bp_frame.w_search.PbDataWindow("pbname:=dw_search")
	// if CustomerSearchWindow.IsPresent() 
		// SetValue_PBDataWindow(CustomerSearchWindow, "#1", fieldId,Value)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getValueFromCoApplicantTab","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: getFieldIDBasedOnFieldName_ReferenceTab
// //@Author Chandra
// //@Date 10 July 2019
// //@Description This return the column/field ID for the Field Name specified for Reference tab of F2 Screen
// //Ex  getFieldIDBasedOnFieldName_ReferenceTab("First Name")
// //*********************************************************************************************
// getFieldIDBasedOnFieldName_ReferenceTab(String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Variable
	// idToReturn = null
	// //Fetching ID//s based on Name
	// if fldName = "First Name" 
		// idToReturn = "first_name"
	// else if fldName = "Last Name" 
		// idToReturn = "last_name"
	// else if fldName = "Reference Type" 
		// idToReturn = "cust_ref_type"
	// else if fldName = "Valid To Solicit" 
		// idToReturn = "valid_for_solicit_yn"
	// else if fldName = "Valid To Collect" 
		// idToReturn = "valid_for_collect_yn"
	// else if fldName = "Phone Number1" 	
		// idToReturn = "phone1"
	// else if fldName = "Phone Number2" 	
		// idToReturn = "phone2"
	// else if fldName = "Phone Number3" 	
		// idToReturn = "phone3"
	// else if fldName = "Address" 	
		// idToReturn = "addr1"
	// else if fldName = "Zipcode" 	
		// idToReturn = "zipcode"
	// else
		// writeReportLog("Please pass the Proper parameter value to method getFieldIDBasedOnFieldName_ReferenceTab","Failed","","")
	// getFieldIDBasedOnFieldName_ReferenceTab = idToReturn
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getFieldIDBasedOnFieldName_ReferenceTab","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: setValue_InReferenceTab
// //@Author Chandra
// //@Date 10 July 2019
// //@Description This will Set the Field Value for the Field Name specified from Reference tab of F2 Screen
// //Ex  setValue_InReferenceTab("1","First Name","Albert")
// //*********************************************************************************************
// setValue_InReferenceTab(String rowCount,String fieldName,String fieldValue)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get the Filed id Based on Field Name
	// fieldID = getFieldIDBasedOnFieldName_ReferenceTab(fieldName)
	// //Set value 
	// Set tblwndw = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list")
	// SetValue_PBDataWindow(tblwndw,"#"&rowCount,fieldID,fieldValue)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in setValue_InReferenceTab","Failed", Error_Description ,"")
// 
// //***********************************************************************************************************************
// //@methodName: select_DoNotContactOption_DoNotContactWindow(rowNumber,cellValue)
// //@Author: Chandra
// //@Date 22 May 2018
// //@Description This will Select Do Not Contact option ON/OFF from DoNotContact Window
// //Ex:  select_DoNotContactOption_DoNotContactWindow("1","ON")
// //***********************************************************************************************************************
// select_DoNotContactOption_DoNotContactWindow(String rowNumber,String cellValue)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// SetValueInPBDataWindow_DP("w_do_not_contact", "dw_donotcon", "#"&rowNumber, "contact_ind",cellValue)
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed to select_DoNotContactOption_DoNotContactWindow","Failed", Error_Description,"Y")
// 
// //********************************************************************************************************
// //@methodName: is_Level2PBdatwindow_Available(windowName1,windowName2)
// //@Author: Chandra
// //@Date: 27 May 2018
// //@Description This will validate the 2 level pb window is available
// //Ex:  is_Level2PBdatwindow_Available("Do Not Contact","Print Option")
// //********************************************************************************************************
// is_Level2PBdatwindow_Available(String windowName1,String windowName2)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if  w_bp_frame.PbWindow("regexpwndtitle:=" + windowName1).PbWindow("regexpwndtitle:=" + windowName2).WaitWhileExists(10) 
		// is_Level2PBdatwindow_Available = True
	// else
		// is_Level2PBdatwindow_Available = False
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/is_Level2PBdatwindow_Available","Failed", Error_Description ,"")
// 
// //***********************************************************************************************************************************
// //@Method: clickButton_In_Level2PBwindow_DP(windowNameL1,windowNameL2, buttonName)
// //@Author Chandra
// //@Date 24 May 2019
// //@Description This function is to click on button with 3 level windows for process window
// //Ex:  clickButton_In_Level2PBwindow_DP(windowNameL1,windowNameL2, buttonName)
// //************************************************************************************************************************************
// clickButton_In_Level2PBwindow_DP(String windowNameL1,String windowNameL2,String buttonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if  w_bp_frame.Pbwindow("pbname:=" + windowNameL1).PbWindow("pbname:=" + windowNameL2).PbButton("regexpwndtitle:=&" + buttonName).WaitWhileExists(5) 
		// w_bp_frame.Pbwindow("pbname:=" + windowNameL1).PbWindow("pbname:=" + windowNameL2).PbButton("regexpwndtitle:=&" + buttonName).Click()
	// else if w_bp_frame.Pbwindow("pbname:=" + windowNameL1).PbWindow("pbname:=" + windowNameL2).PbButton("regexpwndtitle:=" + buttonName).WaitWhileExists(5) 
		// w_bp_frame.Pbwindow("pbname:=" + windowNameL1).PbWindow("pbname:=" + windowNameL2).PbButton("regexpwndtitle:=" + buttonName).Click()
	// else
		// writeReportLog("Failed to Click on Button : " + buttonName + " in window: " + windowNameL1,"Failed",FailComments,"Button not found")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/clickButton_In_Level2PBwindow_DP","Failed", Error_Description ,"")
// 
// //*************************************************************************************************************************************************
// //@methodName: validate_StaticText_In_Level2PBWindow_DialogPopup(windowName1,windowName2, dialogName, staticText, buttonToClick)
// //@Author Chandra
// //@Date 24 May 2018
// //@Description This will validate the Dialog popup, Static test in 2 level pbwindow dialog popup and click on button 
// //Ex:  validate_StaticText_In_DialogPopup("Print Option", "Selection Error", "You must select at least one option to hit the OK button.", "OK")
// //*************************************************************************************************************************************************
// validate_StaticText_In_Level2PBWindow_DialogPopup(String windowName1,String windowName2,String dialogName,String staticText,String buttonToClick)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("regexpwndtitle:="& windowName1).PbWindow("regexpwndtitle:="& windowName2).Dialog("regexpwndtitle:="& dialogName).Static("regexpwndtitle:=" + staticText).WaitWhileExists 
		// //get static text
		// w_bp_frame.PbWindow("regexpwndtitle:="& windowName1).PbWindow("regexpwndtitle:="& windowName2).Dialog("regexpwndtitle:="& dialogName).Static("regexpwndtitle:="& staticText).GetAttr("Text")
		// writeReportLog("As expected, Static Text displayed in popup: //"  + staticText + "// is available in Dialog: //" + dialogName + "//","Passed","","Y")
		// Sleep(2)
		// //Clicking on Button
		// if w_bp_frame.PbWindow("regexpwndtitle:="& windowName1).PbWindow("regexpwndtitle:="& windowName2).Dialog("regexpwndtitle:="& dialogName).WinButton("regexpwndtitle:=" + buttonToClick).WaitWhileExists(5) 
			// w_bp_frame.PbWindow("regexpwndtitle:="& windowName1).PbWindow("regexpwndtitle:="& windowName2).Dialog("regexpwndtitle:="& dialogName).WinButton("regexpwndtitle:=" + buttonToClick).Click()
		// else if w_bp_frame.PbWindow("regexpwndtitle:="& windowName1).PbWindow("regexpwndtitle:="& windowName2).Dialog("regexpwndtitle:="& dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).WaitWhileExists(5) 
			// w_bp_frame.PbWindow("regexpwndtitle:="& windowName1).PbWindow("regexpwndtitle:="& windowName2).Dialog("regexpwndtitle:="& dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).Click()	     				
		// else
			// writeReportLog("Clicking on Button " + buttonToClick + "Failed in Dialog: " + dialogName,"Failed","","Y")	
	// else
		// writeReportLog("Dialog Popup //" + dialogName + "// in window //"&windowName1&"// does not exist","Failed","","Y")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to validate_StaticText_In_Level2PBWindow_DialogPopup","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: getStaticText_Level2PBwindow(windowName1, windowName2)
// //@Author: Chandra
// //@Date 14th may 2019
// //@Description: This function is to get the statis text in 2 level pb window
// //Ex:  getStaticText_Level2PBwindow("Do Not Contact","Validation")
// //***************************************************************************************************************************
// getStaticText_Level2PBwindow(String windowName1,String windowName2)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("regexpwndtitle:=" + windowName1).PbWindow("regexpwndtitle:=" + windowName2).WaitWhileExists(5) 
		// //get static text
		// getStaticText_Level2PBwindow = w_bp_frame.PbWindow("regexpwndtitle:=" + windowName1).PbWindow("regexpwndtitle:=" + windowName2).WinEditor("nativeclass:=Edit","index:=1").GetAttr( ("text")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/getStaticText_Level2PBwindow","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: validate_popup_WithOut_UnCheckCeaseAll(windowName, dialogName, staticText, buttonToClick)
// //@Author: Chandra
// //@Date 31 may 2019
// //@Description: This function is to get statix text from level 1 pb window dailog popup 
// //@Returing the Dailog popup static text
// //Ex:  validate_popup_WithOut_UnCheckCeaseAll("Do Not Contact", Print Option")
// //***************************************************************************************************************************
// get_StaticText_Level1PBwindow_DialogPopup(String windowName,String dialogName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("regexpwndtitle:="& dialogName).WaitWhileExists(10) 
		// //get static text
		// StaticMesssage = w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("regexpwndtitle:="& dialogName).Static("nativeclass:=Static","index:=1").GetAttr("Text")
		// get_StaticText_Level1PBwindow_DialogPopup = StaticMesssage
	// else if w_bp_frame.PbWindow("regexpwndtitle:=.*"& windowName).Dialog("regexpwndtitle:="& dialogName).WaitWhileExists(2) 
		// //get static text
		// StaticMesssage1 = w_bp_frame.PbWindow("regexpwndtitle:=.*"& windowName).Dialog("regexpwndtitle:="& dialogName).Static("nativeclass:=Static","index:=1").GetAttr("Text")
		// get_StaticText_Level1PBwindow_DialogPopup = StaticMesssage1
	// else
		// writeReportLog("Dialog Popup //" + dialogName + "// does not exist","Failed","","Y")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to get_StaticText_Level1PBwindow_DialogPopup","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: clickButton_In_Level1PBwindow_DailogPopup(windowName, dialogName, buttonToClick)
// //@Author: Chandra
// //@Date 31 may 2019
// //@Description: This function is to Click on Button in dailog popup 
// //@Returing the Dailog popup static text
// //Ex:  clickButton_In_Level1PBwindow_DailogPopup("Do Not Contact", Print Option","OK")
// //***************************************************************************************************************************
// clickButton_In_Level1PBwindow_DailogPopup(String windowName,String dialogName,String buttonToClick)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).WaitWhileExists(5) 
		// w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).Click()
	// else if w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).WaitWhileExists(5) 
		// w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).Click()	     				
	// else
		// writeReportLog("Clicking on Button " + buttonToClick + "Failed in Dialog: " + dialogName,"Failed","","Y")	
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to clickButton_In_Level1PBwindow_DailogPopup","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: select_SourceValue_In_DoNotContactWindow(rowNumber,sourceValue)
// //@Author: Chandra
// //@Date 04 may 2019
// //@Description: This function is to Select Source value form DoNotContact window
// //Ex:  select_SourceValue_In_DoNotContactWindow("1","Customer notified")
	// // select_SourceValue_In_DoNotContactWindow("9","Customer notified")
// //***************************************************************************************************************************
// select_SourceValue_In_DoNotContactWindow(String rowNumber,String sourceValue)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //Enter Source value 
	// SetValueInPBDataWindow_DP("w_do_not_contact", "dw_donotcon", "#" + rowNumber, "source",sourceValue)	
// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to select_SourceValue_In_DoNotContactWindow","Failed", Error_Description ,"")
// 
// //***********************************************************************************************************************
// //@methodName: validate_Label_In_CustomerSubTabs(tabName,labelName, customMsg)
// //@Author: Ambika
// //@Date 28 May 2019
// //@Description This will Navigate + validate label in customer sub tabs
// //Ex:  validate_Label_In_CustomerSubTabs("Account","Do Not Contact Torry James (P)", "Validation of Do Not Contact Label in Account Tab: ")
// //***********************************************************************************************************************
// validate_Label_In_CustomerSubTabs(String tabName,String labelName,String customMsg)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Navigate to Tab
	// navigateToTab_CustomerSubTabs(tabName)
	// //Get Label name from customer sub tab
	// act_Label = get_Label_FromCustomerSubTabs()
	// //Validating the actual and expected Label
	// // validateDataAndReport(Trim(act_Label),Trim(labelName),customMsg)
	// //Handled in this way becuse 9.6.0 onwards we are getting Mulitple Banner Text
	// if IndexOf(act_Label,labelName) > 0 
		// writeReportLog("As expected banner Text " + labelName + " is Displayed","Passed",customMsg,"")	
	// else
		// writeReportLog("Banner Text " + labelName + " is not Displayed","Failed","Actual banner Text: " + act_Label,"")
	// //Error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/: validate_Label_In_CustomerSubTabs","Failed", Error_Description ,"")
// 
// //***********************************************************************************************************************
// //@methodName: generating_Cease_CollectionEntryRecordResultValue_forSetNullToYES_InCollectionTab(fldName, customerName, affilType, sourceName)
// //@Author: Chandra
// //@Date 16 July 2019
// //@Description This will get Collection entry records in collection tab 
// //Ex:  generating_Cease_CollectionEntryRecordResultValue_forSetNullToYES_InCollectionTab(fldName, customerName, affilType, sourceName)
// //***********************************************************************************************************************
// generating_Cease_CollectionEntryRecordResultValue_forSetNullToYES_InCollectionTab(String fldName,String customerName,String affilType,String sourceName,String noteReason)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// idToReturn = null
	// //Fetching ID//s based on Name
	// if fldName = "ALL" 
		// //Get Source ID based on source name
		// sourceID = generating_Cease_SourceID_BasedOnSourceName(sourceName)
		// idToReturn = "Cease All set to YES for "& customerName &" ("& affilType &")  Source - "& sourceID &" / Note  - "& noteReason &" [ALL]"
	// else if fldName = "ADDRESS" 
		// idToReturn = "By Mail set to YES for "& customerName &" ("& affilType &")  - "& noteReason &" [ADDRESS]"
	// else if fldName = "CELLPH" 
		// idToReturn = "Cell Phone set to YES for "& customerName &" ("& affilType &")  - "& noteReason &" [CELLPH]"
	// else if fldName = "HOMEPH" 
		// idToReturn = "Home Phone set to YES for "& customerName &" ("& affilType &")  - "& noteReason &" [HOMEPH]"
	// else if fldName = "REF" 
		// idToReturn = "References set to YES for "& customerName &" ("& affilType &")  - "& noteReason &" [REF]"
	// else if fldName = "TEXTNUM" 
		// idToReturn = "Text Number set to YES for "& customerName &" ("& affilType &")  - "& noteReason &" [TEXTNUM]"
	// else if fldName = "WORKADR" 
		// idToReturn = "Work Address set to YES for "& customerName &" ("& affilType &")  - "& noteReason &" [WORKADR]"
	// else if fldName = "WORKPH" 
		// idToReturn = "Work Phone set to YES for "& customerName &" ("& affilType &")  - "& noteReason &" [WORKPH]"
	// generating_Cease_CollectionEntryRecordResultValue_forSetNullToYES_InCollectionTab = idToReturn
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in generating_Cease_CollectionEntryRecordResultValue_forSetNullToYES_InCollectionTab","Failed", Error_Description ,"")
// 
// //***********************************************************************************************************************
// //@methodName: generating_Cease_SourceID_BasedOnSourceName(fldName)
// //@Author: Chandra
// //@Date 16 July 2019
// //@Description This will get Source ID Based on Source Name 
// //Ex:  generating_Cease_SourceID_BasedOnSourceName("Attorney notified")
// //***********************************************************************************************************************
// generating_Cease_SourceID_BasedOnSourceName(String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// idToReturn = null
	// //Fetching ID//s based on Name
	// if fldName = "Attorney notified" 
		// idToReturn = "LAWYER "
	// else if fldName = "Company (PFS)" 
		// idToReturn = "COMPANY"
	// else if fldName = "Customer notified" 
		// idToReturn = "CUSTOMER"
	// generating_Cease_SourceID_BasedOnSourceName = idToReturn
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in generating_Cease_SourceID_BasedOnSourceName","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: get_StaticText_In_DialogPopup(dialogName)
// //@Author: Chandra
// //@Date 31 may 2019
// //@Description: This function is to get statix text from level 1 pb window dailog popup 
// //@Returing the Dailog popup static text
// //Ex:  get_StaticText_In_DialogPopup("Customer Contact Warning")
// //***************************************************************************************************************************
// get_StaticText_In_DialogPopup(String dialogName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.Dialog("regexpwndtitle:="& dialogName).WaitWhileExists 
		// //get static text
		// StaticMesssage = w_bp_frame.Dialog("regexpwndtitle:="& dialogName).Static("nativeclass:=Static","index:=1").GetAttr("Text")
		// get_StaticText_In_DialogPopup = StaticMesssage
	// else
		// writeReportLog("Dialog Popup //" + dialogName + "// does not exist","Failed","","Y")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to get_StaticText_In_DialogPopup","Failed", Error_Description ,"")
// 
// //*****************************************************************************************************************
// //@methodName: setValue_In_CustomerTab(fldName,fieldValue)
// //@Author Chandra
// //@Date 10 July 2018
// //@Description This will verify the Opted Out field in Customer Tab
// //Ex:  setValue_In_CustomerTab("First Name","Albert")
// //*****************************************************************************************************************
// // setValue_In_CustomerTab(String fldName,String fieldValue)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // //Get Field ID Based on File Name 
	// // Coll_ID = getFieldIDBasedOnFieldName_CustomerTab(fldName)
	// // //Set value in Customer Tab
	// // Set tblwndw = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_cust")
	// // SetValue_PBDataWindow(tblwndw,"#1",Coll_ID,fieldValue)
	// // //Error Handling
	// // if GetErrorCount()>0 
		// // writeReportLog("Failed Step/Function: setValue_In_CustomerTab","Failed", Error_Description,"Y")
// 
// //*********************************************************************************************
// //@methodName: getRowCount_FromReferenceTab
// //@Author Chandra
// //@Date 10 July 2019
// //@Description This will get the Rowcount from Reference tab of F2 Screen
// //Ex  getRowCount_FromReferenceTab()
// //*********************************************************************************************
// getRowCount_FromReferenceTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get Row Count 
	// getRowCount_FromReferenceTab = getRowCount_PbDataWindow("w_cust","dw_list")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed Step/Function: getRowCount_FromReferenceTab","Failed", Error_Description,"Y")
// 
// //*********************************************************************************************
// //@methodName: getValueFromReferenceTab
// //@Author Chandra
// //@Date 10 July 2019
// //@Description This will get the Field Value for the Field Name specified from Reference tab of F2 Screen
// //Ex  getValueFromReferenceTab("First Name","1")
// //*********************************************************************************************
// getValueFromReferenceTab(String fieldName,String rowCount)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get the Filed id Based on Field Name
	// fieldID = getFieldIDBasedOnFieldName_ReferenceTab(fieldName)
	// //get references value 
	// Set tblwndw = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list")
	// getValueFromReferenceTab = GetValue_PBDataWindow(tblwndw,"#"&rowCount,fieldID)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getValueFromReferenceTab","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: click_Button_InDoNotContactWindow(buttonName)
// //@Author Chandra
// //@Date 22 July 2019
// //@Description This is to click button in Do Not Contact window
// //Ex  click_Button_InDoNotContactWindow("Ok")
// //*********************************************************************************************
// click_Button_InDoNotContactWindow(String buttonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Click on OK Button 
	// clickButton_In_Level2PBwindow_DP("w_do_not_contact", "w_search",buttonName)	
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to click_Button_InDoNotContactWindow","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: enter_Notes_In_DoNotContactWindow(rowNumber,CellValue)
// //@Author Chandra
// //@Date 10 July 2019
// //@Description This return the column/field ID for the Field Name specified for Reference tab of F2 Screen
// //Ex  enter_Notes_In_DoNotContactWindow(rowNumber,CellValue)
// //*********************************************************************************************
// enter_Notes_In_DoNotContactWindow(String rowNumber,String CellValue)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// note_Reason = w_bp_frame.Pbwindow("pbname:=w_do_not_contact").PbDataWindow("pbname:=dw_donotcon").GetCellData("#"& rowNumber, "note")
	// //if Note reason is empty to enter the value 
	// if Trim(note_Reason) = "" 
		// //Activaate cell(Double click) on Note
		// w_bp_frame.Pbwindow("pbname:=w_do_not_contact").PbDataWindow("pbname:=dw_donotcon").SetActive()Cell"#"& rowNumber, "note"
		// //Enter Notes in Do Not Contact window
		// Set tblPBDataWindow = w_bp_frame.Pbwindow("pbname:=w_do_not_contact").PbWindow("pbname:=w_search").PbDataWindow("pbname:=dw_search")
		// SetValue_PBDataWindow(tblPBDataWindow,"#1","reason_expand",CellValue)
		// //Click on OK button 
		// click_Button_InDoNotContactWindow("Ok")
		// //Returing the value
		// enter_Notes_In_DoNotContactWindow = CellValue
	// else
		// enter_Notes_In_DoNotContactWindow = note_Reason
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to enter_Notes_In_DoNotContactWindow","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: validate_CeaseAll_WarningPopup_InDoNotContactWindow(windowName, dialogName, staticText, buttonToClick)
// //@Author: Chandra
// //@Date 31 may 2019
// //@Description: This function is to validate popup with out select uncheck all checbox in Do Not Contact Window
// //Ex:  validate_CeaseAll_WarningPopup_InDoNotContactWindow("Do Not Contact", "#32771", staticText, "OK")
// //***************************************************************************************************************************
// validate_CeaseAll_WarningPopup_InDoNotContactWindow(String windowName,String dialogName,String staticText,String buttonToClick)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("nativeclass:="& dialogName).WaitWhileExists 
		// //get static text
		// StaticMesssage = w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("nativeclass:="& dialogName).Static("nativeclass:=Static","index:=1").GetAttr("Text")
		// //Replace if any new line date is available
		// StaticMesssage = Replace(StaticMesssage, vbNewLine, " ")
		// //Logger
		// validateDataAndReport(StaticMesssage,staticText, "Validation Static Text displayed in popup")
		// writeReportLog("As expected, Static Text displayed in popup: //"  + StaticMesssage + "// is available in Dialog","Passed","","Y")
		// Sleep(2)
		// //Clicking on Button
		// if w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("nativeclass:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).WaitWhileExists(5) 
			// w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("nativeclass:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).Click()
		// else if w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("nativeclass:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).WaitWhileExists(5) 
			// w_bp_frame.PbWindow("regexpwndtitle:="& windowName).Dialog("nativeclass:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).Click()	     				
		// else
			// writeReportLog("Clicking on Button " + buttonToClick + "Failed in Dialog: " + dialogName,"Failed","","Y")	
	// else
		// writeReportLog("Dialog Popup //" + dialogName + "// does not exist","Failed","","Y")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to validate_CeaseAll_WarningPopup_InDoNotContactWindow","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: validate_DialogStaticText_BasedOn_DialogRegPwdClass(dialogName, staticText, buttonToClick)
// //@Author: Chandra
// //@Date 23 July 2019
// //@Description: This function is to validate Dialog static text based on dialog property //regexpclass// in Do Not Contact Window
// //Ex:  validate_DialogStaticText_BasedOn_DialogRegPwdClass("Do Not Contact", staticText, "OK")
// //***************************************************************************************************************************
// validate_DialogStaticText_BasedOn_DialogRegPwdClass(String dialogName,String staticText,String buttonToClick)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.Dialog("regexpwndclass:="& dialogName).WaitWhileExists 
		// //get static text
		// StaticMesssage = w_bp_frame.Dialog("regexpwndclass:="& dialogName).Static("nativeclass:=Static","index:=1").GetAttr("Text")
		// //Replace if any new line date is available
		// StaticMesssage = Replace(StaticMesssage, vbNewLine, " ")
		// //Logger
		// validateDataAndReport(StaticMesssage,staticText, "Validation Static Text displayed in popup")
		// writeReportLog("As expected, Static Text displayed in popup: //"  + StaticMesssage + "// is available in Dialog","Passed","","Y")
		// Sleep(2)
		// //Clicking on Button
		// if w_bp_frame.Dialog("regexpwndclass:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).WaitWhileExists(5) 
			// w_bp_frame.Dialog("regexpwndclass:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).Click()
		// else if w_bp_frame.Dialog("regexpwndclass:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).WaitWhileExists(5) 
			// w_bp_frame.Dialog("regexpwndclass:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).Click()	     				
		// else
			// writeReportLog("Clicking on Button " + buttonToClick + "Failed in Dialog: " + dialogName,"Failed","","Y")	
	// else
		// writeReportLog("Dialog Popup //" + dialogName + "// does not exist","Failed","","Y")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to validate_DialogStaticText_BasedOn_DialogRegPwdClass","Failed", Error_Description ,"")
// 
// //***********************************************************************************************************************
// //@methodName: toSelect_Row_ElectronicPayments_Window(exploanNumber)
// //@Author: GG
// //@Date: 6 MAR 2019
// //@Description: This is to select the Row Based on Loan Number depening on Window Name and Data Window Name
// //Ex  toSelect_Row_ElectronicPayments_Window("087400009300")
// //************************************************************************************************************************
// toSelect_Row_ElectronicPayments_Window(String exploanNumber)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //To select a row in Electronic Payments Window
	// toSelect_Row_ElectronicPayments_Window = selectRow_BasedOnLoanNumber_InWindow(exploanNumber,"w_online_payment","dw_payments")
	// //Error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/Function: toSelect_Row_ElectronicPayments_Window","Failed", Error_Description ,"")
// 
// //*********************************************************GENERIC FUNCTION***************************************************************
// //@methodName: selectRow_BasedOnLoanNumber_InWindow(exploanNumber,windowName,dataWindowName)
// //@Author: GG
// //@Date: 6 MAR 2019
// //@Description: This is to select the Row Based on Loan Number depening on Window Name and Data Window Name
// //Ex  selectRow_BasedOnLoanNumber_InWindow("087400009300","w_online_payment","dw_payments")
// //****************************************************************************************************************************************
// selectRow_BasedOnLoanNumber_InWindow(String exploanNumber,String windowName,String dataWindowName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("PbName:="& windowName).PbDataWindow("PbName:=" + dataWindowName).WaitWhileExists(10) 	
		// //get row count
		// rowcnt = getRowCount_PbDataWindow(windowName,dataWindowName)
		// Flag = False
		// for itr = 1 To rowcnt 
			// //get application number
			// actLoanNumber = getValueInPBDataWindow_DP(windowName,dataWindowName,"#"&itr,"loan_nbr")
			// actPaytmDate = getValueInPBDataWindow_DP(windowName,dataWindowName,"#"&itr,"payment_date")
			// expDate = getTodaysDate_mmddyyyy_format()    
			// //comparing the Application number
			// if actLoanNumber = exploanNumber and Cdate(actPaytmDate) = Cdate(expDate) 
				// //Select source id based on Iteration
				// selectCell_In_PBDatWindow_DP(windowName,dataWindowName,"#"&itr,"payment_date")
				// Sleep (5)
				// Flag = True
				// Exit for
		// if Flag = False 
			// writeReportLog("Loan Number does not exist in window : "& windowName,"Failed", Error_Description ,"")
	// else
	// writeReportLog(""& windowName &" window does not exist","Failed", Error_Description ,"")
	// selectRow_BasedOnLoanNumber_InWindow = itr
	// //Error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/Function: selectRow_BasedOnLoanNumber_InWindow","Failed", Error_Description ,"")
// 
// //**********************************************************************************************
// //@methodName: handle_Dialog_Popup_With_buttonName(DialogName, buttonName)
// //@Description: This function will handle the dialog pop up wrt dialog name and button name
// //@Date 06 Mar 2019
// //@Author: GG
// //Ex:  handle_Dialog_Popup_With_buttonName("WARNING - Settle Account","Yes")
// //**********************************************************************************************
// handle_Dialog_Popup_With_buttonName(String DialogName,String buttonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.Dialog("text:=" + DialogName).WaitWhileExists(5) 
		// popupStaticText = w_bp_frame.Dialog("text:=" + DialogName).Static("nativeclass:=static","index:=1").GetAttr("Text")
		// if w_bp_frame.Dialog("text:=" + DialogName).WinButton("text:=" + buttonName).WaitWhileExists(5) 
			// w_bp_frame.Dialog("text:=" + DialogName).WinButton("text:=" + buttonName).Click()
		// else if w_bp_frame.Dialog("text:=" + DialogName).WinButton("text:=&" + buttonName).WaitWhileExists(1) 
			// w_bp_frame.Dialog("text:=" + DialogName).WinButton("text:=&" + buttonName).Click()
		// handle_Dialog_Popup_With_buttonName = popupStaticText
	// //Error handling 
// if GetErrorCount()>0  			
		// writeReportLog("Failed to handle_Dialog_Popup_With_buttonName","Failed", Error_Description ,"")
// 
// //*****************************************************************************************************************
// //@methodName: get_LoanNumber_ElectronicPayments_Window()
// //@Author: GG
// //@Date: 06 Mar 2019
// //@Description This is to fetch the Loan Number from Electronic Payments Window
// //Ex:  get_LoanNumber_ElectronicPayments_Window()
// //*****************************************************************************************************************
// get_LoanNumber_ElectronicPayments_Window()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //To get the row Number in Electronic Payments Window
	// rowNum = getRowCount_PbDataWindow("w_online_payment","dw_payments")
	// if rowNum = "" || rowNum = "0" 
		// writeReportLog("Non Processed Loans for Electronic Payments are not found, Please Insert Electronic payments in DB","Failed",Error_Description,"")  
	// else
		// //To get the Loan Number from Electronic Payments Window
		// get_LoanNumber_ElectronicPayments_Window = getValueInPBDataWindow_DP("w_online_payment","dw_payments","#"&rowNum,"loan_nbr")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/get_LoanNumber_ElectronicPayments_Window","Failed", Error_Description ,"")
// 
// //*****************************************************************************************************************
// //@methodName: search_ElectronicPayments_In_ElectronicPaymentsSearch_Popup(Processed,loanNumber,CustomerName,paymentStartDate,paymentEndDate,ProcessDateFrom,ProcessDateTo)
// //@Author: GG
// //@Date: 06 Mar 2019
// //@Description This is to Search Electronic Payments in Electronic payments Window
// //Ex:  search_ElectronicPayments_In_ElectronicPaymentsSearch_Popup("06/05/2019","137700123658","Tylore","06/05/2019","06/05/2019","06/05/2019","06/05/2019")
// //***************************************************************************************************************** 
// search_ElectronicPayments_In_ElectronicPaymentsSearch_Popup(String Processed,String loanNumber,String CustomerName,String paymentStartDate,String paymentEndDate,String ProcessDateFrom,String ProcessDateTo)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Set custTable = w_bp_frame.w_search.PbDataWindow("PbName:=dw_search")
	// if Processed <> "" 
		// //select processed radio button
		// custTable.SetValue(CellData "#1","processed_yn",Processed
	// if loanNumber <> "" 
		// //enter application number
		// custTable.SetValue(CellData "#1","loan_nbr",loanNumber
	// if CustomerName <> "" 
		// //enter customer name
		// custTable.SetValue(CellData "#1","customer_name",CustomerName
	// if paymentStartDate <> "" 
		// //Enter dealer name
		// custTable.SetValue(CellData "#1","pmt_start_dt",paymentStartDate	
	// if paymentEndDate <> "" 
		// //enter contract Date From
		// custTable.SetValue(CellData "#1","pmt_end_dt",paymentEndDate
	// if ProcessDateFrom <> "" 
		// //enter processed date from
		// custTable.SetValue(CellData "#1","process_start",ProcessDateFrom
	// if ProcessDateTo <> "" 		
		// //enter process date to
		// custTable.SetValue(CellData "#1","process_end",ProcessDateTo
	// //click on ok button
	// clickButton_InWindow("w_search","OK")
	// //Error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/Function: search_ElectronicPayments_In_ElectronicPaymentsSearch_Popup","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: get_TotalDueTodayAmt_PaymentTab()
// //@Author: GG
// //@Date: 3 FEB 2019
// //@Description: This is to get the Total Due Today Amount in Payment Tab
// //Ex  get_TotalDueTodayAmt_PaymentTab()
// //*********************************************************************************************
// get_TotalDueTodayAmt_PaymentTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //To get Total Due Today Amount from Payment Tab
	// get_TotalDueTodayAmt_PaymentTab = getValueInPBDataWindow_DP("w_cust","dw_list","#16","cc_value")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/get_TotalDueTodayAmt_PaymentTab","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: validateContentIn_NoticeOf_LateFee_form(loanNumber, customerName, collateral, payOffBal, currentDate)
// //@Author Chandra
// //@Date 1 July 2019
// //@Description This will validate the Loan Number, Customer Name and Collateral , Date, Amount Due Today Details in the LateFee Notice form
// //Ex  validateContentIn_NoticeOf_LateFee_form("1601156029","TIM John","2014/Kia/Soul/Base VIN:KNDJN2A26E7746761","$3500.00", "06/28/2019")
// //*********************************************************************************************
// validateContentIn_NoticeOf_LateFee_form(String loanNumber,String customerName,String collateral,String amtDueToday,String currentDate)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //getting loan Number
	// actLoanNumber = getValue_From_Reportsforms("loan_nbr")
	// validateDataAndReport(Trim(actLoanNumber), Trim(loanNumber), "REPORT: Validation of //Loan Number//")
	// //Fetch Cust Name
	// actCustName = getValue_From_Reportsforms("compute_1")
	// customerName = "Dear "& customerName &":"
	// validateDataAndReport(ToUpper(actCustName), ToUpper(customerName), "REPORT: Validation of //Customer Name//")
	// //Fetch Colletral Data
	// actCollDetails = getValue_From_Reportsforms("colltrl_descr")
	// validateDataAndReport(Trim(actCollDetails), Trim(collateral), "REPORT: Validation of //Collateral Details//")
	// //Fetch Amount Due Today Balance
	// actAmtDue = getValue_From_Reportsforms("compute_2")
	// //if total amount due today is 0.00
	// if amtDueToday = "$0.00" 
		// amtDueToday = "0.00"
		// actAmtDue = "0.00"
	// validateDataAndReport(Ccur(actAmtDue), Ccur(amtDueToday), "REPORT: Validation of //Amount Due Today//")
	// //Fetch Current Date
	// actDate = getValue_From_Reportsforms("date_today")
	// actDate = Split(actDate," ")
	// actNewDate = actDate(0)
	// validateDataAndReport(Trim(actNewDate), Trim(currentDate), "REPORT: Validation of //Collateral Details//")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in method validateContentIn_NoticeOf_LateFee_form ","Failed", Error_Description,"")
// 
// //*********************************************************************************************
// //@methodName: get_ContentIn_NoticeOf_LateFee_form
// //@Author Chandra
// //@Date 01 July 2019
// //@Description This will Get the content form Late Fee Notice form
// //Ex get_ContentIn_NoticeOf_LateFee_form(pragraphDesc1,pragraphDesc2)
// //*********************************************************************************************
// get_ContentIn_NoticeOf_LateFee_form(String ByRef pragraphDesc1,String ByRef pragraphDesc2)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //getting Content of Late Fee Notice form
	// pragraphDesc1 = getValue_From_Reportsforms("cc_1")
	// pragraphDesc2 = getValue_From_Reportsforms("compute_3") 
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in method get_ContentIn_NoticeOf_LateFee_form ","Failed", Error_Description,"")
// 
// //********************************************************************************************************************************************
// //@methodName: get_DescriptionValue_In_Rightpane_PaymentTab(LabelName)
// //@Description: This function is to get description value in the right pane of payment tab
// //@Author: Sumithra
// //@Date 20-03-2019
// //Ex:  get_DescriptionValue_In_Rightpane_PaymentTab("Payoff")
// //*********************************************************************************************************************************************
// get_DescriptionValue_In_Rightpane_PaymentTab(String LabelName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get row count
	// rowcount = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list").RowCount
	// for itr = 1 to rowcount 
		// //get label name
		// cellValue = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list").GetCellData("#"&itr,"label_value")
		// if Trim(cellValue) = Trim(LabelName) 
			// //get cell values
			// get_DescriptionValue_In_Rightpane_PaymentTab = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list").GetCellData( "#"&itr,"cc_value")			 
			// Exit for
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/get_DescriptionValue_In_Rightpane_PaymentTab","Failed", Error_Description ,"")
// 
// //********************************************************************************************************************************************
// //@methodName: getChgAppliedDate_Amount_BasedOnTransId_chgName_PaymentTab(transID,chgType,byref chargeAppliedDate,byref ChargeAmount)
// //@Description: This function is to get the charge applied date and charge amount in payment tab
// //@Author: Sumithra
// //@Date 16-05-2019
// //Ex:  getChgAppliedDate_Amount_BasedOnTransId_chgName_PaymentTab(transID,chgType,chargeAppliedDate,ChargeAmount)
// //********************************************************************************************************
// getChgAppliedDate_Amount_BasedOnTransId_chgName_PaymentTab(String transID,String chgType,String byref chargeAppliedDate,String byref ChargeAmount)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Sleep (5)
	// resultFound = False
	// rowCnt = getRowCount_PbDataWindow("w_cust","dw_charges")
	// if transID = ""  
		// for itr = 1 To rowCnt
			// chg_type = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")
			// if chg_type = chgType 		
	// if  paidDate = "" 
			// chargeAppliedDate = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"due_dt")
			// ChargeAmount = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_amt")
					// resultFound = True
					// Exit for
	// else if chgType = "" 
		// for itr = 1 To rowCnt
			// trans_id = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"trans_id")
			// if Trim(trans_id) = transID 		
	// if  paidDate = "" 
			// chargeAppliedDate = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"due_dt")
			// ChargeAmount = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_amt")
					// resultFound = True
					// Exit for
	// else if transID <> "" and chgType <> ""  
		// for itr = 1 To rowCnt
			// chg_type = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")
			// trans_id = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"trans_id")
			// if Trim(trans_id) = transID and chg_type = chgType 		
	// if  paidDate = "" 
			// chargeAppliedDate = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"due_dt")
			// ChargeAmount = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_amt")
					// resultFound = True
					// Exit for
	// if resultFound = False 
	// writeReportLog("Charge name your searching is not exist in charges table "&chargeType,"Failed", Error_Description ,"")
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/getChgAppliedDate_Amount_BasedOnTransId_chgName_PaymentTab","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: select_Judgment_CheckBox_InAccountTab(valueToSet)
// //@Author Chandra
// //@Date 09 Sep 2019
// //@Description This is to Select Judgment Checkbox in Account tab
// //Ex:  select_Judgment_CheckBox_InAccountTab("ON")
// //*********************************************************************************************
// select_Judgment_CheckBox_InAccountTab(String valueToSet)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Select Judgmwnt checkbox in accounttab
	// SetValueInPBDataWindow_DP("w_cust", "dw_acct", "#1", "judgment_yn",valueToSet)
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/select_Judgment_CheckBox_InAccountTab","Failed", Error_Description ,"Y")
// 
// //*********************************************************************************************
// //@methodName: enter_Judgment_Date_InAccountTab(valueToSet)
// //@Author Chandra
// //@Date 09 Sep 2019
// //@Description This is to Enter Judgment date in Account tab
// //@update: Updated window name, Datawindow name, Col Id
// //@Modified by Arun Prakash R M 03 Dec 2021
// //Ex:  enter_Judgment_Date_InAccountTab("09/09/2019")
// //*********************************************************************************************
// enter_Judgment_Date_InAccountTab(String valueToSet)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get Date in Specified formate
	// DateToSet = formatDateWithSpecifiedDelimeter(valueToSet,"MMDDYYYY","/")
	// //Enter Judgmwnt Date in accounttab
		// // typeText_In_PBDatWindow_DP("w_cust", "dw_acct", "#1", "judgment_dt",DateToSet)
		// typeText_In_PBDatWindow_DP("w_account_judgment_tracking", "dw_list", "#1", "judgment_date",DateToSet)
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/enter_Judgment_Date_InAccountTab","Failed", Error_Description ,"Y")
// 
// //*****************************************************************************************************************************************
// //@methodName: enter_ReasonforChanging_EstimatedRecovery_In_AccountTab(reason)
// //@Description: This function is to enter reason for changing estimated recovery amount 
// //@Author: Sumithra
// //@Date 01 Aug 2019
// //Ex:  enter_ReasonforChanging_EstimatedRecovery_In_AccountTab("test")
// //*****************************************************************************************************************************************
// enter_ReasonforChanging_EstimatedRecovery_In_AccountTab(String reason)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Sleep (5)
	// if w_bp_frame.w_search.WinEditor("regexpwndclass:=Edit").WaitWhileExists(10) 
		// w_bp_frame.CreditDecisionSearchWindow.dw_search.SetValue(CellData "#1","reason",reason
		// w_bp_frame.w_search.PbButton("regexpwndtitle:=Ok").Click()
	// else if w_bp_frame.Pbwindow("pbname:=w_acct_claim_pend_detail").Pbwindow("pbname:=w_search").WinEditor("regexpwndclass:=Edit").WaitWhileExists(10) 
		// w_bp_frame.PbWindow("pbname:=w_acct_claim_pend_detail").PbWindow("pbname:=w_search").PbDataWindow("pbname:=dw_search").SetValue(CellData "#1","reason",reason
		// w_bp_frame.Pbwindow("pbname:=w_acct_claim_pend_detail").Pbwindow("pbname:=w_search").PbButton("regexpwndtitle:=Ok").Click()
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/enter_ReasonforChanging_EstimatedRecovery_In_AccountTab","Failed", Error_Description,"")
// 
// //********************************************************************************************************************************************
// //@methodName: validate_StaticText_And_HandlePopup(staticText,WindowName,ButtonName)
// //@Description: This function is to handle the popup by validating static text
// //@Author: Sumithra
// //@Date 17-05-2019
// //Ex:  validate_StaticText_And_HandlePopup("Do you want to Waive the selected Charge","Waive Charge","OK")
// //*********************************************************************************************************************************************
// validate_StaticText_And_Handle_DailogPopup(String staticText,String WindowName,String DialogName,String ButtonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get static text
	// actStaticText = Replace(getStaticText_From_DialogWindow(WindowName,DialogName),vbcrlf,"")
	// //validate static text
	// validateDataAndReport(actStaticText,staticText,"Static text : "& actStaticText)
	// handle_Dialog(DialogName,ButtonName)
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/validate_StaticText_And_Handle_DailogPopup","Failed", Error_Description,"")
// 
// //********************************************************************************************************************************************
// //@methodName: getStaticText_From_DialogWindow(windowName,DialogName)
// //@Description: This function is to get static text from dialog
// //@Author: Sumithra
// //@Date 17-05-2019
// //Ex:  getStaticText_From_DialogWindow("Payment","BranchPlus")
// //*********************************************************************************************************************************************
// getStaticText_From_DialogWindow(String windowName,String DialogName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("regexpwndtitle:=" + windowName).Dialog("regexpwndtitle:="& DialogName).WaitWhileExists(5) 
		// //get static text
		// getStaticText_From_DialogWindow =w_bp_frame.PbWindow("regexpwndtitle:=" + windowName).Dialog("regexpwndtitle:="& DialogName).Static("nativeclass:=static","index:=1").GetAttr( ("text")
	// else
		// writeReportLog("Window " + windowName + "and dialog "& DialogName &" does not exist","Failed","","")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/getStaticText_From_DialogWindow","Failed", Error_Description ,"")
// 
// //********************************************************************************************************************************************
// //@methodName: clickOn_InsuranceClaimLink_AccountTab()
// //@Description: This function is to click on Insurance link in account tab
// //@Author: Sumithra
// //@Date 1-08-2019
// //Ex:  clickOn_InsuranceClaimLink_AccountTab()
// //*********************************************************************************************************************************************
// clickOn_InsuranceClaimLink_AccountTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// claimStatus = get_InsuranceClaimStatus_InAccountTab()
	// if claimStatus = "OFF" 
		// SetValueInPBDataWindow_DP("w_cust","dw_acct","#1","claim_yn","ON")
	// else
		// SetValueInPBDataWindow_DP("w_cust","dw_acct","#1","claim_yn","OFF")
	// Sleep (2)
	// //Error handling
	// if GetErrorCount()>0  			
			// writeReportLog("Failed in step/clickOn_InsuranceClaimLink_AccountTab","Failed", Error_Description ,"Y")
// 
// //********************************************************************************************************************************************
// //@methodName: get_InsuranceClaimStatus_InAccountTab()
// //@Description: This function is to get Insurance claim status in account tab
// //@Author: Sumithra
// //@Date 01-08-2019
// //Ex:  get_InsuranceClaimStatus_InAccountTab()
// //*********************************************************************************************************************************************
// get_InsuranceClaimStatus_InAccountTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// get_InsuranceClaimStatus_InAccountTab =getValueInPBDataWindow_DP("w_cust","dw_acct","#1","claim_yn")
	// //Error handling
	// if GetErrorCount()>0  			
			// writeReportLog("Failed in step/get_InsuranceClaimStatus_InAccountTab","Failed", Error_Description ,"Y")
// 
// //********************************************************************************************************************************************
// //@methodName: enter_Data_In_InsuranceClaimPending_Window(field,Value,rowNumber)
// //@Description: This function is to enter data in Insurance Pending claim window
// //@Author: Sumithra
// //@Date 01-08-2019
// //Ex:  enter_Data_In_InsuranceClaimPending_Window("Active Claim","ON",1)
// //*********************************************************************************************************************************************
// enter_Data_In_InsuranceClaimPending_Window(String field,String Value,String rowNumber)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Select Case field		
		// Case "Active Claim"
		// columnName = "claim_yn"
	// Case "Claim Status"
		// columnName = "claim_status"
		// Case "Claim Type"
			// columnName = "claim_type"
		// Case "Ins Company"
			// columnName = "ins_company"
		// Case "Ins Claim ID"
			// columnName = "ins_claim_id"
		// Case "Reason"
			// columnName = "ins_reason"
		// Case "Ins Claim Date"
			// columnName = "claim_dt"
		// Case "Ins Claim Amt"
			// columnName = "claim_amt"
		// Case else
			// writeReportLog("Column Name is not exist for method: enter_Data_In_InsuranceClaimPending_Window","Failed", Error_Description ,"Y")
	// Select
	// if field =  "Ins Claim Date" 
		// typeText_In_PBDatWindow_DP("w_acct_claim_pend_detail","dw_list","#"&rowNumber,columnName,Value)
	// else
		// SetValueInPBDataWindow_DP("w_acct_claim_pend_detail","dw_list","#"&rowNumber,columnName,Value)	
		// Sleep (2)
	// Sleep (2)
	// //Error handling
	// if GetErrorCount()>0  			
			// writeReportLog("Failed in step/enter_Data_In_InsuranceClaimPending_Window","Failed", Error_Description ,"Y")
// 
// //********************************************************************************************************************************************
// //@methodName: enter_InsuranceClaimPending_Details_AccountTab(rowNumber,ClaimType,InsCompany,InsClaimId,Reason,InsCLaimDate,InsClaimAmt,ActiveClaim)
// //@Description: This function is to enter data in Insurance Pending claim window
// //@Author: Sumithra
// //@Date 01-08-2019
// //Ex:  enter_InsuranceClaimPending_Details_AccountTab(1,"Total Loss","Kotak","1",Reason,InsCLaimDate,InsClaimAmt,"ON")
// //*********************************************************************************************************************************************
// enter_InsuranceClaimPending_Details_AccountTab(String rowNumber,String ClaimType,String InsCompany,String InsClaimId,String Reason,String InsCLaimDate,String InsClaimAmt,String ActiveClaim)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //fetch app version
	// appVersionWithoutDot = Trim(Replace(System.GetEnvVar("appVersion"),".",""))
	// SetValueInPBDataWindow_DP("w_acct_claim_pend_detail","dw_list","#"&rowNumber,"claim_type",ClaimType)
	// SetValueInPBDataWindow_DP("w_acct_claim_pend_detail","dw_list","#"&rowNumber,"ins_company",InsCompany)
	// SetValueInPBDataWindow_DP("w_acct_claim_pend_detail","dw_list","#"&rowNumber,"ins_claim_id",InsClaimId)
	// SetValueInPBDataWindow_DP("w_acct_claim_pend_detail","dw_list","#"&rowNumber,"ins_reason",Reason)
	// typeText_In_PBDatWindow_DP("w_acct_claim_pend_detail","dw_list","#"&rowNumber,"claim_dt",InsCLaimDate)
	// SetValueInPBDataWindow_DP("w_acct_claim_pend_detail","dw_list","#"&rowNumber,"claim_amt",InsClaimAmt)
// //	 SetValueInPBDataWindow_DP("w_acct_claim_pend_detail","dw_list","#"&rowNumber,"claim_yn",ActiveClaim)
	// if appVersionWithoutDot <= "970" 
		// SetValueInPBDataWindow_DP("w_acct_claim_pend_detail","dw_list","#"&rowNumber,"claim_yn",ActiveClaim)
	// else
		// SetValueInPBDataWindow_DP("w_acct_claim_pend_detail","dw_list","#"&rowNumber,"claim_status",ActiveClaim)
	// //Error handling
	// if GetErrorCount()>0  			
			// writeReportLog("Failed in step/enter_InsuranceClaimPending_Details_AccountTab","Failed", Error_Description ,"Y")
// 
// //********************************************************************************************************************************************
// //@methodName: enter_EstimatedRecoveryAmount_In_InsPendingClaim_Popup(EstimatedRecoveryAmt)
// //@Description: This function is to enter estimated recovery amount in ins urance pending claim popup
// //@Author: Sumithra
// //@Date 01-08-2019
// //Ex:  enter_EstimatedRecoveryAmount_In_InsPendingClaim_Popup("100")
// //*********************************************************************************************************************************************
// enter_EstimatedRecoveryAmount_In_InsPendingClaim_Popup(String EstimatedRecoveryAmt)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// w_bp_frame.PbWindow("Pbname:=w_acct_claim_pend_detail").PbEdit("pbname:=sle_repo_est_recovery").SetValue( EstimatedRecoveryAmt
	// //Error handling
	// if GetErrorCount()>0  			
			// writeReportLog("Failed in step/enter_EstimatedRecoveryAmount_In_InsPendingClaim_Popup","Failed", Error_Description ,"Y")
// 
// //********************************************************************************************************************************************
// //@methodName: deletePendingClaim()
// //@Description: This function is to delete Pending claims
// //@Author: Sumithra
// //@Date 01-08-2019
// //Ex:  deletePendingClaim()
// //*********************************************************************************************************************************************
// deletePendingClaim()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// clickOn_InsuranceClaimLink_AccountTab()
	// Sleep (1)
		// rowcnt = getPendingInsClaim_Count()
		// for itr = 1 To rowcnt
			// selectCell_In_PBDatWindow_DP("w_acct_claim_pend_detail","dw_list","#"&itr,"ins_reason")
			// Sleep (2)
			// clickButton_InWindow("w_acct_claim_pend_detail","Delete")	
			// Sleep (2)
			// if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("pbname:=w_acct_claim_pend_detail").Pbwindow("pbname:=w_message").WaitWhileExists(2)  
				// Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("pbname:=w_acct_claim_pend_detail").Pbwindow("pbname:=w_message").PbButton("text:=&Yes").Click() 
			// else
			// Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("pbname:=w_message").PbButton("text:=&Yes").Click() 
		// clickButton_InWindow("w_acct_claim_pend_detail","OK")
	// clickOnSaveButon()
	// //Error handling
	// if GetErrorCount()>0  			
			// writeReportLog("Failed in step/deletePendingClaim","Failed", Error_Description ,"Y")
// 
// //********************************************************************************************************************************************
// //@methodName: getPendingInsClaim_Count()
// //@Description: This function is to get Insurance claim count
// //@Author: Sumithra
// //@Date 01-08-2019
// //Ex:  getPendingInsClaim_Count()
// //*********************************************************************************************************************************************
// getPendingInsClaim_Count()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// getPendingInsClaim_Count = getRowCount_PbDataWindow("w_acct_claim_pend_detail","dw_list")
	// //Error handling
	// if GetErrorCount()>0  			
			// writeReportLog("Failed in step/getPendingInsClaim_Count","Failed", Error_Description ,"Y")
// 
// //***********************************************************************************************************************
// //@methodName: enterChargeOffSkipMnth_And_ChrageOffReason_In_CollateralTab(skipMonth,skipReason)
// //@Description: This function is to enter Charge off skip month and reason for charge off in collateral tab
// //@Author: Sumithra
// //@Date 28 May 2019
// //Ex:  enterChargeOffSkipMnth_And_ChrageOffReason_In_CollateralTab("5",skipReason)
// //***********************************************************************************************************************
// enterChargeOffSkipMnth_And_ChrageOffReason_In_CollateralTab(String skipMonth,String skipReason)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// SetValueInPBDataWindow_DP("w_cust","dw_acct","#1","charge_off_months",skipMonth)
	// SetValueInPBDataWindow_DP("w_cust","dw_acct","#1","charge_off_reason_code",skipReason)
	// //Error handling
	// if GetErrorCount()>0  			
			// writeReportLog("Failed in step/enterChargeOffSkipMnth_And_ChrageOffReason_In_CollateralTab","Failed", Error_Description ,"Y")
// 
// //******************************************************************************************************************************************
// //@methodName: enter_ExpenseAmount_Details_Collateral_Screen(RetakingPrice,HoldingPrice,DispositionPreparePrice,SalePrice,AttorneyPrice)
// //@Description: This function is to enter expense amount details in collateral screen
// //@Author: Sumithra
// //@Date 14-01-2019
// //Ex:  enter_ExpenseAmount_Details_Collateral_Screen(RetakingPrice,HoldingPrice,DispositionPreparePrice,SalePrice,AttorneyPrice)
// //*******************************************************************************************************************************************
// enter_ExpenseAmount_Details_Collateral_Screen(String RetakingPrice,String HoldingPrice,String DispositionPreparePrice,String SalePrice,String AttorneyPrice)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Set PbRepoCarWindow = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list")
	// //Wait until Pb window is visible
	// PbRepoCarWindow.IsPresent()
	// //Enter Estimated Recovery
	// SetValue_PBDataWindow(PbRepoCarWindow,"#1","exp_retaking",RetakingPrice)
	// //Enter Ending Mileage
	// SetValue_PBDataWindow(PbRepoCarWindow,"#1","exp_holding",HoldingPrice)
	// //Enter Sales Status
	// SetValue_PBDataWindow(PbRepoCarWindow,"#1","exp_prep_disposition",DispositionPreparePrice)
	// //Enter Sales Price
	// SetValue_PBDataWindow(PbRepoCarWindow,"#1","exp_of_sale",SalePrice)
	// //Enter Sales Price
	// SetValue_PBDataWindow(PbRepoCarWindow,"#1","attorney_fee",AttorneyPrice)
	// //Click on Save Button
	// clickOnSaveButon()
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/enter_RepoCar_Details_Collateral_Screen","Failed", Error_Description,"")
// 
// ////******************************************************************************************************************************************
// ////@methodName: setValue_In_ConsiderforLoss_In_CollateralTab(activity_type)
// ////@Description: This function is to set  value in consider for loss field
// ////@Author: Sumithra
// ////@Date 14-01-2019
// //
// ////Ex:  setValue_In_ConsiderforLoss_In_CollateralTab("ON")
// ////*******************************************************************************************************************************************
// setValue_In_ConsiderforLoss_In_CollateralTab(String activity_type)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Sleep (2)
	// Set tblPBDataWindow = BranchPlus.CustomerF2Window.dw_acct
	// //Select Activity Type
	// SetValue_PBDataWindow(tblPBDataWindow,"#1","consider_for_loss_yn",activity_type)
	// //Error Handling
	// if GetErrorCount()>0 
			// writeReportLog("Failed: setValue_In_ConsiderforLoss_In_CollateralTab","Failed", Error_Description,"")
// 
// //*****************************************************************************************************************************************
// //@methodName: cancel_Component_From_ComponentTab(ComponentName,CancelDate)
// //@Description: This function Will cancel the Component 
// //@Author: Sumithra
// //@Date 01 Aug 2019
// //Ex:  cancel_Component_From_ComponentTab("PFS GAP",todayDate)
// //*****************************************************************************************************************************************
// cancel_Component_From_ComponentTab(String ComponentName,String CancelDate)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Navigate to Component tab
	// navigateToTab("Component")
	// //click on cancel button
	// clickCancelButton()
			// if w_bp_frame.PbWindow("pbname:=w_message").WinEditor("regexpwndtitle:=There are no active components to cancel.").WaitWhileExists(3) 
				// w_bp_frame.PbWindow("pbname:=w_message").PbButton("regexpwndtitle:=OK").Click()
			// else
				// rowCount = getRowCount_PbDataWindow("w_cancel_component","dw_component")
				// for iterator = 1 To rowCount
						// //get component description name
					// descname = getValueInPBDataWindow_DP("w_cancel_component","dw_component","#" + iterator ,"descr")	
					// if descname = ComponentName || IndexOf(ComponentName,"Service") 
					// selectCell_In_PBDatWindow_DP("w_cancel_component","dw_component","#" + iterator ,"descr")
					// //w_bp_frame.PbWindow("pbname:=w_cancel_component").PbDataWindow("pbname:=w_cancel_component").SetValue(CellData "#1","cancel_dt",CancelDate
						// if IndexOf(ComponentName,"Service") 							
							// SetValueInPBDataWindow_DP("w_cancel_component","dw_cancel","#1","start_miles","2")
							// SetValueInPBDataWindow_DP("w_cancel_component","dw_cancel","#1","current_miles","5")							
						// //click on cancel component button
						// clickButton_InWindow("w_cancel_component","C&ancel Component")
						// //click on yes button in cancel popup
						// click_Button_InWindow_DP("w_cancel_component","w_message","Yes")	
						// //click on OK button in cancel popup
						// click_Button_InWindow_DP("w_cancel_component","w_message","OK")						
						// //click on No in payment coupon popup
						// click_Button_InWindow_if_WindowExistDP("w_cancel_component","w_message","No")						
						// //click on cancel button in late charge adjustement popup
						// click_Button_InWindow_if_WindowExistDP("w_cancel_component","w_late_charge_adjustment","Cancel")
						// // click_Button_InWindow_DP("w_cancel_component","w_late_charge_adjustment","Cancel")
						// //click on close button in component to cancel popup
						// clickButton_InWindow("w_cancel_component","Close")
						// flag =1			
						// Exit for
	// clickButton_Level1PBwindow_DP("Choose Account Component to Cancel","Close")
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : cancel_Component_From_ComponentTab ","Failed", Error_Description,"")
// 
// //*****************************************************************************************************************************************
// //@methodName: EnetrCollectionActivity_CollectionTab(activityType,activityCode,PromiseDate,PromiseAmount,Note)
// //@Description: This function will enter the collection activity details in Collection tab
// //@Author: Sumithra
// //@Date 15 June 2019
// //Ex:  EnetrCollectionActivity_CollectionTab("Promis","PPO","2019/07/02","500","")
// //*****************************************************************************************************************************************  
// EnetrCollectionActivity_CollectionTab(String activityType,String activityCode,String PromiseDate,String PromiseAmount,String Note)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Sleep (3)
	// Set tblPBDataWindow = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_note")
	// Sleep (3)
	// //Select Activity Type
	// SetValue_PBDataWindow(tblPBDataWindow,"#1","activity_type",activityType)
	// //Select Activity Code
	// TypeText_PBDataWindow(tblPBDataWindow,"#1","#5",activityCode)	
	// Sleep (2)
	// //To type text in Note Editor
	// if activity_type = "Notes" || activity_type = "Instructions" 
		// TypeText_Note_CollectionWindow(Note)
	// if ToUpper(activityType) = "PROMISE" 
		// Sleep (4)
		// PromiseDate =formatDateWithSpecifiedDelimeter(PromiseDate,"MMDDYYYY","/")
		// //Code to set future date and time(promise date) for "Promise" Activity
		// SetValue_PBDataWindow(tblPBDataWindow, "#1","promise_dt",PromiseDate)
		// Sleep (2)
		// //To enter amount in promise Amount field
		// SetValue_PBDataWindow(tblPBDataWindow,"#1","promise_amt",PromiseAmount)		
	// //Click on save button
	// clickOnSaveButon()
	// Sleep (2)
	// //Error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in EnetrCollectionActivity_CollectionTab","Failed", Error_Description,"")
// 
// //*********************************************************************************************
// //@methodName: getValueFromPaymentTab(rowCount,fieldName)
// //@Author Chandra
// //@Date 25 Sep 2019
// //@Description This will get the Field Value for the Field Name specified from Payment tab of F2 Screen
// //Ex  getValueFromPaymentTab("1","Pay Date")
// //*********************************************************************************************
// getValueFromPaymentTab(String rowCount,String fieldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get Field ID from Payment 
	// fieldID = getFieldIDBasedOnFieldName_PaymentTab(fieldName)
	// //Select Cell in Payment History Table
	// selectCell_In_PBDatWindow_DP("w_cust","dw_payments","#" + rowCount,fieldID)
	// //Getting the Payment Details
	// getValueFromPaymentTab = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_payments").GetCellData("#" + rowCount,fieldID)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getValueFromPaymentTab","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: getFieldIDBasedOnFieldName_PaymentTab
// //@Author Chandra
// //@Date 25 Sep 2019
// //@Description This return the column/field ID for the Field Name specified for Payment tab of F2 Screen
// //Ex  getFieldIDBasedOnFieldName_PaymentTab("Entry Date")
// //*********************************************************************************************
// getFieldIDBasedOnFieldName_PaymentTab(String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Variable
	// idToReturn = null
	// //Fetching ID//s based on Name
	// if fldName = "Entry Date" || fldName = "Pay Date" 
		// idToReturn = "entry_dt"
	// else if fldName = "Payment Type" 
		// idToReturn = "pmt_type"
	// else if fldName = "Received Amount" 
		// idToReturn = "recvd_amt"
	// else if fldName = "Applied Amount" 
		// idToReturn = "applied_amt"
	// else if fldName = "Paid Thru Date" 
		// idToReturn = "paid_thru_dt"
	// else if fldName = "Principal Amount" || fldName = "Principal" 	
		// idToReturn = "cf_princ_amt"
	// else if fldName = "Other Amount" || fldName = "Other" 	
		// idToReturn = "cf_other_amt"
	// else if fldName = "Interest Amount" || fldName = "Interest" 	
		// idToReturn = "cf_int_amt"
	// else if fldName = "Principal Balance" || fldName = "Principal Bal" 	
		// idToReturn = "princ_bal"
	// else if fldName = "Contractual Status" || fldName = "Status" 	
		// idToReturn = "contractual_status"
	// else if fldName = "Check Number" || fldName = "Check #" 	
		// idToReturn = "check_nbr"
	// else if fldName = "Trans ID" || fldName = "Transaction ID" 	
		// idToReturn = "trans_id"
	// else if fldName = "Trans Date" 	
		// idToReturn = "cf_last_chg"
	// else if fldName = "Type" 	
		// idToReturn = "charge_type"
	// else if fldName = "Charge" 	
		// idToReturn = "charge_amt"
	// else if fldName = "Paid" 	
		// idToReturn = "paid_amt"
	// else if fldName = "TransactionID" 	
		// idToReturn = "trans_id"
	// else
		// writeReportLog("Please pass the Proper parameter value to method getFieldIDBasedOnFieldName_PaymentTab","Failed","","")
	// getFieldIDBasedOnFieldName_PaymentTab = idToReturn
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getFieldIDBasedOnFieldName_PaymentTab","Failed", Error_Description ,"")
// 
// //**************************************************************************************************************************************************
// //@Method: reverse_Process_DoNotCreditToCustomer(Payment_Reason)
// //@Author Ranjitha N
// //@Date 1 Oct 2018
// //@Description This function will reverse the debit card payment for Donot credit to customer option
// // reverse_Process_DoNotCreditToCustomer("Test")
// //************************************************************************************************************************************************** 
// reverse_Process_DoNotCreditToCustomer(String Payment_Reason)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Click on //reverse// button
	// clickOnButton_Reverse()
	// //Click on Yes Button
	// clickButton_InWindow("w_message","Yes")
	// //Select //reverse payment no credit//Payment Option
	// selectPaymentOption("Reverse Payment - No credit to customer//s bank account")
	// //Handle //Audit Payment Reversal Response// Window and 
	// TypeText_ReversePaymentReasonWindow(Payment_Reason)
	// //Handle Back - date Audit Response window
	// TypeText_ReversePaymentReasonWindow(Payment_Reason)
// //Error handling 
// if GetErrorCount()>0  			
		// writeReportLog("Failed to reverse_Process_DoNotCreditToCustomer","Failed", Error_Description ,"")
// RemoveFunction
// //**************************************************************************************************************************************************
// //@Method: selectPaymentOption(paymentOption)
// //@Author Ranjitha N
// //@Date 1 Oct 2018
// //@Description This function is to select debit reverse payment option
// // selectPaymentOption(paymentOption)
// //************************************************************************************************************************************************** 
// selectPaymentOption(paymentOption)	
// //Select Reverse Payment - No Credit Radio Button
	// selectRadioButton("w_debit_reverse_payment_response",paymentOption)	
	// //Click on //Ok// Button
	// clickButton_InWindow("w_debit_reverse_payment_response","OK")	
	// //Error Handling    
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/Function: selectPaymentOption","Failed", Error_Description ,"")
// 
// //*******************************************GENERIC FUNCTIOn************************************************************************************
// //@Method: selectRadioButton(windowName,radioButtonName)	
// //@Author Ranjitha N
// //@Date 1 Oct 2018
// //@Description This function is to select radio button in specific window
// // selectRadioButton(windowName,radioButtonName)	
// //**************************************************************************************************************************************************
// selectRadioButton(String windowName,String radioButtonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("pbname:="&windowName).PbRadioButton("text:="&radioButtonName).WaitWhileExists(5) 
		// w_bp_frame.PbWindow("pbname:="&windowName).PbRadioButton("text:="&radioButtonName).IsPresent()
		// //Select new loan radio button
		// w_bp_frame.PbWindow("pbname:="&windowName).PbRadioButton("text:="&radioButtonName).Click()
	// else
		// writeReportLog("Radio button " +  radioButtonName +  " not Found in the window " + windowName + " Please verify","Failed",FailComments,"YES")
	// //Error Handling    
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/Function: selectRadioButton","Failed", Error_Description ,"")
// 
// //***************************************************************************************
// //@MethodName openAutoDealerFromPBTree_InAutoDealerSetup
// //@Author Karthik Shekar
// //@Description This method will select the Auto Dealer in the Auto Dealer Setup Page from 
// //			  PBTreeView irrespective of case specified
// //@Param TreePath (Case Insensetive)
// //@Date 18 Oct 2019
// //EX:  openAutoDealerFromPBTree_InAutoDealerSetup("Auto Dealers;Auto 1-Madison")
// //EX:  openAutoDealerFromPBTree_InAutoDealerSetup("Auto Dealers;auto 1-madison")
// //***************************************************************************************
// openAutoDealerFromPBTree_InAutoDealerSetup(String reportPath)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// indivNode = Split(reportPath,";")	
	// //Setting.WebPackage("ReplayType") = 2
	// cntOfNodes = w_bp_frame.PbWindow("pbname:=w_dealer_setup").PbTreeView("pbname:=tv_dealer").GetAttr("")  Need to provide Attr Name
	// found = false
	// for itr = 0 To cntOfNodes-1 Step 1
		// nodeName = w_bp_frame.PbWindow("pbname:=w_dealer_setup").PbTreeView("pbname:=tv_dealer").GetItem(itr)
		// //Selecting the Node
		// if ToUpper(nodeName) = ToUpper(indivNode(1)) 			
			// found = true
			// w_bp_frame.PbWindow("pbname:=w_dealer_setup").PbTreeView("pbname:=tv_dealer").Select(itr)
			// Exit for
	// //Handling if Data not found
	// if found = false 
		// writeReportLog("Auto Dealer " + indivNode(1) + " is not available in Auto Dealer Setup Window" ,"Failed","","")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed to openAutoDealerFromPBTree_InAutoDealerSetup","Failed", Error_Description,"")
// 
// //*******************************************************************************************
// //@Method Name isDealerName_HasDuplicate_InAutoDealerSetUp
// //@Description This function will identify if there are duplicate Auto Dealer in the Auto Dealer Setup Window
// //@Author Karthik.Shekar
// //@Date 22 Oct 2019
// //@Param treePath
// //@Return return True if there are Duplicate else return false
// //msgbox isDealerName_HasDuplicate_InAutoDealerSetUp("Auto Dealers;Auto 1-Madison")
// //msgbox isDealerName_HasDuplicate_InAutoDealerSetUp("Auto Dealers;TOYOTA OF GASTONIA")
// //**********************************************************************************************
// isDealerName_HasDuplicate_InAutoDealerSetUp(String treePath)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// indivNode = Split(treePath,";")	
	// //Setting.WebPackage("ReplayType") = 2
// //Fetching Count of Auto dealers
	// cntOfNodes = w_bp_frame.PbWindow("pbname:=w_dealer_setup").PbTreeView("pbname:=tv_dealer").GetAttr("")  Need to provide Attr Name
	// //Counter
	// cntOfDealers = 0
	// //Identifying if there are duplicates
	// for itr = 0 To cntOfNodes-1 Step 1
		// nodeName = w_bp_frame.PbWindow("pbname:=w_dealer_setup").PbTreeView("pbname:=tv_dealer").GetItem(itr)
		// //Selecting the Node
		// if ToUpper(nodeName) = ToUpper(indivNode(1)) 			
			// //Increasing the Count
			// cntOfDealers = cntOfDealers + 1
	// //Identifying Duplicate Dealer
	// if cntOfDealers > 1 
		// isDealerName_HasDuplicate_InAutoDealerSetUp = True
	// else
		// isDealerName_HasDuplicate_InAutoDealerSetUp = False	
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed to openAutoDealerFromPBTree_InAutoDealerSetup","Failed", Error_Description,"")
// 
// //***********************************************************************************************
// //@method  identify_NonEmpty_DealerReserve
// //@Description This mehtod will identify the the Non Empty dealer reserve in case of Duplicate Auto Dealers available.
// //				else it will select the Reserve Tab of Auto Dealer
// //@Author Karthik.Shekar
// //@Date 22 Oct 2019
// //EX:  identify_NonEmpty_DealerReserve("Auto Dealers;TOYOTA OF GASTONIA")
// //************************************************************************************************
// identify_NonEmpty_DealerReserve(String dealerTreePath)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Navigating to Dealer Reserve
	// navigateToTab_AutoDealerSetup_Window("Reserve")
	// if isDealerName_HasDuplicate_InAutoDealerSetUp(dealerTreePath) = True 
		// rowCnt = getRowCount_PbDataWindow("w_dealer_setup","dw_list")
		// Sleep(3)
		// if rowCnt = 0 
			// clickButton_()
// 
// //************************************************************************************************************************************************
// //@Method: reverse_LatestPayment_InPaymentTab()
// //@Author Sumithra HP
// //@Date 10 Oct 2019
// //@Description This function is to reverse the latest payment in payment transaction tab
// // reverse_LatestPayment_InPaymentTab()
// //**********************************************************************************************************************************
// reverse_LatestPayment_InPaymentTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get payment type
	// pmtType = getValueFromPaymentTab("1","Payment Type")
	// if pmtType = "Debit/Credit Card" || pmtType = "Mobile Payment"
		// //reverse the payment
		// reverse_Process_DoNotCreditToCustomer("Test")
	// else
		// //Click on Reverse Button
		// clickOnButton_Reverse()
		// //Click on Yes Button
		// clickButton_Level1PBwindow_DP("REVERSE PAYMENT","Yes")
		// //Handle the Multiple Reasons Reverse Payments
		// handle_MultipleReasons_Reverse_Payments(pmtType,"Test","Insufficient Funds")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : get_LoanNumberFromDB_WhereLateCharge_Applies","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************
// //@methodName: get_Count_Of_Charges_From_ChargesTable_PaymentTab(expChargedType)
// //@Author: Sumithra
// //@Date 12 Dec 2018
// //@Description This will get the count of specified charges in Charges table in the Payment tab
// //Ex:  get_Count_Of_Charges_From_ChargesTable_PaymentTab("LateCharge")
// //***********************************************************************************************************************
// get_Count_Of_Charges_From_ChargesTable_PaymentTab(String expChargedType)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get row count
	// rowCnt = getRowCount_PbDataWindow("w_cust","dw_charges")
	// String totalCount
	// totalCount = ccur(0)
	// for itr = 1 To rowCnt
		// //get charge type
		// chargeType = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")		
		// if chargeType = expChargedType 					
			// totalCount = totalCount + 1
	// //Returning the value
	// if Length(Trim(expChargedType)) = 0 || expChargedType = "" 
		// get_Count_Of_Charges_From_ChargesTable_PaymentTab = rowCnt
	// else
		// get_Count_Of_Charges_From_ChargesTable_PaymentTab =  totalCount		
	// //Error handling 
// if GetErrorCount()>0  			
		// writeReportLog("Failed to get_Count_Of_Charges_From_ChargesTable_PaymentTab","Failed", Error_Description ,"")
// 
// //*****************************************************************************************
// //@methodName: validate_PayOffQuoteLetter_PDF_File(File_Path,otherChgAmount)
// //@Author: Sumithra
// //@Date: 20 September 2018
// //@Description: This will validate other charge amount in Pay Off Quote letter
// //Ex: validate_PayOffQuoteLetter_PDF_File(filePath + "\" + "PayOffQuoteLetter"&random_Number&".Pdf","17")
// //*****************************************************************************************
// validate_PayOffQuoteLetter_PDF_File(String File_Path,String otherChgAmount)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //entering required data to data table
	// DataTable.Value("PayOffQuoteLetter","Action1") = File_Path
	// DataTable.Value("otherChgAmount","Action1") = otherChgAmount
	// FileContent("PayOffQuoteLetter.Pdf").Check CheckPoint("PayOffQuoteLetter.Pdf")
	// writeReportLog("Validation of Other charge amount in PayOff Quote letter: $"& otherChgAmount,"Passed","","")
	// //Error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/: validate_PayOffQuoteLetter_PDF_File","Failed", Error_Description ,"")
// 
// //********************************************************************************************************************************************
// //@methodName: get_Value_From_LoanModificationUtility_Window(descName)
// //@Description: This function is to get description value in Loan Modification Utility window
// //@Author: Sumithra
// //@Date 27-08-2019
// //Ex:  get_Value_From_LoanModificationUtility_Window("PAY OFF DATE")
// //*********************************************************************************************************************************************
// get_Value_From_LoanModificationUtility_Window(String descName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get row count
	// rowcount = getRowCount_PbDataWindow("w_loan_conversion","dw_payoff")
	// for itr = 1 to rowcount 
		// //get desc name
		// descValue =getValueInPBDataWindow_DP("w_loan_conversion","dw_payoff","#"&itr,"descr")
		// if Trim(descValue) = Trim(descName) 
			// //get desc value
			// get_Value_From_LoanModificationUtility_Window = getValueInPBDataWindow_DP("w_loan_conversion","dw_payoff","#"&itr,"value")
			// Exit for
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/get_Value_From_LoanModificationUtility_Window","Failed", Error_Description ,"")
// 
// //********************************************************************************************************************************************
// //@methodName: get_Value_From_CalculateLoanPayOff_Window(descName)
// //@Description: This function is to get description value in the Calculate Loan Payoff window
// //@Author: Sumithra
// //@Date 27-08-2019
// //Ex:  get_Value_From_CalculateLoanPayOff_Window("PAY OFF DATE")
// //*********************************************************************************************************************************************
// get_Value_From_CalculateLoanPayOff_Window(String descName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get row count
	// rowcount = getRowCount_PbDataWindow("w_display_payoff","dw_list")
	// for itr = 1 to rowcount 
		// //get desc name
		// descValue =getValueInPBDataWindow_DP("w_display_payoff","dw_list","#"&itr,"descr")
		// if Trim(descValue) = Trim(descName) 
			// //get desc value
			// get_Value_From_CalculateLoanPayOff_Window = getValueInPBDataWindow_DP("w_display_payoff","dw_list","#"&itr,"value")
			// Exit for
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/get_Value_From_CalculateLoanPayOff_Window","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: select_RepresentativeName_CreditDecisionWindow()
// //@Author: Sumithra
// //@Date 13th July 2018
// //@Description: This function is to select Representative Name in CreditDecisionWindow
// //Ex:  select_RepresentativeName_CreditDecisionWindow()
// //***************************************************************************************************************************
// select_RepresentativeName_CreditDecisionWindow(String repName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Set PbTable = BranchPlus.CreditDecision.tbldwStep
	// Sleep (2)
	// TypeText_PBDataWindow(PbTable,"#1","dealer_rep_id",repName)
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/select_RepresentativeName_CreditDecisionWindow","Failed", Error_Description,"")
// 
// //********************************************************************************************************************************************
// //@methodName: selectDealer_CreditDecisionWindow_BasedonRowNumber(dealerName,dealerID)
// //@Description: This function is to get Dealer Name from Credit Decision widnow based on Row Number
// //@Author: Chandra
// //@Date 30-10-2019
// //Ex:  selectDealer_CreditDecisionWindow_BasedonRowNumber("LAKE KEOWEE CHRYS-DODGE","08740000016")
// //*********************************************************************************************************************************************
// selectDealer_CreditDecisionWindow_BasedonRowNumber(String dealerID)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get Row Number Based On Dealer Name from DB
	// rowNum = getRowNumber_BasedOnDealerName_FromDB(dealerID)
	// //Select Dealer Name based on Daeler Row
	// SetValueInPBDataWindow_DP("w_wiz_new_cust","dw_step","#1","Dealer_id","#1") //Work Around
	// SetValueInPBDataWindow_DP("w_wiz_new_cust","dw_step","#1","Dealer_id","#" + rowNum)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to getRowNumber_BasedOnDealerName_FromDB","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: enter_ValueIn_CollateralTab
// //@Author AMB
// //@Date 26 Jul 2019
// //@Description //This will enter the Collateral Details in Colletral tab of F2 Screen
// //Ex  enter_ValueIn_CollateralTab("vin",2,"1HGFA16587L125676","set")
// //*********************************************************************************************
// enter_ValueIn_CollateralTab(String fieldName,String rowNum,String fieldValue,String dataEntryType)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Enter details in Collateral section
	// fieldID = getFieldIDBasedOnFieldName_Collateral(fieldName)
	// //set window
	// Set tblwndw = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list")
	// if ToUpper(dataEntryType) = "SET" 
		// //set value
		// SetValue_PBDataWindow(tblwndw,"#"& rowNum,fieldID,fieldValue)
// else  
// //Type value
		// TypeText_PBDataWindow(tblwndw,"#"& rowNum,fieldID,fieldValue)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to enter_ValueIn_CollateralTab","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: getFieldIDBasedOnFieldName_Collateral
// //@Author AMB
// //@Date 26 Jul 2019
// //@Description This return the column/field ID for the Field Name specified for Colletral tab of F2 Screen
// //Ex  getFieldIDBasedOnFieldName_Collateral("Lienholder Name")
// //*********************************************************************************************
// getFieldIDBasedOnFieldName_Collateral(String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Fetching ID//s based on Name
	// if ToUpper(fldName) = ToUpper("Vin") 
		// idToReturn = "vin"
	// else if ToUpper(fldName) = ToUpper("Descr") 
		// idToReturn = "descr"
	// else if ToUpper(fldName) = ToUpper("Year") 
		// idToReturn = "year"
	// else if ToUpper(fldName) = ToUpper("Make") 
		// idToReturn = "make"
	// else if ToUpper(fldName) = ToUpper("Model") 
		// idToReturn = "model"
	// else if ToUpper(fldName) = ToUpper("Primary") 
		// idToReturn = "primary_yn"
	// else if ToUpper(fldName) = ToUpper("Color") 
		// idToReturn = "color"
	// else if ToUpper(fldName) = ToUpper("Cylinder") 
		// idToReturn = "cylinder"
	// else if ToUpper(fldName) = ToUpper("Lic plate") 
		// idToReturn = "lic_plate_nbr"
	// else if ToUpper(fldName) = ToUpper("Other") 
		// idToReturn = "other"
	// else if ToUpper(fldName) = ToUpper("Mileage") 
		// idToReturn = "mileage"
	// else if ToUpper(fldName) = ToUpper("Type") 
		// idToReturn = "coll_type"
	// else if ToUpper(fldName) = ToUpper("Assigned for Repo") 
		// idToReturn = "repo_assigned_yn"
	// else if ToUpper(fldName) = ToUpper("Assigned Date") 
		// idToReturn = "repo_assigned_dt"
	// else if ToUpper(fldName) = ToUpper("Agent Name") 
		// idToReturn = "repo_agent_id"
	// else if ToUpper(fldName) = ToUpper("Repo Reason") 
		// idToReturn = "repo_reason_code"
	// else if ToUpper(fldName) = ToUpper("Repo Type") 
		// idToReturn = "repo_type"
	// else if ToUpper(fldName) = ToUpper("Repo Date") 
		// idToReturn = "repo_dt"
	// else if ToUpper(fldName) = ToUpper("Estimated Recovery") 
		// idToReturn = "repo_est_recovery"
	// else if ToUpper(fldName) = ToUpper("Ending Mileage") 
	// idToReturn = "ending_mileage"	
	// else if ToUpper(fldName) = ToUpper("Booked Out Date") 
		// idToReturn = "book_out_dt"
	// else if ToUpper(fldName) = ToUpper("Managers Floor Amt") 
		// idToReturn = "manager_floor_amt"
	// else if ToUpper(fldName) = ToUpper("Sales Status") 
		// idToReturn = "sales_status"
	// else if ToUpper(fldName) = ToUpper("Sales Date") 
		// idToReturn = "sales_dt"
	// else if ToUpper(fldName) = ToUpper("Sales Price") 
		// idToReturn = "sales_price"
	// else
		// writeReportLog("Please pass the Proper parameter value to method getFieldIDBasedOnFieldName_Collateral","Failed","","")
	// //Returning the value
	// getFieldIDBasedOnFieldName_Collateral = idToReturn
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getFieldIDBasedOnFieldName_Collateral","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: setValue_InModifyToSection_FromLoanModificationWindow
// //@Author Chandra
// //@Date 24 Sep 2019
// //@Description This will Set the Field Value for the Field Name specified In Modify To Section from Loan Modification Window
// //Ex  setValue_InModifyToSection_FromLoanModificationWindow("1"," Payment Date","new_pmt_dt")
// //*********************************************************************************************
// setValue_InModifyToSection_FromLoanModificationWindow(String rowCount,String fieldName,String fieldValue)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get the Filed id Based on Field Name
	// fieldID = getFieldIDBasedOnFieldName_LoanModificationWindow(fieldName)
	// //Set Value based on field ID	
	// Set tblwndw = w_bp_frame.PbWindow("pbname:=w_loan_conversion").PbDataWindow("pbname:=dw_input")
	// // SetValue_PBDataWindow(tblwndw,"#"&rowCount,fieldID,fieldValue)
	// TypeText_PBDataWindow(tblwndw,"#"&rowCount,fieldID,fieldValue)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in setValue_InModifyToSection_FromLoanModificationWindow","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: getValue_InCurrentAndModifyToSection_FromLoanModificationWindow
// //@Author Chandra
// //@Date 24 Sep 2019
// //@Description This will get the Field Value for the Field Name specified In Current Loan Info and Modify To Section from Loan Modification Window
// //Ex  getValue_InCurrentAndModifyToSection_FromLoanModificationWindow(" Payment Date","1")
// //*********************************************************************************************
// getValue_InCurrentAndModifyToSection_FromLoanModificationWindow(String fieldName,String rowCount)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get the Filed id Based on Field Name
	// fieldID = getFieldIDBasedOnFieldName_LoanModificationWindow(fieldName)
	// //get Current Loan Info and Modify To section values
	// Set tblwndw = w_bp_frame.PbWindow("pbname:=w_loan_conversion").PbDataWindow("pbname:=dw_input")
	// getValue_InCurrentAndModifyToSection_FromLoanModificationWindow = GetValue_PBDataWindow(tblwndw,"#"&rowCount,fieldID)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getValue_InCurrentAndModifyToSection_FromLoanModificationWindow","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: getFieldIDBasedOnFieldName_LoanModificationWindow
// //@Author Chandra
// //@Date 24 Sep 2019
// //@Description This return the column/field ID for the Field Name specified for Loan Modification Window
// //@Retruing the Field ID(Column)
// //Ex  getFieldIDBasedOnFieldName_LoanModificationWindow("Transaction ID")
// //*********************************************************************************************
// getFieldIDBasedOnFieldName_LoanModificationWindow(String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Variable
	// idToReturn = null
	// //Fetching ID//s based on Name from Loan Modification window
	// //Modify To Columns 	
	// if fldName = " Payment Date" 	
		// idToReturn = "new_pmt_dt"	
	// else if fldName = "Number Of Months" 	
		// idToReturn = "new_nbr_months"	
	// else if fldName = "Modify Date" 	
		// idToReturn = "new_convert_dt"	
	// else if fldName = "New Payment Amount" 	
		// idToReturn = "new_pmt_amt"	
	// else if fldName = "Interest Rate" 	
		// idToReturn = "new_int_rate"	
	// else if fldName = "Interest Rate in Percentage" 	
		// idToReturn = "compute_1"	
	// else if fldName = "New Principal" 	
		// idToReturn = "new_princ_bal"	
	// else if fldName = "New Account Status" 	
		// idToReturn = "new_acct_status"
	// //Current Loan Info Columns 	
	// else if fldName = "Loan Number" 	
		// idToReturn = "loan_nbr"	
	// else if fldName = "Account Type" 	
		// idToReturn = "acct_type"	
	// else if fldName = "Account Status" 	
		// idToReturn = "acct_status"	
	// else if fldName = "Interest Type" 	
		// idToReturn = "int_type"	
	// else if fldName = "Original Int Rate" 	
		// idToReturn = "compute_2"	
	// else if fldName = "Original Principal" 	
		// idToReturn = "princ_bal"
	// //Proposed New payment Schedule 
	// else if fldName = "Payment Amount" 	
		// idToReturn = "pmt"	
	// else if fldName = "Interest" 	
		// idToReturn = "interest"	
	// else if fldName = "Principal Balance" 	
		// idToReturn = "principal"	
	// else if fldName = "Balance" 	
		// idToReturn = "bal"	
	// else if fldName = "Payment Date" 	
		// idToReturn = "pmt_date"	
	// else if fldName = "Total Payments" 	
		// idToReturn = "cf_sum_pmts"
	// else if fldName = "Total Interest" 	
		// idToReturn = "cf_sum_interest"
	// else
		// writeReportLog("Please pass the Proper parameter value to method getFieldIDBasedOnFieldName_LoanModificationWindow","Failed","","")
	// getFieldIDBasedOnFieldName_LoanModificationWindow = idToReturn
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getFieldIDBasedOnFieldName_LoanModificationWindow","Failed", Error_Description ,"")
// 
// //***********************************************************************************************************************************
// //@Method: enter_Reason_InLoanModificationWindow(value)
// //@Author Chandra
// //@Date 25 Sep 2018
// //@Description This function is to Enter Loan modification Reason in Loan Modification window
// //Ex:  enter_Reason_InLoanModificationWindow("Automation Testing")
// //************************************************************************************************************************************  
// enter_Reason_InLoanModificationWindow(String value)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// w_bp_frame.Pbwindow("pbname:=w_loan_conversion" + windowName1).Pbwindow("pbname:=w_search" + windowName2).PbDataWindow("pbname:=dw_search" + dataWindowName).SetValue(CellData("#1","reason",value)
// //	 SetValueIn2LevelPBDataWindow_DP("w_loan_conversion","w_search","dw_search","#1","reason",value)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to enter_Reason_InLoanModificationWindow","Failed", Error_Description ,"")
// 
// //***************************************************************************************
// //@MethodName openAutoDealerFromPBTreeAndSelect_InAutoDealerSetup
// //@Author Karthik Shekar
// //@Description This method will select the Auto Dealer in the Auto Dealer Setup Page from 
// //			  PBTreeView irrespective of case specified
// //@Param TreePath (Case Insensetive)
// //@Date 18 Oct 2019
// //EX:  openAutoDealerFromPBTreeAndSelect_InAutoDealerSetup("Auto Dealers;Auto 1-Madison","087400000015")
// //EX:  openAutoDealerFromPBTreeAndSelect_InAutoDealerSetup("Auto Dealers;auto 1-madison","087400000015")
// //***************************************************************************************
// openAutoDealerFromPBTreeAndSelect_InAutoDealerSetup(String reportPath,String reportID)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// indivNode = Split(reportPath,";")	
	// //Setting.WebPackage("ReplayType") = 2
	// Sleep (2)
// w_bp_frame.PbWindow("pbname:=w_dealer_setup").PbTreeView("pbname:=tv_dealer").IsPresent()
	// cntOfNodes = w_bp_frame.PbWindow("pbname:=w_dealer_setup").PbTreeView("pbname:=tv_dealer").GetAttr("")  Need to provide Attr Name
	// found = false
	// for itr = 0 To cntOfNodes-1 Step 1
		// nodeName = w_bp_frame.PbWindow("pbname:=w_dealer_setup").PbTreeView("pbname:=tv_dealer").GetItem(itr)		
		// //Selecting the Node
		// if ToUpper(nodeName) = ToUpper(indivNode(1)) 			
			// //Select Dealer Name 
			// w_bp_frame.PbWindow("pbname:=w_dealer_setup").PbTreeView("pbname:=tv_dealer").Select(itr)
			// //Get Dealer ID from General Tab
			// appDealerID = getValue_FromGeneralTab_InAutoDealerSetUp_Window(1,"Dealer ID")
			// //Comparing the Dealer ID
			// if Trim(appDealerID) = Trim(reportID)
				// found = true	
				// Exit for
	// //Handling if Data not found
	// if found = false 
		// writeReportLog("Auto Dealer " + indivNode(1) + " and Dealer ID " + reportID + " is not available in Auto Dealer Setup Window" ,"Failed","","")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed to openAutoDealerFromPBTreeAndSelect_InAutoDealerSetup","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: getValue_FromGeneralTab_InAutoDealerSetUp_Window(rowNum,colName)
// //@Author Chandra
// //@Date 04 Oct 2019
// //@Description This function is to get the value in General Tab Auto Dealer Setup window based on column name and Row
// //Ex:  getValue_FromGeneralTab_InAutoDealerSetUp_Window(1,"Customer Name")
// //************************************************************************************************************************************
// Integer getValue_FromGeneralTab_InAutoDealerSetUp_Window(String rowNum,String colNames)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Getting Column ID + fetching Value from Field
	// fieldID = getFieldIDBasedOnFieldName_AutoDealerSetUpWindow(colNames)
	// getValue_FromGeneralTab_InAutoDealerSetUp_Window = getValueInPBDataWindow_DP("w_dealer_setup","dw_dealer","#"& rowNum,fieldID)
	// //Error handling
	// if GetErrorCount()>0 
			// writeReportLog("Failed in getValue_FromGeneralTab_InAutoDealerSetUp_Window","Failed", Error_Description,"")
// 
// //*********************************************************************************************
// //@methodName: getFieldIDBasedOnFieldName_AutoDealerSetUpWindow
// //@Author Chandra
// //@Date 04 Oct 2019
// //@Description This return the column/field ID for the Field Name specified for Auto Dealer Setup Window
// //@Retruing the Field ID(Column)
// //Ex  getFieldIDBasedOnFieldName_AutoDealerSetUpWindow("Customer Name")
// //*********************************************************************************************
// getFieldIDBasedOnFieldName_AutoDealerSetUpWindow(String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Variable
	// idToReturn = null
	// //Fetching ID//s based on Name
	// if fldName = "Total Reserve Amount" 
		// idToReturn = "total_reserve_amt"
	// else if fldName = "Total Discount Amount" 
		// idToReturn = "total_discount_amt"
	// else if fldName = "Created" 
		// idToReturn = "cf_entry"
	// else if fldName = "Reserve Amount" 
		// idToReturn = "reserve_amt"
	// else if fldName = "Discount Amount" 
		// idToReturn = "discount_amt"
	// else if fldName = "Notes" 	
		// idToReturn = "notes"
	// else if fldName = "Customer Name" 
		// idToReturn = "cust_name"
	// else if fldName = "Loan Number" 
		// idToReturn = "loan_nbr"	
	// else if fldName = "Dealer ID" 
		// idToReturn = "dealer_id"			
	// else if fldName = "Discount Earned" 
		// idToReturn = "earned_amt"
	// else if fldName = "Discount Unearned" 
		// idToReturn = "unearned_amt"
	// else if fldName = "Dealer Representative" 
		// idToReturn = "dealer_rep_id"
	// else
		// writeReportLog("Please pass the Proper parameter value to method getFieldIDBasedOnFieldName_TransactionWindow","Failed","Current Parameter " + fldName,"")
	// getFieldIDBasedOnFieldName_AutoDealerSetUpWindow = idToReturn
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getFieldIDBasedOnFieldName_AutoDealerSetUpWindow","Failed", Error_Description ,"")
// 
// //*****************************************************************************************
// //@methodName : validate_StaticTextIn_WinEditor_And_HandlePopup
// //@Author     : Sumithra
// //@Date       : 15 Oct 2019
// //@Description: This function will validate static text in win editor and handle the popup
// //Ex:  validate_StaticTextIn_WinEditor_And_HandlePopup("Daily Closing","WARNING","Yes")	
// //*****************************************************************************************
// validate_StaticTextIn_WinEditor_And_HandlePopup(String windowName1,String windowName2,String staticText,String buttonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if windowName2 <> "" 	
		// if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowName1).Pbwindow("regexpwndtitle:=" + windowName2).WaitWhileExists(10) 
			// //Get the Static text
			// StaticMesssage = Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowName1).Pbwindow("regexpwndtitle:=" + windowName2).WinEditor("regexpwndclass:=Edit","index:=0").GetRoProperty("text")
			// StaticMesssage = Replace(StaticMesssage, vbcrlf, "")
			// //Logger
			// validateDataAndReport(StaticMesssage,staticText, "Validation of Static Text displayed in popup: ")
			// writeReportLog("Snapshot of Warning message","Passed","","Y")
			// Sleep (1)
			// clickButton_In_Level2PBwindowTitle_DP(windowName1, windowName2, buttonName)
		// else
			// writeReportLog(windowName2 + " Window does not exist","Failed","","Y")
	// else	
		// if  Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowName1).WaitWhileExists(10) 
			// //Get the Static text
			// StaticMesssage = Pbwindow("pbname:=" + "w_bp_frame").Pbwindow("regexpwndtitle:=" + windowName1).WinEditor("regexpwndclass:=Edit","index:=0").GetRoProperty("text")
			// StaticMesssage = Replace(StaticMesssage, vbcrlf, "")
			// //Logger
			// validateDataAndReport(StaticMesssage,staticText, "Validation of Static Text displayed in popup: ")
			// writeReportLog("Snapshot of warning message","Passed","","Y")
			// //Clicking on Button
			// clickButton_Level1PBwindow_DP(windowName1,buttonName)
		// else
			// writeReportLog(windowName1 + " Window does not exist","Failed","","Y")		
	// Sleep (2)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/validate_StaticTextIn_WinEditor_And_HandlePopup","Failed", Error_Description ,"")
// 
// //**********************************************************************************
// //@methodName openAgentFromBusinessAgentSetUpTree
// //@Author Karhik.Shekar
// //@Date 12 Nov 2019
// //@Description This function will open/Select the Business agent from Business agent Setup Tree
// //Ex:msgbox openAgentFromBusinessAgentSetUpTree("Repossession","Absolute Recovery")
// //   openAgentFromBusinessAgentSetUpTree("Others","F And F Group")
// //**********************************************************************************
// openAgentFromBusinessAgentSetUpTree(String agentType,String agentName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Waiting
	// BranchPlus.PbWindow("pbname:=w_business_agent_setup").GetAttr(("visible",True,30000)
	// //Expanding the Tree View
	// clickOnPlusIcon_ifExists()
	// //Sleep(3)
	// clickOnPlusIcon_ifExists()
	// rowCnt = getRowCount_PbDataWindow("w_business_agent_setup","dw_agents")
	// //Flag
	// found = false
	// for itr = 1 To rowCnt Step 1
		// selectCell_In_PBDatWindow_DP("w_business_agent_setup","dw_agents","#" + itr,"dba_name")
		// Sleep(2)
		// actAgentType = getValue_FromRightPane_BusinessAgentSetupPage("Agent Type")
		// actAgentName = getValue_FromRightPane_BusinessAgentSetupPage("Agent Name")
		// //Validating
		// if ToUpper(actAgentType) = ToUpper(agentType) and ToUpper(actAgentName) = ToUpper(agentName) 
			// found = true
			// Exit for
	// //When data not found
	// if found = false 
		// writeReportLog("Agent name: " + agentName + " Could not be found under " + agentType,"Failed","","")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in openAgentFromBusinessAgentSetUpTree","Failed", Error_Description ,"")
// 
// //EX:  clickOnPlusIcon_ifExists()
// clickOnPlusIcon_ifExists()
	// if BranchPlus.InsightObject("PlusImageInPbTree").WaitWhileExists(5) 
		// BranchPlus.InsightObject("PlusImageInPbTree").Click()
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in clickOnPlusIcon_ifExists","Failed", Error_Description ,"")
// 
// //**************************************************************************
// //@Method Name getValue_FromRightPane_BusinessAgentSetupPage
// //@Author Karthik.Shekar
// //@Description this fucntion will get the value from the Right Pane Fields in Business Agent Setup Window
// //@Date 12 Nov 2019
// //EX: msgbox getValue_FromRightPane_BusinessAgentSetupPage("Agent Name")
// //	msgbox getValue_FromRightPane_BusinessAgentSetupPage("Agent Type")
// //**************************************************************************
// getValue_FromRightPane_BusinessAgentSetupPage(String fieldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Enter details in Collateral section
	// fieldID = get_BusinessAgent_FieldIDBasedOnFieldName(fieldName)
	// //fetching the Value
	// getValue_FromRightPane_BusinessAgentSetupPage = getValueInPBDataWindow_DP("w_business_agent_setup","dw_agent","#1",fieldID)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in getValue_FromRightPaneca_BusinessAgentSetupPage","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: enter_BusinessAgent_Details
// //@Author Karthik
// //@Date 22 Aug 2019
// //@Description //This will enter Business Agent Details in Tools menu
// //Ex  enter_BusinessAgent_Details("Agent Name",1,"aaaaaaaaa",set)
// //*********************************************************************************************
// enter_BusinessAgent_Details(String fieldName,String row,String fieldValue,String dataEntryType)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Enter details in Collateral section
	// fieldID = get_BusinessAgent_FieldIDBasedOnFieldName(fieldName)
	// //set window
	// Set tblwndw = w_bp_frame.PbWindow("pbname:=w_wiz_new_business_agent").PbDataWindow("pbname:=dw_step")
	// if ToUpper(dataEntryType) = "SET" 
		// //set value
		// SetValue_PBDataWindow(tblwndw,"#"& row,fieldID,fieldValue)
// else  
// //Type value
		// TypeText_PBDataWindow(tblwndw,"#"& row,fieldID,fieldValue)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to enter_BusinessAgent_Details","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: get_BusinessAgent_FieldIDBasedOnFieldName
// //@Author AMB
// //@Date 22 Aug 2019
// //@Description This return the column/field ID for the Field Name specified for Business Agent window
// //Ex  get_BusinessAgent_FieldIDBasedOnFieldName("Lienholder Name")
// //*********************************************************************************************
// get_BusinessAgent_FieldIDBasedOnFieldName(String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Fetching ID//s based on Name
	// if ToUpper(fldName) = ToUpper("Agent Name") 
		// idToReturn = "dba_name"
	// else if ToUpper(fldName) = ToUpper("Agent Type") 
		// idToReturn = "agent_type"
	// else if ToUpper(fldName) = ToUpper("Contract Date") 
		// idToReturn = "contract_dt"
	// else if ToUpper(fldName) = ToUpper("Active Yn") 
		// idToReturn = "active_yn"
	// else if ToUpper(fldName) = ToUpper("Address") 
		// idToReturn = "addr1"
	// else if ToUpper(fldName) = ToUpper("Address2") 
		// idToReturn = "addr2"
	// else if ToUpper(fldName) = ToUpper("Address3") 
		// idToReturn = "addr3"
	// else if ToUpper(fldName) = ToUpper("Zipcode") 
		// idToReturn = "zipcode"
	// else
		// writeReportLog("Please pass the Proper parameter value to method get_BusinessAgent_FieldIDBasedOnFieldName","Failed","","")
	// //Returning the value
	// get_BusinessAgent_FieldIDBasedOnFieldName = idToReturn
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in get_BusinessAgent_FieldIDBasedOnFieldName","Failed", Error_Description ,"")
// 
// //*****************************************************************************************
// //@methodName: get_GL_Details_BasedOn_COA_FromViewTransactionWindow(exp_COA, ByRef GL_Description, ByRef Credit_Amount, ByRef Debit_Amount)
// //@Author Chandra
// //@Date 04 Oct 2019
// //@Description This will get the GL Details from View Transaction window
// //Ex: get_GL_Details_BasedOn_COA_FromViewTransactionWindow("1142", GL_Description, Credit_Amount, Debit_Amount)
// //*****************************************************************************************
// get_GL_Details_BasedOn_COA_FromViewTransactionWindow(String exp_COA,String ByRef GL_Description,String ByRef Credit_Amount,String ByRef Debit_Amount)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get row count
	// GL_RowCount = getRowCount_PbDataWindow("w_view_transaction","dw_1")
	// //Flag value 
	// Flag = False
	// //Identifying the Row and get the GL details Where COA is matched 
	// for GL_Row = 1 To GL_RowCount
		// //Get the GL Transaction Details
		// act_COA = getValue_ViewTransactions_Window(GL_Row,"COA")
		// tranID = getValue_ViewTransactions_Window(GL_Row,"Transaction ID")
		// GL_Description = getValue_ViewTransactions_Window(GL_Row,"Description")
		// Credit_Amount = getValue_ViewTransactions_Window(GL_Row,"Credit Amount")
		// Debit_Amount = getValue_ViewTransactions_Window(GL_Row,"Debit Amount")
		// //if COA is matched exit the Loop
		// if act_COA = exp_COA 
			// validateDataAndReport(act_COA,exp_COA,"Validation of "& GL_Description + " COA ")
			// Flag = True
			// Exit for 	
	// //Verifying the Flage value is False exit the execution
	// if Flag = False 
		// writeReportLog("GL Description : "& GL_Description &" and COA : "& exp_COA &"  is not found in View Transaction window","Failed", "","")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed Step/Function: get_GL_Details_BasedOn_COA_FromViewTransactionWindow","Failed", Error_Description,"Y")
// 
// //***********************************************************************************************************************************
// //@Method: getValue_ViewTransactions_Window(ColName)
// //@Author Thirumal Reddy
// //@Date 8 Oct 2018
// //@Description This function is to get the value in View Transaction window based on column name
// //Ex:  getValue_ViewTransactions_Window(1,"Check Number")
// //************************************************************************************************************************************
// getValue_ViewTransactions_Window(String rowNum,String colNames)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //Getting Column ID + fetching Value from Field
// fieldID = getFieldIDBasedOnFieldName_TransactionWindow(colNames)
// getValue_ViewTransactions_Window = getValueInPBDataWindow_DP("w_view_transaction","dw_1","#"& rowNum,fieldID)
// //Error handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in getValue_ViewTransactions_Window","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: setValue_ViewTransactionSearchCriteria_window(colName,valueToSet)
// //@Author Thirumal Reddy
// //@Date 8 Oct 2018
// //@Description This function is to set the value in View Transaction Search criteria window based on column name
// //Ex:  setValue_ViewTransactionSearchCriteria_window("Start Date","10/08/2018")
// //************************************************************************************************************************************
// setValue_ViewTransactionSearchCriteria_window(String colName,String valueToSet)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// colID = getFieldIDBasedOnFieldName_TransactionWindow(colName)
	// // SetValueInPBDataWindow_DP("w_search","dw_search","#1",colID,valueToSet)
	// typeTextInLevel1PBDataWindow_DP("w_search","dw_search","#1",colID,valueToSet)
// //Error handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in setValue_ViewTransactionSearchCriteria_window","Failed", Error_Description,"")
// 
// //*********************************************************************************************
// //@methodName: getFieldIDBasedOnFieldName_TransactionWindow
// //@Author Chandra
// //@Date 24 Sep 2019
// //@Description This return the column/field ID for the Field Name specified for View Transaction Window
// //@Retruing the Field ID(Column)
// //Ex  getFieldIDBasedOnFieldName_TransactionWindow("Transaction ID")
// //*********************************************************************************************
// getFieldIDBasedOnFieldName_TransactionWindow(String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Variable
	// idToReturn = null
	// //Fetching ID//s based on Name
	// if fldName = "Transaction ID" 
		// idToReturn = "trans_id"
	// else if fldName = "Trans Type" 
		// idToReturn  = "trans_type"
	// else if fldName = "COA" 
		// idToReturn = "coa"
	// else if fldName = "Description" 
		// idToReturn = "descr"
	// else if fldName = "Credit Amount" 
		// idToReturn = "cr_amt"
	// else if fldName = "Debit Amount" 
		// idToReturn = "db_amt"
	// else if fldName = "Credit Debit" 	
		// idToReturn = "cr_db"
	// else if fldName = "START DATE" 
		// idToReturn = "start_date"
	// else if fldName = "END DATE" 
		// idToReturn = "end_date"
	// else if fldName = "Loan Number" 
		// idToReturn = "loan_nbr"
	// else if fldName = "Total Debit Amount" 
		// idToReturn = "cf_db_amt_sum"
	// else if fldName = "Total Credit Amount" 
		// idToReturn = "cf_cr_amt_sum"
	// else
		// writeReportLog("Please pass the Proper parameter value to method getFieldIDBasedOnFieldName_TransactionWindow","Failed","","")
	// getFieldIDBasedOnFieldName_TransactionWindow = idToReturn
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getFieldIDBasedOnFieldName_TransactionWindow","Failed", Error_Description ,"")
// 
// //*******************************************************************************************************
// //@methodName :expand_TreeView_ViewTransactions_Window(transacDateToExpand)
// //@Author     : Thirumal Reddy
// //@Date       : 08 October 2018
// //@Description: This will expand the transaction tree view dates in view transactions window
// //Ex: expand_TreeView_ViewTransactions_Window("10/08/2018")
// //******************************************************************************************************
// expand_TreeView_ViewTransactions_Window(String transacDateToExpand)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// w_bp_frame.PbWindow("pbname:=w_view_transaction").PbTreeView("pbname:=tv_1").Expand "Transaction Dates;"&transacDateToExpand
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed Step/Function: expand_TreeView_ViewTransactions_Window","Failed", Error_Description,"Y")
// 
// //***********************************************************************************************************************************
// //@Method: select_AutoDealer_InAutoDealerSetUp_Window(dealerName)
// //@Author Chandra
// //@Date 04 Oct 2019
// //@Description This function is to Select Auto Dealer in Auto Dealer Setup window
// //Ex:  select_AutoDealer_InAutoDealerSetUp_Window("Auto Dealers;Akins ford Dodge Jeep Chrysler")
// //************************************************************************************************************************************
// select_AutoDealer_InAutoDealerSetUp_Window(String dealerName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("pbname:=w_dealer_setup").PbTreeView("pbname:=tv_dealer").WaitWhileExists(5) 
		// w_bp_frame.PbWindow("pbname:=w_dealer_setup").PbTreeView("pbname:=tv_dealer").Select dealerName	
// //Error handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in select_AutoDealer_InAutoDealerSetUp_Window","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: getValue_FromReserveTab_InAutoDealerSetUp_Window(rowNum,colName)
// //@Author Chandra
// //@Date 04 Oct 2019
// //@Description This function is to get the value in Reserve Tab Auto Dealer Setup window based on column name and row
// //Ex:  getValue_FromReserveTab_InAutoDealerSetUp_Window(1,"Customer Name")
// //************************************************************************************************************************************
// getValue_FromReserveTab_InAutoDealerSetUp_Window(String rowNum,String colNames)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //Getting Column ID + fetching Value from Field
// fieldID = getFieldIDBasedOnFieldName_AutoDealerSetUpWindow(colNames)
// getValue_FromReserveTab_InAutoDealerSetUp_Window = getValueInPBDataWindow_DP("w_dealer_setup","dw_list","#"& rowNum,fieldID)
// //Error handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in getValue_FromReserveTab_InAutoDealerSetUp_Window","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: navigateToTab_AutoDealerSetup_Window(tabName)
// //@Author Chandra
// //@Date 04 Oct 2019
// //@Description This function is to navigate to tabs in Auto Dealer Setp Up window
// //Ex:  navigateToTab_AutoDealerSetup_Window("Reserve")
// //************************************************************************************************************************************
// navigateToTab_AutoDealerSetup_Window(String tabName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("pbname:=w_dealer_setup").PbTabStrip("pbname:=tab_dealer").WaitWhileExists(5) 
		// w_bp_frame.PbWindow("pbname:=w_dealer_setup").PbTabStrip("pbname:=tab_dealer").Select tabName	
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to navigateToTab_AutoDealerSetup_Window","Failed", Error_Description ,"")
// 
// //*****************************************************************************************
// //@methodName: get_Sum_Of_AllColumnsData_FromViewTransactionwindow(colNames)
// //@Author Chandra
// //@Date 04 Oct 2019
// //@Description This will get the Sum of All Columns data from View Transaction window
// //Ex: get_Sum_Of_AllColumnsData_FromViewTransactionwindow("Debit Amount")
// //*****************************************************************************************
// get_Sum_Of_AllColumnsData_FromViewTransactionwindow(String colNames)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get row count
	// GL_RowCount = getRowCount_PbDataWindow("w_view_transaction","dw_1")
	// //initialize variables
	// GLAmount = 0
	// //Get Sum of Debit/Credit Sum amount
	// for rowNum = 1 To GL_RowCount
		// GLAmount = getValue_ViewTransactions_Window(rowNum,colNames)
		// GLSumAmount = ccur(GLSumAmount)+ccur(GLAmount)
	// get_Sum_Of_AllColumnsData_FromViewTransactionwindow = GLSumAmount
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed Step/Function: get_Sum_Of_AllColumnsData_FromViewTransactionwindow","Failed", Error_Description,"Y")
// 
// //*********************************************************************************************
// //@methodName: getValue_InDescriptionAndValueSection_FromLoanModificationWindow(exp_Decription)
// //@Author Chandra
// //@Date 24 Sep 2019
// //@Description This will get the Field Value for the Field Name specified In Description and Value Section from Loan Modification Window
// //Ex  getValue_InDescriptionAndValueSection_FromLoanModificationWindow("LOAN NUMBER")
// //*********************************************************************************************
// getValue_InDescriptionAndValueSection_FromLoanModificationWindow(String exp_Decription)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get Description section values
	// Set tblwndw = w_bp_frame.PbWindow("pbname:=w_loan_conversion").PbDataWindow("pbname:=dw_payoff")
	// //Get Row Count 
	// TotalRowCount = getRowCount_PbDataWindow("w_loan_conversion","dw_payoff")
	// Flag = False
	// //Looping and Get Value based on Decription
	// for rowCount = 1 To TotalRowCount
		// //Get Decription name
		// Act_Decription = GetValue_PBDataWindow(tblwndw,"#" + rowCount,"descr")
		// //Comparing the Act Decription and Exp Description
		// if ToUpper(Act_Decription) = ToUpper(exp_Decription) 
			// //Get Value based on Row
			// Decription_Value = GetValue_PBDataWindow(tblwndw,"#" + rowCount,"value")
			// Flag = True
			// Exit for
	// //Varifying the Flag Value
	// if Flag = False 
		// writeReportLog("Description Name is not found in Description Value section from Loan Modification Window","Failed", "" ,"")
	// getValue_InDescriptionAndValueSection_FromLoanModificationWindow = CCur(Decription_Value)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getValue_InDescriptionAndValueSection_FromLoanModificationWindow","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: getSum_In_ProposedNewPaymentSchedule_FromLoanModification(byref PaymentSum,byref InterestSum,byref PrinciaplBalSum,byref BalanceSum)
// //@Author: Chandra
// //@Date 24 Sep 2018
// //@Description: This function will get the sum of all the columns data in Proposed New Payment schedule window in Loan Modification Window
// //Ex:  getSum_In_ProposedNewPaymentSchedule_FromLoanModification(1,"Payment Amount")
// //***************************************************************************************************************************
// getSum_In_ProposedNewPaymentSchedule_FromLoanModification(String rowcnt,String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get Field ID 
	// fieldID = getFieldIDBasedOnFieldName_LoanModificationWindow(fldName)
	// //initialize variables
	// ProposedPaymentScheduleData = 0
	// //Looping the rowcount and get the Payment Amount, Interest, Principal and Balance
	// for row_Num = 1 To rowcnt
		// //Get Payment Dtae (Not required for Sum)
		// if fieldID  = "pmt_date" 
			// ProposedPaymentScheduleData = getValueInPBDataWindow_DP("w_loan_conversion","dw_new_pmt_schedule","#"&row_Num,fieldID)
		// else
			// //get Payment amount and do the sum
			// ProposedPaymentAmt = getValueInPBDataWindow_DP("w_loan_conversion","dw_new_pmt_schedule","#"&row_Num,fieldID)
			// ProposedPaymentScheduleData = ccur(ProposedPaymentScheduleData)+ccur(ProposedPaymentAmt)
	// getSum_In_ProposedNewPaymentSchedule_FromLoanModification = ProposedPaymentScheduleData
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getSum_In_ProposedNewPaymentSchedule_FromLoanModification","Failed", Error_Description,"")
// 
// //*******************************************************************************************************
// //@methodName : select_LastDoneTransaction_InViewTransactions_Window()
// //@Author     : Thirumal Reddy
// //@Date       : 08 October 2018
// //@Description: This will select the last transaction done in view transactions window
// //Ex: select_LastDoneTransaction_InViewTransactions_Window()
// //******************************************************************************************************
// select_LastDoneTransaction_InViewTransactions_Window()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// count = fetch_RowCount_ViewTransactions_Window() - 1
// w_bp_frame.PbWindow("pbname:=w_view_transaction").PbTreeView("pbname:=tv_1").Select(count)
// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed Step/Function: fetch_RowCount_ViewTransactions_Window","Failed", Error_Description,"Y")
// 
// //*******************************************************************************************************
// //@methodName :fetch_RowCount_ViewTransactions_Window()
// //@Author     : Thirumal Reddy
// //@Date       : 08 October 2018
// //@Description: This will fetch the row count of the transaction tree view dates in view transactions window
// //Ex: fetch_RowCount_ViewTransactions_Window()
// //******************************************************************************************************
// fetch_RowCount_ViewTransactions_Window()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Fetching the row count
	// fetch_RowCount_ViewTransactions_Window = w_bp_frame.PbWindow("pbname:=w_view_transaction").PbTreeView("pbname:=tv_1").GetAttr("")  Need to provide Attr Name
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed Step/Function: fetch_RowCount_ViewTransactions_Window","Failed", Error_Description,"Y")
// 
// //***********************************************************************************************************************************
// //@Method: navigateToTab_InViewTransaction_Window(tabName)
// //@Author Thirumal Reddy
// //@Date 8 Oct 2018
// //@Description This function is to navigate to tab in View Transaction window
// //Ex:  navigateToTab_InViewTransaction_Window("Bank Details")
// //************************************************************************************************************************************
// navigateToTab_InViewTransaction_Window(String tabName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("pbname:=w_view_transaction").PbTabStrip("pbname:=tab_1").WaitWhileExists(5) 
		// w_bp_frame.PbWindow("pbname:=w_view_transaction").PbTabStrip("pbname:=tab_1").Select tabName	
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to navigateToTab_InViewTransaction_Window","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@MEthodName getListOfBusinessAgents_FromCollateralTab
// //@Author Karthik.Shekar
// //@Description This function will get the List of Business agents available in the Agent Name Drop down (Collateral Tab)
// //@Return List of Agent Names sperated by ";" appeared in Agent List 
// //@Date 14 Nov 2019
// ////EX:  msgbox getListOfBusinessAgents_FromCollateralTab(2)
// //**********************************************************************************************  
// getListOfBusinessAgents_FromCollateralTab(dbCount)
	// //intializing variable 
	// repoAgentList =""
	// for itr = 1 To dbCount Step 1
		// //Set Window
		// set tblPBDataWindow = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list")
		// //set value
		// SetValue_PBDataWindow(tblPBDataWindow,"#1","repo_agent_id","#" + itr)
		// //get value
		// tempList = GetValue_PBDataWindow(tblPBDataWindow,"#1","repo_agent_id")
		// if repoAgentList = "" 
			// repoAgentList = tempList
		// else
			// repoAgentList = repoAgentList + ";" + tempList
	// //returning value
	// getListOfBusinessAgents_FromCollateralTab =  repoAgentList
	// //Error Handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getListOfBusinessAgents_FromCollateralTab","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: typeValue_CheckbookPayment_window(colName,valueToSet)
// //@Author Karthik
// //@Date 18 Oct 2019
// //@Description This function is to type the value in check book payment window based on column name
// //Ex:  typeValue_CheckbookPayment_window("Payment To","John")
// //************************************************************************************************************************************
// typeValue_CheckbookPayment_window(String colName,String valueToSet)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //Get ColId 
// colID = getColumnID_for_CheckbookPayment_Fields(colName)
// //Enter value in checkbook window
	// typeText_In_PBDatWindow_DP("w_checkbook_pmt","dw_list","#1",colID,valueToSet)
	// //Error handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in setValue_CheckbookPayment_window","Failed", Error_Description,"")
// 
// //@Method: typeValue_InPrintCheckforChange_window(colName,valueToSet)
// //@Author Chandra
// //@Date 13 Aug 2019
// //@Description This function is to set the value in check book payment window based on column name
// //Ex:  typeValue_InPrintCheckforChange_window("Payment To","John")
// //************************************************************************************************************************************
// typeValue_InPrintCheckforChange_window(String colName,String valueToSet)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //Get ColId 
// colID = getColumnID_for_PrintCheckforChange_Fields(colName)
// Set tblPBDataWindow = w_bp_frame.PbWindow("pbname:=w_payment").PbWindow("pbname:=w_checkbook_pmt").PbDataWindow("pbname:=dw_list")
// //Enter value in checkbook window
	// TypeText_PBDataWindow(tblPBDataWindow,"#1",colID,valueToSet)
// //  writeReportLog("Field Value"&valueToSet&" is set in Checkbook Payment Window for Field >> "&colName,"Passed",FailComments,"YES")
// //Error handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in typeValue_InPrintCheckforChange_window","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: getColumnID_for_CheckbookPayment_Fields
// //@Author Karthik
// //@Date 18 Oct 2019
// //@Description This function is will return the Column ID for the Filed Name Specified
// //Ex:  getColumnID_for_CheckbookPayment_Fields("Payment To")
// //************************************************************************************************************************************
// getColumnID_for_CheckbookPayment_Fields(String colName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if colName = "PAYMENT TO" 
		// getColumnID_for_CheckbookPayment_Fields = "to_name"
	// else if colName = "ADDRESS1" 
		// getColumnID_for_CheckbookPayment_Fields = "addr1"
	// else if colName = "ADDRESS2" 
		// getColumnID_for_CheckbookPayment_Fields = "addr2"
	// else if colName = "ADDRESS3" 
		// getColumnID_for_CheckbookPayment_Fields = "addr3"
	// else if colName = "ZIP CODE" 
		// getColumnID_for_CheckbookPayment_Fields = "zipcode"
	// else if colName = "AMOUNT" 
		// getColumnID_for_CheckbookPayment_Fields = "amt"
	// else if colName = "REASON" 
		// getColumnID_for_CheckbookPayment_Fields = "reason"
	// else if colName = "CHARGE TO" 
		// getColumnID_for_CheckbookPayment_Fields = "charge_to_coa"	
	// else if colName = "BANK" 
		// getColumnID_for_CheckbookPayment_Fields = "bank_id"
	// else if colName = "CITY" 
		// getColumnID_for_CheckbookPayment_Fields = "city"
	// else if colName = "STATE" 
		// getColumnID_for_CheckbookPayment_Fields = "state"
	// else
		// writeReportLog("Wrong Value Passed to argument colName. Please check the getColumnID_for_CheckbookPayment_Fields","Failed","","")
	// //Error handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in getColumnID_for_CheckbookPayment_Fields","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: getValue_CheckbookPayment_window
// //@Author Karthik
// //@Date 16 Sep 2019
// //@Description This function is to get the value in check book payment window based on Field name Specified
// //Ex:  getValue_CheckbookPayment_window("ADDRESS1")
// //************************************************************************************************************************************
// getValue_CheckbookPayment_window(String colName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //Get ColId 
// colID = getColumnID_for_CheckbookPayment_Fields(colName)
// //set pbwindow
// set tblPBDataWindow = w_bp_frame.PbWindow("pbname:=w_checkbook_pmt").PbDataWindow("pbname:=dw_list")
// //get value in checkbook window
	// getValue_CheckbookPayment_window = GetValue_PBDataWindow(tblPBDataWindow,"#1",colID)
// //Error handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in getValue_CheckbookPayment_window","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: setValue_CashDrawerPayment_window
// //@Author Karthik
// //@Date 21 Oct 2019
// //@Description This function is to set the value in Cash Drawer payment window based on Field Name Specified
// //Ex:  setValue_CashDrawerPayment_window("Payment To","John")
// //************************************************************************************************************************************
// setValue_CashDrawerPayment_window(String colName,String valueToSet)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //Get ColId 
// colID = getColumnID_for_CashDrawerPayment_Fields(colName)
// //Enter value in CashDrawer window
	// SetValueInPBDataWindow_DP("w_bank_transaction","dw_list","#1",colID,valueToSet)
// //Error handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in setValue_CashDrawerPayment_window","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: typeValue_CashDrawerPayment_window(colName,valueToSet)
// //@Author Karthik
// //@Date 18 Oct 2019
// //@Description This function is to type the value in check book payment window based on Field name specified
// //Ex:  typeValue_CashDrawerPayment_window("Payment To","John")
// //************************************************************************************************************************************
// typeValue_CashDrawerPayment_window(String colName,String valueToSet)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //Get ColId 
// colID = getColumnID_for_CashDrawerPayment_Fields(colName)
// //Enter value in checkbook window
	// typeText_In_PBDatWindow_DP("w_bank_transaction","dw_list","#1",colID,valueToSet)
	// //Error handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in typeValue_CashDrawerPayment_window","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: getColumnID_for_CashDrawerPayment_Fields(colName)
// //@Author Ambika
// //@Date 21 Oct 2019
// //@Description This function is to get the field ID based on field name in cashDrawer Payment/Deposit Window
// //Ex:  getColumnID_for_CashDrawerPayment_Fields("TO")
// //************************************************************************************************************************************
// getColumnID_for_CashDrawerPayment_Fields(String colName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if colName = "TO" 
		// getColumnID_for_CashDrawerPayment_Fields = "to_name"
	// else if colName = "AMOUNT" 
		// getColumnID_for_CashDrawerPayment_Fields = "amt"
	// else if colName = "REASON" 
		// getColumnID_for_CashDrawerPayment_Fields = "reason"
	// else if colName = "CHARGE TO" 
		// getColumnID_for_CashDrawerPayment_Fields = "charge_to_coa"	
	// else if colName = "BANK" 
		// getColumnID_for_CashDrawerPayment_Fields = "bank_id"
	// else
		// writeReportLog("Wrong Value Passed to argument colName. Please check the getColumnID_for_CashDrawerPayment_Fields","Failed","","")
	// //Error handling
	// if GetErrorCount()>0 
			// writeReportLog("Failed in getColumnID_for_CashDrawerPayment_Fields","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: getValue_CashDrawerPayment_window
// //@Author Karthik
// //@Date 21 Oct 2019
// //@Description This function is to get the value in Cash Drawer payment window based on Field name
// //Ex:  getValue_CashDrawerPayment_window("To")
// //************************************************************************************************************************************
// getValue_CashDrawerPayment_window(String colName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get ColId 
	// colID = getColumnID_for_CashDrawerPayment_Fields(colName)
	// //set pbwindow
	// set tblPBDataWindow = w_bp_frame.PbWindow("pbname:=w_bank_transaction").PbDataWindow("pbname:=dw_list")
	// //get value in checkbook window
		// getValue_CashDrawerPayment_window = GetValue_PBDataWindow(tblPBDataWindow,"#1",colID)
	// //Error handling
	// if GetErrorCount()>0 
			// writeReportLog("Failed in getValue_CashDrawerPayment_window","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: getValue_InPrintCheckforChange_window
// //@Author Karthik
// //@Date 16 Sep 2019
// //@Description This function is to get the value in Print Check for Change window based on Field name
// //Ex:  getValue_InPrintCheckforChange_window("ADDRESS1")
// //************************************************************************************************************************************
// getValue_InPrintCheckforChange_window(String colName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get ColId 
	// colID = getColumnID_for_PrintCheckforChange_Fields(colName)
	// //set pbwindow
	// set tblPBDataWindow = w_bp_frame.PbWindow("pbname:=w_payment").PbWindow("pbname:=w_checkbook_pmt").PbDataWindow("pbname:=dw_list")
	// //get value in checkbook window
		// getValue_InPrintCheckforChange_window = GetValue_PBDataWindow(tblPBDataWindow,"#1",colID)
	// //Error handling
	// if GetErrorCount()>0 
			// writeReportLog("Failed in getValue_CheckbookPayment_Level2_window","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: getColumnID_for_PrintCheckforChange_Fields(colName)
// //@Author Chandra
// //@Date 13 Aug 2019
// //@Description This function is get the column ID in Print Check for Change window in Payment Tab
// //@Returning the field ID
// //Ex:  getColumnID_for_PrintCheckforChange_Fields("Payment To")
// //Ex2:  getColumnID_for_PrintCheckforChange_Fields("Address1")
// //************************************************************************************************************************************
// getColumnID_for_PrintCheckforChange_Fields(String colName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// colName = ToUpper(colName)
	// if colName = "PAYMENT TO" 
		// fieldID = "pmt_for"
	// else if colName = "ADDRESS1" 
		// fieldID = "addr1"
	// else if colName = "ADDRESS2" 
		// fieldID = "addr2"
	// else if colName = "ADDRESS3" 
		// fieldID = "addr3"
	// else if colName = "ZIP CODE" 
		// fieldID = "zipcode"
	// else if colName = "CITY" 
		// fieldID = "city"
	// else if colName = "STATE" 
		// fieldID = "state"
	// else if colName = "REASON" 
		// fieldID = "activity_reason"
	// else
		// writeReportLog("Wrong Value Passed to argument colName. Please check the getColumnID_for_CheckbookPayment_Fields","Failed","","")
	// getColumnID_for_PrintCheckforChange_Fields = fieldID
	// //Error handling
	// if GetErrorCount()>0 
			// writeReportLog("Failed in getColumnID_for_PrintCheckforChange_Fields","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: setValue_InPrintCheckforChange_window(colName,valueToSet)
// //@Author Chandra
// //@Date 13 Aug 2019
// //@Description This function is to set the value in check book payment window based on column name
// //Ex:  setValue_InPrintCheckforChange_window("Payment To","John")
// //************************************************************************************************************************************
// setValue_InPrintCheckforChange_window(String colName,String valueToSet)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //Get ColId 
// colID = getColumnID_for_PrintCheckforChange_Fields(colName)
// Set tblPBDataWindow = w_bp_frame.PbWindow("pbname:=w_payment").PbWindow("pbname:=w_checkbook_pmt").PbDataWindow("pbname:=dw_list")
// //Enter value in checkbook window
	// SetValue_PBDataWindow(tblPBDataWindow,"#1",colID,valueToSet)
// //  writeReportLog("Field Value"&valueToSet&" is set in Checkbook Payment Window for Field >> "&colName,"Passed",FailComments,"YES")
// //Error handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in setValue_InPrintCheckforChange_window","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: typeValue_InPrintCheckforChange_window(colName,valueToSet)
// //@Author Karthik
// //@Date 05 Nov 2019
// //@Description This function is to Type the value in check book payment window based on column name
// //Ex:  typeValue_InPrintCheckforChange_window("Payment To","John")
// //************************************************************************************************************************************
// typeValue_InPrintCheckforChange_window(String colName,String valueToSet)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //Get ColId 
// colID = getColumnID_for_PrintCheckforChange_Fields(colName)
// Set tblPBDataWindow = w_bp_frame.PbWindow("pbname:=w_payment").PbWindow("pbname:=w_checkbook_pmt").PbDataWindow("pbname:=dw_list")
// //Enter value in checkbook window
	// TypeText_PBDataWindow(tblPBDataWindow,"#1",colID,valueToSet)
// //  writeReportLog("Field Value"&valueToSet&" is set in Checkbook Payment Window for Field >> "&colName,"Passed",FailComments,"YES")
// //Error handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in setValue_InPrintCheckforChange_window","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************
// //@methodName: getListOfGarnishAgents_form_GranishPayments_Window(dbCount)
// //@Author: Karthik Shekar
// //@Date 24 Oct 2019
// //@Description This will get list of Business Agent from Garnish Payments window
// //Ex:  getListOfGarnishAgents_form_GranishPayments_Window(2)
// //***********************************************************************************************************************
// getListOfGarnishAgents_form_GranishPayments_Window(String dbCount)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //intializing variable 
	// garnishList =""
	// for itr = 1 To dbCount Step 1
		// //Set Window
		// set tblPBDataWindow = w_bp_frame.PbWindow("pbname:=w_garnishment_payment").PbDataWindow("pbname:=dw_header")
		// //set value
		// SetValue_PBDataWindow(tblPBDataWindow,"#1","dba_name","#" + itr)
		// //get value
		// tempList = GetValue_PBDataWindow(tblPBDataWindow,"#1","dba_name")
		// if garnishList = "" 
			// garnishList = tempList
		// else
			// garnishList = garnishList + ";" + tempList
	// //returning value
	// getListOfGarnishAgents_form_GranishPayments_Window =  garnishList
	// //Error Handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getListOfGarnishAgents_form_GranishPayments_Window","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: reverse_Payment_BasedOnTransID_FromPaymentTab
// //@Author Chandra
// //@Date 25 Nov 2019
// //@Description This function is to Reverse the payment based on Trans ID from Payment Tab and payment reversed YN is N and expect the PaymentType(CPI Add, CPI Refund, RVRSDPAY)in DB 
// //Ex:  reverse_Payment_BasedOnTransID_FromPaymentTab()
// //************************************************************************************************************************************
// reverse_Payment_BasedOnTransID_FromPaymentTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get Row Count 
	// rowCount = getRowCount_PbDataWindow("w_cust","dw_payments")
	// for itr = 1 To rowCount Step 1
		// //Get trans id from payment tab
		// transID = getValueFromPaymentTab(itr,"Trans ID")
		// //Get Reversed YN status from DB
		// Pmt_ReversedYN = getPaymentType_BasedOnTransID_FromDB(transID,"reversed_yn")
		// //Get Payment Type from DB
		// paymentType = getPaymentType_BasedOnTransID_FromDB(transID,"pmt_type")
		// //get Check Number
		// chkNumber = getValueFromPaymentTab(itr,"Check Number")
		// //Comparing with Payment Type along with Payment Rervesd YN
		// if ToUpper(Pmt_ReversedYN) = "N" and Trim(chkNumber) <> "" and Not(ToUpper(paymentType) <> "RVRSDPAY"  || ToUpper(paymentType) <> "CPI_ADD" || ToUpper(paymentType) <> "NSF Reversal" || ToUpper(paymentType) <> "CPI_RFND")  
			// //get payment type
			// pmtType = getValueFromPaymentTab(itr,"Payment Type")
			// //if Debit Card || Mobile payment slect Do No Credit To Customer option else reverse payment
			// if pmtType = "Debit/Credit Card" || pmtType = "Mobile Payment" 
				// //reverse the payment
				// reverse_Process_DoNotCreditToCustomer("Test")
				// Exit for
			// else
				// //Click on Reverse Button
				// clickOnButton_Reverse()
				// //Click on Yes Button
				// clickButton_Level1PBwindow_DP("REVERSE PAYMENT","Yes")
				// //Handle the Multiple Reasons Reverse Payments
				// handle_MultipleReasons_Reverse_Payments(pmtType,"Test","Insufficient Funds")
				// Exit for
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/: reverse_Payment_BasedOnTransID_FromPaymentTab","Failed", Error_Description ,"")
// 
// //******************************************************************************************************
// //@Method: clickOnLienHolder_CollateralTab()
// //@Author: Kar
// //@Date 16 Jul 2019
// //@Description: This function is to click on LienHolder
// //Ex:  clickOnLienHolder_CollateralTab()
// //*******************************************************************************************************
// clickOnLienHolder_CollateralTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //click on LienHolder button
	// BranchPlus.InsightObject("LienHolderLink").Click()
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed to clickOnLienHolder_CollateralTab","Failed", Error_Description,"Y")
// 
// //*********************************************************************************************
// //@methodName: setValue_InLienHolderWindow_FromCollateralTab(rowCount,fieldName,fieldValue)
// //@Author Kar
// //@Date 16 Jul 2019
// //@Description This will set the Field Value for the Field Name in collateral tab
// //Ex  setValue_InLienHolderWindow_FromCollateralTab("1","Active Lien","ON")
// //*********************************************************************************************
// setValue_InLienHolderWindow_FromCollateralTab(String rowCount,String fieldName,String fieldValue)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get field ID based on field name
	// fieldID = getFieldIDBasedOnFieldName_LienHolderWindow(fieldName)
	// //Set value 
	// Set tblwndw = w_bp_frame.PbWindow("pbname:=w_lien").PbDataWindow("pbname:=dw_list")
	// //set value in field
	// SetValue_PBDataWindow(tblwndw,"#"&rowCount,fieldID,fieldValue)
	// Sleep (5)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in setValue_InLienHolderWindow_FromCollateralTab","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: typeValue_InLienHolderWindow_FromCollateralTab
// //@Author Kar
// //@Date 16 Jul 2019
// //@Description This will type the Field Value for the Field Name in collateral tab
// //Ex  typeValue_InLienHolderWindow_FromCollateralTab("1","Active Lien","ON")
// //*********************************************************************************************
// typeValue_InLienHolderWindow_FromCollateralTab(String rowCount,String fieldName,String fieldValue)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get fieldID
	// fieldID = getFieldIDBasedOnFieldName_LienHolderWindow(fieldName)
	// //Set value 
	// Set tblwndw = w_bp_frame.PbWindow("pbname:=w_lien").PbDataWindow("pbname:=dw_list")
	// //type value in field
	// TypeText_PBDataWindow(tblwndw,"#"&rowCount,fieldID,fieldValue)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in typeValue_InLienHolderWindow_FromCollateralTab","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: getFieldIDBasedOnFieldName_LienHolderWindow
// //@Author Kar
// //@Date 25 Jul 2019
// //@Description This return the column/field ID for the Field Name specified for Colletral tab of F2 Screen
// //@Returing the field ID
// //Ex  getFieldIDBasedOnFieldName_LienHolderWindow("Lienholder Name")
// //*********************************************************************************************
// getFieldIDBasedOnFieldName_LienHolderWindow(String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Fetching ID//s based on Name
	// if ToUpper(fldName) = ToUpper("Active Lien") 
		// idToReturn = "active_yn"
	// else if ToUpper(fldName) = ToUpper("Lienholder Name") 
		// idToReturn = "lienholder_name"
	// else if ToUpper(fldName) = ToUpper("Lien Date") 
		// idToReturn = "lien_date"
	// else if ToUpper(fldName) = ToUpper("Address") 
		// idToReturn = "address1"
	// else if ToUpper(fldName) = ToUpper("Zipcode") 
		// idToReturn = "Zipcode"
	// else if ToUpper(fldName) = ToUpper("phone") 
		// idToReturn = "phone"
	// else
		// writeReportLog("Please pass the Proper parameter value to method getFieldIDBasedOnFieldName_LienHolderWindow","Failed","","")
	// //Returning the value
	// getFieldIDBasedOnFieldName_LienHolderWindow = idToReturn
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getFieldIDBasedOnFieldName_LienHolderWindow","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: clickButton_In_LienHolder_DailogPopup(dialog,buttonToClick)
// //@Author: Kar
// //@Date 25 Jul 2019
// //@Description: This function is to Click on Button in Lienholder Dialog popup 
// //Ex:  clickButton_In_LienHolder_DailogPopup("ERROR","OK")
// //***************************************************************************************************************************
// clickButton_In_LienHolder_DailogPopup(String dialog,String buttonToClick)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //click on ok button
	// clickButton_In_Level1_DailogPopup("w_lien",dialog,buttonToClick)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to clickButton_In_LienHolder_DailogPopup","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: clickButton_In_Level1_DailogPopup(windowName, dialogName, buttonToClick)
// //@Author: Chandra
// //@Date 31 may 2019
// //@Description: This function is to Click on Button in dailog popup 
// //@Returing the Dailog popup static text
// //Ex:  clickButton_In_Level1_DailogPopup("w_lien","ERROR","OK")
// //***************************************************************************************************************************
// clickButton_In_Level1_DailogPopup(String window,String dialogName,String buttonToClick)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("pbname:=" + window).Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).WaitWhileExists(5) 
		// w_bp_frame.PbWindow("pbname:=" + window).Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=" + buttonToClick).Click()
	// else if w_bp_frame.PbWindow("pbname:=" + window).Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).WaitWhileExists(5) 
		// w_bp_frame.PbWindow("pbname:=" + window).Dialog("regexpwndtitle:=" + dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).Click()	     				
	// else
		// writeReportLog("Clicking on Button " + buttonToClick + "Failed in Dialog: " + dialogName,"Failed","","Y")	
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to clickButton_In_Level1_DailogPopup","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: handle_USPS_Level2Window(buttonName)
// //@Author Kar
// //@Date 17 Jul 2019
// //@Description This will handle the USPS window in Collateral Tab 
// //Ex  handle_USPS_Level2Window("Use Address Above")
// //*********************************************************************************************
// handle_USPS_Level2Window(buttonName)
	// //click on use address above button
	// click_Button_InWindow_if_WindowExistDP("w_lien","w_usps_addressverification",buttonName)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/handle_USPS_Level2Window","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: click_Button_InLienHolder_Level1_Window(buttonName)
// //@Author Kar
// //@Date 17 JuL 2019
// //@Description This is to Click on the button in LienHolderWindow
// //Ex: click_Button_InLienHolder_Level1_Window("Save")
// //********************************************************************************************************
// click_Button_InLienHolder_Level1_Window(String buttonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //click on button
	// clickButton_InWindow("w_lien",buttonName)	
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/click_Button_InLienHolder_Level1_Window","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: click_Button_InLienHolder_Level2_Window(buttonName)
// //@Author Kar
// //@Date 17 JuL 2019
// //@Description This is to Click on the button in LienHolderWindow
// //Ex: click_Button_InLienHolder_Level2_Window("Yes")
// //********************************************************************************************************
// click_Button_InLienHolder_Level2_Window(String buttonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //click on button
	// click_Button_InWindow_if_WindowExistDP("w_lien","w_message",buttonName)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/click_Button_InLienHolder_Level2_Window","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: getValueIn_LienHolderWindow_Collateral("1","Active Lien")
// //@Author Kar
// //@Date 17 JuL 2019
// //@Description This will return value based on field name in LienHolderWindow
// //@Returing the cell value
// //Ex: getValueIn_LienHolderWindow_Collateral(1,"Active Lien")
// //********************************************************************************************************
// getValueIn_LienHolderWindow_Collateral(String row,String fieldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get feild ID based on field name
	// fieldID = getFieldIDBasedOnFieldName_LienHolderWindow(fieldName)
	// //get value 
	// cellValue = getValueInPBDataWindow_DP("w_lien","dw_list","#"& row,fieldID)
	// //Returning the value
	// getValueIn_LienHolderWindow_Collateral = cellValue
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/getValueIn_LienHolderWindow_Collateral","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: getFieldIDBasedOnFieldName_LienHolderWindow
// //@Author Kar
// //@Date 25 Jul 2019
// //@Description This return the column/field ID for the Field Name specified for Colletral tab of F2 Screen
// //@Returing the fieldID
// //Ex  getFieldIDBasedOnFieldName_LienHolderWindow("Lienholder Name")
// //*********************************************************************************************
// getFieldIDBasedOnFieldName_LienHolderWindow(String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Fetching ID//s based on Name
	// if ToUpper(fldName) = ToUpper("Active Lien") 
		// idToReturn = "active_yn"
	// else if ToUpper(fldName) = ToUpper("Lienholder Name") 
		// idToReturn = "lienholder_name"
	// else if ToUpper(fldName) = ToUpper("Lien Date") 
		// idToReturn = "lien_date"
	// else if ToUpper(fldName) = ToUpper("Address1") 
		// idToReturn = "address1"
	// else if ToUpper(fldName) = ToUpper("Address2") 
		// idToReturn = "address2"
	// else if ToUpper(fldName) = ToUpper("Zipcode") 
		// idToReturn = "Zipcode"
	// else if ToUpper(fldName) = ToUpper("phone") 
		// idToReturn = "phone"
	// else
		// writeReportLog("Please pass the Proper parameter value to method getFieldIDBasedOnFieldName_LienHolderWindow","Failed","","")
	// //Returning the value
	// getFieldIDBasedOnFieldName_LienHolderWindow = idToReturn
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getFieldIDBasedOnFieldName_LienHolderWindow","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: getRowCountIn_LienHolderWindow()
// //@Author Kar
// //@Date 25 JuL 2019
// //@Description This will return rowCount in LienHolderWindow
// //@Returing the rowCount
// //Ex: getRowCountIn_LienHolderWindow()
// //********************************************************************************************************
// getRowCountIn_LienHolderWindow()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get row count
	// rowcnt = getRowCount_PbDataWindow("w_lien","dw_list")
	// //Returning the row count
	// getRowCountIn_LienHolderWindow = rowcnt
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/getRowCountIn_LienHolderWindow","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: enter_ValueIn_CollateralTab
// //@Author Kar
// //@Date 26 Jul 2019
// //@Description //This will enter the Collateral Details in Colletral tab of F2 Screen
// //Ex  enter_ValueIn_CollateralTab("vin",2,"1HGFA16587L125676","set")
// //*********************************************************************************************
// enter_ValueIn_CollateralTab(String fieldName,String rowNum,String fieldValue,String dataEntryType)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Enter details in Collateral section
	// fieldID = getFieldIDBasedOnFieldName_Collateral(fieldName)
	// //set window
	// Set tblwndw = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_list")
	// if ToUpper(dataEntryType) = "SET" 
		// //set value
		// SetValue_PBDataWindow(tblwndw,"#"& rowNum,fieldID,fieldValue)
// else  
// //Type value
		// TypeText_PBDataWindow(tblwndw,"#"& rowNum,fieldID,fieldValue)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to enter_ValueIn_CollateralTab","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: getFieldIDBasedOnFieldName_Collateral
// //@Author Kar
// //@Date 26 Jul 2019
// //@Description This return the column/field ID for the Field Name specified for Colletral tab of F2 Screen
// //@Returing field ID
// //Ex  getFieldIDBasedOnFieldName_Collateral("Lienholder Name")
// //*********************************************************************************************
// getFieldIDBasedOnFieldName_Collateral(String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Fetching ID//s based on Name
	// if ToUpper(fldName) = ToUpper("Vin") 
		// idToReturn = "vin"
	// else if ToUpper(fldName) = ToUpper("Descr") 
		// idToReturn = "descr"
	// else if ToUpper(fldName) = ToUpper("Year") 
		// idToReturn = "year"
	// else if ToUpper(fldName) = ToUpper("Make") 
		// idToReturn = "make"
	// else if ToUpper(fldName) = ToUpper("Model") 
		// idToReturn = "model"
	// else if ToUpper(fldName) = ToUpper("Primary") 
		// idToReturn = "primary_yn"
	// else if ToUpper(fldName) = ToUpper("Color") 
		// idToReturn = "color"
	// else if ToUpper(fldName) = ToUpper("Cylinder") 
		// idToReturn = "cylinder"
	// else if ToUpper(fldName) = ToUpper("Lic plate") 
		// idToReturn = "lic_plate_nbr"
	// else if ToUpper(fldName) = ToUpper("Other") 
		// idToReturn = "other"
	// else if ToUpper(fldName) = ToUpper("Mileage") 
		// idToReturn = "mileage"
	// else if ToUpper(fldName) = ToUpper("Type") 
		// idToReturn = "coll_type"
	// else if ToUpper(fldName) = ToUpper("Assigned for Repo") 
		// idToReturn = "repo_assigned_yn"
	// else if ToUpper(fldName) = ToUpper("Assigned Date") 
		// idToReturn = "repo_assigned_dt"
	// else if ToUpper(fldName) = ToUpper("Agent Name") 
		// idToReturn = "repo_agent_id"
	// else if ToUpper(fldName) = ToUpper("Repo Reason") 
		// idToReturn = "repo_reason_code"
	// else if ToUpper(fldName) = ToUpper("Repo Type") 
		// idToReturn = "repo_type"
	// else if ToUpper(fldName) = ToUpper("Repo Date") 
		// idToReturn = "repo_dt"
	// else if ToUpper(fldName) = ToUpper("Estimated Recovery") 
		// idToReturn = "repo_est_recovery"
	// else if ToUpper(fldName) = ToUpper("Ending Mileage") 
		// idToReturn = "ending_mileage"	
	// else if ToUpper(fldName) = ToUpper("Booked Out Date") 
		// idToReturn = "book_out_dt"
	// else if ToUpper(fldName) = ToUpper("Managers Floor Amt") 
		// idToReturn = "manager_floor_amt"
	// else if ToUpper(fldName) = ToUpper("Sales Status") 
		// idToReturn = "sales_status"
	// else if ToUpper(fldName) = ToUpper("Sales Date") 
		// idToReturn = "sales_dt"
	// else if ToUpper(fldName) = ToUpper("Sales Price") 
		// idToReturn = "sales_price"
	// else
		// writeReportLog("Please pass the Proper parameter value to method getFieldIDBasedOnFieldName_Collateral","Failed","","")
	// //Returning the value
	// getFieldIDBasedOnFieldName_Collateral = idToReturn
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getFieldIDBasedOnFieldName_Collateral","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@MethodName navigate_BranchSetUpSubTabs(tabName)
// //@Author Chandra
// //@Date 07 Aug 2019
// //@Description This is Navigate to Branch Setup Tabs
// //Ex  navigate_BranchSetUpSubTabs("Address")
// //*********************************************************************************************
// navigate_BranchSetUpSubTabs(String tabName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("pbname:=w_branch_setup").PbTabStrip("pbname:=tab_branch").WaitWhileExists 
		// w_bp_frame.PbWindow("pbname:=w_branch_setup").PbTabStrip("pbname:=tab_branch").Select tabName	
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/navigate_BranchSetUpSubTabs","Failed", Error_Description,"")
// 
// //*****************************************************************************************************************
// //@methodName: setValue_BasedOnTab_InBranchSetUp(tabName,rowNumber,fldName,fieldValue)
// //@Author Chandra
// //@Date 07 Aug 2019
// //@Description This will set value in Branch setup all Tabs
// //Ex:  setValue_BasedOnTab_InBranchSetUp("Options","1","Feature Value","ON")
// //*****************************************************************************************************************
// setValue_BasedOnTab_InBranchSetUp(String tabName,String rowNumber,String fldName,String fieldValue)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get Field ID Based on File Name 
	// Coll_ID = getFieldIDBasedOnFieldName_InBranchSetUp(fldName)
	// //Set Value based on Tab
	// if tabName = "General" 
		// Set tblwndw = w_bp_frame.PbWindow("pbname:=w_branch_setup").PbDataWindow("pbname:=dw_branch")
	// else if tabName = "Address"  
		// Set tblwndw = w_bp_frame.PbWindow("pbname:=w_branch_setup").PbDataWindow("pbname:=dw_loc")
	// else if tabName = "Options"  
		// Set tblwndw = w_bp_frame.PbWindow("pbname:=w_branch_setup").PbDataWindow("pbname:=dw_options")
	// else if tabName = "Features"  
		// Set tblwndw = w_bp_frame.PbWindow("pbname:=w_branch_setup").PbDataWindow("pbname:=dw_features")
	// else if tabName = "Other Stipulations"  
		// Set tblwndw = w_bp_frame.PbWindow("pbname:=w_branch_setup").PbDataWindow("pbname:=dw_list")
	// //Set Value based on Tab
	// SetValue_PBDataWindow(tblwndw,"#"& rowNumber,Coll_ID,fieldValue)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed Step/Function: setValue_BasedOnTab_InBranchSetUp","Failed", Error_Description,"Y")
// 
// //*****************************************************************************************************************
// //@methodName: getValue_BasedOnTab_InBranchSetUp(tabName,rowNumber,fldName)
// //@Author Chandra
// //@Date 07 Aug 2019
// //@Description This will get value in Branch setup all Tabs
// //Ex:  getValue_BasedOnTab_InBranchSetUp("Options","1","Feature Value")
// //*****************************************************************************************************************
// getValue_BasedOnTab_InBranchSetUp(String tabName,String rowNumber,String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get Field ID Based on File Name 
	// Coll_ID = getFieldIDBasedOnFieldName_InBranchSetUp(fldName)
	// //Set tbl Name based on Tab
	// if tabName = "General" 
		// Set tblwndw = w_bp_frame.PbWindow("pbname:=w_branch_setup").PbDataWindow("pbname:=dw_branch")
	// else if tabName = "Address"  
		// Set tblwndw = w_bp_frame.PbWindow("pbname:=w_branch_setup").PbDataWindow("pbname:=dw_loc")
	// else if tabName = "Options"  
		// Set tblwndw = w_bp_frame.PbWindow("pbname:=w_branch_setup").PbDataWindow("pbname:=dw_options")
	// else if tabName = "Features"  
		// Set tblwndw = w_bp_frame.PbWindow("pbname:=w_branch_setup").PbDataWindow("pbname:=dw_features")
	// else if tabName = "Other Stipulations"  
		// Set tblwndw = w_bp_frame.PbWindow("pbname:=w_branch_setup").PbDataWindow("pbname:=dw_list")
	// //get Value based on Tab
	// getValue_BasedOnTab_InBranchSetUp = GetValue_PBDataWindow(tblwndw,"#"& rowNumber,Coll_ID)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed Step/Function: getValue_BasedOnTab_InBranchSetUp","Failed", Error_Description,"Y")
// 
// //*********************************************************************************************
// //@methodName: getFieldIDBasedOnFieldName_InBranchSetUp
// //@Author Chandra
// //@Date 07 Aug 2019
// //@Description This return the column/field ID for the Field Name specified for General, Address, Options, Other Stipulations tab of Branch Setup Screen
// //Ex  getFieldIDBasedOnFieldName_InBranchSetUp("First Name")
// //*********************************************************************************************
// getFieldIDBasedOnFieldName_InBranchSetUp(String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Variable
	// idToReturn = null
	// //Fetching ID//s based on Name
	// if fldName = "Feature Value" 
		// idToReturn = "feature_yn"
	// else if fldName = "Directions" 
		// idToReturn = "directions"
	// else if fldName = "Address1" 
		// idToReturn = "addr2"
	// else if fldName = "City" 
		// idToReturn = "city"
	// else if fldName = "Max Loan Amount" 
		// idToReturn = "max_loan_amt"
	// else if fldName = "MaxLoan Terms" 	
		// idToReturn = "max_loan_terms"
	// else if fldName = "Descriptions" 	
		// idToReturn = "descr"
	// else
		// writeReportLog("Please pass the Proper parameter value to method getFieldIDBasedOnFieldName_InBranchSetUp","Failed","","")
	// getFieldIDBasedOnFieldName_InBranchSetUp = idToReturn
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed Step/Function: getFieldIDBasedOnFieldName_InBranchSetUp","Failed", Error_Description,"Y")
// 
// //***************************************************************************************************************************
// //@Method: selectValue_From_GiveCustomerChange_Popup_InPaymentTab(valueToSelect,buttonName)
// //@Author: Chandra
// //@Date 08 Aug 2019
// //@Description: This function is to select option from Give Customer Change Popup In PaymentTab
// //Ex:  selectValue_From_GiveCustomerChange_Popup_InPaymentTab("Give change from CHECK BOOK","Ok")
// //***************************************************************************************************************************
// selectValue_From_GiveCustomerChange_Popup_InPaymentTab(String valueToSelect,String buttonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("pbname:=w_payment").PbWindow("pbname:=w_chooseone").PbList("pbname:=lb_list").WaitWhileExists(10) 
		// //select value from Choose an item popup
		// w_bp_frame.PbWindow("pbname:=w_payment").PbWindow("pbname:=w_chooseone").PbList("pbname:=lb_list").Select valueToSelect
		// //click on ok button in popup
		// clickButton_In_Level2PBwindow_DP("w_payment", "w_chooseone", buttonName)
// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in selectValue_From_GiveCustomerChange_Popup_InPaymentTab ","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: get_Data_InBankDetailsTbl_FromDB(requireFields)
// //@Author Chandra
// //@Date 13 Aug 2019
// //@Description This function is to get data on bank details tbl like tranaction id from DB
// //@Retruning the Transaction ID
// //Ex:  get_Data_InBankDetailsTbl_FromDB("trans_id")
// //************************************************************************************************************************************
// get_Data_InBankDetailsTbl_FromDB(String requireFields)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get Data from Bank Details Table based Last Entry Date record
	// requiredValue = runSQLQuery_WithWarning_WithoutExit("select top 1 * from bp_bank_detail_tbl order by entry_dt desc",requireFields)
	// get_Data_InBankDetailsTbl_FromDB = requiredValue
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed Step/Function: get_Data_InBankDetailsTbl_FromDB","Failed", Error_Description,"Y")
// 
// //***********************************************************************************************************************************
// //@Method: setValue_InPrintCheckforChange_window(colName,valueToSet)
// //@Author Chandra
// //@Date 13 Aug 2019
// //@Description This function is to set the value in check book payment window based on column name
// //Ex:  setValue_InPrintCheckforChange_window("Payment To","John")
// //************************************************************************************************************************************
// setValue_InPrintCheckforChange_window(String colName,String valueToSet)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //Get ColId 
// colID = getColumnID_for_PrintCheckforChange_Fields(colName)
// Set tblPBDataWindow = w_bp_frame.PbWindow("pbname:=w_payment").PbWindow("pbname:=w_checkbook_pmt").PbDataWindow("pbname:=dw_list")
// //Enter value in checkbook window
	// SetValue_PBDataWindow(tblPBDataWindow,"#1",colID,valueToSet)
// //  writeReportLog("Field Value"&valueToSet&" is set in Checkbook Payment Window for Field >> "&colName,"Passed",FailComments,"YES")
// //Error handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in setValue_InPrintCheckforChange_window","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: typeValue_InPrintCheckforChange_window(colName,valueToSet)
// //@Author Chandra
// //@Date 13 Aug 2019
// //@Description This function is to set the value in check book payment window based on column name
// //Ex:  typeValue_InPrintCheckforChange_window("Payment To","John")
// //************************************************************************************************************************************
// typeValue_InPrintCheckforChange_window(String colName,String valueToSet)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //Get ColId 
// colID = getColumnID_for_PrintCheckforChange_Fields(colName)
// Set tblPBDataWindow = w_bp_frame.PbWindow("pbname:=w_payment").PbWindow("pbname:=w_checkbook_pmt").PbDataWindow("pbname:=dw_list")
// //Enter value in checkbook window
	// TypeText_PBDataWindow(tblPBDataWindow,"#1",colID,valueToSet)
// //  writeReportLog("Field Value"&valueToSet&" is set in Checkbook Payment Window for Field >> "&colName,"Passed",FailComments,"YES")
// //Error handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in typeValue_InPrintCheckforChange_window","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************************
// //@Method: getColumnID_for_PrintCheckforChange_Fields(colName)
// //@Author Chandra
// //@Date 13 Aug 2019
// //@Description This function is get the column ID in Print Check for Change window in Payment Tab
// //@Returning the field ID
// //Ex:  getColumnID_for_PrintCheckforChange_Fields("Payment To")
// //Ex2:  getColumnID_for_PrintCheckforChange_Fields("Address1")
// //************************************************************************************************************************************
// getColumnID_for_PrintCheckforChange_Fields(String colName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if colName = "PAYMENT TO" 
		// fieldID = "pmt_for"
	// else if colName = "ADDRESS1" 
		// fieldID = "addr1"
	// else if colName = "ADDRESS2" 
		// fieldID = "addr2"
	// else if colName = "ADDRESS3" 
		// fieldID = "addr3"
	// else if colName = "ZIP CODE" 
		// fieldID = "zipcode"
	// else if colName = "REASON" 
		// fieldID = "activity_reason"
	// else if ToUpper(colName) = "CITY" 
		// fieldID = "city"
	// else if ToUpper(colName) = "STATE" 
		// fieldID = "state"
	// else
		// writeReportLog("Wrong Value Passed to argument colName. Please check the getColumnID_for_CheckbookPayment_Fields","Failed","","")
	// getColumnID_for_PrintCheckforChange_Fields = fieldID
	// //Error handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in getColumnID_for_PrintCheckforChange_Fields","Failed", Error_Description,"")
// 
// //********************************************************************8
// //@Method typeValue_CheckbookPayment_window
// //@Description this method will Type the Text in Check  Book Payment Window
// //@Author Karthik Shekar
// //Ex: typeValue_CheckbookPayment_window("Payment To", "ABC Corp")
// //*************************************************************************
// typeValue_CheckbookPayment_window(String colName,String valueToSet)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //Get ColId 
// colID = getColumnID_for_CheckbookPayment_Fields(colName)
// //Enter value in checkbook window
	// typeText_In_PBDatWindow_DP("w_checkbook_pmt","dw_list","#1",colID,valueToSet)
// //Error handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in typeValue_CheckbookPayment_window","Failed", Error_Description,"")
// 
// //*********************************************************************************************
// //@methodName: getValueFromCoApplicantTab
// //@Author AMB
// //@Date 12 Jun 2019
// //@Description This will get the Field Value for the Field Name along with Section Name specified from CoApplicant tab of F2 Screen
// //Ex  getValueFromCoApplicantTab("Affiliation")
// //*********************************************************************************************
// getValueFromCoApplicantTab(String fieldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// fieldID = getFieldIDBasedOnFieldName_CoApplicantTab(fieldName)
	// //Getting the CoApplicant Details
	// getValueFromCoApplicantTab = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_coapp").GetCellData("#1",fieldID)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getValueFromCoApplicantTab","Failed", Error_Description ,"")
// 
// //
// //
// //*********************************************************************************************
// //@methodName: getFieldIDBasedOnFieldName_CoApplicantTab
// //@Author AMB
// //@Date 12 Jun 2019
// //@Description This return the column/field ID for the Field Name specified for Co Applicant tab of F2 Screen
// //Ex  getFieldIDBasedOnFieldName_CoApplicantTab("Affiliation")
// //*********************************************************************************************
// getFieldIDBasedOnFieldName_CoApplicantTab(String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Variable
	// idToReturn = null
	// //Fetching ID//s based on Name
	// if fldName = "First Name" 
		// idToReturn = "first_name"
	// else if fldName = "Last Name" 
		// idToReturn = "last_name"
	// else if fldName = "Mid Name" 
		// idToReturn = "middle_name"
	// else if fldName = "DOB" 
		// idToReturn = "dob_dt"
	// else if fldName = "Affiliation" 
		// idToReturn = "affil_type"
	// else if fldName = "SSN" 	
		// idToReturn = "ssn"
	// else
		// writeReportLog("Please pass the Proper parameter value to method getFieldIDBasedOnFieldName_CoApplicantTab","Failed","","")
	// getFieldIDBasedOnFieldName_CoApplicantTab = idToReturn
// 
// //******************************************************************
// //@Method searchAccountWithReferenceId
// //@Author Karthik.Shekar
// //@Description this method will open the F2 Window and Search the account with Ref ID/Account ID
// //@Date 9th Jan 2019
// //Ex: searchAccountWithReferenceId("20785")
// //**********************************************************************
// // searchAccountWithReferenceId(String refID)
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // BranchPlus.SetActive()
	// // //Open
	// // sendKeys("{F2}")
	// // enterValuesIn_CustmerSearch("acct_id",refID)
	// // clickOkButton_CustomerSearchWindow()
	// // //Error Handling
	// // if GetErrorCount()>0 
		// // writeReportLog("Failed in step/searchAccountWithReferenceId","Failed", Error_Description,"")
// 
// //*******************************************************************
// //@Method isPbWindowExistsInsideBranchFrame
// //@Author Karthik.Shekar
// //@Date 8 Jan 2019
// //@Description this Method will return the status of the PBWindow inside Branch PbWindow if we pass the Window Name
// //@Return True || False
// //msgbox isPbWindowExistsInsideBranchFrame("Process Loan Validation")
// //***************************************************************************
// isPbWindowExistsInsideBranchFrame(String windowName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// isPbWindowExistsInsideBranchFrame = w_bp_frame.PbWindow("regexpwndtitle:=" + windowName).WaitWhileExists(5) 
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/getStaticText","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: validate_WindowName_Byregexpwndtitle(windowName)
// //@Author: Ambika
// //@Date: 17 Jan 2020
// //@Description This will get window name during run time and  validate the window name
// //Ex:  validate_WindowName_Byregexpwndtitle("Consider for Loss Report")
// //********************************************************************************************************
// validate_WindowName_Byregexpwndtitle(String windowName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if  w_bp_frame.Pbwindow("regexpwndtitle:=" + windowName).WaitWhileExists 
		// //To get the property value of window during run time
		// appwindowname = w_bp_frame.PbWindow("regexpwndtitle:=" + windowName).GetAttr("Text")
		// //Valdating Window name
		// validateDataAndReport(appwindowname,windowName,"Validation of Window name")		
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/validate_WindowName_Byregexpwndtitle","Failed", Error_Description ,"")
// 
// //************************************************************************************************************************************************
// //@Method: print_NSFLetter_WhenReversing_ChequePayment(NsfReason)
// //@Author Deepthi
// //@Date 16 Jan 2020
// //@Description This function is to click on //yes// button to print NSF letter while reversing the cheque payemnt
// //print_NSFLetter_WhenReversing_ChequePayment("Insufficient Funds")
// //***********************************************************************************************************************************************
// print_NSFLetter_WhenReversing_ChequePayment(String NsfReason)
	// //get payment type
	// pmtType = getValueFromPaymentTab("1","Payment Type")
	// if pmtType = "Debit/Credit Card" || pmtType = "Mobile Payment" 
		// //reverse the payment
		// reverse_Process_DoNotCreditToCustomer("Test")
	// else
		// //Click on Reverse Button
		// selectCell_In_PBDatWindow_DP("w_cust","dw_payments","#1","pmt_type")
		// clickOnButton_Reverse()
		// //Click on Yes Button
		// clickButton_Level1PBwindow_DP("REVERSE PAYMENT","Yes")
		// //Click on Nsf Charge Yes
		// clickButton_InWindow("w_message","Yes")
		// //Select Nsf Reason Ex://Insufficient Funds
		// enter_NSF_Reason_Reverse_Payment(NsfReason)
		// //Click on Ok button in Nsf Reason 
		// clickButton_InWindow("w_search","Ok")
		// //Nsf Letter Print //No"
		// clickButton_InWindow("w_message","Yes")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : print_NSFLetter_WhenReversing_ChequePayment","Failed", Error_Description,"")
// 
// //************************************************************************************************************************************************
// //@Method: selectRow_BasedOnPaymentMethod_AndReverse_InPaymentWindow(expPaymentMethod)
// //@Author Deepthi
// //@Date 20 Jan 2020
// //@Description This function is to reverse the payment in payment screen based on payment type passed as parameter
// //Example: selectRow_BasedOnPaymentMethod_AndReverse_InPaymentWindow("Check")
// //Example: selectRow_BasedOnPaymentMethod_AndReverse_InPaymentWindow("Debit Card")
// //***********************************************************************************************************************************************
// selectRow_BasedOnPaymentMethod_AndReverse_InPaymentWindow(String expPaymentMethod)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get Row Count 
	// rowCount = getRowCount_PbDataWindow("w_cust","dw_payments")
	// for itr = 1 To rowCount Step 1
		// //get payment method 
		// PaymentMethod = getValueFromPaymentTab(itr,"Payment Type")
		// if PaymentMethod = expPaymentMethod 
			// selectCell_In_PBDatWindow_DP("w_cust","dw_payments","#"&itr,"pmt_type")	
			// //Click on Reverse Button
			// clickOnButton_Reverse()
			// //Click on Yes Button
			// clickButton_Level1PBwindow_DP("REVERSE PAYMENT","Yes")
			// //Handle the Multiple Reasons Reverse Payments
			// handle_MultipleReasons_Reverse_Payments(PaymentMethod,"Test","Insufficient Funds")
			// Exit for
	// next
	// selectRow_BasedOnPaymentMethod_AndReverse_InPaymentWindow = itr
	// //Error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/Function: selectRow_BasedOnPaymentMethod_AndReverse_InPaymentWindow","Failed", Error_Description ,"")
// 
// //***************************************************************************************************
// //@Method Name selectGarnishSource_GarnishPaymentSearchCriteria
// //@Author Karthik.Shekar
// //@Description this method will select the Garnish Source in the Garnish Payment Search Criteria Window
// //@Date 30 Jan 2020
// //Ex:  selectGarnishSource_GarnishPaymentSearchCriteria("Law Offices Of Emmett L Goodman Jr LLC")
// //*****************************************************************************************************
// selectGarnishSource_GarnishPaymentSearchCriteria(String valueToSelect)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// BranchPlus.PbWindow("pbname:=w_search").PbDataWindow("pbname:=dw_search").HoverMouse () ()
	// With UIAWindow("name:=Branch PLUS","frameworkid:=Win32","controltype:=Window").UIAWindow("name:=Garnishment Payment Search Criteria","frameworkid:=Win32","controltype:=Window")
		// //.HoverMouse () ()
		// .UIAObject("name:=garnish_agent_id","controltype:=Custom","supportedpatterns:=LegacyIAccessible").Click()
		// .UIAObject("name:=garnish_agent_id","controltype:=Custom","supportedpatterns:=LegacyIAccessible")TypeKeys valueToSelect
		// .Click()		
	// With
	// //Handling Error
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/selectGarnishSource_GarnishPaymentSearchCriteria","Failed", Error_Description ,"")
// 
// //************************************************************************************************************************************************
// //@Method: print_NSFLetter_WhenReversing_ChequePayment(NsfReason)
// //@Author Deepthi
// //@Date 16 Jan 2020
// //@Description This function is to click on //yes// button to print NSF letter while reversing the cheque payemnt
// //Ex: print_NSFLetter_WhenReversing_ChequePayment("Insufficient Funds")
// //***********************************************************************************************************************************************
// print_NSFLetter_WhenReversing_ChequePayment(String NsfReason)
	// //get payment type
	// pmtType = getValueFromPaymentTab("1","Payment Type")
	// if pmtType = "Debit/Credit Card" || pmtType = "Mobile Payment"
		// //reverse the payment
		// reverse_Process_DoNotCreditToCustomer("Test")
	// else
		// //Click on Reverse Button
		// clickOnButton_Reverse()
		// //Click on Yes Button
		// clickButton_Level1PBwindow_DP("REVERSE PAYMENT","Yes")
		// //Click on Nsf Charge Yes
		// clickButton_InWindow("w_message","Yes")
		// //Select Nsf Reason Ex://Insufficient Funds
		// enter_NSF_Reason_Reverse_Payment(NsfReason)
		// //Click on Ok button in Nsf Reason 
		// clickButton_InWindow("w_search","Ok")
		// //Nsf Letter Print //No"
		// clickButton_InWindow("w_message","Yes")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : print_NSFLetter_WhenReversing_ChequePayment","Failed", Error_Description,"")
// 
// //************************************************************************************************************************************************
// //@Method: selectRow_BasedOnPaymentMethod_AndReverse_InPaymentWindow(expPaymentMethod)
// //@Author Deepthi
// //@Date 20 Jan 2020
// //@Description This function is to reverse the payment in payment screen based on payment type passed as parameter
// //Example: selectRow_BasedOnPaymentMethod_AndReverse_InPaymentWindow("Check")
// //***********************************************************************************************************************************************
// selectRow_BasedOnPaymentMethod_AndReverse_InPaymentWindow(String expPaymentMethod)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get Row Count 
	// rowCount = getRowCount_PbDataWindow("w_cust","dw_payments")
	// for itr = 1 To rowCount Step 1
		// //get payment method 
		// PaymentMethod = getValueFromPaymentTab(itr,"Payment Type")
		// if PaymentMethod = expPaymentMethod 
			// selectCell_In_PBDatWindow_DP("w_cust","dw_payments","#"&itr,"pmt_type")	
			// //Click on Reverse Button
			// clickOnButton_Reverse()
			// //Click on Yes Button
			// clickButton_Level1PBwindow_DP("REVERSE PAYMENT","Yes")
			// Sleep (2)
			// //Handle the Multiple Reasons Reverse Payments
			// handle_MultipleReasons_Reverse_Payments(PaymentMethod,"Test","Insufficient Funds")
			// Exit for
	// next
	// selectRow_BasedOnPaymentMethod_AndReverse_InPaymentWindow = itr
	// //Error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/Function: selectRow_BasedOnPaymentMethod_AndReverse_InPaymentWindow","Failed", Error_Description ,"")
// 
// //********************************************************************************************
// //@Method clickOnShowAllButton()
// //@Author Deepthi 
// //@Date 23 Jan 2020
// //@Description //This will Click on the show ALl Button in Auto dealers screen  
// //Example:  //This will Click on the show ALl Button()
// //******************************************************************************************** 
// clickOnShowAllButton()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// BranchPlus.InsightObject("btnShowAll").GetAttr(("visible",True,"5000")
	// BranchPlus.InsightObject("btnShowAll").Click()
	// Sleep (5)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to clickOnShowAllButton","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: get_RepresentativeName_CreditDecisionWindow()
// //@Author: Karthik
// //@Date 6th Feb 2020
// //@Description: This function is to get Representative Name in CreditDecisionWindow
// //Ex:  get_RepresentativeName_CreditDecisionWindow()
// //***************************************************************************************************************************
// get_RepresentativeName_CreditDecisionWindow()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Set PbTable = BranchPlus.CreditDecision.tbldwStep
	// Sleep (2)
	// get_RepresentativeName_CreditDecisionWindow = GetValue_PBDataWindow(PbTable,"#1","dealer_rep_id")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/select_RepresentativeName_CreditDecisionWindow","Failed", Error_Description,"")
// 
// //*********************************************************************************************
// //@methodName: enter_settlementDetails_In_AccountSettlements_Window
// //@Author Sumithra
// //@Date 19 Nov 2019
// //@Description This is to enter the settlement data based on field name in account settlement window
// //Ex  enter_settlementDetails_In_AccountSettlements_Window("Required Amount","100")
// //*********************************************************************************************
// enter_settlementDetails_In_AccountSettlements_Window(String fieldName,String Value)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get field id in settlement window
	// fieldId = getFieldIDBasedOnFieldName_SettlementsWindow(fieldName)
	// SetValueInPBDataWindow_DP("w_settlement","dw_list","#1",fieldId,Value)	
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed Step/Function: enter_settlementDetails_In_AccountSettlements_Window","Failed", Error_Description,"Y")
// 
// //*********************************************************************************************
// //@methodName: get_Data_From_AccountSettlements_Window
// //@Author Sumithra
// //@Date 12 Nov 2019
// //@Description This return the data based on column/field ID for the Field Name specified 
// //Ex  get_Data_From_AccountSettlements_Window("First Name")
// //*********************************************************************************************
// get_Data_From_AccountSettlements_Window(String fieldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get field id in settlement window
	// fieldId = getFieldIDBasedOnFieldName_SettlementsWindow(fieldName)
	// get_Data_From_AccountSettlements_Window = getValueInPBDataWindow_DP("w_settlement","dw_list","#1",fieldId)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed Step/Function: get_Data_From_AccountSettlements_Window","Failed", Error_Description,"Y")
// 
// //*********************************************************************************************
// //@methodName: getFieldIDBasedOnFieldName_SettlementsWindow
// //@Author Sumithra
// //@Date 12 Nov 2019
// //@Description This return the column/field ID for the Field Name specified 
// //Ex  getFieldIDBasedOnFieldName_SettlementsWindow("First Name")
// //*********************************************************************************************
// getFieldIDBasedOnFieldName_SettlementsWindow(String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Variable
	// idToReturn = null
	// //Fetching ID//s based on Name
	// if fldName = "Approved Settlement" 
		// idToReturn = "active_yn"
	// else if fldName = "Required Amount" 
		// idToReturn = "required_amt"
	// else if fldName = "Settlement Payoff Amt" 
		// idToReturn = "settlement_payoff_amt"
	// else if fldName = "Required Pct" 
		// idToReturn = "calc_required_pct"
	// else if fldName = "Description" 
		// idToReturn = "descr"
	// else if fldName = "Approved Date" 	
		// idToReturn = "compute_approved"
	// else if fldName = "Entry Date" 	
		// idToReturn = "compute_entry"
	// else if fldName = "Last Changed Date" 	
		// idToReturn = "compute_last_chg"
	// else if fldName = "Settlement Id" 	
		// idToReturn = "settlement_id"
	// else
		// writeReportLog("Please pass the Proper parameter value to method getFieldIDBasedOnFieldName_SettlementsWindow","Failed","","")
	// getFieldIDBasedOnFieldName_SettlementsWindow = idToReturn
// 
// //*****************************************************************************************************************************************
// //@methodName: enter_ReasonforChanging_EstimatedRecovery_In_AccountTab(reason)
// //@Description: This function is to enter reason for changing estimated recovery amount 
// //@Author: Sumithra
// //@Date 01 Aug 2019
// //Ex:  enter_ReasonforChanging_EstimatedRecovery_In_AccountTab("test")
// //*****************************************************************************************************************************************
// enter_ReasonforSettleLoan(String reason)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// if w_bp_frame.Pbwindow("pbname:=w_settlement").Pbwindow("pbname:=w_search").WinEditor("regexpwndclass:=Edit").WaitWhileExists(10) 
		// w_bp_frame.PbWindow("pbname:=w_settlement").PbWindow("pbname:=w_search").PbDataWindow("pbname:=dw_search").SetValue(CellData "#1","reason",reason
		// w_bp_frame.Pbwindow("pbname:=w_settlement").Pbwindow("pbname:=w_search").PbButton("regexpwndtitle:=Ok").Click()
// else
// writeReportLog("Failed in enter_ReasonforChanging_EstimatedRecovery_In_AccountTab","Failed", Error_Description,"")
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/enter_ReasonforChanging_EstimatedRecovery_In_AccountTab","Failed", Error_Description,"")
// function
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// Selectrow_BasedonTransID(String TransID)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get Row Count 
	// rowCount = getRowCount_PbDataWindow("w_cust","dw_payments")
	// for itr = 1 To rowCount Step 1
		// //get payment method 
		// transIDAct = getValueFromPaymentTab(itr,"Trans ID")
		// //Validating the Tansaction ID
		// if transIDAct = TransID 
			// selectCell_In_PBDatWindow_DP("w_cust","dw_payments","#"&itr,"pmt_type")
			// Exit for
	// Selectrow_BasedonTransID = itr
	// //Error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/Function: Selectrow_BasedonTransID","Failed", Error_Description ,"")
// 
// //***************************************************************************************
// //@MethodName selectRowBasedOnTransId_PaymentHistoryTable_PaymentTab
// //@Description this method will select the row in Payment History table based on  transaction ID passed to function
// //@author Karthik.Shekar
// //@Date 17 Mar 2020
// // selectRowBasedOnTransId_PaymentHistoryTable_PaymentTab("000000599968")
// //***************************************************************************************
// selectRowBasedOnTransId_PaymentHistoryTable_PaymentTab(String transID)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Sleep (2)
	// found = False
	// //get row count
	// rowCount = getRowCount_PbDataWindow("w_cust","dw_payments")	
	// for itr = 1 To rowCount
		// //get charge type
		// actTransID = getValueInPBDataWindow_DP("w_cust","dw_payments","#" + itr ,"trans_id")
		// if actTransID = transID 		
// selectCell_In_PBDatWindow_DP("w_cust","dw_payments","#" + itr ,"pmt_type")
			// found = True
			// Exit for						
	// //Logger	
	// if found = False 
	// writeReportLog("Transaction Id your searching dose not exist in Payment History Table table "&transID,"Failed", Error_Description ,"")
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/selectRowBasedOnTransId_ChgName_FromChargesTable_PaymentTab","Failed", Error_Description ,"")
// 
// //*****************************************************************************
// //@Method getValueFrom_ComponentTab_BasedOnRowIndex
// //@Author Karthik.Shekar
// //@Date 15 April 2020
// //@Description This function will get the Value from the Component Table based on Row Number and Column Name
// //EX:  getValueFrom_ComponentTab_BasedOnRowIndex("#1","Interest")
// //*****************************************************************************
// getValueFrom_ComponentTab_BasedOnRowIndex(String rowIndex,String columnName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get Field ID from Payment 
	// fieldId = getFieldIDBasedOnFieldName_ComponentTab(columnName)
	// //Returning the value
	// getValueFrom_ComponentTab_BasedOnRowIndex = getValueInPBDataWindow_DP("w_cust","dw_component","#" + rowIndex ,fieldId)
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getValueFrom_ComponentTab_BasedOnRowIndex","Failed", Error_Description ,"")
// 
// //*****************************************************************************
// //@Method identifyRowNumber_ComponentTab
// //@Author Karthik.Shekar
// //@Date 15 April 2020
// //@Description This function will return the row number for the Column Name and Column Value specified
// //@Return row Number/Index
// ////msgbox identifyRowNumber_ComponentTab("Component Description","Collateral Protection")
// //*****************************************************************************
// identifyRowNumber_ComponentTab(String columnName,String columnValue)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get Field ID from Payment 
	// fieldId = getFieldIDBasedOnFieldName_ComponentTab(columnName)
	// //Count of Rows
	// rowCnt = getRowCount_PbDataWindow("w_cust","dw_component")
	// found = false
	// for itr = 1 To rowCnt Step 1
		// actValue = getValueInPBDataWindow_DP("w_cust","dw_component","#" + itr ,fieldId)
		// //Comparing the Values
		// if Trim(actValue) = Trim(columnValue) 
			// identifyRowNumber_ComponentTab = itr
			// found = true
			// Exit for
	// //Negative Case Validation
	// if found = false 
		// writeReportLog("Column Value " +  columnValue +  " did not find in component table. Please check","Failed","","")
	// //Error Message
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getValueFrom_ComponentTab_BasedOnRowIndex","Failed", Error_Description ,"")
// 
// //*****************************************************************************
// //@Method getFieldIDBasedOnFieldName_ComponentTab
// //@Author Karthik.Shekar
// //@Date 15 April 2020
// //@Description This function will return column ID/Field Id for the Column Name specified
// //@Return column ID/Filed ID
// ////msgbox getFieldIDBasedOnFieldName_ComponentTab("Collateral Protection")
// //*****************************************************************************
// String getFieldIDBasedOnFieldName_ComponentTab(String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Variable
	// String idToReturn = ""
	// //Fetching ID//s based on Name
	// if fldName == "Component Description" || fldName == "Description" 
		// idToReturn = "descr"
	// else if fldName == "Charge Amt" 
		// idToReturn = "charge_amt"	
	// else if fldName == "Surchrg Amt" || fldName == "Surcharge Amt" 
		// idToReturn = "surcharge_amt"	
	// else if fldName == "Payable Amt" || fldName == "Tot Payable Amt" 
		// idToReturn = "total_payable_amt"
	// else if fldName == "Com Detail Payable Amt"  // THis Filed is Inside the Component Detail Pop Up named as "Payable Amt"
		// idToReturn = "payable_amt"
	// else if fldName == "Dealer Comm" 
		// idToReturn = "dealer_comm"	
	// else if fldName == "Rep Comm" 	
		// idToReturn = "rep_comm"
	// else if fldName == "Branch Comm" 	
		// idToReturn = "branch_comm"
	// else if fldName == "Claim Pend" 	
		// idToReturn = "pending_claim_yn"	
	// else if fldName == "Interest" || fldName == "Int Amt"	
		// idToReturn = "int_amt"	
	// else if fldName == "Start Date" 	
		// idToReturn = "start_dt"
	// else if fldName == "Date" 	
		// idToReturn = "end_dt"		
	// else if fldName == "Created By" 	
		// idToReturn = "cf_entry"
	// else if fldName == "Last Changed" 	
		// idToReturn = "cf_last_chg"	
	// else if fldName == "Cancel Y/N" 
		// idToReturn = "cancel_yn"
	// else if fldName == "opt" || fldName == "Component Description Opt" 
		// idToReturn = "opt"
	// else if fldName == "Cancel Fee"  
		// idToReturn = "cancel_fee"
	// else if fldName == "Cancel Date"  
		// idToReturn = "cancel_dt"
	// else if fldName == "Full Refund Days"  
		// idToReturn = "full_refund_days"
	// else if fldName == "Option"  
		// idToReturn = "opt_disp"
	// else if fldName == "Max Comm"  
		// idToReturn = "max_comm"
	// else if fldName == "Max VSC Miles"  
		// idToReturn = "max_miles"
	// else if fldName == "Max Odom Miles"  
		// idToReturn = "max_odometer_miles"
	// else if fldName == "Max Charge Amt"  
		// idToReturn = "max_charge_amt"
	// else if fldName == "Earn Method"  
		// idToReturn = "earn_method"
	// else if fldName == "Refund Method"  
		// idToReturn = "refund_method"
	// else if fldName == "Cancel Fee Pct" 
		// idToReturn = "cancel_fee_pct_refund"
	// else if fldName == "Cancel Fee Pct Max" 
		// idToReturn = "cancel_fee_pct_refund_max"
	// else
		// LogError("Please pass the Proper parameter value "+ fldName + " to method getFieldIDBasedOnFieldName_ComponentTab")
	// String sGetFieldIDBasedOnFieldName_ComponentTab = idToReturn
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getFieldIDBasedOnFieldName_ComponentTab","Failed", Error_Description ,"")
	// return idToReturn
// //*****************************************************************************
// //@Method isDescription_Available_In_CalculateLoanPayOff_Window
// //@Author Karthik.Shekar
// //@Date 15 April 2020
// //@Description This function will return True if the specified Component description is available in Payoff Window
// //@Return True || False
// //EX: msgbox isDescription_Available_In_CalculateLoanPayOff_Window("CPI AMOUNT DUE")
// //msgbox isDescription_Available_In_CalculateLoanPayOff_Window("REFUND - COLLATERAL PROTECTION")
// //*****************************************************************************
// isDescription_Available_In_CalculateLoanPayOff_Window(String descName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get row count
	// rowcount = getRowCount_PbDataWindow("w_display_payoff","dw_list")
	// //Exist
	// found = false
	// for itr = 1 to rowcount 
		// //get desc name
		// descValue = getValueInPBDataWindow_DP("w_display_payoff","dw_list","#"&itr,"descr")
		// if Trim(ToUpper(descValue)) = Trim(ToUpper(descName)) 
			// //get desc value
			// found = True
			// Exit for
	// //Return the Value
	// isDescription_Available_In_CalculateLoanPayOff_Window = found
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/isDescription_Available_In_CalculateLoanPayOff_Window","Failed", Error_Description ,"")
// 
// //*****************************************************************************
// //@Method is_ChargeType_Availablein_ChargesTable_PaymentTab
// //@Author Karthik.Shekar
// //@Date 15 April 2020
// //@Description This function will return True if the specified Charge Type is available in Charges Table of Payment Tab. else returns false
// //@Return True || False
// //Ex: //Msgbox is_ChargeType_Availablein_ChargesTable_PaymentTab("Late Charge")
// //   is_ChargeType_Availablein_ChargesTable_PaymentTab("CPI Charge")
// //*****************************************************************************
// is_ChargeType_Availablein_ChargesTable_PaymentTab(String chargeType)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Row Cnt
	// rowCnt = getRowCount_PbDataWindow("w_cust","dw_charges")	
	// //Flag
	// found = false
	// //looping
	// for itr = 1  To rowCnt				
		// actchargeType = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")		
		// //Validating for Data		
		// if ToUpper(actchargeType) = ToUpper(chargeType) 			
			// found = true
			// Exit for
	// //Return the Value 
	// is_ChargeType_Availablein_ChargesTable_PaymentTab = found
	// //Error handling 
// if GetErrorCount()>0  			
		// writeReportLog("Failed to is_ChargeType_Availablein_ChargesTable_PaymentTab","Failed", Error_Description ,"")
// 
// //*****************************************************************************
// //@Method is_PaymentType_Availablein_PaymentsHistoryTable_PaymentTab
// //@Author Karthik.Shekar
// //@Date 16 April 2020
// //@Description This function will return True if the specified Payment Type is available in Payment History Table of Payment Tab. else returns false
// //@Return True || False
// ////ex: is_PaymentType_Availablein_PaymentsHistoryTable_PaymentTab("CPI_FIX")
// //ex: is_PaymentType_Availablein_PaymentsHistoryTable_PaymentTab("Cash")
// //ex: is_PaymentType_Availablein_PaymentsHistoryTable_PaymentTab("CPI Added")
// //*****************************************************************************
// is_PaymentType_Availablein_PaymentsHistoryTable_PaymentTab(String paymentType)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// fieldId = getFieldIDBasedOnFieldName_PaymentTab("Payment Type")
	// //Row Cnt
	// rowCnt = getRowCount_PbDataWindow("w_cust","dw_payments")	
	// //Flag
	// found = false
	// //looping
	// for itr = 1  To rowCnt				
		// actPayType = getValueInPBDataWindow_DP("w_cust","dw_payments","#" + itr ,fieldId)		
		// //Validating for Data		
		// if ToUpper(actPayType) = ToUpper(paymentType) 			
			// found = true
			// Exit for
	// //Return the Value 
	// is_PaymentType_Availablein_PaymentsHistoryTable_PaymentTab = found
	// //Error handling 
// if GetErrorCount()>0  			
		// writeReportLog("Failed to is_PaymentType_Availablein_PaymentsHistoryTable_PaymentTab","Failed", Error_Description ,"")
// 
// //*****************************************************************************
// //@Method selectRow_in_ChooseAccountComponentToCancel
// //@Author Karthik.Shekar
// //@Date 16 April 2020
// //@Description This function will Select the row in a table which is inside "Choose Account Compnent To Cancel" window 
// //NOTE: We get this window when we select the Cancel Button form Component Tab
// //Ex: selectRow_in_ChooseAccountComponentToCancel("PFS GAP")
// //Ex: selectRow_in_ChooseAccountComponentToCancel("Collateral Protection")
// //*****************************************************************************
// selectRow_in_ChooseAccountComponentToCancel(String compDesc)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// fieldID = getFieldIDBasedOnFieldName_ComponentTab("Component Description")
	// //Row Count
	// cntOfRow = getRowCount_PbDataWindow("w_cancel_component","dw_component")
	// //Flag
	// found = false
	// for itr = 1 To cntOfRow Step 1
		// actDesc = getValueInPBDataWindow_DP("w_cancel_component","dw_component","#" + itr ,fieldID)
		// selectCell_In_PBDatWindow_DP("w_cancel_component","dw_component","#"&itr,fieldID)		
		// //Validating
		// if actDesc = compDesc 
			// found = True
			// Exit for	
	// if found = false 
	// writeReportLog("Could not find the Component with Desc " + compDesc,"Failed ","","")
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : selectRow_in_ChooseAccountComponentToCancel ","Failed", Error_Description,"")
// 
// //*****************************************************************************
// //@Method cancel_Component_ComponentTab
// //@Author Karthik.Shekar
// //@Date 16 April 2020
// //@Description This function will Cancel the Component Specified from Component Tab
// ////EX: cancel_Component_ComponentTab("Collateral Protection","03/19/2019")
// //*****************************************************************************
// cancel_Component_ComponentTab(String compDesc,String cancellationDate)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// clickCancelButton()
	// Sleep (5)
	// //Selectign the Orw
	// selectRow_in_ChooseAccountComponentToCancel(compDesc)
	// //Update Date
	// enter_CancelDate_In_ChooseAccountComponentToCancel(cancellationDate)
	// //Cancel Component
	// clickButton_CancelComponent_In_ChooseAccountComponentToCancel()
	// //Confirming the Cancel Operation
	// clickButton_In_Level2PBwindowTitle_WindowExistDP("Choose Account Component to Cancel","Cancel","Yes")
	// //Validating Cancellation is Succesfull
	// // validate_StaticText_And_Handle_DailogPopup("The selected component has been canceled.","Choose Account Component to Cancel","Cancel","OK")
	// clickButton_In_Level2PBwindowTitle_WindowExistDP("Choose Account Component to Cancel","Cancel","OK")
	// //Handlign the Late Charge Adjustment Popup the Cancel Operation
	// clickButton_In_Level2PBwindowTitle_WindowExistDP("Choose Account Component to Cancel","Late Charge Adjustment","Cancel")
	// // Closing the Winodw
	// clickButton_Close_In_ChooseAccountComponentToCancel()	
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : cancel_CPI_ComponentTab ","Failed", Error_Description,"")
// 
// //*****************************************************************************
// //@Method enter_CancelDate_In_ChooseAccountComponentToCancel
// //@Author Karthik.Shekar
// //@Date 16 April 2020
// //@Description This function will enter the Cancel Date in Choose Account Component To Cancel Window
// //// enter_CancelDate_In_ChooseAccountComponentToCancel("03/16/2020")
// //*****************************************************************************
// enter_CancelDate_In_ChooseAccountComponentToCancel(String cancelDate)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// cancelDate = formatDateWithSpecifiedDelimeter(cancelDate,"MMDDYYYY","/")
	// SetValueInPBDataWindow_DP("w_cancel_component","dw_cancel","#1","cancel_dt",cancelDate)
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : enter_CancelDate_In_ChooseAccountComponentToCancel ","Failed", Error_Description,"")
// 
// //*****************************************************************************
// //@Method clickButton_CancelComponent_In_ChooseAccountComponentToCancel
// //@Author Karthik.Shekar
// //@Date 16 April 2020
// //@Description This function will Click //Cancel Component// button in Choose Account Component To Cancel Window
// //// click_CancelButton_In_ChooseAccountComponentToCancel()
// //*****************************************************************************
// clickButton_CancelComponent_In_ChooseAccountComponentToCancel()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //click on ok button
	// clickButton_InWindow("w_cancel_component","C&ancel Component")
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : clickButton_CancelComponent_In_ChooseAccountComponentToCancel ","Failed", Error_Description,"")
// 
// //*****************************************************************************
// //@Method clickButton_CancelComponent_In_ChooseAccountComponentToCancel
// //@Author Karthik.Shekar
// //@Date 16 April 2020
// //@Description This function will Click //Close// button in Choose Account Component To Cancel Window
// //// clickButtton_Close_In_ChooseAccountComponentToCancel()
// //*****************************************************************************
// clickButton_Close_In_ChooseAccountComponentToCancel()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //click on ok button
	// clickButton_InWindow("w_cancel_component","Close")
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : clickButton_Close_In_ChooseAccountComponentToCancel ","Failed", Error_Description,"")
// 
// //******************************************************************************************
// //@Method Name filterData_In_ViewTransactionSearchCriteria_window
// //@Author Karthik
// //@Description This will set the Values in the View Transaction Search Criteria Window and clicks on OK Button
// //@Date 17 April 2020
// //NOTE: if you don//t want any values to be set you can pass "" string(Empty String)
// //EX:  filterData_In_ViewTransactionSearchCriteria_window(date(),date(),"08810005678","","")
// //************************************************************************************************
// filterData_In_ViewTransactionSearchCriteria_window(String startDate,String endDate,String loanNBR,String transID,String transType)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Entering Start Date
	// if Length(Trim(startDate)) > 0 
		// setValue_ViewTransactionSearchCriteria_window("START DATE",startDate)
	// if Length(Trim(endDate)) > 0 
		// //Entering Date
		// setValue_ViewTransactionSearchCriteria_window("END DATE",endDate)
	// //Entering Loan Number
	// setValue_ViewTransactionSearchCriteria_window("Loan Number",loanNBR) 
	// //Entering Loan Number
	// setValue_ViewTransactionSearchCriteria_window("Transaction ID",transID) 
	// if Trim(Length(transType)) > 0 
		// //Entering Loan Number
		// setValue_ViewTransactionSearchCriteria_window("Trans Type",transType)
	// //Clicking on Ok button in view transaction search criteria window
	// clickButtonInPBWindow("Transaction Search Criteria","Ok")
// 
// //*************************************************************************************************************************
// //@Method Validate_GL_Details_InViewTransacations
// //@Author Karthik.Shekar
// //@Date 17 April 2020
// //@Descripiton this will validate the entire details ( one GL Data ) in the View Transactions Windows
// //NOTE: You can ignore the Validation of Transaction ID by passing the empty string i.e., ""
// //Ex:  Validate_GL_Details_InViewTransacations("000000623217","1154","DB","Sales Loans-Auto-insurance add ons", "500.00","0.00")	
// //EX:  Validate_GL_Details_InViewTransacations("","1154","DB","Sales Loans-Auto-insurance add ons", "500.00","0.00") -- for Ignoring the Transaction id Validation
// //@Modified by Karthik
// //@Date 09 June 2020
// //Description Updated the to validate for the Positive Values in expDebitAMt and expCreditAmt by passing ">0" as parameter i.e., it will just validate for greater than 0 value has been dispalyed || not 
// //EX:  Validate_GL_Details_InViewTransacations("","1002","CR","Disbursement Account", "0.00",">0") 
// // 	 Validate_GL_Details_InViewTransacations("000000392598","1153","DB","Sales Loans-Auto-new loans", ">0", "0.00")
// //**************************************************************************************************************************
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															// 
// //	 
// //	//get row count
// //	GL_RowCount = getRowCount_PbDataWindow("w_view_transaction","dw_1")
// //	//Flag value 
// //	Flag = False
// //	
// //	//Identifying the Row and get the GL details Where COA is matched 
// //	for GL_Row = 1 To GL_RowCount
// //		//Get the GL Transaction Details
// //		acttranID = getValue_ViewTransactions_Window(GL_Row,"Transaction ID")
// //		act_COA = getValue_ViewTransactions_Window(GL_Row,"COA")		
// //		actCRDB = getValue_ViewTransactions_Window(GL_Row,"Credit Debit")
// //		actDescription = getValue_ViewTransactions_Window(GL_Row,"Description")
// //		actDebitAmt = getValue_ViewTransactions_Window(GL_Row,"Debit Amount")
// //		actCreditAmt = getValue_ViewTransactions_Window(GL_Row,"Credit Amount")
// //		
// //		//Validating all the data
// //		if (act_COA = expCOA) and (actCRDB = expCRDB)  and (actDescription = expDesc) and (ccur(actCreditAmt) = ccur(expCreditAmt)) and (ccur(actDebitAmt) = ccur(expDebitAmt))  	
// //			//Validating if the Transaction id is Not Numm
// //			if Trim(Length(expTransID)) > 0 
// //				if acttranID = expTransID 
// //					Flag = True
// //					Exit for
// //				
// //			//Ignoring the Transaction ID Validation
// //			else
// //				Flag = True
// //		  		Exit for 
// //			
// //		
// //	
// //	
// //		
// //	//Verifying the Flage value is False exit the execution
// //	if Flag = False 
// //		 writeReportLog("GL Valdiation is FAILED for Data >> " + expTransID + "|" + expCOA + "|" + expCRDB + "|" + expDesc + "|" + expCreditAmt + "|" + expDebitAmt, "Failed","","")
// //	else
// //		 writeReportLog("GL Valdiation is succesfull for the Data >> " + expTransID + "|" + expCOA + "|" + expCRDB + "|" + expDesc + "|" + expCreditAmt + "|" + expDebitAmt, "Passed","","")
// //	
// //	
// //	//Error Handling
// //	if GetErrorCount()>0 
// //		 writeReportLog("Failed Step/Function: Validate_GL_Details_InViewTransacations","Failed", Error_Description,"Y")
// //	
// //
// Validate_GL_Details_InViewTransacations(String expTransID,String expCOA,String expCRDB,String expDesc,String expDebitAmt,String expCreditAmt)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get row count
	// GL_RowCount = getRowCount_PbDataWindow("w_view_transaction","dw_1")
	// //Flag value 
	// Flag = False
	// //Identifying the Row and get the GL details Where COA is matched 
	// for GL_Row = 1 To GL_RowCount
		// //Get the GL Transaction Details
		// acttranID = getValue_ViewTransactions_Window(GL_Row,"Transaction ID")
		// act_COA = getValue_ViewTransactions_Window(GL_Row,"COA")		
		// actCRDB = getValue_ViewTransactions_Window(GL_Row,"Credit Debit")
		// actDescription = getValue_ViewTransactions_Window(GL_Row,"Description")
		// actDebitAmt = getValue_ViewTransactions_Window(GL_Row,"Debit Amount")
		// actCreditAmt = getValue_ViewTransactions_Window(GL_Row,"Credit Amount")
		// if IndexOf(expCreditAmt, ">0") <> 0 
			// //Validating all the data
			// if (act_COA = expCOA) and (actCRDB = expCRDB)  and (actDescription = expDesc) and (ccur(actCreditAmt) > ccur(0)) and (ccur(actDebitAmt) = ccur(expDebitAmt))  	
				// //Validating if the Transaction id is Not Numm
				// if Trim(Length(expTransID)) > 0 
					// if acttranID = expTransID 
						// Flag = True
						// Exit for
				// //Ignoring the Transaction ID Validation
				// else
					// Flag = True
			// Exit for 
		// else if IndexOf(expDebitAmt, ">0") <> 0 
			// //Validating all the data
			// if (act_COA = expCOA) and (actCRDB = expCRDB)  and (actDescription = expDesc) and (ccur(actCreditAmt) = ccur(expCreditAmt)) and (ccur(actDebitAmt) > ccur(0))  	
				// //Validating if the Transaction id is Not Numm
				// if Trim(Length(expTransID)) > 0 
					// if acttranID = expTransID 
						// Flag = True
						// Exit for
				// //Ignoring the Transaction ID Validation
				// else
					// Flag = True
			// Exit for 
		// else
			// //Validating all the data
			// if (act_COA = expCOA) and (actCRDB = expCRDB)  and (actDescription = expDesc) and (ccur(actCreditAmt) = ccur(expCreditAmt)) and (ccur(actDebitAmt) = ccur(expDebitAmt))  	
				// //Validating if the Transaction id is Not Numm
				// if Trim(Length(expTransID)) > 0 
					// if acttranID = expTransID 
						// Flag = True
						// Exit for
				// //Ignoring the Transaction ID Validation
				// else
					// Flag = True
			// Exit for 
	// //Verifying the Flage value is False exit the execution
	// if Flag = False 
		// writeReportLog("GL Valdiation is FAILED for Data >> " + expTransID + "|" + expCOA + "|" + expCRDB + "|" + expDesc + "|" + expDebitAmt + "|" + expCreditAmt, "Failed","","")
	// else
		// writeReportLog("GL Valdiation is succesfull for the Data >> " + expTransID + "|" + expCOA + "|" + expCRDB + "|" + expDesc + "|" + expDebitAmt + "|" + expCreditAmt, "Passed","","")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed Step/Function: Validate_GL_Details_InViewTransacations","Failed", Error_Description,"Y")
// 
// //***********************************************************************************
// //@Method getRowCount_ViewTransactions_Window
// //@Author Karthik.Shekar
// //@Date 17 Apr 2020
// //@Description this fucntion will get the row count of VIew Transactions Window i.e., Number of GL dispalyed in a Transaction
// //ex: getRowCount_ViewTransactions_Window()
// //*********************************************************************************
// getRowCount_ViewTransactions_Window()
// getRowCount_ViewTransactions_Window = getRowCount_PbDataWindow("w_view_transaction","dw_1")
// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed Step/Function: getRowCount_ViewTransactions_Window","Failed", Error_Description,"Y")
// RemoveFunction
// //***************************************************************
// //@Method getRowCount_In_AmountDueTodayBreakdownWindow_PaymentTab
// //@Date 21 Apr 2020
// //@Author Karthik.Shekar
// //@Description THis fucntion will get the Row Count of Table which is inside the Amount Due Today Break Down WIndow
// //@Return rowCnt
// //EX: msgbox getRowCount_In_AmountDueTodayBreakdownWindow_PaymentTab()
// //****************************************************************
// getRowCount_In_AmountDueTodayBreakdownWindow_PaymentTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// getRowCount_In_AmountDueTodayBreakdownWindow_PaymentTab = getRowCount_PbDataWindow("w_view_report","dw_list")
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getRowCount_In_AmountDueTodayBreakdownWindow_PaymentTab","Failed", Error_Description,"")
// 
// //****************************************************************************
// //@MethodName getValueFrom_ComponentDetail_Window_ComponentTab
// //@Author Karthik.SHkear
// //@Date 21-Apr-2020
// //@Description THis function will get the Value from the Component Detail Window which will come in Component Tab
// //EX: msgbox getValueFrom_ComponentDetail_Window_ComponentTab("Cancel Y/N")
// //**********************************************************************
// String getValueFrom_ComponentDetail_Window_ComponentTab(String fieldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Fetching Field ID
	// String fieldId = getFieldIDBasedOnFieldName_ComponentTab(fieldName)
	// //Returnign the Value
	// String sGetValueFrom_ComponentDetail_Window_ComponentTab = getValueInPBDataWindow_DP("w_acct_component_detail","dw_list","#1",fieldId)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getValueFrom_ComponentDetail_Window_ComponentTab","Failed", Error_Description ,"")
	// return sGetValueFrom_ComponentDetail_Window_ComponentTab
// //**********************************************************************************************
// //@methodName: activateCell_In_PBDatWindow_DP(windowName, dataWindowName, rowNumber, colID)
// //@Description: This function will activate/Double click the Cell in the PBData Window
// //@Author: Karthik Shekar
// //@Date 21 Apr 2020
// //Ex:  activateCell_In_PBDatWindow_DP("w_cust","dw_component","#1" ,"comp_Desc")
// //***********************************************************************************************
// activateCell_In_PBDatWindow_DP(String windowName,String dataWindowName,String rowNumber,String colID)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.Pbwindow("pbname:=" + windowName).PbDataWindow("pbname:=" + dataWindowName).WaitWhileExists(10) 
		// w_bp_frame.Pbwindow("pbname:=" + windowName).PbDataWindow("pbname:=" + dataWindowName).SetActive()Cell(rowNumber,colID)
		// if GetErrorCount()>0  			
			// writeReportLog("activateCell_In_PBDatWindow_DP: Looks like colID > " + colID + " is not Available","Failed", Error_Description ,"")
	// else
		// writeReportLog("activateCell_In_PBDatWindow_DP","Failed","DataWindow >> " + dataWindowName + " Does not Exit inside the window " + windowName,"")
	// //Error handling 
// if GetErrorCount()>0  			
		// writeReportLog("Failed to activateCell_In_PBDatWindow_DP","Failed", Error_Description ,"")
// 
// //*****************************************************************************
// //@Method openComponentDetail_ComponentTab
// //@Author Karthik.Shekar
// //@Date 21 April 2020
// //@Description This function will open Component details page for the Column Name and Column Value specified
// //@Return nothing
// ////msgbox openComponentDetail_ComponentTab("Component Description","Collateral Protection")
// //*****************************************************************************
// openComponentDetail_ComponentTab(String columnName,String columnValue)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get Field ID from Payment 
	// fieldId = getFieldIDBasedOnFieldName_ComponentTab(columnName)
	// //Count of Rows
	// rowCnt = getRowCount_PbDataWindow("w_cust","dw_component")
	// found = false
	// for itr = 1 To rowCnt Step 1
		// actValue = getValueInPBDataWindow_DP("w_cust","dw_component","#" + itr ,fieldId)
		// //Comparing the Values
		// if Trim(actValue) = Trim(columnValue) 
			// BranchPlus.SetActive()
			// //Double CLick
			// activateCell_In_PBDatWindow_DP("w_cust","dw_component","#" + itr ,fieldId)
			// found = true
			// Exit for
	// //Negative Case Validation
	// if found = false 
		// writeReportLog("Column Value " +  columnValue +  " did not find in component table. Please check","Failed","","")
	// //Error Message
	// if GetErrorCount()>0 
		// writeReportLog("Failed in openComponentDetail_ComponentTab","Failed", Error_Description ,"")
// 
// //**************************** Generic Functions*******************************************
// //@Method TypeText_In_WinEditor_DP
// //@Author Karthik.Shekar
// //@Date 22 Apr 2020
// //@Description THis will enter the text inside WinEditor object and that can be identified by it//s Parent//s Window Title
// //EX:  TypeText_In_WinEditor_DP("Enter reason for reversal","Testing")
// //EX:  TypeText_In_WinEditor_DP("Waive - Enter reason","Waive the Fee")
// //************************************************************************************
// TypeText_In_WinEditor_DP(String windowTitle,String textToSet)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("regexpwndtitle:=" + windowTitle).WinEditor("regexpwndclass:=Edit").WaitWhileExists(15) 
		// w_bp_frame.PbWindow("regexpwndtitle:=" + windowTitle).WinEditor("regexpwndclass:=Edit").SetValue(CaretPos 0,0
		// //Input Reason
		// w_bp_frame.PbWindow("regexpwndtitle:=" + windowTitle).WinEditor("regexpwndclass:=Edit")TypeKeys textToSet
	// else if w_bp_frame.PbWindow("text:=" + windowTitle).WinEditor("regexpwndclass:=Edit").WaitWhileExists(2) 
		// w_bp_frame.PbWindow("text:=" + windowTitle).WinEditor("regexpwndclass:=Edit").SetValue(CaretPos 0,0
		// //Input Reason
		// w_bp_frame.PbWindow("text:=" + windowTitle).WinEditor("regexpwndclass:=Edit")TypeKeys textToSet
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/TypeText_In_WinEditor_DP","Failed",Error_Description,"Y")
// 
// //*************************************************************************************
// //@Method validateData_In_PaymentHistoryTable_PaymentTab_BasedOnRow
// //@Author Karthik.Shekar
// //@Date 21 Apr 2020
// //@Description This will validate for the Data in the Payment History Table (for all Column/Fileds) at a Specified row
// //NOTE: YOu can ignore the Validation of any field/Column data by passing the Empty string to that Parameter
// //ALso Please refer the below examples for More Understanding. 
// //EX:  validateData_In_PaymentHistoryTable_PaymentTab_BasedOnRow(1,"","","","","","","","","","","","","") --> Negative Case
// //EX:  validateData_In_PaymentHistoryTable_PaymentTab_BasedOnRow(1,"04/06/2020","","290.00","290.00","","","","","","","","","")---> Combination 1 with Limited Fields Validation
// //EX:  validateData_In_PaymentHistoryTable_PaymentTab_BasedOnRow(1,"04/08/2020","Cash","290.00","290.00","03/2020","129.20","7.00","153.08","5967.89","Current","123456","00000061234","SAS") --> Option 2 validation of data for ALl Fields
// //*******************************************************************************************************************************************
// validateData_In_PaymentHistoryTable_PaymentTab_BasedOnRow(String rowNumber,String expPayDate,String expPayMethod,String expReceivedAmt,String expAppliedAmt,String expPaidThru,String expPrincipal,String expOthers,String expInterest,String expPrincipalBal,String expStatus,String expCheckNum,String expTransId,String expTransUserID)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// actPayDate = Split(getValueFromPaymentTab(rowNumber,"Pay Date"))(0)
	// actPayMethod = getValueFromPaymentTab(rowNumber,"Payment Type")
	// actReceivedAmt = getValueFromPaymentTab(rowNumber,"Received Amount")
	// actAppliedAmt = getValueFromPaymentTab(rowNumber,"Applied Amount")
	// actPaidThru = getValueFromPaymentTab(rowNumber,"Paid Thru Date")
	// actPrincipal = getValueFromPaymentTab(rowNumber,"Principal")
	// actOthers =  getValueFromPaymentTab(rowNumber,"Other")
	// actInterest = getValueFromPaymentTab(rowNumber,"Interest")
	// actPrincipalBalance = getValueFromPaymentTab(rowNumber,"Principal Bal")
	// actStatus = getValueFromPaymentTab(rowNumber,"Status")
	// actCheckNum = getValueFromPaymentTab(rowNumber,"Check #")
	// actTransId = getValueFromPaymentTab(rowNumber,"Trans ID")
	// actTransusrId = Trim(Split(getValueFromPaymentTab(rowNumber,"Trans Date"),"-")(1))
	// //Flag and String to result output
	// dataValidated = ""
	// found = null
	// //Ignoring if Empty String is Passed
	// if Length(Trim(expPayDate)) > 0  
		// if cdate(expPayDate) <> cdate(actPayDate) 
			// writeReportLog("Validation Failed for Pay Date at Row " + rowNumber + " Act Value:" + actPayDate + " Exp Value:" + expPayDate, "Failed","","")
			// found = false
		// else
			// dataValidated = "Pay Date :" + expPayDate
			// found = true
	// //Payment Type
	// if Length(Trim(expPayMethod)) > 0  
		// if expPayMethod <> actPayMethod 
			// writeReportLog("Validation Failed for Pay Method at Row " + rowNumber + " Act Value:" + actPayMethod + " Exp Value:" + expPayMethod, "Failed","","")
			// found = false
		// else
			// dataValidated = dataValidated + " | Pay Method :" + expPayMethod
			// found = true
	// //Received Amount
	// if Length(Trim(expReceivedAmt)) > 0  
		// if ccur(expReceivedAmt) <> ccur(actReceivedAmt) 
			// writeReportLog("Validation Failed for //Received Amount// at Row " + rowNumber + " Act Value:" + actReceivedAmt + " Exp Value:" + expReceivedAmt, "Failed","","")
			// found = false
		// else
			// dataValidated = dataValidated + " | Received Amount :" + expReceivedAmt
			// found = true
	// //Applied Amount
	// if Length(Trim(expAppliedAmt)) > 0  
		// if ccur(expAppliedAmt) <> ccur(actAppliedAmt) 
			// writeReportLog("Validation Failed for //Applied Amount// at Row " + rowNumber + " Act Value:" + actAppliedAmt + " Exp Value:" + expAppliedAmt, "Failed","","")
			// found = false
		// else
			// dataValidated = dataValidated + " | Applied Amount :" + expReceivedAmt
			// found = true
	// //Paid Through Amount
	// if Length(Trim(expPaidThru)) > 0  
		// if expPaidThru <> actPaidThru 
			// writeReportLog("Validation Failed for //Paid Thru// at Row " + rowNumber + " Act Value:" + actPaidThru + " Exp Value:" + expPaidThru, "Failed","","")
			// found = false
		// else
			// dataValidated = dataValidated + " | Paid Through :" + actPaidThru
			// found = true
	// //AMt Applied to Principal
	// if Length(Trim(expPrincipal)) > 0  
		// if ccur(expPrincipal) <> ccur(actPrincipal) 
			// writeReportLog("Validation Failed for //Amount applied to Principal// at Row " + rowNumber + " Act Value:" + actPrincipal + " Exp Value:" + expPrincipal, "Failed","","")
			// found = false
		// else
			// dataValidated = dataValidated + " | Principal :" + actPrincipal
			// found = true
	// //AMt Applied to Others
	// if Length(Trim(expOthers)) > 0  
		// if ccur(expOthers) <> ccur(actOthers) 
			// writeReportLog("Validation Failed for //Others Amount// at Row " + rowNumber + " Act Value:" + actOthers + " Exp Value:" + expOthers, "Failed","","")
			// found = false
		// else
			// dataValidated = dataValidated + " | Others :" + actOthers
			// found = true
	// //AMt Applied to Interest
	// if Length(Trim(expInterest)) > 0  
		// if ccur(expInterest) <> ccur(actInterest) 
			// writeReportLog("Validation Failed for //Interest Amount// at Row " + rowNumber + " Act Value:" + actInterest + " Exp Value:" + expInterest, "Failed","","")
			// found = false
		// else
			// dataValidated = dataValidated + " | Interest :" + actInterest
			// found = true
	// //Principal Balance
	// if Length(Trim(expPrincipalBal)) > 0  
		// if ccur(expPrincipalBal) <> ccur(actPrincipalBalance) 
			// writeReportLog("Validation Failed for //Princial Balance// at Row " + rowNumber + " Act Value:" + actPrincipalBalance + " Exp Value:" + expPrincipalBal, "Failed","","")
			// found = false
		// else
			// dataValidated = dataValidated + " | Principal Balance :" + actPrincipalBalance
			// found = true
	// //Status
	// if Length(Trim(expStatus)) > 0  
		// if expStatus <> actStatus 
			// writeReportLog("Validation Failed for //Status// at Row " + rowNumber + " Act Value:" + actStatus + " Exp Value:" + expStatus, "Failed","","")
			// found = false
		// else
			// dataValidated = dataValidated + " | Status :" + actStatus
			// found = true
	// //Check Number
	// if Length(Trim(expCheckNum)) > 0  
		// if expCheckNum <> actCheckNum 
			// writeReportLog("Validation Failed for //Check #// at Row " + rowNumber + " Act Value:" + actCheckNum + " Exp Value:" + expCheckNum, "Failed","","")
			// found = false
		// else
			// dataValidated = dataValidated + " | Check # :" + actCheckNum
			// found = true
	// //TRansaction iD
	// if Length(Trim(expTransId)) > 0  
		// if expTransId <> actTransId 
			// writeReportLog("Validation Failed for //Transaction ID// at Row " + rowNumber + " Act Value:" + actTransId + " Exp Value:" + expTransId, "Failed","","")
			// found = false
		// else
			// dataValidated = dataValidated + " | Transaction ID :" + actTransId
			// found = true
	// //User iD
	// if Length(Trim(expTransUserID)) > 0  
		// if ToUpper(expTransUserID) <> ToUpper(actTransusrId) 
			// writeReportLog("Validation Failed for //Transaction user ID// at Row " + rowNumber + " Act Value:" + actTransusrId + " Exp Value:" + expTransUserID, "Failed","","")
			// found = false
		// else
			// dataValidated = dataValidated + " | Transaction User ID :" + actTransusrId
			// found = true
	// //Logger
	// if found = true 
		// writeReportLog("Validation of Payment Row at index " + rowNumber + " is succesfull for data --> " + dataValidated,"Passed","","")
	// else if found = null || IsNull(found) 
		// writeReportLog("Payment Details to validate is empty. Please check  ","Failed","","")		
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in validateData_In_PaymentHistoryTable_PaymentTab_BasedOnRow","Failed", Error_Description ,"")
// 
// //***************************************************************************************************
// //@Method reversePayment_basedOn_NSFType
// //@Author Karthik.Shekar
// //@Date 22 Apr 2020
// //@Description this function will reverse the payment based on NSF Type
// //NOTE: THis is valid to use for any type of Reversals which involves NSF reversals (Basiy any check kind of payment)
// //EX:  reversePayment_basedOn_NSFType("Check", False,"","", "Non NSF Reversal")
// //EX  reversePayment_basedOn_NSFType("Check",True,"forged","No", "NSF Reversal")
// //	 reversePayment_basedOn_NSFType("Money Order",True,"forged","No", "NSF Reversal")
// //	 reversePayment_basedOn_NSFType("Dealer Check",True,"forged","No", "NSF Reversal")
// //******************************************************************************************************
// reversePayment_basedOn_NSFType(String paymentMethod,String isNSFCheck,String nsfReason,String printNSFCheck,String reversalReason)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Click on Reverse Button
	// clickOnButton_Reverse()
	// //Click on Yes Button
	// clickButton_Level1PBwindow_DP("REVERSE PAYMENT","Yes")
	// //Handling Based on Payment Types
	// if IndexOf(paymentMethod,"Check") <> 0 || paymentMethod = "Money Order" 
		// //Handling based on NSF Type
		// if isNSFCheck = True || ToUpper(isNSFCheck) = "YES" 
			// //Click on YES Button
			// clickButton_Level1PBwindow_DP("NSF","Yes")
			// //Selecting NSF Reason
			// enter_NSF_Reason_Reverse_Payment(nsfReason)
			// //Click on Ok Button
			// clickButton_Level1PBwindow_DP("Enter reason for reversal","Ok")						
			// //Print NSF Check
			// clickButton_Level1PBwindow_DP("NSF Letter",printNSFCheck)
		// else
			// //Click on NO Button
			// clickButton_Level1PBwindow_DP("NSF","No")
			// //Reversal Reason
			// // TypeText_In_WinEditor_DP("Enter reason for reversal","CPI Payoff Reversal")
			// enter_Payment_ReversalTypeAndReason("Other",reversalReason) //9.6.0 Changes
			// //Click on Yes Button
			// clickButton_Level1PBwindow_DP("Enter reason for reversal","Ok")
// 
// //****************************************************************************************************
// //@method getValue_From_AlliedInsuranceTable_InsuranceTab_BasedOnRowNumber
// //@Author Karthik.Shekar
// //@Description This will fetch the Values displayed in Allied Insurance Table Insurance Tab
// //@Date 12 May 2020
// //@Return Field Value
// //EX: msgbox getValue_From_AlliedInsuranceTable_InsuranceTab_BasedOnRowNumber("1","Loan Balance")
// //	msgbox getValue_From_AlliedInsuranceTable_InsuranceTab_BasedOnRowNumber(1, "Ins Company Name")	
// //	msgbox getValue_From_AlliedInsuranceTable_InsuranceTab_BasedOnRowNumber("1", "Ins Policy Batch")
// //	msgbox getValue_From_AlliedInsuranceTable_InsuranceTab_BasedOnRowNumber(1, "Dedcuitble Amt Collission")
// //********************************************************************************************************
// getValue_From_AlliedInsuranceTable_InsuranceTab_BasedOnRowNumber(String rowNum,String fieldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //fetching Field Id
	// fldId = getFieldIDBasedOnFieldName_AlliedInsurance_InsuranceTab(fieldName)
	// //Return the Value
	// getValue_From_AlliedInsuranceTable_InsuranceTab_BasedOnRowNumber = getValueInPBDataWindow_DP("w_cust","dw_allied_ins","#" + rowNum,fldId)
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getValue_From_AlliedInsuranceTable_InsuranceTab_BasedOnRowNumber","Failed", Error_Description ,"")
// 
// //****************************************************************************************************
// //@method getCount_Of_AlliedInsuranceRecords_InsuranceTab
// //@Author Karthik.Shekar
// //@Description This will return the count of Insurnace Records Displayed in Insrance Tab
// //@Date 12 May 2020
// //@Return Count of Records
// //EX msgbox getCount_Of_AlliedInsuranceRecords_InsuranceTab()
// //******************************************************************************************************
// getCount_Of_AlliedInsuranceRecords_InsuranceTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// getCount_Of_AlliedInsuranceRecords_InsuranceTab = getRowCount_PbDataWindow("w_cust","dw_allied_ins")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getCount_Of_AlliedInsuranceRecords_InsuranceTab","Failed", Error_Description ,"")
// 
// //****************************************************************************************************
// //@method getFieldIDBasedOnFieldName_AlliedInsurance_InsuranceTab
// //@Author Karthik.Shekar
// //@Description This will return the field Id for the Field Name passed to Function
// //@Date 12 May 2020
// //@Return field ID
// //EX: msgbox getFieldIDBasedOnFieldName_AlliedInsurance_InsuranceTab("Loan Balance")
// //	msgbox getFieldIDBasedOnFieldName_AlliedInsurance_InsuranceTab("Ins Company Name")
// //	msgbox getFieldIDBasedOnFieldName_AlliedInsurance_InsuranceTab("Ins Policy Batch")
// //	msgbox getFieldIDBasedOnFieldName_AlliedInsurance_InsuranceTab("Dedcuitble Amt Collission")
// //*******************************************************************************************************
// getFieldIDBasedOnFieldName_AlliedInsurance_InsuranceTab(String fieldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Initializing the return Value
	// fieldId = ""
	// //Identifying the Value to return		
	// if fieldName = "Ins Company Name" 
		// fieldId = "insurerinsurancecompanynam"
	// else if fieldName = "Ins Policy Nbr" 	
		// fieldId = "insurancepolicynumber"
	// else if fieldName = "Collateral VIN" 	
		// fieldId = "collateralvin"
	// else
		// //Parsing/Convertng the String
		// if IndexOf(fieldName, "Ins ") <> 0 
			// fieldName = Replace(fieldName,"Ins ", "Insurance ")	
		// else if IndexOf(fieldName, "Amt ") <> 0 
			// fieldName = Replace(fieldName,"Amt ", "Amount ")		
		// //Removing Spaces
		// fieldId = ToLower(Replace(fieldName," ",""))	
	// //Returning Value
	// getFieldIDBasedOnFieldName_AlliedInsurance_InsuranceTab = fieldId
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getFieldIDBasedOnFieldName_AlliedInsurance_InsuranceTab","Failed", Error_Description ,"")
// 
// //****************************************************************************************************
// //@method isBannerDisaplayed
// //@Author Karthik.Shekar
// //@Description This check if the Banner is displayed || not
// //@Date 12 May 2020
// //@Return True / False
// //EX: msgbox isBannerDisaplayed()
// //****************************************************************************************************
// isBannerDisaplayed()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// isBannerDisaplayed = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_account_status_display").GetAttr(("visible",True,"10000")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in isBannerDisaplayed","Failed", Error_Description ,"")
// 
// //************************************************************************************************************************************************************
// //@methodName : setValuesIn_CustomerSearch
// //@Author : Karthik
// //@Date 13 May 2020
// //@Description This function will set values in Customer search Window 
// // NOTE THis FUnction will work in Customer Search Window Displayed in "REPORTS as well as "FORMS" 
// //Ex:  setValuesIn_CustomerSearch("Last Name","Shekar") --> Setting Value in "Text Field"
// // 	 setValuesIn_CustomerSearch("Delinq All","ON") --> Checking the "Check Box"
// //    setValuesIn_CustomerSearch("Acct Type","Automobile Loan - Interest Bearing") --> Selecting value from "SELECT LIST"
// //************************************************************************************************************************************************************ 
// setValuesIn_CustomerSearch(String fldNameToSet,String valueToSet)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //Fetching Field ID
	// fieldID = getFieldId_BaseOnFieldName_CustomerSearch(fldNameToSet)
	// //Setting Value
	// SetValueInPBDataWindow_DP("w_search","dw_search","#1", fieldID, valueToSet)
	// //Error Handling	
// if GetErrorCount()>0 
		// writeReportLog("Failed in step/setValuesIn_CustomerSearch","Failed", Error_Description,"")
// RemoveFunction
// //*********************************************************************************************
// //@methodName : getFieldId_BaseOnFieldName_CustomerSearch
// //@Author : Karthik
// //@Date 13 May 2020
// //@Description This function will get Field ID for the Field Names specified in Customer search Window 
// //Ex:  getFieldId_BaseOnFieldName_CustomerSearch("Last Name")
// // 	 getFieldId_BaseOnFieldName_CustomerSearch("Delinq All")
// //    getFieldId_BaseOnFieldName_CustomerSearch("Acct Type")
// //*********************************************************************************************s
// getFieldId_BaseOnFieldName_CustomerSearch(fieldName)
	// Select Case fieldName
		// Case "Loan Nbr"
			// getFieldId_BaseOnFieldName_CustomerSearch = "loan_nbr"
		// Case "Last Name"
			// getFieldId_BaseOnFieldName_CustomerSearch = "last_name"
		// Case "First Name"
			// getFieldId_BaseOnFieldName_CustomerSearch = "first_name"
		// Case "SSN"
			// getFieldId_BaseOnFieldName_CustomerSearch = "ssn"
		// Case "Reference Nbr"
			// getFieldId_BaseOnFieldName_CustomerSearch = "acct_id"
		// Case "Customer ID"
			// getFieldId_BaseOnFieldName_CustomerSearch = "cust_id"
		// Case "Delinq All"
			// getFieldId_BaseOnFieldName_CustomerSearch = "del_all"
		// Case "Current"
			// getFieldId_BaseOnFieldName_CustomerSearch = "del_current"
		// Case "Potential"
			// getFieldId_BaseOnFieldName_CustomerSearch = "del_potential"
		// Case "Delinq 30"
			// getFieldId_BaseOnFieldName_CustomerSearch = "del_30"
		// Case "Delinq 60"
			// getFieldId_BaseOnFieldName_CustomerSearch = "del_60"
		// Case "Delinq 90"
			// getFieldId_BaseOnFieldName_CustomerSearch = "del_90"
		// Case "Delinq > 90"
			// getFieldId_BaseOnFieldName_CustomerSearch = "del_greater_90"
		// Case "Acct Type"
			// getFieldId_BaseOnFieldName_CustomerSearch = "acct_type"
		// Case else
			// writeReportLog("Field ID/Col Id is not available for Field name " + fieldName + " please check","Failed","","")	
	// Select
// //Error Handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getFieldId_BaseOnFieldName_CustomerSearch","Failed", Error_Description,"")
// RemoveFunction
// //***********************************************************************************************************************************
// //@Method: enterDetails_In_Credit_Or_DebitCard_Input_Window(testDataPath,TestCardType)
// //@Author Ambika
// //@Date 23 Sep 2019
// //@Description This function is to enter the Credit/DebitCard details in Credit/DebitCard input window
// //Ex:  enterDetails_In_Credit_Or_DebitCard_Input_Window(testDataPath,"Visa")
// //************************************************************************************************************************************
// enterDetails_In_Credit_Or_DebitCard_Input_Window(String TestCardType)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Test Data Path
	// testDataPath = System.GetEnvVar("BranchPlusSharedPath") + "Global_TestData\DebitOrCreditCard_Repay_TestData.xlsx"
	// //Importing required Test Data from Excel Sheet
	// addNewDataTableAndimportSheet(testDataPath,"TestCard_Details","TestCard_Details")
	// //*********************************************************************************************
	// // Reading Data which is required for Test Script based on Test card type
	// //*********************************************************************************************
	// if ToUpper(TestCardType) = "VISA" 
		// CardNO = DataTable.Value("Visa_CardNO","TestCard_Details")
		// CVV = DataTable.Value("Visa_CVV","TestCard_Details")
		// Zipcode = DataTable.Value("Visa_Zipcode","TestCard_Details")
		// Exp_Month = DataTable.Value("Visa_Exp_Month","TestCard_Details")
		// Exp_Year = DataTable.Value("Visa_Exp_Year","TestCard_Details")
		// Manual_Input = DataTable.Value("Visa_Manual_Input","TestCard_Details")
	// else if ToUpper(TestCardType) = "MASTERCARD" 
		// CardNO = DataTable.Value("Master_CardNo","TestCard_Details")
		// CVV = DataTable.Value("Master_CVV","TestCard_Details")
		// Zipcode = DataTable.Value("Master_Zipcode","TestCard_Details")
		// Exp_Month = DataTable.Value("Master_Exp_Month","TestCard_Details")
		// Exp_Year = DataTable.Value("Master_Exp_Year","TestCard_Details")
		// Manual_Input = DataTable.Value("Master_Manual_Input","TestCard_Details")
	// else
		// //Logger
		// writeReportLog("Please pass the Proper TestCardType to method enterDetails_In_Credit_Or_DebitCard_Input_Window","Failed","","")	
	// //entering required debit card input details
	// setValueIn_Credit_Or_DebitCard_Input_Window("card number",CardNO)
	// setValueIn_Credit_Or_DebitCard_Input_Window("EXPIRATION MONTH",Exp_Month)
	// setValueIn_Credit_Or_DebitCard_Input_Window("EXPIRATION year",Exp_Year)
	// setValueIn_Credit_Or_DebitCard_Input_Window("manual input",Manual_Input)
	// setValueIn_Credit_Or_DebitCard_Input_Window("CVV2 CODE",CVV)
	// setValueIn_Credit_Or_DebitCard_Input_Window("account zipcode",Zipcode)
	// //click on ok button
	// clickButton_In_Level2PBwindowTitle_DP("Process Payment","Credit / Debit Card Input","Ok")
	// //Logger
	// writeReportLog("//"&TestCardType&"// card details added successfully in Credit/Debit card input window","Passed","","")
	// //Error handaling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/enterDetails_In_Credit_Or_DebitCard_Input_Window","Failed", Error_Description ,"Y")
// 
// //***********************************************************************************************************************************
// //@Method: setValueIn_Credit_Or_DebitCard_Input_Window(fldName,value)
// //@Author Ambika
// //@Date 20 Sep 2019
// //@Description This function is to set the value in Credit/DebitCard input window
// //Ex:  setValueIn_Credit_Or_DebitCard_Input_Window("card number","4111 1111 1111 1111")
// //	  setValueIn_Credit_Or_DebitCard_Input_Window("EXPIRATION MONTH","07")
// //	  setValueIn_Credit_Or_DebitCard_Input_Window("EXPIRATION year","20")
// //************************************************************************************************************************************
// setValueIn_Credit_Or_DebitCard_Input_Window(String fldName,String value)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get field Id based on field name
	// fieldID = getFieldIDBasedOnFieldName_CreditOrDebit_Card_Window(fldName)
	// //set value
	// SetValueIn2LevelPBDataWindow_DP("w_payment","w_payment_credit","dw_card","#1",fieldID,value)
	// //Error handaling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/setValueIn_Credit_Or_DebitCard_Input_Window","Failed", Error_Description ,"Y")
// 
// //*********************************************************************************************
// //@methodName: getFieldIDBasedOnFieldName_CreditOrDebit_Card_Window(fldName)
// //@Author Ambika
// //@Date 20 Sep 2019
// //@Description This return the column/field ID for the Field Name specified for credit/debit card input window
// //@Returing Field ID
// //Ex  getFieldIDBasedOnFieldName_CreditOrDebit_Card_Window("First Name")
// //*********************************************************************************************
// getFieldIDBasedOnFieldName_CreditOrDebit_Card_Window(String fldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Fetching ID//s based on Name
	// if ToUpper(fldName) = "CARD NUMBER" 
		// idToReturn = "cc_nbr"
	// else if ToUpper(fldName) = "EXPIRATION MONTH" 
		// idToReturn = "exp_mo"
	// else if ToUpper(fldName) = "EXPIRATION YEAR" 
		// idToReturn = "exp_yr"
	// else if ToUpper(fldName) = "FIRST NAME" 
		// idToReturn = "first_name"
	// else if ToUpper(fldName) = "LAST NAME" 
		// idToReturn = "last_name"
	// else if ToUpper(fldName) = "MANUAL INPUT" 
		// idToReturn = "input_method"
	// else if ToUpper(fldName) = "CVV2 CODE" 
		// idToReturn = "cvv2"
	// else if ToUpper(fldName) = "ACCOUNT ZIPCODE" 
		// idToReturn = "zip"
	// else
		// writeReportLog("Please pass the Proper parameter value to method getFieldIDBasedOnFieldName_CreditOrDebit_Card_Window","Failed","","")
	// //returning field id
	// getFieldIDBasedOnFieldName_CreditOrDebit_Card_Window = idToReturn
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getFieldIDBasedOnFieldName_CreditOrDebit_Card_Window","Failed", Error_Description ,"")
// 
// //**************************************************************************************************************************************************
// //@Method: reverse_DebitCard_Payment(Options,LoanNumber,PaymentReason)
// //@Author Ambika MR
// //@Description This function will reverse the debit card payment for different reverse options
// //EX:// reverse_DebitCard_Payment("Move Payment to another","088100009505","Test")
// // reverse_DebitCard_Payment("REVERSE PAYMENT - NO CREDIT","","Test")
// // reverse_DebitCard_Payment("REVERSE PAYMENT - CREDIT","","Test")
// //************************************************************************************************************************************************** 
// reverse_DebitCard_Payment(String Options,String LoanNumber,String PaymentReason)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Getting the Required
	// appVersionWithoutDot = Trim(Replace(System.GetEnvVar("appVersion"),".",""))
	// //Click on //reverse// button
	// clickOnButton_Reverse()
	// //Click on Yes Button
	// clickButtonInPBWindow("REVERSE PAYMENT","Yes")
	// //validating for different reverse options
	// if ToUpper(Options) = "MOVE PAYMENT TO ANOTHER" 
		// //Select //reverse payment no credit//Payment Option
		// selectPaymentOption("Move Payment to another customer//s loan")
		// //set loan number in search window
		// SetValueIn2LevelPBDataWindow_DP("w_search_loan_number","w_search","dw_search","#1","loan_nbr",LoanNumber)
		// //click ok button
		// clickButton_In_Level2PBwindowTitle_DP("Choose Customer for Reversal","Search for existing customers","Ok")
		// Sleep (5)
		// //selecting cell
		// selectCell_In_PBDatWindow_DP("w_search_loan_number","dw_list","#1","loan_nbr")
		// //click select customer
		// clickButton_Level1PBwindow_DP("Choose Customer for Reversal","Select Customer")
		// //############################
		// //Handling for 9.6.0 Changes
		// //############################
		// if appVersionWithoutDot >= 960 
			// enter_Payment_ReversalTypeAndReason("Other",PaymentReason) 
		// else
			// TypeText_ReversePaymentReasonWindow(PaymentReason)
	// else if ToUpper(Options) = "REVERSE PAYMENT - NO CREDIT" 
		// //Select //reverse payment no credit//Payment Option
		// selectPaymentOption("Reverse Payment - No credit to customer//s bank account")
		// //############################
		// //Handling for 9.6.0 Changes
		// //############################
		// if appVersionWithoutDot >= 960 
			// enter_Payment_ReversalTypeAndReason("Other",PaymentReason) 
		// else
			// TypeText_ReversePaymentReasonWindow(PaymentReason)
	// else if ToUpper(Options) = "REVERSE PAYMENT - CREDIT" 
		// //Select //reverse payment no credit//Payment Option
		// selectPaymentOption("Reverse Payment - Credit customer//s bank account")
		// //Click on Yes Button
		// clickButtonInPBWindow("Reverse Credit","Yes")
		// //click ok button
		// clickButton_InDialog_InsideBranchFrame("Credit Card Information","OK")
		// //############################
		// //Handling for 9.6.0 Changes
		// //############################
		// //Updating the Reason
		// if appVersionWithoutDot >= 960 
			// enter_Payment_ReversalTypeAndReason("Other",PaymentReason) 
		// else
			// TypeText_ReversePaymentReasonWindow(PaymentReason)
	// else
		// //Logger
		// writeReportLog("Please pass the Proper reverse option to method reverse_DebitCard_Payment","Failed","","")
// //Error handling 
// if GetErrorCount()>0  			
		// writeReportLog("Failed to reverse_DebitCard_Payment","Failed", Error_Description ,"")
// RemoveFunction
// //*********************************************************************************
// //@Method getFieldIDBasedOnFieldName_ChooseAccountComponentToCancel
// //@Author Karthik.Shekar
// //@Date 08-Jun-20
// //Description This function get the Field ID of the Field Name specified in the Choose Account Component to Cancel Window 
// //msgbox getFieldIDBasedOnFieldName_ChooseAccountComponentToCancel("Start Miles")
// //msgbox getFieldIDBasedOnFieldName_ChooseAccountComponentToCancel("Warranty Miles")
// //*********************************************************************************
// getFieldIDBasedOnFieldName_ChooseAccountComponentToCancel(String fieldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// fieldID = null
	// Select Case fieldName
		// Case "Start Miles"
			// fieldID = "start_miles"
		// Case "Current Miles"
			// fieldID = "current_miles"
		// Case "Warranty Miles"
			// fieldID = "warranty_miles"
		// Case "Max Odometer Miles"
			// fieldID = "max_odometer_miles"
		// Case "Refund Amount"
			// fieldID = "refund_amount"
		// Case "Cancel Date"
			// fieldID = "cancel_dt"		
		// Case else
			// writeReportLog("Field ID/Col Id is not available for Field name " + fieldName + " please check","Failed","getFieldIDBasedOnFieldName_ChooseAccountComponentToCancel","")	
	// Select
// getFieldIDBasedOnFieldName_ChooseAccountComponentToCancel = fieldID
// //Error Handling
// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getFieldIDBasedOnFieldName_ChooseAccountComponentToCancel","Failed", Error_Description,"")
// 
// //**********************************************************************************
// //@Method getValue_From_ChooseAccountComponentToCancel
// //@Date 04-Jun-20
// //@Author Karthik.SHekar
// //@Description This will get  the Values in the //Choose Account Component To Cancel" Window
// //EX: msgbox getValue_From_ChooseAccountComponentToCancel("Warranty Miles")
// //msgbox getValue_From_ChooseAccountComponentToCancel("Current Miles")
// //**********************************************************************************
// getValue_From_ChooseAccountComponentToCancel(String fieldName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// fieldIDCmp = getFieldIDBasedOnFieldName_ChooseAccountComponentToCancel(fieldName)
	// getValue_From_ChooseAccountComponentToCancel = getValueInPBDataWindow_DP("w_cancel_component","dw_cancel","#1",fieldIDCmp)
	// //Error Handling	
	// if GetErrorCount()>0 
		// writeReportLog("Failed in getValue_From_ChooseAccountComponentToCancel","Failed", Error_Description ,"")
// 
// //**********************************************************************************
// //@Method set_Value_In_ChooseAccountComponentToCancel
// //@Date 04-Jun-20
// //@Author Karthik.SHekar
// //@Description This will Set the Values in the //Choose Account Component To Cancel" Window
// // set_Value_In_ChooseAccountComponentToCancel("Current Miles","15000")
// //**********************************************************************************
// set_Value_In_ChooseAccountComponentToCancel(String fieldName,String valueToSet)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// fieldIDCmp = getFieldIDBasedOnFieldName_ChooseAccountComponentToCancel(fieldName)
	// SetValueInPBDataWindow_DP("w_cancel_component","dw_cancel","#1",fieldIDCmp,valueToSet)
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : set_Value_In_ChooseAccountComponentToCancel ","Failed", Error_Description,"")
// 
// //*************************************************************************************************
// //@Method setValueFrom_ComponentTable_BasedOnRowIndex_WindowName
// //@Date 02 Jun 2020
// //Author Karthik.Shekar
// //@Description This function will set the Values in the Component Table which will be displayed in Customer Window as well as While Creating the Loan
// //EX: msgbox setValueFrom_ComponentTable_BasedOnRowIndex_WindowName("CreditDecision","1","Charge Amt","15.50") --> While Creating Loan
// //EX : msgbox setValueFrom_ComponentTable_BasedOnRowIndex_WindowName("BranchPlus","2","Charge Amt","16.50")
// //EX msgbox setValueFrom_ComponentTable_BasedOnRowIndex_WindowName("CustomerWindow","2","Charge Amt","16.50") --> In F2 Screen/Customer Window
// //EX:  setValueFrom_ComponentTable_BasedOnRowIndex_WindowName("CreditDecision","1","Component Description Opt","WAR12-G2") --> Selecting Component
// //*************************************************************************************************
// setValueFrom_ComponentTable_BasedOnRowIndex_WindowName(String windowName,String rowIndex,String columnName,String valueToSet)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
		// //Get Field ID from Payment 
		// fieldId = getFieldIDBasedOnFieldName_ComponentTab(columnName)
		// if windowName = "F2" || windowName = "CustomerWindow" 
						// //Returning the value
						// SetValueInPBDataWindow_DP("w_cust","dw_component","#" + rowIndex ,fieldId,valueToSet)
		// else if windowName = "CreditDecision" 
						// SetValueInPBDataWindow_DP("w_wiz_new_cust","dw_component","#" + rowIndex ,fieldId,valueToSet)
		// else if windowName = "BranchPlus" || windowName = "RefinanceCustomer" 
						// SetValueInPBDataWindow_DP("w_wiz_new_acct","dw_component","#" + rowIndex ,fieldId,valueToSet)         
		// else
						// writeReportLog("Wrong //Windowname// passed to setValueFrom_ComponentTable_BasedOnRowIndex_WindowName","Failed","","")
		// //Error Handling  
		// if GetErrorCount()>0 
						// writeReportLog("Failed in setValueFrom_ComponentTable_BasedOnRowIndex_WindowName","Failed", Error_Description ,"")
// 
// //*************************************************************************************************
// //@Method getValueFrom_ComponentTable_BasedOnRowIndex_WindowName
// //@Date 02 Jun 2020
// //Author Karthik.Shekar
// //@Description This function will get the Values in the Component Table which will be displayed in Customer Window as well as While Creating the Loan
// //EX: msgbox getValueFrom_ComponentTable_BasedOnRowIndex_WindowName("CreditDecision","1","Charge Amt") --> While Creating Loan
// //EX msgbox getValueFrom_ComponentTable_BasedOnRowIndex_WindowName("CustomerWindow","1","Charge Amt") --> F2 Window/Customer Window
// //*************************************************************************************************aaa
// getValueFrom_ComponentTable_BasedOnRowIndex_WindowName(String windowName,String rowIndex,String columnName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
		// //Get Field ID from Payment 
		// fieldId = getFieldIDBasedOnFieldName_ComponentTab(columnName)
		// if windowName = "F2" || windowName = "CustomerWindow" 
						// //Returning the value
						// getValueFrom_ComponentTable_BasedOnRowIndex_WindowName = getValueInPBDataWindow_DP("w_cust","dw_component","#" + rowIndex ,fieldId)
		// else if windowName = "CreditDecision" 
						// getValueFrom_ComponentTable_BasedOnRowIndex_WindowName = getValueInPBDataWindow_DP("w_wiz_new_cust","dw_component","#" + rowIndex ,fieldId)
		// else if windowName = "BranchPlus" || windowName = "RefinanceCustomer" 
						// getValueFrom_ComponentTable_BasedOnRowIndex_WindowName = getValueInPBDataWindow_DP("w_wiz_new_acct","dw_component","#" + rowIndex ,fieldId)                                      
		// else
						// writeReportLog("Wrong //Windowname// passed to getValueFrom_ComponentTable_BasedOnRowIndex_WindowName","Failed","","")
		// //Error Handling  
		// if GetErrorCount()>0 
						// writeReportLog("Failed in getValueFrom_ComponentTab_BasedOnRowIndex","Failed", Error_Description ,"")
// 
// //****************************************************************************************
// //@Method cancel_VSC_Component_ComponentTab
// //@Date 4th June 20
// //@Author Karthik.Shekar
// //@Description This FUnction will cancel the specified VSC Component from the Component Tab
// // cancel_VSC_Component_ComponentTab("GWC VSC, 12 Months, 0-50K Miles","06/02/2020","","75000","14500","50000")
// // cancel_VSC_Component_ComponentTab("GWC VSC, 36 Months, 0-50K Miles","06/02/2020","","174000","14500","170000")
// //****************************************************************************************
// cancel_VSC_Component_ComponentTab(String compDesc,String cancellationDate,String startMiles,String currentMiles,String expWarrantyMiles,String expMaxOdoMiles)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// clickCancelButton()
	// Sleep (5)
	// //Selectign the Orw
	// selectRow_in_ChooseAccountComponentToCancel(compDesc)
	// //Validating for Warranty Miles
	// actWarrantyMiles = getValue_From_ChooseAccountComponentToCancel("Warranty Miles")	
	// //Validating
	// validateDataAndReport(actWarrantyMiles,expWarrantyMiles,"Validation | Warranty Miles in //Choose Account Component To Cancel// Pop up")
	// //Validating for Max Odometer Miles
	// actMaxOdometerMiles = getValue_From_ChooseAccountComponentToCancel("Max Odometer Miles")	
	// //ValidatingactMaxOdometerMiles
	// validateDataAndReport(actMaxOdometerMiles,expMaxOdoMiles,"Validation | Max Odometer Miles in //Choose Account Component To Cancel// Pop up")
	// //	
	// if Trim(Length(expRefundAmt)) > 0 
		// //Validating for Max Odometer Miles
		// actRefundAmt = getValue_From_ChooseAccountComponentToCancel("Refund Amount")	
		// //ValidatingactMaxOdometerMiles
		// validateDataAndReport(ccur(actRefundAmt),ccur(expRefundAmt),"Validation | Refund Amount in //Choose Account Component To Cancel// Pop up")		
	// //Update Date
	// enter_CancelDate_In_ChooseAccountComponentToCancel(cancellationDate)
	// if Trim(Length(startMiles)) > 0 
		// //Update Start Miles
		// set_Value_In_ChooseAccountComponentToCancel("Start Miles",startMiles)
	// //Update Current Miles
	// set_Value_In_ChooseAccountComponentToCancel("Current Miles",currentMiles)
	// //Start Miles Values
	// actStrMiles = getValue_From_ChooseAccountComponentToCancel("Start Miles")
	// //Logger
	// writeReportLog("Snap shot of component tab after entering the details for Cancellation","Passed","","Y")
	// //Refund Amount
	// refndAmtDisplayed = getValue_From_ChooseAccountComponentToCancel("Refund Amount")
	// //Cancel Component
	// clickButton_CancelComponent_In_ChooseAccountComponentToCancel()
	// Sleep (2)
	// //Calculating Mileage difference
	// actMileageDiff = CDbl(currentMiles) - CDbl(actStrMiles)
	// //Validation of Max Miles Pop-up	
	// if CDbl(actMileageDiff) >= CDbl(expWarrantyMiles)  
		// if is_Level2PBdatwindow_Available("Choose Account Component to Cancel","Cannot Cancel Component") 
			// writeReportLog("As expected, //Cannot Cancel Component// Pop up did appear because actual Mileage difference:" + actMileageDiff + " is greater than || equal to Warranty Miles:" + expWarrantyMiles,"Passed","","")
			// //Click on Yes Button
			// clickButton_In_Level2PBwindowTitle_DP("Choose Account Component to Cancel","Cannot Cancel Component","Yes")
		// else
			// writeReportLog("//Cannot Cancel Component// Pop up did NOT appear even when actual Mileage difference:" + actMileageDiff + " is greater than || equal to Warranty Miles:" + expWarrantyMiles,"Failed","","")			
		// Sleep (2)
	// msgDispalyed = getStaticText_Level2PBwindow("Choose Account Component to Cancel","Cancel")
	// writeReportLog("Message displayed while cancelling the VSC Component is " + msgDispalyed,"Passed","","Y")
	// ////### Include for Message Validation in Pop-up
	// refundAmtInPopup = Split(msgDispalyed,"(")(1)
	// refundAmtInPopup = Split(refundAmtInPopup,")")(0)
	// //print Trim(refundAmtInPopup)
	// //Confirming the Cancel Operation
	// clickButton_In_Level2PBwindowTitle_WindowExistDP("Choose Account Component to Cancel","Cancel","Yes")
	// //Validating Cancellation is Succesfull
	// clickButton_In_Level2PBwindowTitle_WindowExistDP("Choose Account Component to Cancel","Cancel","OK")
	// // Closing the Winodw
	// clickButton_Close_In_ChooseAccountComponentToCancel()	
	// //Returning the Value
	// cancel_VSC_Component_ComponentTab = refndAmtDisplayed
	// //Logger
	// writeReportLog("<b>Component Tab after Cancelling //VSC// on " + cancellationDate + "</b>","Passed","","Y")
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : cancel_VSC_Component_ComponentTab ","Failed", Error_Description,"")
// 
// //**********************************************************************************************************************
// //@Method validateData_In_ComponentDetail_Window_1stColumnData
// //@Author Karthik.Shekar
// //@Date 08 Jun 20
// //@Description This will validate for the detaisl in the 1st Column of data displayed in Component Details Pop up which will be displayed in Component Window
// //*****************************************************************************************************  
// validateData_In_ComponentDetail_Window_1stColumnData(expOption,expDescription,expStartdate,expEndDate, expChargeAmt, expSurchargeAmt,expPayableAmt, expDealerComm, expBranchComm, expRepComm, expMaxComm, expTotPayableAmt, expIntAmt,expMaxVSCMiles, expMaxOdomMiles)
// actOpt =  getValueFrom_ComponentDetail_Window_ComponentTab("Option")
// actDesc =  getValueFrom_ComponentDetail_Window_ComponentTab("Description")
// actStartDt =  getValueFrom_ComponentDetail_Window_ComponentTab("Start Date")
// actEndDt = getValueFrom_ComponentDetail_Window_ComponentTab("Date")
// actChargeAmt =  getValueFrom_ComponentDetail_Window_ComponentTab("Charge Amt")
// actSurchargeAmt = getValueFrom_ComponentDetail_Window_ComponentTab("Surcharge Amt")
// actPayableAmt =  getValueFrom_ComponentDetail_Window_ComponentTab("Com Detail Payable Amt")
// actDealerComm =  getValueFrom_ComponentDetail_Window_ComponentTab("Dealer Comm")
// actBranchComm = getValueFrom_ComponentDetail_Window_ComponentTab("Branch Comm")
// actRepComm = getValueFrom_ComponentDetail_Window_ComponentTab("Rep Comm")
// actMaxComm = getValueFrom_ComponentDetail_Window_ComponentTab("Max Comm")
// actTotPayableAmt = getValueFrom_ComponentDetail_Window_ComponentTab("Tot Payable Amt")
// actIntAmt = getValueFrom_ComponentDetail_Window_ComponentTab("Int Amt")
// actMaxVSCMiles =  getValueFrom_ComponentDetail_Window_ComponentTab("Max VSC Miles")
	// actMaxOdomMiles = getValueFrom_ComponentDetail_Window_ComponentTab("Max Odom Miles")
	// //Validation
	// validateDataAndReport(actOpt,expOption,"Validation | //Option// Value in Component Details Window")
	// validateDataAndReport(actDesc,expDescription,"Validation | //Description// Value in Component Details Window")
	// validateDataAndReport(cdate(actStartDt),cdate(expStartdate),"Validation | //Start Date// Value in Component Details Window")
	// validateDataAndReport(cdate(actEndDt),cdate(expEndDate),"Validation | //Date// Value in Component Details Window")
	// validateDataAndReport(ccur(actChargeAmt),ccur(expChargeAmt),"Validation | //Charge Amt// Value in Component Details Window")
	// validateDataAndReport(ccur(actSurchargeAmt),ccur(expSurchargeAmt),"Validation | //Surcharge Amt// Value in Component Details Window")
	// validateDataAndReport(ccur(actPayableAmt),ccur(expPayableAmt),"Validation | //Payable Amt// Value in Component Details Window")
	// validateDataAndReport(ccur(actDealerComm),ccur(expDealerComm),"Validation | //Dealer Comm// Value in Component Details Window")
	// validateDataAndReport(ccur(actBranchComm),ccur(expBranchComm),"Validation | //Branch Comm// Value in Component Details Window")
	// validateDataAndReport(ccur(actRepComm),ccur(expRepComm),"Validation | //Rep Comm// Value in Component Details Window")
	// validateDataAndReport(ccur(actMaxComm),ccur(expMaxComm),"Validation | //Max Comm// Value in Component Details Window")
	// validateDataAndReport(ccur(actTotPayableAmt),ccur(expTotPayableAmt),"Validation | //Total Payable Amt// Value in Component Details Window")
	// validateDataAndReport(ccur(actIntAmt),ccur(expIntAmt),"Validation | //Int Amt// Value in Component Details Window")
	// validateDataAndReport(cint(actMaxVSCMiles),cint(expMaxVSCMiles),"Validation | //Max VSC Miles// Value in Component Details Window")
	// validateDataAndReport(actMaxOdomMiles,expMaxOdomMiles,"Validation | //Max Odom Miles// Value in Component Details Window")
	// //Error Handling	
	// if GetErrorCount()>0 
		// Err.clear
		// // writeReportLog("Failed in validateData_In_ComponentDetail_Window_1stColumnData","Failed", Error_Description ,"")
// RemoveFunction
// //**********************************************************************************************************************
// //@Method validateData_In_ComponentDetail_Window_2ndColumnData
// //@Author Karthik.Shekar
// //@Date 08 Jun 20
// //@Description This will validate for the detaisl in the 2nd Column of data along with Few Columns in 3rd Column displayed in Component Details Pop up which will be displayed in Component Window
// //*****************************************************************************************************  
// validateData_In_ComponentDetail_Window_2ndColumnData(expCancelYN,expCancelFee,expCancelFeePct,expCancelFeePctMax,expCancelDate, expFullRefundDays,expRefundMethod,expEarnMethod)
// actCancelYN = getValueFrom_ComponentDetail_Window_ComponentTab("Cancel Y/N")
// actCancelFee = getValueFrom_ComponentDetail_Window_ComponentTab("Cancel Fee")
// actCancelDate = getValueFrom_ComponentDetail_Window_ComponentTab("Cancel Date")
// actFullRefundDays = getValueFrom_ComponentDetail_Window_ComponentTab("Full Refund Days")
// actRefundMethod = getValueFrom_ComponentDetail_Window_ComponentTab("Refund Method")
// actEarnMethod = getValueFrom_ComponentDetail_Window_ComponentTab("Earn Method")
// actCancelFeePct = getValueFrom_ComponentDetail_Window_ComponentTab("Cancel Fee Pct")
// actCancelFeePctMax = getValueFrom_ComponentDetail_Window_ComponentTab("Cancel Fee Pct Max")
	// validateDataAndReport(actCancelYN,expCancelYN,"Validation | //Cancel YN// Value in Component Details Window")
	// validateDataAndReport(ccur(actCancelFee),ccur(expCancelFee),"Validation | //Cancel Fee// Value in Component Details Window")
	// validateDataAndReport(ccur(actCancelFeePct),ccur(expCancelFeePct),"Validation | //Cancel Fee Pct// Value in Component Details Window")
	// validateDataAndReport(ccur(actCancelFeePctMax),ccur(expCancelFeePctMax),"Validation | //Cancel Fee Pct Max// Value in Component Details Window")
	// validateDataAndReport(cdate(actCancelDate),cdate(expCancelDate),"Validation | //Start Date// Value in Component Details Window")
	// validateDataAndReport(cint(actFullRefundDays),cint(expFullRefundDays),"Validation | //Full Refund Days// Value in Component Details Window")
	// validateDataAndReport(actRefundMethod,expRefundMethod,"Validation | //Refund Method// Value in Component Details Window")
	// validateDataAndReport(actEarnMethod,expEarnMethod,"Validation | //Earn Method// Value in Component Details Window")
	// //Error Handling	
	// if GetErrorCount()>0 
		// writeReportLog("Failed in validateData_In_ComponentDetail_Window_2ndColumnData","Failed", Error_Description ,"")
// RemoveFunction
// //*****************************************************************************************
// //@Method reverse_VSC_Refund_PaymentTab
// //@Date 09-Jun-20
// //@Author Karthik.Shekar
// //@Description This will reverse the //VSC Refund// from the Payment Tab
// //msgbox reverse_VSC_Refund_PaymentTab()
// //****************************************************************************************** 
// reverse_VSC_Refund_PaymentTab()
	// //Variable
	// appVersionWithoutDot = Trim(Replace(System.GetEnvVar("appVersion"),".",""))
	// //navigate to Payment tab
	// navigateToTab("Payment")
	// Set pbReportWindow = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_payments")	
	// //select cell to reverse
	// pbReportWindow.SelectCell "#1","pmt_type"
	// //click on reverse button
	// clickOnButton_Reverse()
	// //Click Yes on Confirmation 
	// clickButtonInPBWindow("REVERSE COMPONENT REFUND","Yes")
	// //Selecting Reason	
	// //########
	// //Release Specified Handling - Handled for the Changes Made in 9.6 Release
	// //########
	// if appVersionWithoutDot >= 960 
		// enter_Payment_ReversalTypeAndReason("Other","Automation Testing")
	// else
		// TypeText_In_WinEditor_DP("Enter reason for reversal","Automation Testing")
	// //Click on Ok Button
	// clickButton_Level1PBwindow_DP("Enter reason for reversal","Ok")
	// Sleep (2)
	// //Logger
	// writeReportLog("VSC Refund has been reversed in payment tab","Passed","","Y")
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed to reverse_VSC_Refund_PaymentTab","Failed", Error_Description,"Y")
// 
// //******************************************************************************
// //@Method reverse_NEW_CPI_Refund_PaymentTab
// //@Author Karthik Shekar
// //@Date 18 June 2020
// //@Description This will Reverse the New CPI Refund from Payment Tab
// //EX:  reverse_NEW_CPI_Refund_PaymentTab()
// //********************************************************************************
// reverse_NEW_CPI_Refund_PaymentTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //navigate to Payment tab
	// navigateToTab("Payment")
	// Set pbReportWindow = BranchPlus.CustomerF2Window.PbDataWindow("pbname:=dw_payments")	
	// //select cell to reverse
	// pbReportWindow.SelectCell "#1","pmt_type"
	// //click on reverse button
	// clickOnButton_Reverse()
	// //Click Yes on Confirmation 
	// clickButtonInPBWindow("REVERSE COMPONENT ADJUSTMENT","Yes")
	// //Selecting Reason	
// //	//########
// //	//Release Specified Handling - Handled for the Changes Made in 9.6 Release
// //	//########
// //	if appVersionWithoutDot >= 960 
		// enter_Payment_ReversalTypeAndReason("Other","Automation Testing")
// //	else
// //		 TypeText_In_WinEditor_DP("Enter reason for reversal","Automation Testing")
// //	
// //	//Selecting Reason	
// //	 TypeText_In_WinEditor_DP("Enter reason for reversal","Automation Testing")
	// //Click on Ok Button
	// clickButton_Level1PBwindow_DP("Enter reason for reversal","Ok")
	// Sleep (2)
	// //Logger
	// writeReportLog("NEW CPI Refund has been reversed in payment tab","Passed","","Y")
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed to reverse_NEW_CPI_Refund_PaymentTab","Failed", Error_Description,"Y")
// 
// //********************************************************************************************************
// //@Method enter_Payment_ReversalTypeAndReason
// //@Author Karthik.Shekar
// //@Description this fucntion will set the Value in Reversal Type and Reversal Reason which we will be getting during reversal of a payment
// //@Date 06 July 2020
// //EX:  enter_Payment_ReversalTypeAndReason("Other","Reversing the Cash")
// //*************************************************************************************************************
// enter_Payment_ReversalTypeAndReason(String reversalType,String reversalReason)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("regexpwndtitle:=Enter reason for reversal").WaitWhileExists(10) 
	// SetValueInPBDataWindow_DP("w_search","dw_search","#1","reverse_type",reversalType)
	// SetValueInPBDataWindow_DP("w_search","dw_search","#1","reverse_reason",reversalReason)
	// //CLick on OK Button	 	
	// clickButton_Level1PBwindow_DP("Enter reason for reversal","Ok")
	// else
		// writeReportLog("Enter Reason for Reversal Popup window did not appear","Failed","","") 
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/enter_Payment_ReversalTypeAndReason","Failed",Error_Description,"")
// 
// //************************************************************************
// //@Method get_DataFrom_ChargesTable_PaymentsTab_BasedonRowIndex
// //@Author Karthik.SHekar
// //@Description This will the entire row details of Charges Table basedon the Row Index Passed to method
// ////EX: chgDatea =  get_DataFrom_ChargesTable_PaymentsTab_BasedonRowIndex(9)
	// //msgbox Split(chgDatea,"|")(0)
	// //msgbox Split(chgDatea,"|")(1)
	// //msgbox Split(chgDatea,"|")(2)
	// //msgbox Split(chgDatea,"|")(3)
	// //msgbox Split(chgDatea,"|")(4)
	// //msgbox Split(chgDatea,"|")(5)
// //**************************************************************************
// get_DataFrom_ChargesTable_PaymentsTab_BasedonRowIndex(String rowIndex)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// chgDt = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + rowIndex ,"due_dt")
	// chgType = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + rowIndex ,"charge_type")
	// chgAmt = CCur(getValueInPBDataWindow_DP("w_cust","dw_charges","#" + rowIndex ,"charge_amt"))
	// chgPaidAmt = CCur(getValueInPBDataWindow_DP("w_cust","dw_charges","#" + rowIndex ,"paid_amt"))
	// chgPmtDt = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + rowIndex ,"pmt_dt")
	// chgTransId = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + rowIndex ,"trans_id")
	// //Returning the Value
	// get_DataFrom_ChargesTable_PaymentsTab_BasedonRowIndex =  chgDt + "|" + chgType + "|" + chgAmt + "|" + chgPaidAmt + "|" + chgPmtDt + "|" + chgTransId
	// // writeReportLog("Get Total Sum of "& singleChargeType &" Charge Amount >> " + totalCharge,"Passed","","")
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/get_TotalSumOf_ChargeAmount_singleChargeType_PaymentsTab","Failed", Error_Description ,"Y")
// 
// //*********************************************************************************************
// //@methodName: convertActiveAccountToDifferentAccountStatus(LoanNumber,AccountStatus)
// //@Author: Deepthi 
// //@Date 28 May 2020
// //@Description: This function will convert an active account to the specified account status
// //Ex:  convertActiveAccountToDifferentAccountStatus(LoanNumber,AccountStatus)
// //Ex:  convertActiveAccountToDifferentAccountStatus("088100001234","REPO")
// //Ex:  convertActiveAccountToDifferentAccountStatus("088100008911","SOLDIER")
// //Ex:  convertActiveAccountToDifferentAccountStatus("088100008999","REPOSOLD")
// //Ex:  convertActiveAccountToDifferentAccountStatus("088100008902","BANKRUPT")
// //Ex:  convertActiveAccountToDifferentAccountStatus("088100008932","REDEEMED")
// //Ex:  convertActiveAccountToDifferentAccountStatus("088100008342","PAIDOUT")
// //Ex:  convertActiveAccountToDifferentAccountStatus("088100008902","SKIP")
// //*********************************************************************************************
// convertActiveAccountToDifferentAccountStatus(String LoanNumber,String AccountStatus)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
				// //Open F2 Screeen Account Activity
				// openF2Screen()
				// //search customer by entering loan number
				// customer_Search_Using_LoanNumber_F2(LoanNumber)
				// if ToUpper(AccountStatus) ="BANKRUPT" 
								// //change account status to Bankrupt
								// changeAccountStatus_InAccountTab("Bankrupt")
								// //click on save button
								// clickOnSaveButon()                                
				// else if ToUpper(AccountStatus)  = "REPO" 
					// //Fetching Repo Cnt from DB
					// repoAgntCnt = getCountOfBusinessAgents_FromDB("Repossession","Y")
					// if int(repoAgntCnt) = 0        
						// //Test Data
						// //*******************************
						// //Creating New business Agent
						// //*******************************
						// agntName = "Test Auto Agent " + Generate_RandomNumber_UserDefind("ABCDEFGHIJKLMNOPQRSTUVWXYZ","6")
						// agntType = "Repossession"
						// //Creating New Business Agent
						// writeReportLog("Prerequisite: Creating the Test Data | Adding new Business Agent","Passed","","")
						// LoadAndRunAction(System.GetEnvVar("BranchPlusScriptsPath") + "ProdRuns_Project\TestScripts\ReusableActions\AddBusinessAgent","Action1","",agntName,agntType)
						// //Open F2 Screeen Account Activity
						// openF2Screen()
						// //search customer by entering loan number
						// customer_Search_Using_LoanNumber_F2(LoanNumber)
						// //STEP: Navigating to Collateral Tab
						// navigateToTab_CustomerSubTabs("Collateral")
					// //STEP: Navigating to Collateral Tab
					// navigateToTab_CustomerSubTabs("Collateral")
					// //Getting repo agent from the DB
					// businessAgent_Name = get_BusinessAgent_FromAppDB("Y","Repossession","dba_name")
					// //##################Special handling for masked DB, updating primary VIN in collateral tab
					// primaryVIN = getValueFromCollateralTab("VIN")
					// //Checking for VIN character count
					// if(Length(primaryVIN) <= 17)  
						// autoVin =  Generate_RandomNumber_UserDefind("ABCDEFGHIJKLMNOPQRSTUVWXYS1234567890","17")
						// SetValueInPBDataWindow_DP("w_cust","dw_list","#1","vin",autoVin)
						// // clickOnSaveButon()
					// //*********entering Repo details******************
					// enter_ValueIn_CollateralTab("Assigned for Repo",1,"ON","set")
					// enter_ValueIn_CollateralTab("Assigned Date",1,date,"type")
					// enter_ValueIn_CollateralTab("Agent Name",1,businessAgent_Name,"set")
					// //Click on Save Button
					// clickOnSaveButon()
					// Sleep (2)
					// //Fetching Current mileage
					// currentMilage = getValueFromCollateralTab("Mileage")
					// //Enter RepoCar Details
				// //   enter_RepoCar_Details_Collateral_Screen("Involuntary","#27","Abandoned","#45","5000","1500","Repair","5000","Test","Test")
					// enter_RepoCar_Details_Collateral_Screen("Involuntary","#27","Abandoned","#45","5000",currentMilage+10,"Repair","5000","Test","Test") //9.7.0 change Ending Mileage should be Greater than Mileage
					// //Enter RepoCar Recovery Reason
					// enter_Estimated_Recovery_Reason("Test")
					// enter_ExpenseAmount_Details_Collateral_Screen("100","100","100","100","100")
					// //Click on Save Button
					// clickOnSaveButon()
					// //Enter RepoCar Recovery Reason
					// enter_Estimated_Recovery_Reason("Test")
					// //Click on Save Button
					// clickOnSaveButon()
					// //Navigate back to account//s page
					// navigateToTab_CustomerSubTabs("Account")
					// //change account status to Bankrupt
					// changeAccountStatus_InAccountTab("Repossession")
					// //click on save button
					// clickOnSaveButon()
				// else if ToUpper(AccountStatus) = "REPOSOLD" 
				// //Fetching Repo Cnt from DB
								// repoAgntCnt = getCountOfBusinessAgents_FromDB("Repossession","Y")
												// if int(repoAgntCnt) = 0        
																// //Test Data
																// //*******************************
																// //Creating New business Agent
																// //*******************************
																// agntName = "Test Auto Agent " + Generate_RandomNumber_UserDefind("ABCDEFGHIJKLMNOPQRSTUVWXYZ","6")
																// agntType = "Repossession"
																// //Creating New Business Agent
																// writeReportLog("Prerequisite: Creating the Test Data | Adding new Business Agent","Passed","","")
																// LoadAndRunAction(System.GetEnvVar("BranchPlusScriptsPath") + "ProdRuns_Project\TestScripts\ReusableActions\AddBusinessAgent","Action1","",agntName,agntType)
																// //Open F2 Screeen Account Activity
																// openF2Screen()
																// //search customer by entering loan number
																// customer_Search_Using_LoanNumber_F2(LoanNumber)
																// //STEP: Navigating to Collateral Tab
																// navigateToTab_CustomerSubTabs("Collateral")
								// //STEP: Navigating to Collateral Tab
								// navigateToTab_CustomerSubTabs("Collateral")
								// //Getting repo agent from the DB
								// businessAgent_Name = get_BusinessAgent_FromAppDB("Y","Repossession","dba_name")
								// //*********entering Repo details******************
								// enter_ValueIn_CollateralTab("Assigned for Repo",1,"ON","set")
								// enter_ValueIn_CollateralTab("Assigned Date",1,date,"type")
								// enter_ValueIn_CollateralTab("Agent Name",1,businessAgent_Name,"set")
								// //Click on Save Button
								// clickOnSaveButon()
								// //Fetching Current mileage
								// currentMilage = getValueFromCollateralTab("Mileage")
								// //Enter RepoCar Details
								// enter_RepoCar_Details_Collateral_Screen("Involuntary","#27","Abandoned","#45","5000",currentMilage+10,"Repair","5000","Test","Test")
								// //Enter RepoCar Recovery Reason
								// enter_Estimated_Recovery_Reason("Test")
								// enter_ExpenseAmount_Details_Collateral_Screen("100","100","100","100","100")
								// //Click on Save Button
								// clickOnSaveButon()
								// //Enter RepoCar Recovery Reason
								// enter_Estimated_Recovery_Reason("Test")
								// //Click on Save Button
								// clickOnSaveButon()
								// //Navigate back to account//s page
								// navigateToTab_CustomerSubTabs("Account")
								// Sleep(3)
								// //change account status to Bankrupt
								// changeAccountStatus_InAccountTab("Repossession")
								// //click on save button
								// clickOnSaveButon()
								// //Navigate to Component tab
					// navigateToTab("Component")
				// //Get the component decsriptions from the component tab
				// rowCount = getRowCount_PbDataWindow("w_cust","dw_component")
				// for Iterator = 1 To rowCount
				// descname = getValueInPBDataWindow_DP("w_cust","dw_component","#" + iterator ,"descr")
								// if descname ="PFS GAP" 
																// //Navigate to component page to cancel PFS GAP 
																// cancel_Component_From_ComponentTab("PFS GAP",date)
								// else if descname = IndexOf(descname,"Service Point VSC ") then
												// //Navigate to component page to cancel PFS GAP 
												// cancel_Component_From_ComponentTab("Service Point VSC 36 Months",date)
								// else if descname = "Collateral Protection" 
																// //Navigate to component page to cancel Service Point VSC 36 Months 
													// cancel_Component_From_ComponentTab("Collateral Protection",date)
								// //STEP: Navigating to Account Tab
								// navigateToTab_CustomerSubTabs("Account")
								// Sleep(3)
								// //Select the Account Status as Repossession
								// changeAccountStatus_InAccountTab("Repossession Sold")
								// clickButton_Level1PBwindow_DP("Branch PLUS","OK")
								// //Click on Save Button
								// clickOnSaveButon()
				// else if ToUpper(AccountStatus)  = "REDEEMED" 
								// //change account status to Bankrupt
								// changeAccountStatus_InAccountTab("Bankrupt")
								// //click on save button
								// clickOnSaveButon()
								// //change account status to Redeemed
								// changeAccountStatus_InAccountTab("Redeemed")
								// //click on save button
								// clickOnSaveButon()
				// else if ToUpper(AccountStatus)  = "SOLDIER" 
								// //Select Loan Modification Window
								// selectMenu("Tools;Supervisor;Loan Modification") 
								// //Select account status
								// setValue_InModifyToSection_FromLoanModificationWindow("1","New Account Status","Soldier/Sailor")
								// //Getting the current date
								// currentDate = getTodaysDate_mmddyyyy_format()
								// //Enter current date
								// setValue_InModifyToSection_FromLoanModificationWindow("1","Modify Date",currentDate)
								// //Click on Process Button
								// clickButton_Level1PBwindow_DP("Loan Modification Utility","Process")
								// //Click on Yes Button in LoanModification 
								// clickButton_In_Level1PBwindow_DailogPopup("Loan Modification Utility", "LOAN MODIFICATION", "Yes")
								// //Enter Loan Modification Reason 
								// enter_Reason_InLoanModificationWindow("Test")
								// //Click OK Button in Enter Reason popup
								// clickButton_In_Level2PBwindowTitle_WindowExistDP("Loan Modification Utility","Enter reason for loan modification", "Ok")                             
				// else if ToUpper(AccountStatus)  = "SKIP" 
								// //Navigate back to account//s page
								// navigateToTab_CustomerSubTabs("Collateral")
								// //Enter skip reason and skip months
								// enterChargeOffSkipMnth_And_ChrageOffReason_In_CollateralTab("2","ABANDONED VEHICLE")
								// //Enter the repo type and repo date
								// enter_ValueIn_CollateralTab("Repo Type",1,"Involuntary","set")
								// enter_ValueIn_CollateralTab("Repo Date",1,date,"type")
								// //click on save button
								// clickOnSaveButon()
								// //Navigate to Component tab
					// navigateToTab("Component")
				// //Get the component decsriptions from the component tab
				// rowCount = getRowCount_PbDataWindow("w_cust","dw_component")
				// for Iterator = 1 To rowCount
				// descname = getValueInPBDataWindow_DP("w_cust","dw_component","#" + iterator ,"descr")
								// if descname ="PFS GAP" 
																// //Navigate to component page to cancel PFS GAP 
																// cancel_Component_From_ComponentTab("PFS GAP",date)
								// else if descname = IndexOf(descname,"Service Point VSC ") 
												// //Navigate to component page to cancel Service Point VSC 36 Months 
												// cancel_Component_From_ComponentTab("Service Point VSC 36 Months",date)
								// else if descname = "Collateral Protection" 
																// //Navigate to component page to cancel Collateral protection insurance 
												// cancel_Component_From_ComponentTab("Collateral Protection",date)
								// //Navigate back to account//s page
								// navigateToTab_CustomerSubTabs("Account")
								// Sleep(3)
								// //change account status to Bankrupt
								// changeAccountStatus_InAccountTab("Skip")
								// //click on save button
								// clickOnSaveButon()
								// //Enter the skip reason
					// TypeText_In_WinEditor_DP("Enter reason for changing account status to SKIP","Automation Testing")
								// clickButtonInPBWindow("Enter reason for changing account status to SKIP","Ok")
				// else if ToUpper(AccountStatus)  = "PAIDOUT" 
								// //STEP: Navigating to Collateral Tab
								// navigateToTab_CustomerSubTabs("Payment")
								// //get next due date in payment tab
		// PayoffAmt = get_DescriptionValue_In_Rightpane_PaymentTab("Payoff")
		// //click on process button
		// clickButton_Process()
		// //entering Payment details
		// processPayment_for_AllTypes("Payoff","Check","65432","","","third_party_receipt")
		// //click on yes button
		// handleMultiplePaymentsWindow("Yes")
		// Sleep(2)
								// //Navigate back to account//s page
								// navigateToTab_CustomerSubTabs("Account")
				// if GetErrorCount()>0 
				// writeReportLog("Failed in step/convertActiveAccountToDifferentAccountStatus","Failed", Error_Description,"Y")
// 
// //****************************************************************************************************************************************88
// //@Author Karthik.SHekar
// //@Description This method will identify the next Charge/Payment which needs to be made based on the Order specified in the Order Reference Sheet which is passed to this fucntion
// //@Input Paramter orderDataSheetPath --> Path of hte Data sheet which contains the Order
// //				accountID --> Account ID
// //@Return 
// // TableID --> PaymentsTable for Charges Table
// // rowID --> Return the row number identified to which next Payment should get applied ( Applicable only for Charges Table )
// // chargeDate --> Date specified in Charge Table
// // chargeType --> Name of Charge from Charges Table
// // ChargeAmt --> Charge Amt which needs to be Charges table ( In Case of Payment Table it returns current interest and current Principal )
// // chargePaidAmt --> Amount applied for Charges for the identified Row
// //Ex: sheetPath = System.GetEnvVar("BranchPlusSharedPath") + System.GetEnvVar("currentState") + "\TestData\BRP_2051_OrderOfPayments_RepoAccount_InDirectLoans.xlsx" 
// //  identifyTheChargeDueToPay(sheetPath, "088100029240", tableId1, rowId1, chargeDate1, chargeType1, chargeAmt1, chargePaidAmt1)
// //****************************************************************************************************************************************88
// identifyTheChargeDueToPay(String orderDataSheetPath,String accountID,String ByRef tableIdentified,String Byref rowIdentified,String Byref chargeDate,String ByRef chargeType,String ByRef chargeAmt,String ByRef chargePaidAmt)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
// //	//Get Current State
// //	currentState = getCurrentStateName_From_DB()
	// //testDataPath = System.GetEnvVar("BranchPlusSharedPath") + currentState + "\TestData\BRP_2051_OrderOfPayments_InDirectLoans.xlsx"
	// //Adding the Data Sheet which Contains the Order	
	// addNewDataTableAndimportSheet(orderDataSheetPath,"Order","Order")
	// //Get Different Data to Validate
	// rowCnt = DataTable.GetSheet("Order").GetRowCount
	// //Iterating for different Data Set
	// found = false
	// for chrgItr = 1 To rowCnt Step 1
		// //Charge Type
		// chrgType = DataTable.Value("Charge_Type","Order")
		// //amtToBePaid = DataTable.Value("Amount","Order")			
		// //Identifying if this is Principal Balance to be paid
		// if chrgType = "Principal"  
			// //Identify the Current Principal and 
			// //-------------------------------------------------Special Handling --------------------
			// //#### Special Handling for rep Account i.e., Identifying the Repo Date
			// accStatus = get_AccountStatus_From_AppDB(accountID)
			// if accStatus = "REPO" 
				// //Identifying Repo Date
				// repDate = get_RepoDate_From_AppDB(accountID)
				// repDate = formatDateWithSpecifiedDelimeter(repDate,"YYYYMMDD" ,"-")
				// //Fetching Current Principal based on date
				// getCurrentPrincipalBalanceAndInterest_for_Account_BasedOnDate(accountID, repDate, expPrinc, expInt)
			// else
				// getCurrentPrincipalBalanceAndInterest_for_Account(accountID, expPrinc, expInt)
			// //--------------------------------------------------	
			// //Logger 
			// writeReportLog("Current Principal Due for accountID " + accountID + " is " + expPrinc,"Passed","Calculated from Query","")
			// if ccur(expPrinc) > 0 
				// found = True
				// chargeType = "Current Principal"
				// chargeAmt = ccur(expPrinc)
				// tableIdentified = "PaymentsTable"
				// rowIdentified = 1
				// Exit for								
// //			else
// //				 writeReportLog("","Failed","","")	
		// else if chrgType = "Current interest" 
			// //Identify the Current Principal and 
			// getCurrentPrincipalBalanceAndInterest_for_Account(accountID, expPrinc, expInt)
			// //Logger 
			// writeReportLog("Current Interest Due for accountID " + accountID + " is " + expInt,"Passed","Calculated from Query","")
			// if ccur(expInt) > 0 
				// found = True
				// chargeType = "Current Interest"
				// chargeAmt = ccur(expInt)
				// tableIdentified = "PaymentsTable"
				// rowIdentified = 1
				// Exit for								
			// else if System.GetEnvVar("flagCcurInterest") = false 
			// // changeSystemDateTime(addDays_for_SepecifiedDate("d",1,date()))
			// //Sleep (2)
			// //  getCurrentPrincipalBalanceAndInterest_for_Account(accountID, expPrinc2, expInt2)
			// chargeType = "Current Interest"
				// chargeAmt = ccur(0)
				// tableIdentified = "PaymentsTable"
				// rowIdentified = 1
				// Exit for	
	// else 				
			// //Iterating through the Charge Table to figure it out 
			// rowCnt = getRowCount_PbDataWindow("w_cust","dw_charges")
			// String reqChrDate
			// reqChrDate = date()
			// rowIdentified = 0
			// for itr = 1 To rowCnt
				// chargeDate = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"due_dt")
				// chargeType = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_type")
				// chargeAmt = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"charge_amt")			
				// chargePaidAmt = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"paid_amt")
				// chargePaymentDate = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"pmt_dt")
				// chargeTransId = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + itr ,"trans_id")
				// //Validating if the Charge is Waived || not
				// chrgWaivedYN = get_WaivedStatus_ChargesTbl_PaymentTab_FromAppDB(accountID, chargeTransId)
				// //Identify the next Charge to Pay. 
				// if Trim(chrgType) = Trim(chargeType) and ccur(chargePaidAmt) < ccur(chargeAmt) and chrgWaivedYN <> "Y" 				
					// selectCell_In_PBDatWindow_DP("w_cust","dw_charges","#"&itr,"charge_type")
					// if cdate(chargeDate) <= cdate(reqChrDate)
						// reqChrDate = chargeDate
						// rowIdentified = itr			
						// found = True
						// tableIdentified = "ChargesTable"
				// else
					// //Ignore		
		// //Found True
		// if found = true 
			// Exit for
		// //Setting  Row
		// DataTable.GetSheet("Order").SetValue(Row
	// //Special Handling for Charges Table
	// if tableIdentified = "ChargesTable" 
		// chargeDate = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + rowIdentified ,"due_dt")
		// chargeType = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + rowIdentified ,"charge_type")
		// chargeAmt = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + rowIdentified ,"charge_amt")			
		// chargePaidAmt = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + rowIdentified ,"paid_amt")
		// chargePaymentDate = getValueInPBDataWindow_DP("w_cust","dw_charges","#" + rowIdentified ,"pmt_dt")
	// //msgbox rowIdentified
// 
// //***************************************************************
// //@Method select_PaymentType_ProcessPaymentWindow
// //@Author Karthik.Shekar
// //@Description This method will select the Payment Type Radio Button in Process Payment Window.
// //Ex: select_PaymentType_ProcessPaymentWindow("Payoff")
// //	select_PaymentType_ProcessPaymentWindow("Regular Payment")
// //*****************************************************************************
// select_PaymentType_ProcessPaymentWindow(String paymentType)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Set pbWindowPayment = w_bp_frame.PbWindow("pbname:=w_payment").PbDataWindow("pbname:=dw_payment")
// pbWindowPayment.IsPresent(),30000
// //Selecting the Payment Type
// // SetValue_PBDataWindow(pbWindowPayment,"#1","pmt_class",paymentType) 	
// SetValueInPBDataWindow_DP("w_payment","dw_payment","#1","pmt_class", paymentType)
	// //Error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in select_PaymentType_ProcessPaymentWindow","Failed", Error_Description,"")
// 
// //***************************************************************
// //@Method select_PaymentMethod_ProcessPaymentWindow
// //@Author Karthik.Shekar
// //@Description This method will select the Payment Method Drop Down in Process Payment Window.
// //EX: select_PaymentMethod_ProcessPaymentWindow("Cash")
// // select_PaymentMethod_ProcessPaymentWindow("Check")
// //*******************************************************************
// select_PaymentMethod_ProcessPaymentWindow(String paymentMethod)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// SetValueInPBDataWindow_DP("w_payment","dw_payment","#1","pmt_type",paymentMethod)
	// //Error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in select_PaymentMethod_ProcessPaymentWindow","Failed", Error_Description,"")
// 
// //********************************************************************************************************
// //@Method getVSC_FullRefundDays
// //@Author Karthik.Shekar
// //@Description this fucntion is to get VSC full refund days based on states
// //EX: //msgbox getVSC_FullRefundDays("GWC VSC, 12 Months, 0-50K Miles","AL")
				// //msgbox getVSC_FullRefundDays("GWC VSC, 12 Months, 0-50K Miles","FL")
// //*************************************************************************************************************
// getVSC_FullRefundDays(String vscDescription,String state)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
			// if IndexOf(vscDescription,"GWC") > 0 and state <> "FL" 
							// getVSC_FullRefundDays = 30
			// else if IndexOf(vscDescription,"GWC") > 0 and state = "FL" 
							// getVSC_FullRefundDays = 60                       
				// else        
								// writeReportLog("Please pass proper value to getVSC_FullRefundDays | vscDescription " + vscDescription + "and State " + state,"Failed","","")
// RemoveFunction
// //********************************************************************************************************
// //@Method getVSC_CancellationFee
// //@Author Karthik.Shekar
// //@Description this fucntion is to get VSC cancellation fee based on VSC component and  states
// //EX: // msgbox getVSC_CancellationFee("GWC VSC, 12 Months, 0-50K Miles","AL","")
				// // msgbox getVSC_CancellationFee("GWC VSC, 12 Months, 0-50K Miles","GA","")
				// // msgbox getVSC_CancellationFee("GWC VSC, 12 Months, 0-50K Miles","NC","650")
				// //msgbox getVSC_CancellationFee("GWC VSC, 12 Months, 0-50K Miles","SC","")
// //*************************************************************************************************************
// getVSC_CancellationFee(String vscDescription,String state,String refundAmtforCalc)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
			// if IndexOf(vscDescription,"GWC") > 0 and state = "AL" 
							// getVSC_CancellationFee = 25
			// else if IndexOf(vscDescription,"GWC") > 0 and (state = "FL" || state = "GA") 
							// getVSC_CancellationFee = 0         
				// else if IndexOf(vscDescription,"GWC") > 0 and state = "NC" 
								// expectedCancellationFee = ccur(refundAmtforCalc) * 0.1
												// if ccur(expectedCancellationFee) > ccur(50) 
																// expectedCancellationFee = 50
												// getVSC_CancellationFee = expectedCancellationFee        
				// else if IndexOf(vscDescription,"GWC") > 0   // for Remaining States of GWC
							// getVSC_CancellationFee = 50
			// else        
								// writeReportLog("Please pass proper value to function getVSC_CancellationFee | vscDescription " + vscDescription + " State " + state,"Failed","","")
// RemoveFunction
// //*************************** Supporting ***************************
// //@Method findMiniumOf2Number
// //@Author Karthik.Shekar
// //@Description this fucntion is to find the minium of two numbers
// //EX: //msgbox findMiniumOf2Number(ccur(100),ccur(500))
				// //msgbox findMiniumOf2Number(ccur(1450),ccur(500))
				// //msgbox findMiniumOf2Number(ccur(0),ccur(500))
// //*************************************************************************************************************
// findMiniumOf2Number(String numA,String numB)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
			// if numA > numB 
							// findMiniumOf2Number = numB
			// else
							// findMiniumOf2Number = numA                                
// RemoveFunction
// //***************************************************************************************************************************
// //@Method: select_SpecificRepresentativeName_RefinanceCurrentCustomer()
// //@Author: Ambika
// //@Date 09 July 2020
// //@Description: This function is to select Representative Name in CreditDecisionWindow in refinance current customer
// //Ex:  select_SpecificRepresentativeName_RefinanceCurrentCustomer()
// //***************************************************************************************************************************
// select_SpecificRepresentativeName_RefinanceCurrentCustomer(String repName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
				// Set PbTable = BranchPlus.CreditDecision.PbDataWindow("pbname:=dw_step")
				// Sleep (2)
				// TypeText_PBDataWindow(PbTable,"#1","dealer_rep_id",repName)
				// if GetErrorCount()>0 
								// writeReportLog("Failed in step/select_SpecificRepresentativeName_RefinanceCurrentCustomer","Failed", Error_Description,"")
// 
// //*****************************************************************************
// //@Method isDescription_Available_In_LoanModification_Window
// //@Author Ambika
// //@Date 04 Aug 2020
// //@Description This function will return True if the specified Component description is available in loan modification Window
// //@Return True || False
// //EX: msgbox isDescription_Available_In_LoanModification_Window("LOAN NUMBER")
// //msgbox isDescription_Available_In_LoanModification_Window("LOAN NUMBER")
// //*****************************************************************************
// isDescription_Available_In_LoanModification_Window(String descName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
				// //get row count
				// rowcount = getRowCount_PbDataWindow("w_loan_conversion","dw_payoff")
				// //Exist
				// found = false
				// for itr = 1 to rowcount 
								// //get desc name
								// descValue = getValueInPBDataWindow_DP("w_loan_conversion","dw_payoff","#"&itr,"descr")
								// if Trim(ToUpper(descValue)) = Trim(ToUpper(descName)) 
												// //get desc value
												// found = True
												// Exit for
				// //Return the Value
				// isDescription_Available_In_LoanModification_Window = found
				// //Error Handling
				// if GetErrorCount()>0                                                 
								// writeReportLog("Failed in Step/isDescription_Available_In_LoanModification_Window","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: NavigateTo_DailyMangersReport_and_get_value_From_DailyMangersReport(ReportDate,CustMsg,required_GL_Desc)
// //@Author: Ambika
// //@Date 14 Aug 2020
// //@Description: This function is to  navigate daily mangers and fetch values from DAILY MANAGERS report 
// //@Return begin amount and period amount of required fields
// //Ex:  NavigateTo_DailyMangersReport_and_get_value_From_DailyMangersReport("08/14/2020","Before Adding VSC","Interest Income-Sales Finance;Inter-Company Debit Payment;Sales Loans-Auto-Collections;Int-bearing-Late Charge - Auto")
// //***************************************************************************************************************************
// NavigateTo_DailyMangersReport_and_get_value_From_DailyMangersReport(String ReportDate,String CustMsg,String required_GL_Desc)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
				// //Open reports window
				// openReportWindow()
				// //To select/Open a report in Reports Window
				// openReportFromPBTree("English;Closing Report Set;Daily Managers")
				// //Click on Find Button
				// clickButton_Find()
				// //To enter the Details in Daily Managers Report pop up
				// enter_DateAndType_DailyManagersReportPopUp(ReportDate,"Daily")
				// //Sleep (till) status bar 
				// waitTillMessageAppearsInStatusBar("Ready")
				// //Wait Until Daily Managers header displayed
				// SleepUntillReportLoads("Report_InsightObjects","DailyManagersReportHeader") 
				// Sleep (3)
				// //Logger 
				// writeReportLog("Snapshot of Daily Managers Report Page 1 "&CustMsg,"Passed",FailComments,"Y")
				// //Scrolling to Bottom of the Report
				// MouseWheel(2,False)
				// Sleep(3)
				// //Logger 
				// writeReportLog("Snapshot of Daily Managers Report Page 2 "&CustMsg,"Passed",FailComments,"Y")
				// //fetching required GL values
				// NavigateTo_DailyMangersReport_and_get_value_From_DailyMangersReport = get_value_From_DailyMangersReport(required_GL_Desc)
				// //Close Current window
				// closeCurrentWindow()
				// Sleep (2)
				// //error handling
				// if GetErrorCount()>0 
								// writeReportLog("Failed in step/NavigateTo_DailyMangersReport_and_get_value_From_DailyMangersReport","Failed", Error_Description,"")
// 
// //
// //***************************************************************************************************************************
// //@Method: enter_FirstPayment_Date_InAccountTab(FirstPaymentDate)
// //@Author: Ambika
// //@Date 13 Aug 2020
// //@Description: This function is to enter first payment date in account tab
// //Ex: // enter_FirstPayment_Date_InAccountTab("09/09/2019")
// //***************************************************************************************************************************
// enter_FirstPayment_Date_InAccountTab(String FirstPaymentDate)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
				// //select Cell
				// selectCell_In_PBDatWindow_DP("w_cust","dw_acct","#1","first_pmt_due_dt")
				// sendKeys("{DEL}")
				// //type value
				// typeText_In_PBDatWindow_DP("w_cust","dw_acct","#1","first_pmt_due_dt",FirstPaymentDate) 
				// if GetErrorCount()>0                                                 
								// writeReportLog("Failed in step/enter_FirstPayment_Date_InAccountTab","Failed", Error_Description ,"Y")
// 
// //***************************************************************************************************************************
// //@Method: enter_Contract_Date_InAccountTab(FirstPaymentDate)
// //@Author: Ambika
// //@Date 13 Aug 2020
// //@Description: This function is to enter contract date in account tab
// //Ex: // enter_Contract_Date_InAccountTab("09/09/2019")
// //***************************************************************************************************************************
// enter_Contract_Date_InAccountTab(String ContractDate)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
				// //select Cell
				// selectCell_In_PBDatWindow_DP("w_cust","dw_acct","#1","funding_dt")
				// sendKeys("{DEL}")
				// //type value
				// typeText_In_PBDatWindow_DP("w_cust","dw_acct","#1","funding_dt",ContractDate) 
				// if GetErrorCount()>0                                                 
								// writeReportLog("Failed in step/enter_Contract_Date_InAccountTab","Failed", Error_Description ,"Y")
// 
// //***************************************************************************************************************************
// //@Method: createLoanFrom_NewCreditDecisionCopy(LoanNumber)
// //@Author: Ambika
// //@Date 04 Aug 2020
// //@Description: This function is to create new loan from New Credit Decision - Copy 
// //Ex:  createLoanFrom_NewCreditDecisionCopy(LoanNumber)
// //***************************************************************************************************************************
// createLoanFrom_NewCreditDecisionCopy(String LoanNumber)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Opening F2 screen
	// openF2Screen()
	// //Searching the customer using loan number in F2 window
	// customer_Search_Using_LoanNumber_F2(loanNumber)
	// //Clicking on new option from 
	// clickNewButton()
	// //Selecting New Credit Decision option from choose an item window
	// selectValue_From_ChooseAnItem_Popup("New Credit Decision - Copy")
	// Sleep(5)
	// //Logger
	// writeReportLog("Creating Auto Loan Copy Customer ","Passed",FailComments,"Y")
	// //click on ok button
	// clickButtonInPBWindow(" Copy","OK")
	// //click on ok button
	// clickButtonInPBWindow(" Copy","OK")
	// Sleep (2)
	// //Changing the Status to Approve
	// changeAccountStatus_InAccountTab("Approved")
	// //Saving the Data
	// clickOnSaveButon()
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/createLoanFrom_NewCreditDecisionCopy","Failed", Error_Description,"")
// 
// //*******************************************************************
// //@Author Karthik.SHkear
// //@Date 11-Sep-20
// //@Name Identify_And_cancel_AllActive_Components_ComponentTab
// //@Description This will Cancel all the Active Components in a Account
// //EX: // Identify_And_cancel_AllActive_Components_ComponentTab("10/29/2020")
// //*******************************************************************
// Identify_And_cancel_AllActive_Components_ComponentTab(String cancellationDate)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Cick on Cancel Button
	// clickCancelButton()
	// Sleep (5)
	// fieldID = getFieldIDBasedOnFieldName_ComponentTab("Component Description")
	// //Row Count
	// cntOfRow = getRowCount_PbDataWindow("w_cancel_component","dw_component")
	// //Flag
	// found = false
	// for itr = 1 To cntOfRow Step 1
		// actDesc = getValueInPBDataWindow_DP("w_cancel_component","dw_component","#" + itr ,fieldID)
		// selectCell_In_PBDatWindow_DP("w_cancel_component","dw_component","#"&itr,fieldID)		
		// Sleep (2)
		// //Cancellation Date
		// enter_CancelDate_In_ChooseAccountComponentToCancel(cancellationDate)
		// //Cancelling 
		// if IndexOf(actDesc,"VSC") > 0 
			// startMile = getValue_From_ChooseAccountComponentToCancel("Start Miles")
			// //Update Current Miles
			// set_Value_In_ChooseAccountComponentToCancel("Current Miles",startMile)
		// //Cancel Component
		// clickButton_CancelComponent_In_ChooseAccountComponentToCancel()
		// Sleep (2)
		// //Confirming the Cancel Operation
		// clickButton_In_Level2PBwindowTitle_WindowExistDP("Choose Account Component to Cancel","Cancel","Yes")
		// //Validating Cancellation is Succesfull
		// clickButton_In_Level2PBwindowTitle_WindowExistDP("Choose Account Component to Cancel","Cancel","OK")
		// found = true
	// if found = false 
	// writeReportLog("No Components are there to Cancel","Passed","","")
	// // Closing the Winodw
	// clickButton_Close_In_ChooseAccountComponentToCancel()
	// //Snsp thsot o
	// writeReportLog("Snap shot of Component Tab after Cancelling All the Active Components","Passed","","Y")
// 
// //***************************************************************************************************************************
// //@Method: getDataInCPIBreakdownWindow_BasedOnRow(rownum,byref Due_Date ,byref CPI_1,byref Total_Amt)
// //@Author: Shelma Joseph
// //@Date 17 Sep 2020
// //@Description: This function will get the data in CPI break down window in payment tab based on row 
// //Ex:  getDataInCPIBreakdownWindow_BasedOnRow("10", Due_Date ,CPI_1,Total_Amt)
// // getDataInCPIBreakdownWindow_BasedOnRow("10", Due_Date ,"",Total_Amt)
// // getDataInCPIBreakdownWindow_BasedOnRow("10", Due_Date ,CPI_1,"")
// // getDataInCPIBreakdownWindow_BasedOnRow("10", Due_Date ,"",Total_Amt)
// // getDataInCPIBreakdownWindow_BasedOnRow("10", "" ,CPI_1,Total_Amt)
// // getDataInCPIBreakdownWindow_BasedOnRow("10", "" ,"",Total_Amt)
// // getDataInCPIBreakdownWindow_BasedOnRow("10", "" ,CPI_1,"")
// //***************************************************************************************************************************
// getDataInCPIBreakdownWindow_BasedOnRow(String rowNumber,String byref Due_Date,String byref CPI_1,String byref Total_Amt)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get PCPI Due Date
	// Due_Date = getValueInPBDataWindow_DP("w_view_report","dw_list","#" + rowNumber ,"pmt_dt")
	// //get CPI amount
	// CPI_1 = getValueInPBDataWindow_DP("w_view_report","dw_list","#" + rowNumber ,"cpi_1")
	// //get Total
	// Total_Amt = getValueInPBDataWindow_DP("w_view_report","dw_list","#" + rowNumber ,"compute_22")
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getDataInCPIBreakdownWindow_BasedOnRow","Failed", Error_Description,"")
// 
// //*******************************************************
// //@Method validateAndUpdate_VIN_CollateralTab
// //@Author Karthik.shekar
// //@Description This will Check for VIN NUmber length in Collateral Tab, if it is less thatn 17 Digit then it will generate
// //			 random number and update the VIN Value
// //EX: validateAndUpdate_VIN_CollateralTab
// //*******************************************************
// validateAndUpdate_VIN_CollateralTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// primaryVIN = getValueFromCollateralTab("VIN")
	// //Checking for VIN character count if it is less than 17 digit then Udpate it
	// if(Length(primaryVIN) <= 17)  
		// autoVin =  Generate_RandomNumber_UserDefind("ABCDEFGHIJKLMNOPQRSTUVWXYS1234567890","17")
		// SetValueInPBDataWindow_DP("w_cust","dw_list","#1","vin",autoVin)	
// 
// //******************************************************************
// //@Method clickButton_ProcessPayment_Window
// //@Author Karthik.Shekar
// //@Date 13 oct 2020
// //@Description THis function will click on the Button inside "Process Payment WIndow"
// //Ex: clickButton_ProcessPayment_Window("Cancel")
// //******************************************************************
// clickButton_ProcessPayment_Window(String buttonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// clickButton_InWindow("w_payment",buttonName)
// 
// //***********************************************************************************************************************
// //@methodName: validate_Content_DeferralAgreeementform_PDF(file_Path,loanType,custName,AcctNum,ApproverName,ApproverTitle,defermentDueDate,defermentDueAmount,ChargeAmt,maturityDate,extendedMaturityDate,finalMonthlyPayment,nextDueDate,nextDueAmount,payoffAmount)
// //@Author: Shelma Joseph
// //@Date: 28 Sep 2020
// //@Description: This will validate content in PDF file -Deferral Agreement form
// //Ex:  validate_Content_DeferralAgreeementform_PDF(FilePath,"31","ISAAC BRAVO","16000023256","Niel Johnson","General Manager","10/09/2020","200.00,"215.05","12/12/2020","01/12/2021","345.45","11/10/2020","230.05","1234.80")
// //***********************************************************************************************************************
// validate_Content_DeferralAgreeementform_PDF(String file_Path,String loanType,String fullCustName,String AcctNum,String ApproverName,String ApproverTitle,String defermentDueDate,String defermentDueAmount,String ChargeAmt,String maturityDate,String extendedMaturityDate,String finalMonthlyPayment,String nextDueDate,String nextDueAmount,String payoffAmount)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// writeReportlog("PDF file for which Valdiation will happen " &file_Path,"","Y")
	// //Adding the Parameters in Data Table in run time 
	// DataTable.GetSheet("Action1").AddParameter"file_Path",file_Path
	// DataTable.GetSheet("Action1").AddParameter"customerName",fullCustName
	// DataTable.GetSheet("Action1").AddParameter"AccountNumber",AcctNum
	// DataTable.GetSheet("Action1").AddParameter"ApproverName",ApproverName
	// DataTable.GetSheet("Action1").AddParameter"ApproverTitle",ApproverTitle
	// DataTable.GetSheet("Action1").AddParameter"defermentDueDate",defermentDueDate
	// DataTable.GetSheet("Action1").AddParameter"ChargeAmt",ChargeAmt
	// DataTable.GetSheet("Action1").AddParameter"maturityDate",maturityDate
	// DataTable.GetSheet("Action1").AddParameter"extendedMaturityDate",extendedMaturityDate
	// DataTable.GetSheet("Action1").AddParameter"finalMonthlyPayment",finalMonthlyPayment 
	// DataTable.GetSheet("Action1").AddParameter"nextDueDate",nextDueDate
	// DataTable.GetSheet("Action1").AddParameter"nextDueAmount",nextDueAmount
	// DataTable.GetSheet("Action1").AddParameter"payoffAmount",payoffAmount
	// //*****************************
	// //State variations
	// //*****************************
	// if System.GetEnvVar("currentState") <> "FL" 
	// dataTable.GetSheet("Action1").AddParameter"defermentDueAmount",defermentDueAmount
	// if
	// //**************************************************************************
	// //State Specific : There is state variations applicable to this form-  FL,TX and otherStates
	// //***************************************************************************
	// if loanType <> "" 	
		// if loanType = "55" || loanType = "56" 
			// if System.GetEnvVar("currentState") = "FL" 
				// validateFileContentCheckPointAndReport("Deferral Agreement - Indirect","DeferralAgreement-IndirectLoanFL.pdf")
			// else if System.GetEnvVar("currentState") = "TX" 
				// validateFileContentCheckPointAndReport("Deferral Agreement_TX","Deferral Agreement_TX.pdf")
			// else
				// validateFileContentCheckPointAndReport("Deferral Agreement_OtherStates","Deferral Agreementform_OtherStates.pdf")
		// if
		// if loanType = "31" 
			// if System.GetEnvVar("currentState") = "FL" 
				// validateFileContentCheckPointAndReport("Deferral Agreement - Direct","Deferral Agreement-Direct LoanFL.pdf")
				// // validateFileContentCheckPointAndReport("Deferral Agreement - Direct","DeferralAgreement-Direct Loan-FL.pdf")
			// else
				// validateFileContentCheckPointAndReport("Deferral Agreement-DirectOther","Deferral Agreement-DirectOtherStates.pdf")
	// if	
	// //Error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/: validate_DeferralAgreeement_PDF_File" + File_Path,"Failed", Error_Description ,"")
// 
// //*******************************************************************************************************************************************
// //***************************************************************
// //@Method getRow_From_PaymentSchedule_Window_BasedOnPaidAmountPercent
// //@Date 21 Sep 2020
// //@Author Shelma Joseph
// //@Description This fucntion will get the first row from payment schedule window with paid Amount percent less than given value
// //EX: msgbox getRow_From_PaymentSchedule_Window_BasedOnPaidAmountPercent("90.00")
	// //msgbox getRow_From_PaymentSchedule_Window_BasedOnPaidAmountPercent(paidAmtPercent)
// //****************************************************************
// getRow_From_PaymentSchedule_Window_BasedOnPaidAmountPercent(String paidAmtPercent)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// rowcnt = getRowCount_PbDataWindow("w_view_report","dw_list")
	// for itr = 1 To rowcnt
		// //get Paid Amount percent in payment schedule window
		// paidAmountPercent = getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"cf_paid_pct")
		// paidAmountPercent = Split(Trim(paidAmountPercent),"%")
		// if cInt(paidAmountPercent(0)) < cInt(paidAmtPercent) 
		// getRow_From_PaymentSchedule_Window_BasedOnPaidAmountPercent = itr
		// Exit for
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getRow_From_PaymentSchedule_Window_BasedOnPaidAmountPercent","Failed", Error_Description,"")
// 
// //*****************************************************************************************
// //@methodName : enter_formRequiredDetails_DeferralAgreementform(defermentDueAmount,ApproverName,ApproverTitle)
// //@Author     : Shelma Joseph
// //@Date       : 23 SEP 2020
// //@Description: This will enter the details in Deferral Agreement window
// //Ex:  enter_formRequiredDetails_DeferralAgreementform("500","Cheing Uhn","Manager")
// //	 enter_formRequiredDetails_DeferralAgreementform("","Cheing Uhn","Manager")
// //*****************************************************************************************
// enter_formRequiredDetails_DeferralAgreementform(String defermentDueAmount,String ApproverName,String ApproverTitle)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if System.GetEnvVar("currentState") <> "FL" 
		// if defermentDueAmount <> "" 
			// //To set Deferment Amount
		// SetValueInPBDataWindow_DP("w_search","dw_search","#1","name_2",defermentDueAmount)
	// if ApproverName <> "" 
		// //To set Approver Name
		// SetValueInPBDataWindow_DP("w_search","dw_search","#1","approval_name",ApproverName)
	// if ApproverTitle <> "" 
		// //To set Approver Title 
		// SetValueInPBDataWindow_DP("w_search","dw_search","#1","approval_title",ApproverTitle)
	// //Click on //OK// Button in Deferral agreement
	// clickButton_InWindow("w_search","Ok")
	// Sleep (3)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/: enter_AprroverDefermentAmountDetails_DeferralAgreement","Failed", Error_Description ,"")
// 
// //************************************************************************************************************************************************
// //@Method: get_LoanNumberFromDB_MaturityDate_MonthsNearBy_FromDB(fundingDate,monthsNeartoMaturityDate,AccountStatus,AccountTypeCode,affiType)
// //@Author: Shelma Joseph
// //@Date 21 Oct 2019
// //@Description This function is to get the Loan number from DB where loan maturity date is nearby months and funding date greater than 1st June 2020
// //NOTE: for this function if you pass Empty("") it will ignore that condition
// //Account status should be "Active//,"Redeemed || "Repo"
// // get_LoanNumberFromDB_MaturityDate_MonthsNearBy_FromDB("2019-06-01","3","Active","55","PRIMARY")
// // get_LoanNumberFromDB_MaturityDate_MonthsNearBy_FromDB("2019-06-01","5","Redeemed","31","JOINT")
// // get_LoanNumberFromDB_MaturityDate_MonthsNearBy_FromDB("2019-06-01","5","Repo",//56","COSIGN")
// //***********************************************************************************************************************************************
// get_LoanNumberFromDB_MaturityDate_MonthsNearBy_FromDB(String fundingDate,String monthsNeartoMaturityDate,String AccountStatus,String AccountTypeCode,String affiType)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if fundingDate <> "" 
		// fundingDate = formatDateWithSpecifiedDelimeter(fundingDate,"YYYYMMDD","-")
		// funding_Date =  "funding_dt >= //" &fundingDate&"// "
	// if monthsNeartoMaturityDate <> ""  		
		// monthsNeartoMaturity_Date = " and last_pmt_due_dt between getdate(*) and dateadd(mm, //"&monthsNeartoMaturityDate&"//,getdate(*))" 
	// if AccountStatus <> ""  		
		// Account_Status = " and acct_status =//" + AccountStatus + "// "
	// if AccountTypeCode <> ""  		
		// AccountType_Code = " and acct_type=//" + AccountTypeCode &"// "
	// if affiType <> "" 
		// if ToUpper(affiType) = "PRIMARY" 
			// affiliation_Type =  " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
		// else if ToUpper(affiType) = "COSIGN" || ToUpper(affiType) = "JOINT" 	
	// affiliation_Type = " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" + ToUpper(affiType) + "//)"
	// query = "select funding_dt,last_pmt_due_dt,* from bp_account_tbl where " + funding_Date +  monthsNeartoMaturity_Date +  Account_Status + AccountType_Code + affiliation_Type
	// //UFT Logger
	// LogSuccessMessage("get_LoanNumberFromDB_MaturityDate_MonthsNearBy_FromDB", query)
	// //Returing the loan number  
	// get_LoanNumberFromDB_MaturityDate_MonthsNearBy_FromDB = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : get_LoanNumberFromDB_MaturityDate_MonthsNearBy_FromDB","Failed", Error_Description,"")
// 
// //*********************************************************************************************
// //@methodName: isDirectLoanApplicableforCurrentState
// //@Author Ambika
// //@Date 27 Oct 2020
// //@Description This function will return the status of direct loan for current state
// //@Return: Returns true if direct loan applicable else it will return false
// //EX:  isDirectLoanApplicableforCurrentState()
// //*********************************************************************************************
// // isDirectLoanApplicableforCurrentState()
	// // %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// // //handling for direct loan states
	// // if System.GetEnvVar("currentState") = "NC" || System.GetEnvVar("currentState") = "SC" || System.GetEnvVar("currentState") = "FL" || System.GetEnvVar("currentState") = "GA" ||  System.GetEnvVar("currentState") = "AL"or  System.GetEnvVar("currentState") = "OH" 
		// // isDirectLoanApplicableforCurrentState = True
	// // else
		// // isDirectLoanApplicableforCurrentState = false 
	// // //Error Handling
	// // if GetErrorCount()>0 
		// // writeReportLog("Failed Step/Function: isDirectLoanApplicableforCurrentState","Failed", Error_Description,"")
// 
// //***************************************************************
// //@Method enter_AmountDetails_ProcessPaymentWindow
// //@Author Karthik.Shekar
// //@Description This method will enter Check Number, Amt Received and amt Applied
// //EX: enter_AmountDetails_ProcessPaymentWindow("12345","25","25")
// // enter_AmountDetails_ProcessPaymentWindow("4567","100","50")
// //*******************************************************************
// enter_AmountDetails_ProcessPaymentWindow(String checkNumber,String amtReceived,String amtApplied)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// SetValueInPBDataWindow_DP("w_payment","dw_payment","#1","check_nbr",checkNumber)
	// SetValueInPBDataWindow_DP("w_payment","dw_payment","#1","amt_recvd",ccur(amtReceived))
	// SetValueInPBDataWindow_DP("w_payment","dw_payment","#1","amt_applied",ccur(amtApplied))
	// //Error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in enter_AmountDetails_ProcessPaymentWindow","Failed", Error_Description,"")
// 
// //*********************************************Generic Function*******************************************************
// //@methodName: getChildNodes_inPbTreeView_DP
// //@Description: This function will get all the child Nodes from the Specified Node seperated by //|// character
// // NOTE: This will return the full path of Child nodes
// //@Author: Karthik Shekar
// //@Date 19 Nov 2020
// //Ex: print getChildNodes_inPbTreeView_DP("w_reports","tv_report","Onbase")
// // print getChildNodes_inPbTreeView_DP("w_reports","tv_report","Payment")
// //Sample Output: Archived Documents;Payment;Payment Receipt  2020-03-19 15:15 (088100179264)|Archived Documents;Payment;Payment Receipt  2020-01-22 10:12 (088100176423)|Archived Documents;Payment;Payment Receipt  2019-12-16 08:27 (088100174597)|Archived Documents;Payment;Payment Receipt  2019-11-25 14:03 (088100173618)|Archived Documents;Payment;Payment Receipt  2019-10-11 15:45 (088100171798)|Archived Documents;Payment;Payment Receipt  2019-09-30 08:23 (088100171204)|Archived Documents;Payment;Payment Receipt  2019-09-10 08:23 (088100170420)|Archived Documents;Payment;Payment Receipt  2019-08-27 11:20 (088100169872)|Archived Documents;Payment;Payment Receipt  2019-06-28 08:40 (088100167658)|Archived Documents;Payment;Payment Receipt for Debit Card  2020-09-18 16:16 (088100187178)
// //****************************************************************************************************
// getChildNodes_inPbTreeView_DP(String pbWindowName,String pbTreeName,String nodeName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// With w_bp_frame.PbWindow("pbname:=" + pbWindowName).PbTreeView("pbname:=" + pbTreeName)
		// //.Expand(nodeName)
		// //Getting entire content of PbTree
		// getContent = .GetContent()
		// //Spliting for each node value
		// eachChildNodeArray = Split(getContent,Chr(10))
		// //Identifying the required child nodes		
		// for itr = 0 To UBound(eachChildNodeArray) Step 1
			// if  IndexOf(eachChildNodeArray(itr), (nodeName + ";")) > 0 
				// requiredChildNodeDetails = requiredChildNodeDetails + eachChildNodeArray(itr) +"|"
		// //Returning Value
		// if Len(requiredChildNodeDetails) > 1 
			// getChildNodes_inPbTreeView_DP = Left(requiredChildNodeDetails,Len(requiredChildNodeDetails)-1)
	// With 
	// //Handling Error
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to getChildNodes","Failed", Error_Description ,"")
// 
// //*********************************************************************
// //@methodName: clickButton_Files
// //@Author Karthik
// //@Date 11 Nov 2020
// //@Description This will click on the button FIles which is available in Tool Bar 
// //EX:  clickButton_Files()
// //*********************************************************************
// clickButton_Files()	
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if BranchPlus.InsightObject("btn_Files").WaitWhileExists(10) 
		// BranchPlus.InsightObject("btn_Files").Click()
	// else
		// writeReportLog("Files Button is Not Available. Please Check","Failed","","")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/clickButton_Files","Failed", Error_Description ,"")
// 
// //*********************************************************************
// //@methodName: clickButton_Folder
// //@Author Karthik
// //@Date 11 Nov 2020
// //@Description This will click on the button/Icon Folder which is available in Tool Bar 
// //EX:  clickButton_Folder()
// //*********************************************************************
// clickButton_Folder()	
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if BranchPlus.InsightObject("btn_Folder").WaitWhileExists(10) 
		// BranchPlus.InsightObject("btn_Folder").Click()
	// else
		// writeReportLog("Folder Button is Not Available. Please Check","Failed","","")
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/clickButton_Folder","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: clickOnBackButton_CreditDecisionWindow()
// //@Author:Shelma Joseph
// //@Date 19 Nov 2020
// //@Description:This function will click on "Back" button in Credit Decision Window
// //Ex:  clickOnBackButton_CreditDecisionWindow()
// //********************************************************************************************************
// clickOnBackButton_CreditDecisionWindow()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //click on back
	// BranchPlus.CreditDecision.WinButton("pbname:=cb_back").Click()
	// Sleep (2)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to clickOnBackButton_CreditDecisionWindow","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: clickOnCancelButton_CreditDecisionWindow()
// //@Author:Shelma Joseph
// //@Date 19 Nov 2020
// //@Description:This will click on Back Button in Credit Decision Window
// //Ex:  clickOnBackButton_CreditDecisionWindow()
// //********************************************************************************************************
// clickOnCancelButton_CreditDecisionWindow()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //click on back
	// BranchPlus.CreditDecision.WinButton("pbname:=cb_cancel").Click()
	// Sleep (2)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to clickOnCancelButton_CreditDecisionWindow","Failed", Error_Description ,"")
// 
// //********************************************************************************************************
// //@methodName: openCreditDecision_From_AccountTab()
// //@Author:Shelma Joseph
// //@Date 19 Nov 2020
// //@Description:This function is intended to perform Open credit decision from account tab for an In Progress Account
// //Ex:  openCreditDecision_From_AccountTab()
// //***************************************************************************************************************************
// openCreditDecision_From_AccountTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Saving the Data in Account Tab prior going to open credit decision
	// clickOnSaveButon()
	// //Clicking on new option from 
	// clickNewButton()
	// //Selecting New Credit Decision option from choose an item window
	// selectValue_From_ChooseAnItem_Popup("Open Credit Decision for Current Customer")
	// Sleep(5)
	// //Logger
	// writeReportLog("Open Credit decision from Account Tab ","Passed",FailComments,"Y")
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/OpencreditDecison_fromAccountTab","Failed", Error_Description,"")
// 
// //********************************************************************************************************
// //@methodName: getReferenceNumber_from_CreditDesionWindow()
// //@Author:Shelma Joseph
// //@Date 19 Nov 2020
// //@Description://This function will get you teh reference number from credit decision window
// //Ex:  getReferenceNumber_from_CreditDesionWindow()
// //********************************************************************************************************
// getReferenceNumber_from_CreditDesionWindow()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Activate the Window
	// BranchPlus.CreditDecision.SetActive()
	// //Getting Reference Number from Credit decision Window
	// referenceNumber = Split(BranchPlus.CreditDecision.GetAttr(("regexpwndtitle"), ":")
	// getReferenceNumber_from_CreditDesionWindow = Trim(referenceNumber(1))
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getReferenceNumber_from_CreditDesionWindow","Failed", Error_Description,"")
// 
// //********************************************************************************************************
// //@methodName: click_Button_CreditDecision_Level2_Window(buttonName)
// //@Author:Shelma Joseph
// //@Date 17 Nov 2020
// //@Description This is to Click on the button in Credit Decision Window
// //Ex: click_Button_CreditDecision_Level2_Window("Yes")
// //********************************************************************************************************
// click_Button_CreditDecision_Level2_Window(String buttonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //click on button
	// click_Button_InWindow_if_WindowExistDP("w_wiz_new_cust","w_message",buttonName)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/click_Button_CreditDecision_Level2_Window","Failed", Error_Description ,"")
// 
// //*****************************************************************************************************************************************
// //@methodName: validateContentIn_Unearned_Report(expCustName,expLoanNbr,expPrinclBal,expIntRate,expLastPmtDt,expUnearnedAmt,expBeginAmt,expNewAmt,expPeriodAmt,expCancelAmt,expEnding,expCancelDt,expPaidOutDt)
// //@Author: Ambika
// //@Date 24 sep 2020
// //@Description: This function is to validate the content in Unearned report
// //Ex:  validateContentIn_Unearned_Report(expCustName,expLoanNbr,expPrinclBal,expIntRate,expLastPmtDt,expUnearnedAmt,expBeginAmt,expNewAmt,expPeriodAmt,expCancelAmt,expEnding,expCancelDt,expPaidOutDt)
// //***************************************************************************************************************************************** 
// validateContentIn_Unearned_Report(String expCustName,String expLoanNbr,String expPrinclBal,String expIntRate,String expLastPmtDt,String expUnearnedAmt,String expBeginAmt,String expNewAmt,String expPeriodAmt,String expCancelAmt,String expEnding,String expCancelDt,String expPaidOutDt)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// w_bp_frame.ReportsFrame.PbDataWindow("pbname:=dw_report").IsPresent()
	// flag = false
	// //Row count of table
	// rowcnt = getRowCount_PbDataWindow("w_reports","dw_report")
	// for itr = 1 To rowcnt 
		// actCustName =  getValueInPBDataWindow_DP("w_reports","dw_report","#"&itr,"cust_name")
		// actLoanNbr = Split(getValueInPBDataWindow_DP("w_reports","dw_report","#"&itr,"cf_loan_nbr")," ")(0)
		// actBalance = getValueInPBDataWindow_DP("w_reports","dw_report","#"&itr,"princ_bal")
		// actIntRate = getValueInPBDataWindow_DP("w_reports","dw_report","#"&itr,"int_rate")
		// actUnearnedAmt =  getValueInPBDataWindow_DP("w_reports","dw_report","#"&itr,"unearned_amt")
		// actBeginAmt = getValueInPBDataWindow_DP("w_reports","dw_report","#"&itr,"begin_amt")
		// actNewAmt = getValueInPBDataWindow_DP("w_reports","dw_report","#"&itr,"new_amt")
		// actPeriodAmt = getValueInPBDataWindow_DP("w_reports","dw_report","#"&itr,"period_amt")
		// actCancelAmt = getValueInPBDataWindow_DP("w_reports","dw_report","#"&itr,"cancel_amt")
		// actEnding = Split(getValueInPBDataWindow_DP("w_reports","dw_report","#"&itr,"unearned_bal")," ")(0)
		// actPaidOutDt = getValueInPBDataWindow_DP("w_reports","dw_report","#"&itr,"cf_paid_out_dt")
		// //Validation		
		// if actLoanNbr = expLoanNbr 
		// validateDataAndReport(Trim(ToUpper(actCustName)),Trim(ToUpper(expCustName)),"Validation of Customer Name")
		// validateDataAndReport(Ccur(actBalance),Ccur(expPrinclBal),"Validation of Balance")
		// validateDataAndReport(Ccur(actIntRate),Ccur(expIntRate),"Validation of Rate ")
		// if expLastPmtDt <> "" 
		// actLastPmtDt = Split(getValueInPBDataWindow_DP("w_reports","dw_report","#"&itr,"last_pmt_dt")," ")(0)
		// validateDataAndReport(Cdate(actLastPmtDt),Cdate(expLastPmtDt),"Validation of Last Paid")
		// validateDataAndReport(Ccur(actUnearnedAmt),Ccur(expUnearnedAmt),"Validation of Orginal unearned")
		// validateDataAndReport(Ccur(actBeginAmt),Ccur(expBeginAmt),"Validation of Begin")
		// validateDataAndReport(Ccur(actNewAmt),Ccur(expNewAmt),"Validation of New ")
		// validateDataAndReport(Ccur(actPeriodAmt),Ccur(expPeriodAmt),"Validation of Period")
		// validateDataAndReport(Ccur(actCancelAmt),Ccur(expCancelAmt),"Validation of Cancel")
		// validateDataAndReport(Ccur(actEnding),Ccur(expEnding),"Validation of Ending")
		// if expCancelDt <> "" 
				// actCancelDt = Split(getValueInPBDataWindow_DP("w_reports","dw_report","#"&itr,"cf_cancel_dt")," ")(0)
		// validateDataAndReport(actCancelDt,expCancelDt,"Validation of Cancel Date")
		// validateDataAndReport(actPaidOutDt,expPaidOutDt,"Validation of Paid Out Date")
		// flag = true
		// Exit for
	// if flag = false 
		// writeReportLog("Data in Unearned report is not exist","Failed","","")
	// //Error Handling
	// if GetErrorCount()>0 
			// writeReportLog("Failed in method validateContentIn_Unearned_Report ","Failed", Error_Description,"")
// 
// //*****************************************************************************************************************************************
// //@methodName: select_ComponentDesc_From_UnEarnedReport(CompDesc)
// //@Author: Ambika
// //@Date 11 Aug 2020
// //@Description: This function is to select dealer description from dealer Progress report
// //Ex:  select_ComponentDesc_From_UnEarnedReport("Gwc Vsc, 24 Months, 50k-75k Miles")
// //*****************************************************************************************************************************************
// select_ComponentDesc_From_UnEarnedReport(String ColID,String CompDesc)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// w_bp_frame.CreditDecisionSearchWindow.dw_search.IsPresent()
	// //Select desc
	// w_bp_frame.CreditDecisionSearchWindow.dw_search.SetValue(CellData "#1",ColID,CompDesc
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/select_ComponentDesc_From_UnEarnedReport","Failed", Error_Description ,"")
// 
// //****************************************************************************************************************
// //@Method run_UnearnedReport_PeriodAmount_Query_FetchValue_FromDB(acctID, compID, closingDate,fieldNameToget)
// //@Author Ambika
// //@Date 02 Nov 2020
// //@Description this function will run the Query to Fetch the period Amount populated in unearned report based on acctid,CompId and closing date
// //@Return Period Amount
// //EX:  run_UnearnedReport_PeriodAmount_Query_FetchValue_FromDB("088100029431", "088100072191", "2021-01-01","PeriodAmount")
// //****************************************************************************************************************
// run_UnearnedReport_PeriodAmount_Query_FetchValue_FromDB(String acctID,String compID,String closingDate,String fieldNameToget)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get query
	// UnearnedPeriodAmountQuery = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath")&"UnearnedReport_PeriodAmount_Query.sql")	
	// //replace account ID,Component ID and closing date
	// UnearnedPeriodAmountQuery = Replace(UnearnedPeriodAmountQuery,"@acctID@",acctID)
	// UnearnedPeriodAmountQuery = Replace(UnearnedPeriodAmountQuery,"@compID@",compID)
	// UnearnedPeriodAmountQuery = Replace(UnearnedPeriodAmountQuery,"@closingDate@",closingDate)
	// //Logger
	// LogSuccessMessage("Unearned Report Period Amount Query Generated",UnearnedPeriodAmountQuery)
	// //Returning the Value
	// run_UnearnedReport_PeriodAmount_Query_FetchValue_FromDB = runSQLQuery_FetchMultipleValues_WithoutExit(UnearnedPeriodAmountQuery, fieldNameToget)  	
	// //Error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/: run_UnearnedReport_PeriodAmount_Query_FetchValue_FromDB","Failed", Error_Description ,"")
// 
// //****************************************************************************************************************
// //@Method run_UnearnedReport_EndingAmount_Query_FetchValue_FromDB(compID,fieldNameToget)
// //@Author Ambika
// //@Date 02 Nov 2020
// //@Description this function will run the Query to Fetch the Ending Amount populated in unearned report based on acctid,CompId and closing date
// //@Return Ending Amount
// //EX:  run_UnearnedReport_EndingAmount_Query_FetchValue_FromDB("088100072191","EndAmt")
// //****************************************************************************************************************
// run_UnearnedReport_EndingAmount_Query_FetchValue_FromDB(String compID,String fieldNameToget)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get query
	// UnearnedEndingAmountQuery = get_Entire_File_Content(System.GetEnvVar("BranchPlusSQLPath")&"UnearnedReport_EndingAmount_Query.sql")	
	// //replace query with component ID
	// UnearnedEndingAmountQuery = Replace(UnearnedEndingAmountQuery,"@compID@",compID)
	// //Logger
	// LogSuccessMessage("Unearned Report Ending Amount Query Generated",UnearnedEndingAmountQuery)
	// //Returning the Value
	// run_UnearnedReport_EndingAmount_Query_FetchValue_FromDB = runSQLQuery_FetchMultipleValues_WithoutExit(UnearnedEndingAmountQuery, fieldNameToget)  	
	// //Error handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/: run_UnearnedReport_EndingAmount_Query_FetchValue_FromDB","Failed", Error_Description ,"")
// 
// //***************************************************************************************************************************
// //@Method: createAndProcess_DirectLoan_ToApprovedStatus_BasedOnCustomerType(testDataPath,customer_Type,skip_Validation)
// //@Author: Shelma Joseph
// //@Date 12 Nov 2020
// //@Description: This function is to create direct loan based on customer type. Customer Type can be "Individual", "Joint","Cosign","Joint-Cosign"
			// //Skip_Validation parameter if set to "Y" will skip all direct loan validation steps
// //Ex:  createAndProcess_DirectLoan_ToApprovedStatus_BasedOnCustomerType(testDataPath,"Individual","N")
// //***************************************************************************************************************************
// createAndProcess_DirectLoan_ToApprovedStatus_BasedOnCustomerType(String testDataPath,String customer_Type,String skip_Validation)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //	//Setting Test Data Path			
	// //	testDataPath = System.GetEnvVar("BranchPlusSharedPath") + System.GetEnvVar("currentState") + "\TestData\CreateDirectLoan_Processing_TestData.xlsx"
	// //	
	// //Importing Test Data from Excel Sheet(specific sheet)
	// importSpecificSheet(testDataPath,"Individual")
	// ////*********************************************************************************************
	// // Finding out the data set to proceed with checking unused data
	// for itr = 1 To DataTable.GetRowCount
		// if DataTable.Value("UsedData") = "Y" 
			// DataTable.SetValue(Row
		// else
		// Exit for
	// //*********************************************************************************************
	// // Reading Data which is required for Test Script
	// //*********************************************************************************************
	// //Data required for Test
	// loanType = DataTable.Value("loanType")
	// delarName = DataTable.Value("dealerName")
	// lastName = UCase(DataTable.Value("LastName"))
	// firstName = UCase(DataTable.Value("FirstName"))
	// SSN = DataTable.Value("SSN")
	// DOB = DataTable.Value("DOB")
	// addr1 = DataTable.Value("Address1")
	// addr2 = DataTable.Value("Address2")
	// addr3 = DataTable.Value("Address3")
	// zipCode = DataTable.Value("ZipCode")
	// //Fetching Primary Employer Details
	// emplrName = DataTable.Value("EmployerName")
	// position = DataTable.Value("Position")
	// dept = DataTable.Value("Dept")
	// shift = DataTable.Value("Shift")
	// supervisor = DataTable.Value("Supervisor")
	// workyrs = DataTable.Value("WorkYrs")
	// workmos = DataTable.Value("WorkMnths")
	// salSource = DataTable.Value("SalarySource")
	// payday = DataTable.Value("PayDay")
	// salPeriodType = DataTable.Value("SalaryPeriodType")
	// grossSal = DataTable.Value("GrossSalary")
	// //Fetcing Vehicle Details
	// vin = DataTable.Value("VIN")
	// descr= DataTable.Value("Descr") 
	// make = DataTable.Value("Make")
	// model = DataTable.Value("Model")
	// style = DataTable.Value("Style")
	// mfyear = DataTable.Value("Mfyear") 
	// color = DataTable.Value("Color")
	// mileage = DataTable.Value("Mileage")
	// cylinder = DataTable.Value("Cylinder")
	// other = DataTable.Value("Other")
	// tradeDesc= DataTable.Value("TradeDesc")
	// //Fetching Finance Details
	// purchaseAmt = DataTable.Value("PurchaseAmount")
	// terms = DataTable.Value("LoanTerm")
	// intRate = DataTable.Value("CustRate")
	// chrgAmt = DataTable.Value("ChargeAmt")
	// //Fetching Stipulation Details
	// completed_Signed_Application = DataTable.Value("CompletedSignedApplication")
	// coMaker_agreement =  DataTable.Value("coMaker_agreement")
	// copy_of_Valid_Driver_License = DataTable.Value("CopyofValidDriversLicense")
	// PFS_Credit_Verifictn_Authorizn_form = DataTable.Value("PFSCreditVerificationandAuthorizationform")
	// list_of_Relatives = DataTable.Value("ListofRelatives")
	// proof_of_Residence = DataTable.Value("ProofofResidence")
	// proof_of_Income = DataTable.Value("ProofofIncome")
	// PFS_Insurance_Verification_form = DataTable.Value("PFSInsuranceVerificationform")
	// Sleep (2)
	// //STEP: Choosing the Loan Type
	// chooseLoanType(loanType)
	// //Click on  Button
	// clickOnButton_CreditDecisionWindow()
	// Sleep (2)
	// //Updating Data sheet for Used Data
	// DataTable.Value("UsedData") = "Y"
	// //Updating the result sheet
	// exportSpecificSheet(testDataPath,"Individual")
	// //**************************************************
	// //STEP: Entering User Details
	// enterPrimaryApplicantDetails_CreditDecisionWindow(lastName,firstName,SSN,DOB)
	// Sleep (2)
	// //**************************UPDATE APPLICANT DETAILS FOR JOINT, COSIGNER ||  JOINT + COSIGNER***********************************
	// //Updating Address Details if customer Type is Co-Applicant(Joint_Cosigner)
	// if customer_Type = "Joint_Cosigner" 
		// //Importing Test Data from Excel Shet(specific sheet)
		// importSpecificSheet(testDataPath,"Joint")
		// //Set Row in Data Sheet
		// set_Row_Data_Sheet("Joint")
		// //Get Data from Excel Sheet
		// Joint_Applicant_Last_Name = DataTable.Value("LastName","Joint")
		// Joint_Applicant_First_Name = DataTable.Value("FirstName","Joint")
		// Joint_Applicant_SSN = DataTable.Value("SSN","Joint")
		// Joint_Applicant_DOB = DataTable.Value("DOB","Joint")
		// Joint_Applicant_Address = Datatable.Value("Address1","Joint")
		// Joint_Applicant_Zipcode = Datatable.Value("ZipCode","Joint") 
		// //Updating Data sheet
		// DataTable.Value("UsedData","Joint") = "Y"
		// //Updating the result sheet	
		// exportSpecificSheet(testDataPath,"Joint")
		// //Update CoApplicant Details - Joint
		// Update_CoApplicant_Details("#1",Joint_Applicant_Last_Name,Joint_Applicant_First_Name,Joint_Applicant_SSN,Joint_Applicant_DOB,"Joint")
		// Sleep (2)
	// //--------------------------------------------------------------------------------------------------------------
		// //Importing Cosigner Test Data from Excel Shet(specific sheet)
		// importSpecificSheet(testDataPath,"Cosigner")
		// //Set Row in Data Sheet
		// set_Row_Data_Sheet("Cosigner")
		// //Get Data from Excel Sheet
		// Cosigner_Applicant_Last_Name = DataTable.Value("LastName","Cosigner")
		// Cosigner_Applicant_First_Name = DataTable.Value("FirstName","Cosigner")
		// Cosigner_Applicant_SSN = DataTable.Value("SSN","Cosigner")
		// Cosigner_Applicant_DOB = DataTable.Value("DOB","Cosigner")
		// Cosigner_Applicant_Address = Datatable.Value("Address1","Cosigner")
		// Cosigner_Applicant_Zipcode = Datatable.Value("ZipCode","Cosigner")
		// //Updating Data sheet
		// DataTable.Value("UsedData","Cosigner") = "Y"
		// //Updating the result sheet	
		// exportSpecificSheet(testDataPath,"Cosigner")
		// //Update CoApplicant Details - Cosigner
		// Update_CoApplicant_Details("#2",Cosigner_Applicant_Last_Name,Cosigner_Applicant_First_Name,Cosigner_Applicant_SSN,Cosigner_Applicant_DOB,"Cosigner")
		// Sleep (2)
	// else if customer_Type = "Joint" || customer_Type = "Cosigner" 
	// //---------------------------------------------------------------------------------------------------------------		
		// //Importing Test Data from Excel Sheet(specific sheet)
			// importSpecificSheet(testDataPath,customer_Type)
			// //Set Row in Data Sheet
			// set_Row_Data_Sheet(customer_Type)
			// //Get Data from Excel Sheet
			// Co_Applicant_Last_Name = DataTable.Value("LastName",customer_Type)
			// Co_Applicant_First_Name = DataTable.Value("FirstName",customer_Type)
			// Co_Applicant_SSN = DataTable.Value("SSN",customer_Type)
			// Co_Applicant_DOB = DataTable.Value("DOB",customer_Type)
			// Co_Applicant_Address = Datatable.Value("Address1",customer_Type)
			// Co_Applicant_Zipcode = Datatable.Value("ZipCode",customer_Type)
			// //Updating Data sheet
			// DataTable.Value("UsedData",customer_Type) = "Y"
			// //Updating the result sheet	
			// exportSpecificSheet(testDataPath,customer_Type)
		// //Update CoApplicant Details
		// Update_CoApplicant_Details("#1",Co_Applicant_Last_Name,Co_Applicant_First_Name,Co_Applicant_SSN,Co_Applicant_DOB,customer_Type)	
		// Sleep (2)
	// //click on next
	// clickOnButton_CreditDecisionWindow()
	// Sleep (2)
	// //Validate Dual Loan
	// ValidateDualLoan_SSN(SSN)
	// //STEP: Entering Address
	// enterApplicantAddess_CreditDecisionWindow(addr1, addr2, addr3, zipCode)
	// Sleep (2)
	// //***************************UPDATE APPLICANT ADRESS DETAILS FOR JOINT, COSIGNER || JOINT + COSIGNER****************************
	// //Updating Applicant Details if the Customer Type is Co-Applicant(Joint_Cosigner)
	// if customer_Type = "Joint_Cosigner" 
		// //Update CoApplicant Details - Joint
		// enter_Co_ApplicantAddess_CreditDecisionWindow("#1",Joint_Applicant_Address,Joint_Applicant_Zipcode)
		// //Perform Scrolling Downward	
		// Select_Cell_CoApplicant_Window("#1","zipcode")
		// MouseWheel(2,False)
		// //Update CoApplicant Details - Cosigner
		// enter_Co_ApplicantAddess_CreditDecisionWindow("#2",Cosigner_Applicant_Address,Cosigner_Applicant_Zipcode)
		// //Perform Scrolling Upward	
		// Select_Cell_CoApplicant_Window("#2","zipcode")
		// MouseWheel(2,True)
	// else if customer_Type = "Joint" || customer_Type = "Cosigner" 
		// //Enter Co_Applicant Address Details
		// enter_Co_ApplicantAddess_CreditDecisionWindow("#1",Co_Applicant_Address,Co_Applicant_Zipcode)
	// Sleep (2		)
	// //******************************** MLA Verification****************************
	// //Click on Verify MLA Status and validate MLA Status in CreditDecision Window
	// MLAVerification_Credit_Decision_Window()
	// Sleep (2)
	// //****************************Validate Credit Check if Customer Type is Joint || Cosigner****************************
	// if customer_Type = "Joint" || customer_Type = "Cosigner" 
		// //click on Back
		// clickOnBackButton_CreditDecisionWindow()
		// referenceNum = getReferenceNumber_from_CreditDesionWindow()
		// //click on Cancel
		// clickOnCancelButton_CreditDecisionWindow()
		// //Save prompt on Credit decision-Yes
		// click_Button_CreditDecision_Level2_Window("Yes")
		// //Printing credit decision set to No
		// handleCreditDecision_Popup("No")
		// //Close Current Window
		// closeBranchApplication()
		// //Login Back To Application
		// BranchPlusLogin()
		// //Searching the customer using loan number in F2 window
		// searchAccountWithReferenceId(referenceNum)
		// Sleep (2)
		// openCreditDecision_From_AccountTab()
		// //click on next
		// clickOnButton_CreditDecisionWindow()
		// //click on next
		// clickOnButton_CreditDecisionWindow()	
		// Sleep (2)
		// //		Click on Joint/Cosigner Verify MLA Status and validate MLA Status in CreditDecision Window
		// MLAVerification_Credit_Decision_Window_CoApplicant()
		// Sleep (2)
	// else if customer_Type = "Joint_Cosigner" 	
		// //Perform Scrolling Downward
		// Select_Cell_CoApplicant_Window("#1","zipcode")
		// MouseWheel(2,False)
	// //*********************************************************************************************************************
	// //click on next
	// clickOnButton_CreditDecisionWindow()
	// Sleep (2)
	// //Handling USPS window
	// handleUSPSWindow()
	// //Handling USPS window
	// handleUSPSWindow()
	// //Handling Applicant USPS window
	// // handleUSPSWindow_Applicant()
	// if customer_Type = "Joint" || customer_Type = "Cosigner" 
		// //Handling USPS window for Co-Applicant
		// handleUSPSWindow_CoApplicant()
	// if customer_Type="Joint_Cosigner" 
		// //Handling USPS window for Co-Applicant
		// handleUSPSWindow_CoApplicant()
		// //Handling USPS window for Co-Applicant
		// handleUSPSWindow_CoApplicant()
	// //***************************************************************************************************************************
	// //STEP: Entering Primary Employer Details
	// enter_Primary_Employer_Details_CreditDecision_Window(emplrName,position,dept,shift,supervisor,workyrs,workmos,salSource,payday,salPeriodType,grossSal)
	// Sleep (2)
	// //click on next
	// clickOnButton_CreditDecisionWindow()
	// Sleep (1)
	// //STEP: Entering Collateral Details
	// enterCollateralDetails_CreditDecisionWindow(vin,descr, make, model, style, mfyear, color, mileage, cylinder, other, tradeDesc)
	// Sleep (1)
	// //click on next
	// clickOnButton_CreditDecisionWindow()
	// Sleep (1)
	// //STEP: Entering Finance Details
	// enter_DirectLoan_FinanceDetails_CreditDecisionWindow(purchaseAmt,terms,intRate)
	// //Validating  Payment Date
	// validateFirstPaymentDate_CreditDecisionWindow()
	// //Entering Value in Charge Amt Value in Table
	// enter_ChargeAmount_InTitleFee(chrgAmt)
	// totalFinanceAmt = get_Total_FinanceValue_CreditDecision_Window
	// //click on next
	// clickOnButton_CreditDecisionWindow()	
	// Sleep (2)
	// //***************************************ENTER OTHER STIPULATION CHECKLIST*******************************************
	// //STEP: Enter other stipulation checklist
	// enter_Stipulated_Details_CreditDecision_Window(completed_Signed_Application,coMaker_agreement,copy_of_Valid_Driver_License,PFS_Credit_Verifictn_Authorizn_form,list_of_Relatives,proof_of_Residence,proof_of_Income,PFS_Insurance_Verification_form)
	// Sleep (1)
	// //************************************************************************************************************************
	// //click on next
	// clickOnButton_CreditDecisionWindow()
	// //STEP: Selecting Application Status 
	// setValueInApplicationStatus_CreditDecisionWindow("In Process")
	// //Logger
	// writeReportLog("Direct Loan is in //In Process// Status for User with SSN:" + "******" + Right(SSN,4) ,"Passed",FailComments,"YES")
	// //Clicking on Finish Button
	// clickOnFinishButton_CreditDecisionWindow()
	// Sleep (1)
	// //Printing the Check Number
	// handleCreditDecision_Popup("Yes")
	// Sleep (2)
	// if customer_Type = "Joint" || customer_Type = "Cosigner" 
		// //Close Current window	
		// closeCurrentWindow()
	// //Importing Test Data from Excel Shet(specific sheet)
	// DataTable.AddSheet("ProcessLoan")
	// DataTable.ImportSheet testDataPath,"ProcessLoan","ProcessLoan"
	// ////*********************************************************************************************
	// //Cust Tab Data
	// usResident = DataTable.Value("CustomerTab_USResident","ProcessLoan")
	// creditScore = DataTable.Value("CustomerTab_CreditScore","ProcessLoan")
	// custEmail = DataTable.Value("CustomerTab_Email","ProcessLoan")
	// //Budget Tab Data
	// mntlyIncome = DataTable.Value("BudgetTab_MonthlyIncome","ProcessLoan")
	// mntlySecondIncome = DataTable.Value("BudgetTab_2ndIncome","ProcessLoan")
	// mntlyPay1 = DataTable.Value("BudgetTab_MontlyPayment_1","ProcessLoan")
	// mntlyPay2 = DataTable.Value("BudgetTab_MontlyPayment_2","ProcessLoan")
	// mntlyPay3= DataTable.Value("BudgetTab_MontlyPayment_3","ProcessLoan")
	// mntlyPay4 = DataTable.Value("BudgetTab_MontlyPayment_4","ProcessLoan")
	// //Ref Tab Data
	// Ref_RefType1 = DataTable.Value("ReferenceTab_1_RefType","ProcessLoan")
	// Ref_FN1 = DataTable.Value("ReferenceTab_1_FirstName","ProcessLoan")
	// Ref_LN1 = DataTable.Value("ReferenceTab_1_LastName","ProcessLoan")
	// Ref_HP1 = DataTable.Value("ReferenceTab_1_HomePhone","ProcessLoan")
	// Ref_CP1 = DataTable.Value("ReferenceTab_1_CellPhone","ProcessLoan")
	// Ref_OP1 = DataTable.Value("ReferenceTab_1_OtherPhone","ProcessLoan")
	// Ref_RefType2 = DataTable.Value("ReferenceTab_2_RefType","ProcessLoan")
	// Ref_FN2 = DataTable.Value("ReferenceTab_2_FirstName","ProcessLoan")
	// Ref_LN2 = DataTable.Value("ReferenceTab_2_LastName","ProcessLoan")
	// Ref_HP2 = DataTable.Value("ReferenceTab_2_HomePhone","ProcessLoan")
	// Ref_CP2 = DataTable.Value("ReferenceTab_2_CellPhone","ProcessLoan")
	// Ref_OP2 = DataTable.Value("ReferenceTab_2_OtherPhone","ProcessLoan")
	// //Insurance Tab Data
	// InsTab_Cmp1 = DataTable.Value("InsuranceTab_1_Company","ProcessLoan")
	// InsTab_Policy1 = DataTable.Value("InsuranceTab_1_Policy","ProcessLoan")
	// //Processing Loan
	// Reason = DataTable.Value("Reason","ProcessLoan")
	// PayTo = DataTable.Value("PayTo","ProcessLoan")
	// Customer_Receipt = DataTable.Value("Customer_Receipt","ProcessLoan")
	// Payoff_Acc_Status = DataTable.Value("Payoff_Acc_Status","ProcessLoan")
	// //*********************************************************************************************
	// Sleep (2)
	// //Searching with SSN Number
	// openMaintenanceAndSearchWithSSNNumber(SSN)
	// if (skip_Validation = "N") 
		// //Validating the Account Type value
		// actualAcctType = get_AcctType_AccountTab()
		// expectedAcctType = loanType
		// validateDataAndReport(actualAcctType,expectedAcctType,"Validation of Account/Loan Type in Credit Decision window " + expectedAcctType + " and Account Tab>>" + actualAcctType)
		// //Validating the Cash to Customer Amount
		// actualCashtoCustAmt = CCur(get_CashToCustomer_AccountTab())
		// expectedCashtoCustAmt = CCur(purchaseAmt)
		// validateDataAndReport(actualCashtoCustAmt,expectedCashtoCustAmt,"Validation of Cash to Customer Amount in Credit Decision window " + expectedCashtoCustAmt &" and Account Tab>>" + actualCashtoCustAmt)
		// //Validating the Total Charge Amount
		// actualFinanceAmt = CCur(get_AmountFinance_AccountTab())
		// expectedFinanceAmt = CCur(totalFinanceAmt)
		// validateDataAndReport(actualFinanceAmt,expectedFinanceAmt,"Validation of Amount Finance in Credit Decision window " + expectedFinanceAmt &" and Account Tab>>" + actualFinanceAmt)
		// //Validating the Interest rate
		// actualIntrate = get_InterestRate_AccountTab()
		// expectedIntRate = intRate
		// validateDataAndReport(actualIntrate,expectedIntRate,"Validation of Interest Rate in Credit Decision window " + expectedIntRate &" and Account Tab>>" + actualIntrate)
		// //Validating the Terms
		// actualTerm = get_Terms_AccountTab()
		// expectedTerm = terms
		// validateDataAndReport(actualTerm,expectedTerm,"Validation of Term in Credit Decision window " + expectedTerm &" and Account Tab>>" + actualTerm)
	// //STEP: Navigating to Customer Tab
	// navigateToTab("Customer")
	// //Setting Required Values
	// //	 setValuesIn_CustomerTab(usResident,creditScore,custEmail)
	// setValuesIn_CustomerTab(usResident,creditScore,"")
	// //Saving the Data
	// clickOnSaveButon()
	// Sleep (2)
	// //STEP: Navigating to Budget Tab
	// navigateToTab("Budget")
	// //Setting Values in Budget Tab
	// enterValuesIn_BudgetTab(mntlyIncome, mntlySecondIncome, mntlyPay1, mntlyPay2, mntlyPay3, mntlyPay4)
	// //Saving the Data
	// clickOnSaveButon()
	// Sleep (2)
	// //STEP: Navigating to Reference Tab
	// navigateToTab("Reference")
	// Sleep (2)
	// //Click on Add Row Button
	// clickButton_AddRow()
	// Sleep (3)
	// //Adding the Details
	// addReferenceDetails_ReferenceTab("#1",Ref_RefType1, Ref_FN1, Ref_LN1, Ref_HP1, Ref_CP1, Ref_OP1)
	// //Adding 2nd Reference Details
	// clickButton_AddRow()
	// Sleep (2)
	// //Adding the Details
	// addReferenceDetails_ReferenceTab("#2",Ref_RefType2, Ref_FN2, Ref_LN2, Ref_HP2, Ref_CP2, Ref_OP2)
	// //Saving the Data
	// clickOnSaveButon()
	// //STEP: Navigating to Insurance Tab
	// navigateToTab("Insurance")
	// //Click on Add Row Button
	// clickButton_AddRow()
	// //Identifying the Start + Date
	// startDate = date()
	// endDate = DateAdd("m",6,date())
	// //Entering Insurance Details
	// enterInsuranceDetails_InsuranceTab("#1", InsTab_Cmp1, InsTab_Policy1, startDate, endDate)
	// //Saving the Data
	// clickOnSaveButon()
	// if (skip_Validation = "N") 
		// //*******************************************************************************************************
		// //#######BRP_2683: Create link to Allied Website (9.4.0 ticket)	
		// //Logger
		// writeReportLog("Snap shot of Allied Website Link","Passed","","Y")
		// if System.GetEnvVar("OS") = "Windows 10" 
			// //click on allied website link
			// clickOn_InsightObject("BranchPlus","Allied_Website_Link_Win10","AllideWebsite")
		// else
			// //click on allied website link
			// clickOn_InsightObject("BranchPlus","Allied_Website_Link","AllideWebsite")
		// //validating My Insurance Info page in browser
		// // validate_SpecificPage_Displayed_InBrowser("My Insurance Info .com Homepage")
		// //#####-Change as part of Allied incurance home page###
		// validate_SpecificPage_Displayed_InBrowser("Simple, Secure Insurance")
		// //To close the browser
		// // close_SpecificTab_InBrowser("My Insurance Info .com Homepage")
		// close_SpecificTab_InBrowser("Simple, Secure Insurance")
		// //handaling warning popup
		// // handle_Browser_DialogPopup("My Insurance Info .com Homepage","Windows Internet Explorer","Leave this page")
		// //Logger
		// writeReportLog("<b>Validation of Link to Allied Website from //Insurance Tab// is successful </b>","Passed",FailComments,"")
		// Sleep (2)
		// //*******************************************************************************************************
	// IF
	// Sleep (2)
	// //STEP: Navigate to Account Tab and Approve Loan
	// navigateToTab("Account")
	// //Changing the Status to Approve
	// changeAccountStatus_InAccountTab("Approved")
	// Sleep (2)
	// //Fetching the Reference ID
	// refID = getReferenceID_AccountTab()
	// //Saving the Data
	// clickOnSaveButon()
	// Sleep (2)
	// //Redirecting To Test popup
	// if System.GetEnvVar("currentState") = "NC" 
		// clickButtonInPBWindow("Redirecting To Test","OK")
	// //Handle Dual Loan Pop up
	// if System.GetEnvVar("currentState") = "NC" 
		// handle_DualLoan_PopUp()
	// //******* BRP-2784: Warn Users got email id on Processing the Loan*******
	// //STEP: Processing the Loan and Convering to Active
	// // processDirectLoan_ToMakeActive(Reason,PayTo)
	// clickButton_Process()
	// Sleep (3)
	// //Redirecting To Test popup
	// if System.GetEnvVar("currentState") = "NC" 
		// clickButtonInPBWindow("Redirecting To Test","OK")
	// //	//Handle Dual Loan Pop up
	// //	if currentState = "NC" 
	// //		 handle_DualLoan_PopUp()
	// //	 
	// //Fetching the Expected Data
	// actEmailValidationMsg = getStaticText("Process Loan Validation")
	// Sleep (1)
	// expEmailValMsg = "Primary Customer "& convertSingleWordToCamelCase(firstName) + " " + convertSingleWordToCamelCase(lastName) &" is missing an email address."
	// //Validating the Error Message Dispalyed
	// validatePartialDataAndReport(actEmailValidationMsg,expEmailValMsg,"Validation of the Primary Email Address Missing while Processing the Loan")
	// Sleep (2)
	// //Valdiation for JOIN || COSigner Applicant
	// if customer_Type = "Joint" 
		// //ExpMsg for Joint
		// expEmailValMsgJoint = "Joint Customer "& convertSingleWordToCamelCase(Co_Applicant_First_Name) + " " + convertSingleWordToCamelCase(Co_Applicant_Last_Name) &" is missing an email address."
		// //Validating the Error Message Dispalyed
		// validatePartialDataAndReport(actEmailValidationMsg,expEmailValMsgJoint,"Validation of the Joint Email Address Missing while Processing the Loan")
	// else if customer_Type = "Cosigner" 
		// //ExpMsg for Joint
		// expEmailValMsgJoint = "Cosign Customer "& convertSingleWordToCamelCase(Co_Applicant_First_Name) + " " + convertSingleWordToCamelCase(Co_Applicant_Last_Name) &" is missing an email address."
		// //Validating the Error Message Dispalyed
		// validatePartialDataAndReport(actEmailValidationMsg,expEmailValMsgJoint,"Validation of the Cosinger Email Address Missing while Processing the Loan")
	// //Logger
	// writeReportLog("Snap shot of Process Loan Validation Warning Window","Passed","","Y")
	// //Ignoring the Loan Processing
	// clickButton_Level1PBwindow_DP("Process Loan Validation","No")
	// //Closing the Current Window and Opening the 
	// closeCurrentWindow()
	// //Updating the Email Address of Primary Applicant
	// searchAccountWithReferenceId(refId)
	// navigateToTab("Customer")
	// Sleep (2)
	// setValue_In_CustomerTab("Email",custEmail)
	// //Set US resident as Y
	// // SetValue_PBDataWindow(custTabPbWindow,"#1","us_resident_yn","Yes")
	// //Saving the Data
	// clickOnSaveButon()
	// Sleep (2)
	// //Handlign for Joint/Cosigner
	// if customer_Type = "Joint"  || customer_Type = "Cosigner"  
		// //Click on NExt Button
		// clickButton_()
		// Sleep (2)
		// //Updating the Email Address	
		// setValue_In_CustomerTab("Email",custEmail)
		// //Set US resident as Y
		// SetValue_PBDataWindow(custTabPbWindow,"#1","us_resident_yn","Yes")
		// //Saving the Data
		// clickOnSaveButon()
		// //Sleep (2)
	// //Handlign for getting primary account for Joint/Cosigner account
	// if customer_Type = "Joint"  || customer_Type = "Cosigner"  	
		// //Navigate to Coapplicant tab
		// navigateToTab("Coapplicant")
		// //Click on First Button
		// clickButton_First()
		// //########## Special Handling Identify the Primary Customer ########## 
		// for itr = 1 To 2
			// AffilType = getValueFromCoApplicantTab("Affiliation")
			// Sleep (2)
			// //Identifying the Record wherer JOINT || COSIGN Customer is displayed
			// if ToUpper(AffilType) = "PRIMARY" 
				// Exit for
			// else
				// //Click on  Button
				// clickButton_()		
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to openReportWindow","Failed", Error_Description ,"")
// //*******************************************GENERIC FUNCTIOn****************************************************************************************
// //@Method: typeTextIn2LevelPBDataWindow_DP
// //@Author Karthik
// //@Date 04 Dec 2020
// //@Description This function will type the text in the Specified Field
// //Ex:  typeTextIn2LevelPBDataWindow_DP("w_wiz_new_cust","w_creditcheck","dw_creditcheck","#1","state","OH")
// //************************************************************************************************************************************
// typeTextIn2LevelPBDataWindow_DP(String windowName1,String windowName2,String dataWindowName,String rowNumber,String colID,String value)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.Pbwindow("pbname:=" + windowName1).Pbwindow("pbname:=" + windowName2).PbDataWindow("pbname:=" + dataWindowName).WaitWhileExists(10) 		
		// w_bp_frame.Pbwindow("pbname:=" + windowName1).Pbwindow("pbname:=" + windowName2).PbDataWindow("pbname:=" + dataWindowName).SelectCell(rowNumber,colID)
		// w_bp_frame.Pbwindow("pbname:=" + windowName1).Pbwindow("pbname:=" + windowName2).PbDataWindow("pbname:=" + dataWindowName)TypeKeys(value)
		// Sleep (1				)
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/typeTextIn2LevelPBDataWindow_DP","Failed", Error_Description ,"Y")
// 
// //**************************************************************
// //@method enterTestCustomerDetails_CreditCheckWindow
// //@Author Karthik.Shekar
// //@Date 12 Dec 2020
// //@Description This will fetch the Test Customer Details from Data sheet based onCredit Bereau passed to fucntion.
// //NOTE: This is going to identify Current State and pull the test data Accordingly
// //EX:  enterTestCustomerDetails_CreditCheckWindow("Equifax")
// //	 enterTestCustomerDetails_CreditCheckWindow("Transunion")
// //**************************************************************
// enterTestCustomerDetails_CreditCheckWindow(reqCreditBereau)
	// currentState = getCurrentStateName_From_DB()
	// //Importign the Data sheet
	// addNewDataTableAndimportSheet(System.GetEnvVar("BranchPlusSharedPath") + "Global_TestData\CreditReport_TestData.xlsx","CreditCheckData","CreditCheckData")
	// //Fetching Row Count
	// rowCnt = DataTable.GetSheet("CreditCheckData").GetRowCount
	// //Identify the TEst Data Based on State
	// for itr = 1 To rowCnt Step 1
	// expState = DataTable.Value("State","CreditCheckData")
	// expBureau = DataTable.Value("creditBureau","CreditCheckData")
	// if expState = currentState and ToUpper(expBureau) = ToUpper(reqCreditBereau) 
	// Exit for
	// else
	// DataTable.GetSheet("CreditCheckData").SetValue(Row	
	// ////Updating Test Customer Details 
	// SetValueIn2LevelPBDataWindow_DP("w_wiz_new_cust","w_creditcheck","dw_creditcheck","#1","last_name",DataTable.Value("LastName","CreditCheckData"))
	// SetValueIn2LevelPBDataWindow_DP("w_wiz_new_cust","w_creditcheck","dw_creditcheck","#1","first_name",DataTable.Value("FirstName","CreditCheckData"))
	// SetValueIn2LevelPBDataWindow_DP("w_wiz_new_cust","w_creditcheck","dw_creditcheck","#1","middle_name",DataTable.Value("MidName","CreditCheckData"))
	// SetValueIn2LevelPBDataWindow_DP("w_wiz_new_cust","w_creditcheck","dw_creditcheck","#1","suffix",DataTable.Value("Suffix","CreditCheckData"))
	// Sleep (2)
	// // SetValueIn2LevelPBDataWindow_DP("w_wiz_new_cust","w_creditcheck","dw_creditcheck","#1","ssn",DataTable.Value("SSN","CreditCheckData"))
	// typeTextIn2LevelPBDataWindow_DP("w_wiz_new_cust","w_creditcheck","dw_creditcheck","#1","ssn",DataTable.Value("SSN","CreditCheckData")) 	
	// Sleep (2)
	// SetValueIn2LevelPBDataWindow_DP("w_wiz_new_cust","w_creditcheck","dw_creditcheck","#1","street_nbr",DataTable.Value("StreetNumber","CreditCheckData"))
	// SetValueIn2LevelPBDataWindow_DP("w_wiz_new_cust","w_creditcheck","dw_creditcheck","#1","street_name",DataTable.Value("StreetName","CreditCheckData"))
	// SetValueIn2LevelPBDataWindow_DP("w_wiz_new_cust","w_creditcheck","dw_creditcheck","#1","city",DataTable.Value("City","CreditCheckData"))
	// Sleep (1)
	// // SetValueIn2LevelPBDataWindow_DP("w_wiz_new_cust","w_creditcheck","dw_creditcheck","#1","state",DataTable.Value("State","CreditCheckData"))
	// typeTextIn2LevelPBDataWindow_DP("w_wiz_new_cust","w_creditcheck","dw_creditcheck","#1","state",DataTable.Value("State","CreditCheckData"))
	// UA.GenKeyEvents("<Tab>")
	// SetValueIn2LevelPBDataWindow_DP("w_wiz_new_cust","w_creditcheck","dw_creditcheck","#1","zipcode",DataTable.Value("ZIPCode","CreditCheckData")) 	
	// //Remove Data Table
	// DataTable.DeleteSheet("CreditCheckData")
	// //Logger
	// writeReportLog("Snap shot after entering the Test User details before Credit Pull","Passed","","Y")
	// //Error Handling	
	// if GetErrorCount()>0  			
			// writeReportLog("Failed to enterTestCustomerDetails_CreditCheckWindow","Failed", Error_Description ,"")
// //ex:  handle_Level2PBWindow_DialogPopup("Credit Decision.*","Branch PLUS","Security Alert","Yes")
// handle_Level2PBWindow_DialogPopup(String windowName1,String windowName2,String dialogName,String buttonToClick)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.PbWindow("regexpwndtitle:="& windowName1).PbWindow("regexpwndtitle:="& windowName2).Dialog("regexpwndtitle:="& dialogName).WaitWhileExists(5) 		
		// Sleep(2)
		// //Clicking on Button
		// if w_bp_frame.PbWindow("regexpwndtitle:="& windowName1).PbWindow("regexpwndtitle:="& windowName2).Dialog("regexpwndtitle:="& dialogName).WinButton("regexpwndtitle:=" + buttonToClick).WaitWhileExists(5) 
			// w_bp_frame.PbWindow("regexpwndtitle:="& windowName1).PbWindow("regexpwndtitle:="& windowName2).Dialog("regexpwndtitle:="& dialogName).WinButton("regexpwndtitle:=" + buttonToClick).Click()
		// else if w_bp_frame.PbWindow("regexpwndtitle:="& windowName1).PbWindow("regexpwndtitle:="& windowName2).Dialog("regexpwndtitle:="& dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).WaitWhileExists(5) 
			// w_bp_frame.PbWindow("regexpwndtitle:="& windowName1).PbWindow("regexpwndtitle:="& windowName2).Dialog("regexpwndtitle:="& dialogName).WinButton("regexpwndtitle:=&" + buttonToClick).Click()	     				
		// else
			// writeReportLog("Clicking on Button " + buttonToClick + "Failed in Dialog: " + dialogName,"Failed","","Y")	
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to handle_Level2PBWindow_DialogPopup","Failed", Error_Description ,"")
// 
// //*******************************************GENERIC FUNCTION****************************************************************************************
// //@Method: typeTextInLevel1PBDataWindow_DP
// //@Author Shelma Joseph
// //@Date 17 Dec 2020
// //@Description This function will type the text in the Specified Field
// //Ex:  typeTextInLevel1PBDataWindow_DP("w_search","dw_search","#1","start_date","12/17/2020")
// //************************************************************************************************************************************
// typeTextInLevel1PBDataWindow_DP(String windowName,String dataWindowName,String rowNumber,String colID,String value)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if w_bp_frame.Pbwindow("pbname:=" + windowName).PbDataWindow("pbname:=" + dataWindowName).WaitWhileExists(10) 		
		// w_bp_frame.Pbwindow("pbname:=" + windowName).PbDataWindow("pbname:=" + dataWindowName).SelectCell(rowNumber,colID)
		// w_bp_frame.Pbwindow("pbname:=" + windowName).PbDataWindow("pbname:=" + dataWindowName)TypeKeys(value)
		// Sleep (1				)
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/typeTextInLevel1PBDataWindow_DP","Failed", Error_Description ,"Y")
// 
// //****************************************************
// //@MEthod get_LoggedIn_userID
// //@Description this method will get the logged in user id displayed in the application Status bar
// //@Author Karthik.Shekar
// //EX: msgbox get_LoggedIn_userID()
// //****************************************************
// get_LoggedIn_userID()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// tempText = get_TextFrom_StatusBar()
	// tempText = Trim(Split(tempText," ")(0))
	// get_LoggedIn_userID = Trim(Split(tempText,"	")(0))
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : get_LoggedIn_userID ","Failed", Error_Description,"")
// 
// //****************************************************
// //@MEthod get_TextFrom_StatusBar
// //@Description this method will get the text from Status Bar which is there in bottom right of WIndow
// //@Author Karthik.Shekar
// //EX: msgbox get_TextFrom_StatusBar()
// //****************************************************
// get_TextFrom_StatusBar()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// get_TextFrom_StatusBar = BranchPlus.PbDataWindow("pbname:=u_bp_statusbar").GetText()
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : get_TextFrom_StatusBar ","Failed", Error_Description,"")
// 
// //***********************************************************************************************************************
// //@methodName: validate_Content_DeferralAgreeementform_PDF(file_Path,loanType,custName,AcctNum,ApproverName,ApproverTitle,defermentDueDate,defermentDueAmount,ChargeAmt,maturityDate,extendedMaturityDate,finalMonthlyPayment,nextDueDate,nextDueAmount,payoffAmount)
// //@Author: Shelma Joseph
// //@Date: 28 Sep 2020
// //@Description: This will validate content in PDF file -Deferral Agreement form
// //Ex:  validate_Content_DeferralAgreeementform_PDF(FilePath,"31","ISAAC BRAVO","16000023256","Niel Johnson","General Manager","10/09/2020","200.00,"215.05","12/12/2020","01/12/2021","345.45","11/10/2020","230.05","1234.80")
// //***********************************************************************************************************************
// validate_Content_DeferralAgreeementform_PDF(String file_Path,String loanType,String fullCustName,String AcctNum,String ApproverName,String ApproverTitle,String defermentDueDate,String defermentDueAmount,String ChargeAmt,String maturityDate,String extendedMaturityDate,String finalMonthlyPayment,String nextDueDate,String nextDueAmount,String payoffAmount)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// writeReportlog("PDF file for which Valdiation will happen " &file_Path,"","Y")
	// //Adding the Parameters in Data Table in run time 
	// DataTable.GetSheet("Action1").AddParameter"file_Path",file_Path
	// DataTable.GetSheet("Action1").AddParameter"customerName",fullCustName
	// DataTable.GetSheet("Action1").AddParameter"AccountNumber",AcctNum
	// DataTable.GetSheet("Action1").AddParameter"ApproverName",ApproverName
	// DataTable.GetSheet("Action1").AddParameter"ApproverTitle",ApproverTitle
	// DataTable.GetSheet("Action1").AddParameter"defermentDueDate",defermentDueDate
	// DataTable.GetSheet("Action1").AddParameter"ChargeAmt",ChargeAmt
	// DataTable.GetSheet("Action1").AddParameter"maturityDate",maturityDate
	// DataTable.GetSheet("Action1").AddParameter"extendedMaturityDate",extendedMaturityDate
	// DataTable.GetSheet("Action1").AddParameter"finalMonthlyPayment",finalMonthlyPayment 
	// DataTable.GetSheet("Action1").AddParameter"nextDueDate",nextDueDate
	// DataTable.GetSheet("Action1").AddParameter"nextDueAmount",nextDueAmount
	// DataTable.GetSheet("Action1").AddParameter"payoffAmount",payoffAmount
	// //*****************************
	// //State variations
	// //*****************************
	// if System.GetEnvVar("currentState") <> "FL" 
	// dataTable.GetSheet("Action1").AddParameter"defermentDueAmount",defermentDueAmount
	// if
	// //**************************************************************************
	// //State Specific : There is state variations applicable to this form-  FL,TX and otherStates
	// //***************************************************************************
	// if loanType <> " " 
		// if loanType = "55" || loanType = "56" 
			// if System.GetEnvVar("currentState") = "FL" 
				// validateFileContentCheckPointAndReport("Deferral Agreement - Indirect","DeferralAgreement-IndirectLoanFL.pdf")
			// else if System.GetEnvVar("currentState") = "TX" 
				// validateFileContentCheckPointAndReport("Deferral Agreement_TX","Deferral Agreement_TX.pdf")
			// else
				// validateFileContentCheckPointAndReport("Deferral Agreement_OtherStates","Deferral Agreementform_OtherStates.pdf")
		// if loanType = "31" 
			// if System.GetEnvVar("currentState") = "FL" 
				// validateFileContentCheckPointAndReport("Deferral Agreement - Direct","Deferral Agreement-Direct LoanFL.pdf")
				// // validateFileContentCheckPointAndReport("Deferral Agreement - Direct","DeferralAgreement-Direct Loan-FL.pdf")
			// else
				// validateFileContentCheckPointAndReport("Deferral Agreement-DirectOther","Deferral Agreement-DirectOtherStates.pdf")
	// //Error handling
	// //if GetErrorCount()>0  			
	// //	 writeReportLog("Failed in Step/: validate_DeferralAgreeement_PDF_File" + File_Path,"Failed", Error_Description ,"")
	// // 
// 
// //***************************************************************
// //@Method getRow_From_PaymentSchedule_Window_BasedOnPaidAmountPercent
// //@Date 21 Sep 2020
// //@Author Shelma Joseph
// //@Description This fucntion will get the first row from payment schedule window with paid Amount percent less than given value
// //EX: msgbox getRow_From_PaymentSchedule_Window_BasedOnPaidAmountPercent("90.00")
	// //msgbox getRow_From_PaymentSchedule_Window_BasedOnPaidAmountPercent(paidAmtPercent)
// //****************************************************************
// getRow_From_PaymentSchedule_Window_BasedOnPaidAmountPercent(String paidAmtPercent)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// rowcnt = getRowCount_PbDataWindow("w_view_report","dw_list")
	// for itr = 1 To rowcnt
		// //get Paid Amount percent in payment schedule window
		// paidAmountPercent getValueInPBDataWindow_DP("w_view_report","dw_list","#"&itr,"cf_paid_pct")
		// paidAmountPercent = Split(Trim(paidAmountPercent),"%")
		// if cInt(paidAmountPercent(0)) < cInt(paidAmtPercent) 
		// getRow_From_PaymentSchedule_Window_BasedOnPaidAmountPercent = itr
		// Exit for
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/getRow_From_PaymentSchedule_Window_BasedOnPaidAmountPercent","Failed", Error_Description,"")
// 
// //*****************************************************************************************
// //@methodName : enter_formRequiredDetails_DeferralAgreementform(defermentDueAmount,ApproverName,ApproverTitle)
// //@Author     : Shelma Joseph
// //@Date       : 23 SEP 2020
// //@Description: This will enter the details in Deferral Agreement window
// //Ex:  enter_formRequiredDetails_DeferralAgreementform("500","Cheing Uhn","Manager")
// //	 enter_formRequiredDetails_DeferralAgreementform("","Cheing Uhn","Manager")
// //*****************************************************************************************
// enter_formRequiredDetails_DeferralAgreementform(String defermentDueAmount,String ApproverName,String ApproverTitle)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if System.GetEnvVar("currentState") <> "FL" 
		// if defermentDueAmount <> "" 
			// //To set Deferment Amount
		// SetValueInPBDataWindow_DP("w_search","dw_search","#1","name_2",defermentDueAmount)
	// if ApproverName <> "" 
		// //To set Approver Name
		// SetValueInPBDataWindow_DP("w_search","dw_search","#1","approval_name",ApproverName)
	// if ApproverTitle <> "" 
		// //To set Approver Title 
		// SetValueInPBDataWindow_DP("w_search","dw_search","#1","approval_title",ApproverTitle)
	// //Click on //OK// Button in Deferral agreement
	// clickButton_InWindow("w_search","Ok")
	// Sleep (3)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/: enter_AprroverDefermentAmountDetails_DeferralAgreement","Failed", Error_Description ,"")
// 
// //************************************************************************************************************************************************
// //@Method: get_LoanNumberFromDB_MaturityDate_MonthsNearBy_FromDB(fundingDate,monthsNeartoMaturityDate,AccountStatus,AccountTypeCode,affiType)
// //@Author: Shelma Joseph
// //@Date 21 Oct 2019
// //@Description This function is to get the Loan number from DB where loan maturity date is nearby months and funding date greater than 1st June 2020
// //NOTE: for this function if you pass Empty("") it will ignore that condition
// //Account status should be "Active//,"Redeemed || "Repo"
// // get_LoanNumberFromDB_MaturityDate_MonthsNearBy_FromDB("2019-06-01","3","Active","55","PRIMARY")
// // get_LoanNumberFromDB_MaturityDate_MonthsNearBy_FromDB("2019-06-01","5","Redeemed","31","JOINT")
// // get_LoanNumberFromDB_MaturityDate_MonthsNearBy_FromDB("2019-06-01","5","Repo",//56","COSIGN")
// //***********************************************************************************************************************************************
// get_LoanNumberFromDB_MaturityDate_MonthsNearBy_FromDB(String fundingDate,String monthsNeartoMaturityDate,String AccountStatus,String AccountTypeCode,String affiType)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if fundingDate <> "" 
		// fundingDate = formatDateWithSpecifiedDelimeter(fundingDate,"YYYYMMDD","-")
		// funding_Date =  "funding_dt >= //" &fundingDate&"// "
	// if monthsNeartoMaturityDate <> ""  		
		// monthsNeartoMaturity_Date = " and last_pmt_due_dt between getdate(*) and dateadd(mm, //"&monthsNeartoMaturityDate&"//,getdate(*))" 
	// if AccountStatus <> ""  		
		// Account_Status = " and acct_status =//" + AccountStatus + "// "
	// if AccountTypeCode <> ""  		
		// AccountType_Code = " and acct_type=//" + AccountTypeCode &"// "
	// if affiType <> "" 
		// if ToUpper(affiType) = "PRIMARY" 
			// affiliation_Type =  " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) = 1) and affil_type = //PRIMARY//)"
		// else if ToUpper(affiType) = "COSIGN" || ToUpper(affiType) = "JOINT" 	
	// affiliation_Type = " and acct_id in (select acct_id from bp_account_customer_affil_tbl where acct_id in (select acct_id from bp_account_customer_affil_tbl group by acct_id having count(acct_id) > 1) and affil_type = //" + ToUpper(affiType) + "//)"
	// query = "select funding_dt,last_pmt_due_dt,* from bp_account_tbl where " + funding_Date +  monthsNeartoMaturity_Date +  Account_Status + AccountType_Code + affiliation_Type
	// //UFT Logger
	// LogSuccessMessage("get_LoanNumberFromDB_MaturityDate_MonthsNearBy_FromDB", query)
	// //Returing the loan number  
	// get_LoanNumberFromDB_MaturityDate_MonthsNearBy_FromDB = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")	
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed : get_LoanNumberFromDB_MaturityDate_MonthsNearBy_FromDB","Failed", Error_Description,"")
// 
// //********************************************************************************************************************************************
// //@methodName: validate_StaticText_And_HandlePopupLevel2Window(staticText,WindowName1,WindowName2,ButtonName)
// //@Description: This function is to handle the level 2 popup by validating static text
// //@Author: Shelma Joseph
// //@Date 03-05-2021
// //Ex:  validate_StaticText_And_HandlePopupLevel2Window("Do you want to Waive the selected Charge","Waive Charge","OK")
// //*********************************************************************************************************************************************
// validate_StaticText_And_HandlePopupLevel2Window(String staticText,String WindowName1,String WindowName2,String ButtonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get static text
	// actStaticText = getStaticText_Level2PBwindow(WindowName1,WindowName2)
	// //Replace if any new line date is available
	// actStaticText = Replace(actStaticText, vbNewLine, " ")
	// //validate static text
	// validateDataAndReport(actStaticText,staticText,"Static text : "& actStaticText)
	// //click button in window
	// clickButton_In_Level2PBwindowTitle_DP(WindowName1,WindowName2,ButtonName)
	// //error handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/validate_StaticText_And_HandlePopupLevel2Window","Failed", Error_Description,"")
// 
// //*********************************************************************************************
// //@methodName: processPayment_for_AllTypes_withCustomAppliedReceived_Amt(paymentType,paymentMethod,CheckNumber, amtReceived, amtPaid, printReceipt)
// //@Author: Chandra
// //@Date 11 June 2018
// //@Description: This function will do the Payments(Cash,Cash by mail,Check,Check by Mail,Cashier//s CHeck,MoneyOrder)
// //Ex:  processPayment_for_AllTypes_withCustomAppliedReceived_Amt("Regular Payment","Check","65432","10","10","third_party_receipt")
// //*********************************************************************************************
// processPayment_for_AllTypes_withCustomAppliedReceived_Amt(String paymentType,String paymentMethod,String CheckNumber,String amtReceived,String amtPaid,String printReceipt)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Set pbWindowPayment = w_bp_frame.PbWindow("pbname:=w_payment").PbDataWindow("pbname:=dw_payment")
	// pbWindowPayment.IsPresent(),30000
	// // NO need to Select the Radio buttion for Regular pament as by default "Regular Payment" will be selected
	// if ToUpper(paymentType) <> ToUpper("Regular Payment") 		
	// //Selecting the Payment Type
	// // SetValue_PBDataWindow(pbWindowPayment,"#1","pmt_class",paymentType) 	
	// SetValueInPBDataWindow_DP("w_payment","dw_payment","#1","pmt_class", paymentType)
	// Sleep(2)
// //Selecting the Payment Method
// paymentMethodToSelect = paymentMethod
// // SetValue_PBDataWindow(pbWindowPayment,"#1","pmt_type",paymentMethod) 	 	
	// SetValueInPBDataWindow_DP("w_payment","dw_payment","#1","pmt_type",paymentMethodToSelect)
// //Handling Check Number Data based on PaymentType
	// if paymentMethod = "Cash" || paymentMethod = "Cash by Mail" || paymentMethod = "Allotment" || paymentMethod = "Dealer Discount" || paymentMethod = "Bankruptcy" || paymentMethod = "Garnish" || paymentMethod = "HO CPI Claim Check" || paymentMethod = "HO GAP Claim Check" || paymentMethod = "HO Warranty Claim Check" || paymentMethod = "Home Office" || paymentMethod = "Mobile Payment" 
// //Ignoring The Check Number if Payment Type is example : Cash and Cash by Mail
// else
// SetValue_PBDataWindow(pbWindowPayment,"#1","check_nbr",CheckNumber)	
// if paymentType = "Payoff" 
// //for Deferment and Payoff No need to enter Amount
		// System.GetEnvVar("AmtReceived") = CCur(GetValue_PBDataWindow(pbWindowPayment,"#1","amt_recvd"))
// else
	// SetValue_PBDataWindow(pbWindowPayment,"#1","amt_recvd",amtReceived)
	// SetValue_PBDataWindow(pbWindowPayment,"#1","amt_applied",amtPaid)
// SetValue_PBDataWindow(pbWindowPayment,"#1",printReceipt,"ON")
// //Click Ok button in Process Payment Window
// clickButton_InWindow("w_payment","OK")
// if GetErrorCount()>0 
		// writeReportLog("Failed in step/processPayment_for_AllTypes_withCustomAppliedReceived_Amt","Failed", Error_Description,"Y")
// 
// //*********************************************************************************************
// //@methodName: get_LatestLateCharge_AppliedbasedLoanNum_ChargesTbl_FromDB(LoanNumber,waiveOffYN)
// //@Author Shelma Joseph
// //@Date 10 March 2021
// //@Description This is for get the Diffrence Amount for Charge Amount and Paid Amount From DB
// //Ex  get_LatestLateCharge_AppliedbasedLoanNum_ChargesTbl_FromDB("160000244202","N")
// //*********************************************************************************************
// get_LatestLateCharge_AppliedbasedLoanNum_ChargesTbl_FromDB(String LoanNumber,String waiveOffYN)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Query To run
	// query ="select paidAmount = paid_amt from bp_account_charge_tbl where acct_id in (select acct_id from bp_account_tbl where loan_nbr =//"& LoanNumber &"//) and charge_type = //LATE_CHG// and waived_yn =//"& waiveOffYN &"// order by due_dt desc"
	// //Updating the Query in the UFT Log
	// Reporter.ReportEvent micDone,"Query to get Latest Latec Charge//s paid amount from DB",query
	// //Executing the Query Generated
	// get_LatestLateCharge_AppliedbasedLoanNum_ChargesTbl_FromDB = runSQLQuery_WithWarning_WithoutExit(query,"paidAmount")
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in step/get_LatestLateCharge_AppliedbasedLoanNum_ChargesTbl_FromDB","Failed",Error_Description ,"Y")
// 
// //********************************************************************************************************
// //@methodName: clickButton_SinglePbWindow(buttonName)
// //@Author ShelmaJoseph
// //@Date 8 Mar 2021
// //@Description This is will handle button click on single level popup window 
// //EX:  clickButton_SinglePbWindow("No")
// //*********************************************************************************************************
// clickButton_SinglePbWindow(String buttonName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if buttonName = "No" 
		// if PbWindow("w_bp_frame").InsightObject("wmessage_No").WaitWhileExists(5) 
			// PbWindow("w_bp_frame").InsightObject("wmessage_No").Click()
			// Sleep (1)
	// if buttonName = "Yes" 
		// if PbWindow("w_message").InsightObject("wmessage_Yes").WaitWhileExists(5) 
			// PbWindow("w_message").InsightObject("wmessage_Yes").Click()
			// Sleep (1)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/clickButton_SinglePbWindow","Failed", Error_Description ,"")
// 
// //*********************************************************************************************
// //@methodName: get_CreditScore_AccountTab()
// //@Author Ritu Tripathi
// //@Date 16 Aug 2021
// //@Description This gets the Credit Score from Account Tab
// //@Returing the Credit Score
// //Ex  get_CreditScore_AccountTab()
// //*********************************************************************************************
// get_CreditScore_AccountTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// AppObject aoCustTable = BranchPlus.CustomerF2Window.dw_cust
	// get_CreditScore_AccountTab = GetValue_PBDataWindow(custTable,"#1","credit_score")
	// //Error Handling
	// if GetErrorCount()>0 
			// writeReportLog("Failed: get_CreditScore_AccountTab","Failed", Error_Description,"")
// 
// //******************************************************************************************************************************************************
// //@Method: validate_CreditScore_AccountTab()
// //@Author: Ritu Tripathi
// //@Date 16 Aug 2021
// //@Description: This function validates whether Credit Score displayed in Account Tab is same as that in DB.
// //Type of data to pass : Arguments passed should be Numerical and contain only credit score (without Bureau code which looks like LEXNEX)
// //Ex:  validate_CreditScore_AccountTab(CreditScore_DB,CreditScore_App)
// //******************************************************************************************************************************************************
// validate_CreditScore_AccountTab(String CreditScore_DB,String CreditScore_App)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Compare the values of Credit Score
	// if Cstr(CreditScore_DB) = CreditScore_App 
		// Reporter.ReportEvent micPass,"Validation of Credit Score Done Successfully","Credit Score is:"&CreditScore_App
		// writeReportLog("Credit Score : "&CreditScore_App,"Passed",FailComments,"")
	// else
		// Reporter.ReportEvent micFail,"Validation of Credit Score Failed","Expected Credit Score :"& CreditScore_DB + "| Actual Credit Score in Application :"& CreditScore_App
		// writeReportLog("Credit Score displayed : "&CreditScore_App&". Expected Credit Score : "&CreditScore_DB,"Failed","","")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/validate_CreditScore_AccountTab","Failed", Error_Description,"")
// 
// //******************************************************************************************************************************************************
// //@Method: validate_CreditBureau_AccountTab()
// //@Author: Ritu Tripathi
// //@Date 16 Aug 2021
// //@Description: This function validates whether Credit Bureau displayed in Account Tab is same as that in DB.
// //Type of data to pass : Arguments passed should contain only Bureau code (like LEXNEX)
// //Ex:  validate_CreditBureau_AccountTab(CreditBureau_DB,CreditBureau_App)
// //******************************************************************************************************************************************************
// validate_CreditBureau_AccountTab(String CreditBureau_DB,String CreditBureau_App)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Compare the values of Credit Bureau
	// if CreditBureau_DB = CreditBureau_App 
		// Reporter.ReportEvent micPass,"Validation of Credit Bureau Done Successfully","Credit Bureau is:"&CreditBureau_App
		// writeReportLog("Credit Bureau : "&CreditBureau_App,"Passed",FailComments,"")
	// else
		// Reporter.ReportEvent micFail,"Validation of Credit Bureau Failed","Expected Credit Bureau :"& CreditBureau_DB + "| Actual Credit Bureau in Application :"& CreditBureau_App
		// writeReportLog("Credit Bureau Displayed : "&CreditBureau_App&". Expected Credit Bureau :"& CreditBureau_DB,"Failed",FailComments,"")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/validate_CreditBureau_AccountTab","Failed", Error_Description,"")
// 
// //********************************************************************************************************************************************
// //@methodName: clickOn_CreditScoreLink_AccountTab()
// //@Description: This function is to click on Credit Score link in account tab
// //@Author: Ritu Tripathi
// //@Date 17-Aug 2021
// //Ex:  clickOn_CreditScoreLink_AccountTab()
// //*********************************************************************************************************************************************
// clickOn_CreditScoreLink_AccountTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// BranchPlus.InsightObject("link_CreditScore").Click()
	// Sleep (2)
	// //Error handling
	// if GetErrorCount()>0  			
			// writeReportLog("Failed in step/clickOn_CreditScoreLink_AccountTab","Failed", Error_Description ,"Y")
// 
// //********************************************************************************************************************************************
// //@methodName: get_CreditDetails_CreditScoreHistoryWindow_AccountTab()
// //@Description: This function is to get credit details from  Credit History Window in account tab and return a string 
// //@Author: Ritu Tripathi
// //@Date 17-Aug 2021
// //Ex:  get_CreditDetails_CreditScoreHistoryWindow_AccountTab()
// //*********************************************************************************************************************************************
// get_CreditDetails_CreditScoreHistoryWindow_AccountTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //get details
	// Loan_no = PbWindow("w_bp_frame_2").PbWindow("w_view_report").PbDataWindow("dw_list").GetCellData("#1","loan_nbr")
	// Credit_bureau = PbWindow("w_bp_frame_2").PbWindow("w_view_report").PbDataWindow("dw_list").GetCellData("#1","credit_bureau")
	// Score_type = PbWindow("w_bp_frame_2").PbWindow("w_view_report").PbDataWindow("dw_list").GetCellData("#1","credit_score_type")
	// Score = PbWindow("w_bp_frame_2").PbWindow("w_view_report").PbDataWindow("dw_list").GetCellData("#1","credit_score")
	// UserID = PbWindow("w_bp_frame_2").PbWindow("w_view_report").PbDataWindow("dw_list").GetCellData("#1","request_userid")
	// Result = Loan_no&":"&Credit_bureau&":"&Score_type&":"&Score&":"&UserID
	// //Close window
	// PbWindow("w_bp_frame_2").PbWindow("w_view_report").PbButton("Close").Click()	
	// Sleep (2)
	// get_CreditDetails_CreditScoreHistoryWindow_AccountTab = Result
	// //Error handling
	// if GetErrorCount()>0  			
			// writeReportLog("Failed in step/get_CreditDetails_CreditScoreHistoryWindow_AccountTab","Failed", Error_Description ,"Y")
// 
// //******************************************************************************************************************************************************
// //@Method: validate_CreditDetailsOfCreditHistoryWindow_AgainstDB()
// //@Author: Ritu Tripathi
// //@Date 17 Aug 2021
// //@Description: This function validates whether Credit Deatils displayed in Credit History window is same as that in DB.
// //Ex:  validate_CreditDetailsOfCreditHistoryWindow_AgainstDB(CreditDetails_App,CreditScore_DB,CreditScoreType_DB,CreditBureau_DB,RequestUserID_DB)
// //******************************************************************************************************************************************************
// validate_CreditDetailsOfCreditHistoryWindow_AgainstDB(String CreditDetails_App,String CreditScore_DB,String CreditScoreType_DB,String CreditBureau_DB,String RequestUserID_DB)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Seperate the values of App Credit details
	// App_CreditBureau = Split(CreditDetails_App,":")(1)
	// App_CreditScoreType = Split(CreditDetails_App,":")(2)
	// App_CreditScore = Split(CreditDetails_App,":")(3)
	// App_RequestUserid = Split(CreditDetails_App,":")(4)
	// //Compare the App and DB Credit Details
	// if Trim(ToUpper(App_CreditBureau)) = Trim(ToUpper(CreditBureau_DB)) 
		// Reporter.ReportEvent micPass,"Validation of Credit Bureau in Credit History Window Done Successfully","Credit Bureau is:"&CreditBureau_DB
		// writeReportLog("Validation of Credit Bureau in Credit History Window Passed. Expected Credit Bureau :"& CreditBureau_DB,"Passed",FailComments,"")
	// else
		// Reporter.ReportEvent micFail,"Validation of Credit Bureau in Credit History Window Failed","Expected Credit Bureau :"& CreditBureau_DB + " | Actual Credit Bureau in Credit History Window :"& App_CreditBureau
		// writeReportLog("Validation of Credit Bureau in Credit History Window Failed. Expected Credit Bureau :"& CreditBureau_DB + " | Actual Credit Bureau in Credit History Window :"& App_CreditBureau ,"Failed",FailComments,"")
	// if Trim(ToUpper(App_CreditScoreType)) = Trim(ToUpper(CreditScoreType_DB)) 
		// Reporter.ReportEvent micPass,"Validation of Credit Score Type in Credit History Window Done Successfully","Credit Score Type is:"&CreditScoreType_DB
		// writeReportLog("Validation of Credit Score Type in Credit History Window Passed. Expected Credit Score Type :"& CreditScoreType_DB,"Passed",FailComments,"")
	// else
		// Reporter.ReportEvent micFail,"Validation of Credit Score Type in Credit History Window Failed","Expected Credit Score Type :"& CreditScoreType_DB + " | Actual Credit Score Type in Credit History Window :"& App_CreditScoreType
		// writeReportLog("Validation of Credit Score Type in Credit History Window Failed. Expected Credit Score Type :"& CreditScoreType_DB + " | Actual Credit Score Type in Credit History Window :"& App_CreditScoreType ,"Failed",FailComments,"")
	// if Trim(App_CreditScore) = Trim(CreditScore_DB) 
		// Reporter.ReportEvent micPass,"Validation of Credit Score in Credit History Window Done Successfully","Credit Score is:"&CreditScore_DB
		// writeReportLog("Validation of Credit Score in Credit History Window Passed. Expected Credit Score :"& CreditScore_DB ,"Passed",FailComments,"")
	// else
		// Reporter.ReportEvent micFail,"Validation of Credit Score in Credit History Window Failed","Expected Credit Score :"& CreditScore_DB + " | Actual Credit Score in Credit History Window :"& App_CreditScore
		// writeReportLog("Validation of Credit Score in Credit History Window Failed. Expected Credit Score :"& CreditScore_DB + " | Actual Credit Score in Credit History Window :"& App_CreditScore ,"Failed",FailComments,"")
	// if Trim(ToUpper(App_RequestUserid)) = Trim(ToUpper(RequestUserID_DB)) 
		// Reporter.ReportEvent micPass,"Validation of Request UserID in Credit History Window Done Successfully","Request UserID is:"&RequestUserID_DB
		// writeReportLog("Validation of Request UserID in Credit History Window Passed. Expected Request UserID :"& RequestUserID_DB ,"Passed",FailComments,"")
	// else
		// Reporter.ReportEvent micFail,"Validation of Request UserID in Credit History Window Failed","Expected Request UserID :"& RequestUserID_DB + " | Actual Request UserID in Credit History Window :"& App_RequestUserid
		// writeReportLog("Validation of Request UserID in Credit History Window Failed. Expected Request UserID :"& RequestUserID_DB + " | Actual Request UserID in Credit History Window :"& App_RequestUserid ,"Failed",FailComments,"")
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/validate_CreditBureau_AccountTab","Failed", Error_Description,"")
// 
// //*****************************************************************************************************************
// //@methodName: clickOnCreditButton
// //@Author Ritu Tripathi
// //@Date 17  Aug 2021
// //@Description This will Click on Credit button displayed under toolbar
// //Ex:  clickOnCreditButton()
// //*****************************************************************************************************************
// clickOnCreditButton()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// BranchPlus.InsightObject("btnCredit").Click()
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed Step/Function: clickOnCreditButtons","Failed", Error_Description,"Y")
// 
// //*****************************************************************************************************************
// //@methodName: validate_CustomerDetails_InCreditReportRequestTable(CustomerDetails_CreditReportTable,BranchSetupDetails)
// //@Author Ritu Tripathi
// //@Date 178  Aug 2021
// //@Description This will validate Customer Details in Credit Report Request Table
// //Ex:  validate_CustomerDetails_InCreditReportRequestTable(CustomerDetails_CreditReportTable,BranchSetupDetails)
// //*****************************************************************************************************************
// validate_CustomerDetails_InCreditReportRequestTable(String CustomerDetails_CreditReportTable,String BranchSetupDetails,String Expected_Bureau,String Expected_RequestUserID,String Expected_CreditScore,String Expected_CreditScoreType,String Expected_Customer_ID,String Expected_ReferenceID)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Extract Data in CustomerDetails_CreditReportTable - org_id:customer_id:customer_original_owner:record_dt:request_userid:credit_bureau:credit_score:credit_score_type:cr_userid:output_type:account_original_owner:account_id
	// CD_Org_ID = Split(CustomerDetails_CreditReportTable,":")(0)
	// CD_Customer_ID = Split(CustomerDetails_CreditReportTable,":")(1)
	// CD_Customer_Original_Owner = Split(CustomerDetails_CreditReportTable,":")(2)
	// CD_Request_User_ID = Split(CustomerDetails_CreditReportTable,":")(3)
	// CD_Credit_Bureau = Split(CustomerDetails_CreditReportTable,":")(4)
	// CD_Credit_Score = Split(CustomerDetails_CreditReportTable,":")(5)
	// CD_Credit_Score_Type = Split(CustomerDetails_CreditReportTable,":")(6)
	// CD_CR_User_ID = Split(CustomerDetails_CreditReportTable,":")(7)
	// CD_Output_Type = Split(CustomerDetails_CreditReportTable,":")(8)
	// CD_Account_Original_Owner= Split(CustomerDetails_CreditReportTable,":")(9)
	// CD_Account_ID = Split(CustomerDetails_CreditReportTable,":")(10)
	// //Extract Data in BranchSetupDetails - branch_id:organization_id
	// B_Branch_ID = Split(BranchSetupDetails,":")(0)
	// B_Organization_ID = Split(BranchSetupDetails,":")(1)
	// //Verify organization id matches with the expected value
	// if  CD_Org_ID = B_Organization_ID 
		// Reporter.ReportEvent micPass,"Validation of Organization ID in Credit Report History DB Done Successfully","Organization ID is:"& CD_Org_ID
	// else
		// Reporter.ReportEvent micFail,"Validation of Organization ID in Credit Report History DB Failed","Expected Organization ID :"& B_Organization_ID + " | Actual Organization ID in Credit Report History DB :"& CD_Org_ID
	// //Verify Customer ID matches with the expected value - 
	// if CD_Customer_ID = Expected_Customer_ID 
		// Reporter.ReportEvent micPass,"Validation of Customer ID in Credit Report History DB Done Successfully","Customer ID is:"& CD_Customer_ID
	// else
		// Reporter.ReportEvent micFail,"Validation of Customer ID in Credit Report History DB Failed","Expected Customer ID :"& Expected_Customer_ID + " | Actual Customer ID in Credit Report History DB :"& CD_Customer_ID
	// //Verify Customer_Original_Owner matches with the expected value
	// if Trim(CD_Customer_Original_Owner) =  Trim(B_Branch_ID) 
		// Reporter.ReportEvent micPass,"Validation of Customer_Original_Owner in Credit Report History DB Done Successfully","Customer_Original_Owner is:"& CD_Customer_Original_Owner
	// else
		// Reporter.ReportEvent micFail,"Validation of Customer_Original_Owner in Credit Report History DB Failed","Expected Customer_Original_Owner :"& B_Branch_ID + " | Actual Customer_Original_Owner in Credit Report History DB :"& CD_Customer_Original_Owner
	// //Verify Request User ID matches with the expected value
	// if ToUpper(CD_Request_User_ID) = ToUpper(Expected_RequestUserID) 
		// Reporter.ReportEvent micPass,"Validation of Request User ID in Credit Report History DB Done Successfully","Request User ID is:"& CD_Request_User_ID
	// else
		// Reporter.ReportEvent micFail,"Validation of Request User ID in Credit Report History DB Failed","Expected Request User ID :"& Expected_RequestUserID + " | Actual Request User ID in Credit Report History DB :"& CD_Request_User_ID
	// //Verify Credit Bureau matches with the expected value
	// if ToUpper(CD_Credit_Bureau) = ToUpper(Expected_Bureau) 
		// Reporter.ReportEvent micPass,"Validation of Credit Bureau in Credit Report History DB Done Successfully","Credit Bureau is:"& CD_Credit_Bureau
	// else
		// Reporter.ReportEvent micFail,"Validation of Credit Bureau in Credit Report History DB Failed","Expected Credit Bureau :"& Expected_Bureau& " | Actual Credit Bureau in Credit Report History DB :"& CD_Credit_Bureau
	// //Verify Credit Score  matches with the expected value
	// if CD_Credit_Score = Expected_CreditScore 
		// Reporter.ReportEvent micPass,"Validation of Credit Score in Credit Report History DB Done Successfully","Credit Score is:"& CD_Credit_Score
	// else
		// Reporter.ReportEvent micFail,"Validation of Credit Score in Credit Report History DB Failed","Expected Credit Score :"& Expected_CreditScore + " | Actual Credit Score in Credit Report History DB :"& CD_Credit_Score
	// //Verify Credit Score Type matches with the expected value
	// if CD_Credit_Score_Type = Expected_CreditScoreType 
		// Reporter.ReportEvent micPass,"Validation of Credit Score Type in Credit Report History DB Done Successfully","Credit Score Type is:"& CD_Credit_Score_Type
	// else
		// Reporter.ReportEvent micFail,"Validation of Credit Score Type in Credit Report History DB Failed","Expected Credit Score Type :"& Expected_CreditScoreType + " | Actual Credit Score Type in Credit Report History DB :"& CD_Credit_Score_Type
	// //Verify CR_UserId matches with the expected value
	// if CD_CR_User_ID = "" 
		// Reporter.ReportEvent micPass,"Validation of CR_UserId in Credit Report History DB Done Successfully","CR_UserId is:"& CD_CR_User_ID
	// else
		// Reporter.ReportEvent micFail,"Validation of CR_UserId in Credit Report History DB Failed","Expected CR_UserId :"& "" + " | Actual CR_UserId in Credit Report History DB :"& CD_CR_User_ID
	// //Verify Output Type matches with the expected value
	// if CD_Output_Type = "" 
		// Reporter.ReportEvent micPass,"Validation of Output Type in Credit Report History DB Done Successfully","Output Type is:"& CD_Output_Type
	// else
		// Reporter.ReportEvent micFail,"Validation of Output Type in Credit Report History DB Failed","Expected Output Type :"& "" + " | Actual Output Type in Credit Report History DB :"& CD_Output_Type
	// //Verify Account_Original_Owner matches with the expected value
	// if Trim(CD_Account_Original_Owner) =  Trim(B_Branch_ID) 
		// Reporter.ReportEvent micPass,"Validation of Account_Original_Owner in Credit Report History DB Done Successfully","Account_Original_Owner is:"& CD_Account_Original_Owner
	// else
		// Reporter.ReportEvent micFail,"Validation of Account_Original_Owner in Credit Report History DB Failed","Expected Account_Original_Owner :"& B_Branch_ID + " | Actual Account_Original_Owner in Credit Report History DB :"& CD_Account_Original_Owner
	// //Verify ReferenceId matches expected value
	// if CD_Account_ID = Expected_ReferenceID 
		// Reporter.ReportEvent micPass,"Validation of Reference ID in Credit Report History DB Done Successfully","Reference ID is:"& CD_Account_ID
	// else
		// Reporter.ReportEvent micFail,"Validation of Reference ID in Credit Report History DB Failed","Expected Reference ID :"& Expected_ReferenceID + " | Actual Reference ID in Credit Report History DB :"& CD_Account_ID
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed Step/Function: validate_CustomerDetails_InCreditReportRequestTable","Failed", Error_Description,"Y")
// 
// //**************************************************************
// //@method enterTestCustomerDetails_CreditWindow
// //@Author Ritu Tripathi
// //@Date 19 August 2021
// //@Description This will fetch the Test Customer Details from Data sheet based onCredit Bereau passed to fucntion.
// //NOTE: This is going to identify Current State and pull the test data Accordingly
// //EX:  enterTestCustomerDetails_CreditWindow("Equifax")
// //	 enterTestCustomerDetails_CreditWindow("Transunion")
// //**************************************************************
// enterTestCustomerDetails_CreditWindow(String reqCreditBereau)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// On error Resume 
	// currentState = getCurrentStateName_From_DB()
	// //Importign the Data sheet
	// addNewDataTableAndimportSheet(System.GetEnvVar("BranchPlusSharedPath") + "Global_TestData\CreditReport_TestData.xlsx","CreditCheckData","CreditCheckData")
	// //Fetching Row Count
	// rowCnt = DataTable.GetSheet("CreditCheckData").GetRowCount
	// //Identify the TEst Data Based on State
	// for itr = 1 To rowCnt Step 1
	// expState = DataTable.Value("State","CreditCheckData")
	// expBureau = DataTable.Value("creditBureau","CreditCheckData")
	// if expState = currentState and ToUpper(expBureau) = ToUpper(reqCreditBereau) 
	// Exit for
	// else
	// DataTable.GetSheet("CreditCheckData").SetValue(Row	
	// ////Updating Test Customer Details  	
	// SetValueInPBDataWindow_DP("w_creditcheck","dw_creditcheck","#1","last_name",DataTable.Value("LastName","CreditCheckData"))
	// SetValueInPBDataWindow_DP("w_creditcheck","dw_creditcheck","#1","first_name",DataTable.Value("FirstName","CreditCheckData"))
	// SetValueInPBDataWindow_DP("w_creditcheck","dw_creditcheck","#1","middle_name",DataTable.Value("MidName","CreditCheckData"))
	// SetValueInPBDataWindow_DP("w_creditcheck","dw_creditcheck","#1","suffix",DataTable.Value("Suffix","CreditCheckData"))
	// Sleep (2)
	// typeTextInLevel1PBDataWindow_DP("w_creditcheck","dw_creditcheck","#1","ssn",DataTable.Value("SSN","CreditCheckData")) 	
	// Sleep (2)
	// SetValueInPBDataWindow_DP("w_creditcheck","dw_creditcheck","#1","street_nbr",DataTable.Value("StreetNumber","CreditCheckData"))
	// SetValueInPBDataWindow_DP("w_creditcheck","dw_creditcheck","#1","street_name",DataTable.Value("StreetName","CreditCheckData"))
	// SetValueInPBDataWindow_DP("w_creditcheck","dw_creditcheck","#1","city",DataTable.Value("City","CreditCheckData"))
	// Sleep (1)
	// typeTextInLevel1PBDataWindow_DP("w_creditcheck","dw_creditcheck","#1","state",DataTable.Value("State","CreditCheckData"))
	// UA.GenKeyEvents("<Tab>")
	// SetValueInPBDataWindow_DP("w_creditcheck","dw_creditcheck","#1","zipcode",DataTable.Value("ZIPCode","CreditCheckData")) 	
	// //Remove Data Table
	// DataTable.DeleteSheet("CreditCheckData")
	// //Logger
	// writeReportLog("Snap shot after entering the Test User details before Credit Pull","Passed","","Y")
	// //Error Handling	
	// if GetErrorCount()>0  			
			// writeReportLog("Failed to enterTestCustomerDetails_CreditCheckWindow","Failed", Error_Description ,"")
	// RemoveFunction
// //******************************************************************
// //@Method searchAccountWithCustomerId
// //@Author Ritu Tripathi
// //@Description this method will open the F2 Window and Search the account with Customer ID
// //@Date 20  August 2021
// //Ex: searchAccountWithCustomerId("167500020785")
// //**********************************************************************
// searchAccountWithCustomerId(String customerID)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// BranchPlus.SetActive()
	// //Open
	// sendKeys("{F2}")
	// enterValuesIn_CustmerSearch("cust_id",customerID)
	// clickOkButton_CustomerSearchWindow()
	// //Error Handling
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/searchAccountWithReferenceId","Failed", Error_Description,"")
// 
// //******************************************************************
// //@Method get_AllData_CreditScoreHistory
// //@Author Ritu Tripathi
// //@Description this method will fetch all data in Credit Score History Window
// //@Date 20  August 2021
// //Ex: get_AllData_CreditScoreHistory()
// //**********************************************************************
// get_AllData_CreditScoreHistory()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Result=""
	// RowCount = PbWindow("w_bp_frame_2").PbWindow("w_view_report").PbDataWindow("dw_list").RowCount
	// for i = 1 To RowCount Step 1
		// if i>1 
			// Result = Result + " * "
		// Loan_no = PbWindow("w_bp_frame_2").PbWindow("w_view_report").PbDataWindow("dw_list").GetCellData("#1","loan_nbr")
		// Credit_bureau = PbWindow("w_bp_frame_2").PbWindow("w_view_report").PbDataWindow("dw_list").GetCellData("#1","credit_bureau")
		// Score_type = PbWindow("w_bp_frame_2").PbWindow("w_view_report").PbDataWindow("dw_list").GetCellData("#1","credit_score_type")
		// Score = PbWindow("w_bp_frame_2").PbWindow("w_view_report").PbDataWindow("dw_list").GetCellData("#1","credit_score")
		// UserID = PbWindow("w_bp_frame_2").PbWindow("w_view_report").PbDataWindow("dw_list").GetCellData("#1","request_userid")
		// Result = Result + "Row-"&i&", Loan No-"&Loan_no&", Credit Bureau-"&Credit_bureau&", Score Type-"&Score_type&", Score-"&Score&", User ID-"&UserID
	// //Close window
	// PbWindow("w_bp_frame_2").PbWindow("w_view_report").PbButton("Close").Click()	
	// Sleep (2)
	// get_AllData_CreditScoreHistory = Result
	// if GetErrorCount()>0 
		// writeReportLog("Failed in step/get_AllData_CreditScoreHistory","Failed", Error_Description,"")
// 
// //********************************************************************************************************************************************
// //@methodName: clickOn_JudgmentLink_AccountTab()
// //@Description: This function is to click on Judgment link in account tab
// //@Author: Ritu Tripathi
// //@Date 16-Septmenaber-2021
// //Ex:  clickOn_JudgmentLink_AccountTab()
// //*********************************************************************************************************************************************
// clickOn_JudgmentLink_AccountTab()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// BranchPLUS.link_judgment.Click()
	// Sleep (2)
// 
// //********************************************************************************************************************************************
// //@methodName: enter_Values_JudgmentAgreement_InAccountJudgmentTrackingWindow_AccountTab()
// //@Description: This function is to enter values in Judgment Agreement frame, in Judgment Agreement tracking  window in account tab
// //@Author: Ritu Tripathi
// //@Date 16-Septmenaber-2021
// //Ex:  enter_Values_JudgmentAgreement_InAccountJudgmentTrackingWindow_AccountTab()
// //*********************************************************************************************************************************************
// enter_Values_JudgmentAgreement_InAccountJudgmentTrackingWindow_AccountTab(String Judgement_Status,String Modify_Date,String Orig_Date,String Agent_ID,String Int_Rate,String Notes)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// AppObject Judgment_Agreement_Window = BranchPlus.w_account_judgment_tracking.dw_list
	// String windowName = "w_account_judgment_tracking"
	// String dataWindowName = "dw_list"
	// //enter values in Judgment Agreement window
	// //enter Judgment Status
	// SetValueInPBDataWindow_DP(windowName, dataWindowName, "#1", "#5",Judgement_Status)
	// //enter Judgment Modify Date
	// TypeText_PBDataWindow(Judgment_Agreement_Window,"#1","judgment_date",Modify_Date)
	// //enter Judgment Original Date
	// TypeText_PBDataWindow(Judgment_Agreement_Window,"#1","orig_judgment_dt",Orig_Date)
	// //enter Judgment Garnishment Agent
	// SetValueInPBDataWindow_DP(windowName, dataWindowName, "#1", "#4",Agent_ID)
	// //enter Judgment Interest rate
	// TypeText_PBDataWindow(Judgment_Agreement_Window,"#1","int_rate",Int_Rate)
	// //enter Judgment Notes
	// TypeText_PBDataWindow(Judgment_Agreement_Window,"#1","notes",Notes)
	// //Error handling
	// if GetErrorCount()>0  			
			// writeReportLog("Failed in step/enter_Values_JudgmentAgreement_InAccountJudgmentTrackingWindow_AccountTab","Failed", Error_Description ,"Y")
// 
// //********************************************************************************************************************************************
// //@methodName: enter_Values_JudgmentDetail_InAccountJudgmentTrackingWindow_AccountTab()
// //@Description: This function is to enter values in Judgment Detail frame, in Judgment Agreement tracking  window in account tab
// //@Author: Ritu Tripathi
// //@Date 16-Septmenaber-2021
// //Ex:  enter_Values_JudgmentDetail_InAccountJudgmentTrackingWindow_AccountTab()
// //*********************************************************************************************************************************************
// enter_Values_JudgmentDetail_InAccountJudgmentTrackingWindow_AccountTab(String Row_No,String Charge_Type,String Amount,String Notes)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// AppObject Judgment_Detail_Window = BranchPlus.w_account_judgment_tracking.dw_detail
	// String windowName = "w_account_judgment_tracking"	
	// String dataWindowName = "dw_detail"
	// //enter values in Judgment detail window
	// //enter Judgment Charge type
	// SetValueInPBDataWindow_DP(windowName, dataWindowName, Row_No, "#5",Charge_Type)
	// //enter Judgment Amount
	// TypeText_PBDataWindow(Judgment_Detail_Window,Row_No,"charge_amt",Amount)
	// //enter Judgment Notes
	// TypeText_PBDataWindow(Judgment_Detail_Window,Row_No,"notes",Notes)
	// //Error handling
	// if GetErrorCount()>0  			
			// writeReportLog("Failed in step/enter_Values_JudgmentDetail_InAccountJudgmentTrackingWindow_AccountTab","Failed", Error_Description ,"Y")
// 
// //*******************************************************************************************
// //@Method verifyJudgmentCheckbox()
// //@Author Ritu
// //@Date 20 Sep 2021
// //@Description This verifies whether the Judgment checkbox is set to ON || OFF
// //Ex:  verifyJudgmentCheckbox()
// //*********************************************************************************************
// verifyJudgmentCheckbox()
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// AppObject tblPBDataWindow = BranchPlus.w_cust.dw_acct
	// //.SelectCell "#1","judgment_yn"
	// String CheckboxStatus =  GetValue_PBDataWindow(tblPBDataWindow,"#1","judgment_yn")
	// if  CheckboxStatus == "ON" 
		// writeReportLog("Judgment Checkbox is checked ON","Passed","" ,"")
	// else
		// writeReportLog("Judgment Checkbox is checked OFF","Failed", "" ,"")
	// Sleep (3)
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed in Step/: verifyJudgmentCheckbox","Failed", Error_Description ,"")
// 
// //********************************************************************************************************************************************
// //@methodName: process_LoanMod("Charged Off Judgment")
// //@Description: This function is to enter values in Loan mod window, calculate the new amount and process it
// //@Author: Ritu Tripathi
// //@Date 06-October-2021
// //Ex:  process_LoanMod("Charged Off Judgment")
// //*********************************************************************************************************************************************
// process_LoanMod(String Status)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// String windowName1 = "w_account_judgment_tracking"	
	// String windowName2 = "w_loan_conversion"
	// String  dataWindowName = "dw_input"
	// AppObject aoObjects = $windowName1.$windowName2.$dataWindowName
	// //Select New Account Status
	// SetValue_PBDataWindow(aoObjects, "#1", "#11",Status)
	// //Click on Calculate
	// clickButton_In_Level2PBwindow_DP(windowName1, windowName2, "Calc&ulate")
	// //Click on Process
	// clickButton_In_Level2PBwindow_DP(windowName1, windowName2, "Process")
	// //Handle Loan modification dialog
	// AppObject windowObject =BranchPlus.$windowName1.$windowName2
	// handle_AnyLevel_DialogPopup(windowObject, "LOAN MODIFICATION", "Yes")
	// //Enter Loan Mod reason and click on OK
	// AppObject tblPBDataWindow = windowObject.w_search.dw_search
	// TypeText_PBDataWindow(tblPBDataWindow,"#1","reason","Loan Mod Testing")
	// AppObject NewObject = windowObject.w_search
	// clickButton_In_AnyLevel_Window(NewObject,"Ok")
	// //Error handling
	// if GetErrorCount()>0  			
			// writeReportLog("Failed in step/process_LoanMod","Failed", Error_Description ,"Y")
// 
// //********************************************************************************************************************************************
// //@methodName: handle_AnyLevel_DialogPopup
// //@Description: This function takes object reference of window, dialog + button name; and clicks on the specified button
// //@Author: Ritu Tripathi
// //@Date 06-October-2021
// //Ex:  handle_AnyLevel_DialogPopup(windowObject, dialogName, buttonToClick)
// //*********************************************************************************************************************************************
// handle_AnyLevel_DialogPopup(AppObject windowObject,String dialogName,String buttonToClick)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if windowObject.$dialogName.WaitWhileExists(5) 		
		// Sleep(2)
		// //Clicking on Button
		// if windowObject.$dialogName.$buttonToClick.WaitWhileExists(5) 
			// windowObject.$dialogName.$buttonToClick.Click()
		// else
			// writeReportLog("Clicking on Button " + buttonToClick + "Failed in Dialog: " + dialogName,"Failed","","Y")	
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to handle_AnyLevel_DialogPopup","Failed", Error_Description ,"")
// 
// clickButton_In_AnyLevel_Window(AppObject WindowObject,String buttonToClick)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// if WindowObject.$buttonToClick.WaitWhileExists(5) 
		// WindowObject.$buttonToClick.Click()
	// else
		// String sCaption = WindowObject.GetAttr("Caption")
		// writeReportLog("Clicking on Button " + buttonToClick + "Failed in Dialog: " + sCaption,"Failed","","Y")	
	// //Error Handling
	// if GetErrorCount()>0  			
		// writeReportLog("Failed to clickButton_In_Level1_DailogPopup","Failed", Error_Description ,"")
// 
// //********************************************************************************************************************************************
// //@methodName: selectPrinter_forWindowsAndApplication_PrinterSetup
// //@Description: This function setups the printer given in arguments for Windows and Application
// //@Author: Arun Prakash R M
// //@Date 01-December-2021
// //Ex:  selectPrinter_forWindowsAndApplication_PrinterSetup("PrimoPDF", "PrimoPDF on Ne01:")
// //*********************************************************************************************************************************************
// selectPrinter_forWindowsAndApplication_PrinterSetup(String windowsPrinterName,String applicationPrinterSetupName)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Set default printer setup as Primopdf
	// setWindowsDefaultPrinter("PrimoPDF")
	// Sleep (2)
		// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// selectMenu("File;Print...")
	// clickButton_InWindow("w_print_options","Printer Setup")
	// //PbWindow("ResaleOfRepo_Header_Signature").PbWindow("w_print_options").Dialog("Printer Setup").WinList("Printer:").Select applicationPrinterSetupName
	// //PbWindow("ResaleOfRepo_Header_Signature").PbWindow("w_print_options").Dialog("Printer Setup").WinButton("OK").Click()
	// //
	// w_bp_frame.PbWindow("pbname:=w_print_options").Dialog("is owned window:=True", "text:=Printer Setup").Highlight
		// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// w_bp_frame.PbWindow("pbname:=w_print_options").Dialog("is owned window:=True", "text:=Printer Setup").WinList("attached text:=, Printer:").Select applicationPrinterSetupName
		// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// w_bp_frame.PbWindow("pbname:=w_print_options").Dialog("is owned window:=True", "text:=Printer Setup").WinButton("text:=OK").Click()
		// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// Wait 2
		// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// clickButton_InWindow("w_print_options","Cancel")
// 
// //**********************************************************************************************
// //@methodName: get_LoanNumber_FromAppDB_ReversalFlow(AccountStatus, AccountTypeCode, UI_Del_Status)
// //@Description: This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.
// //Removed
// //@Author: Arun Prakash R M
// //@Date 2 Dec 2021
// //@Returning the Loan Number
// //Ex:  get_LoanNumber_FromAppDB_ReversalFlow("ACTIVE", "55", "Current")
// //*********************************************************************************************** 
// get_LoanNumber_FromAppDB_ReversalFlow(String AccountStatus,String AccountTypeCode,String UI_Del_Status)
	// %FuncInfo[Desc="This is to get the Loan Number from App DB based on Account status, Account Type Code and Delinquency Status for Reverse flow.",Group="BranchPlusFunctions"]
	// //Get ID Based on Delinquency Status and Contractual status
	// get_ID_BasedOn_DelinqStatus_And_ContractualStatus(UI_Del_Status, delinqStatus, contractual_status)
	// //query to run
	// if UI_Del_Status == ">90" 
		// //		query = "Select * from support.bp_account_tbl where acct_status = //" + AccountStatus + "//" + " and acct_type= //" + AccountTypeCode + "// and del_status = //"& delinqStatus  &"// and contractual_status > //"& contractual_status  &"// order by rand()"
		// query = "Select * from support.bp_account_tbl where acct_status = //" + AccountStatus + "//" + " and acct_type= //" + AccountTypeCode + "// and del_status = //"& delinqStatus  &"// and contractual_status > //"& contractual_status  &"// order by rand()"
	// else
		// //		query = "Select * from support.bp_account_tbl where acct_status = //" + AccountStatus + "//" + " and acct_type= //" + AccountTypeCode + "// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// order by rand()"
		// query = "Select * from support.bp_account_tbl where acct_status = //" + AccountStatus + "//" + " and acct_type= //" + AccountTypeCode + "// and del_status = //"& delinqStatus  &"// and contractual_status = //"& contractual_status  &"// order by rand()"
	// //Fetching the loan number from DB
	// loanNumber = runSQLQuery_WithWarning_WithoutExit(query,"loan_nbr")
	// //if Loan are not available 
	// if loanNumber == "0" 
		// writeReportLog("<b> <font color=//orange//> No Loans found for Account Type Code: " + AccountTypeCode + " and Delinquency Status: " + UI_Del_Status + "</font> </b>" ,"Passed",FailComments,"")
	// return loanNumber
// 
