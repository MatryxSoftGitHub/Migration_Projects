// class SeleniumMethodsMigrationToAscentialTestMethods_ForMyRef : Test
	// %TestInfo[Desc="Converts Selenium Java Files Iinto AscentialTest Zee files",Group="MainConversionTest",Table="Dt_DataPaths"]
	// parameter String TestCaseID
	// Main()
		// step DeletingExistingConversionFolders
		// step CreateFolderPathsForATConversion
		// List<record_Paths> lrRecord_Paths = DataStore.Query ("Dt_DataPaths")
		// Integer iReadFilePathCount
		// for (Integer i = 1; i<=lrRecord_Paths.Count(); i++)
			// iReadFilePathCount = DataStore.Query ("Dt_DataPaths[{i}].lsJavaFile").Count ()// //Fetching Source code file path from Data Tables
			// for (Integer j = 1; j<=iReadFilePathCount; j++)
				// 
				// // Step1
				// step ConvertSelMethodlineToATClassMethodFormat_Seq1
					// FileName:lrRecord_Paths[i].lsJavaMainPath+lrRecord_Paths[i].lsJavaFile[j]
					// OutputFileName:lrRecord_Paths[i].lsTextFilePath+lrRecord_Paths[i].lsTxtFile[j]
				// 
				// //Step2
				// step IndentationAndRemoveBraces_Seq2
					// FileName:lrRecord_Paths[i].lsTextFilePath+lrRecord_Paths[i].lsTxtFile[j]
					// Indent_OutFileName:lrRecord_Paths[i].lsTextFilePath+lrRecord_Paths[i].lsIndentationFile[j]
				// 
				// //Step3
				// step ConvertSelImplicitandExplicitWaitToATWaits_Seq3
					// Waits_OutputFileName:lrRecord_Paths[i].sImplicitExplicitPath+lrRecord_Paths[i].lsImplicitExplicitWaitFile[j]
					// lsData:IndentationAndRemoveBraces_Seq2.lsData
				// 
				// //Step4
				// step Sleeps_Replacement_Seq4
					// OutSleepFileName:lrRecord_Paths[i].sImplicitExplicitPath+lrRecord_Paths[i].lsImplicitExplicitWaitFile[j]
					// lsData:ConvertSelImplicitandExplicitWaitToATWaits_Seq3.lsImplicitExplicitData
				// 
				// //Step5
				// step Methods_Replacement_Seq5
					// SleepFileName:lrRecord_Paths[i].sImplicitExplicitPath+lrRecord_Paths[i].lsImplicitExplicitWaitFile[j]
					// MethodOutFileName:lrRecord_Paths[i].lsAscentialMainPath+lrRecord_Paths[i].lsAscentialFile[j]
				// // 
				// //Step6
				// step FinalStepZeeFile_Seq6
					// sStepTextFile:lrRecord_Paths[i].lsAscentialMainPath+lrRecord_Paths[i].lsAscentialFile[j]
					// sStepZeeFile:lrRecord_Paths[i].lsAscentialMainPath+lrRecord_Paths[i].sStepsZeeFile
		// 
		// 
// class MigrateSeleniumToAT : Test
	// %TestInfo[Desc="Migrating Selenium AppObject Path To Ascential Test AppObject Path",Group="AppObject",Table="Dt_MigrateSeleniumToAT"]
	// parameter String TestCaseID
	// Main()
		// Record_MigrateSeleniumToAT record_MigrateSeleniumToAT = DataStore.QueryTableRow ("Dt_MigrateSeleniumToAT", "TestCaseID", TestCaseID)
		// 
		// Integer iReadFilePathCount
		// List<String> lsReadFile
		// 
		// //Creating parent object with AppObject names and path
		// 
		// List<Record_MigrateSeleniumToAT> rReadFiles=DataStore.Query("Dt_MigrateSeleniumToAT") 
		// for(Integer i=1;i<=rReadFiles.Count();i++)
			// iReadFilePathCount = DataStore.Query ("Dt_MigrateSeleniumToAT[{i}].lsReadFile").Count ()// //Fetching Source code file path from Data Tables
			// for (Integer j = 1; j<=iReadFilePathCount; j++)
				// // Step1
				// step FetchingAppObjectPathFromProjectSorceCode
					// sReadFilePath:rReadFiles[i].lsReadFile[j]
				// 
				// // Step2
				// step SegregatingAppObjectsPathsWRTAscentialTestAppObjects
					// lsSearchData:record_MigrateSeleniumToAT.lsSearchData
					// lsSeleniumPaths:FetchingAppObjectPathFromProjectSorceCode.lsSeleniumPaths
				// 
				// // SegregatingAppObjectsPathsWRTAscentialTestAppObjects.lsObjAndPaths.WriteFile ("D:\Temp\AT_AppObj.txt")
				// 
				// // Step3
				// step RemovingDuplicateObjectClasses
					// lsData:SegregatingAppObjectsPathsWRTAscentialTestAppObjects.lsObjAndPaths
					// lsSearchClasses:record_MigrateSeleniumToAT.lsSearchData
				// 
				// // Step4
				// step ConvertAppObjectsIntoATFormat
					// sPathFormatFile:record_MigrateSeleniumToAT.sPathFormatFile
					// lsData:RemovingDuplicateObjectClasses.lsSelPath
				// 
				// // Step5
				// step GettingParentObjName
					// sReadFile:rReadFiles[i].lsReadFile[j]
				// 
				// // // Step6
				// step CreateParentAppObject
					// sPathFormatFile:record_MigrateSeleniumToAT.sPathFormatFile
					// lsATPathData:ConvertAppObjectsIntoATFormat.lsATPathData
					// sParentObj:GettingParentObjName.sParentObjName
				// // 
				// // // Step7
				// step ReplaceSeleniumObjectClassToAT
					// lsATPathData:ConvertAppObjectsIntoATFormat.lsATPathData
					// lsSeleniumClass:record_MigrateSeleniumToAT.lsSeleniumClass
					// sPathFormatFile:record_MigrateSeleniumToAT.sPathFormatFile
				// // 
				// // // Step8
				// step ReplaceUnwantedCharactersToNecessaryCharacters
					// lsATPath:ReplaceSeleniumObjectClassToAT.lsModifiedATPath
					// sPathFormatFile:record_MigrateSeleniumToAT.sPathFormatFile
					// lsUnwantedCharecters:record_MigrateSeleniumToAT.lsUnwantedCharecters
		// 
		// 
		// 
		// 
		// 
		// 
		// 
		// 
		// 

class SeleniumMethodsMigrationToAscentialTestMethods : Test
	%TestInfo[Desc="Converts Selenium Java Files Iinto AscentialTest Zee files",Group="MainConversionTest",Table="Dt_DataPaths"]
	parameter String TestCaseID
	Main()
		List<record_Paths> lrRecord_Paths = DataStore.Query ("Dt_DataPaths")
		Integer iReadFilePathCount
		String sJavaFilePath,sTxtFilePath,sIndentationFilePath,sImplicitExplicitFilePath,sAscentialFilePath,sAscentialZeeFilePath
		List<String>lsMain
		// PreRequisites Clear all Previous Run textfiles and creates a new folder for the new run
		step DeletingExistingConversionFolders
		step CreateFolderPathsForATConversion
		
		sTextFolderPath = sTextFolderPath + "\"
		sImplicitExplicitWaitFolderPath = sImplicitExplicitWaitFolderPath + "\"
		sAscentialTestFolderPath = sAscentialTestFolderPath + "\"
		
		// Actual TestCode
		for (Integer i = 1; i<=lrRecord_Paths.Count(); i++)
			iReadFilePathCount = DataStore.Query ("Dt_DataPaths[{i}].lsJavaFile").Count ()// //Fetching Source code file path from Data Tables
			for (Integer j = 1; j<=iReadFilePathCount; j++)
				sJavaFilePath="{lrRecord_Paths[i].lsJavaFile[j]}"
				sTxtFilePath = "{lrRecord_Paths[i].lsTxtFile[j]}"
				sIndentationFilePath="{lrRecord_Paths[i].lsIndentationFile[j]}"
				sImplicitExplicitFilePath="{lrRecord_Paths[i].lsImplicitExplicitWaitFile[j]}"
				sAscentialFilePath="{lrRecord_Paths[i].lsAscentialFile[j]}"
				sAscentialZeeFilePath="{lrRecord_Paths[i].sStepsZeeFile}"
				
				// Step1
				step ConvertSelMethodlineToATClassMethodFormat_Seq1
					FileName:sSeleniumJavaFolderPath+sJavaFilePath
					OutputFileName:sTextFolderPath+sTxtFilePath
				
				//Step2
				step IndentationAndRemoveBraces_Seq2
					FileName:sTextFolderPath+sTxtFilePath
					Indent_OutFileName:sTextFolderPath+sIndentationFilePath
					sFindParentfromJavaFileName:sJavaFilePath
				
				//Step3
				step ConvertSelImplicitandExplicitWaitToATWaits_Seq3
					Waits_OutputFileName:sTextFolderPath+sImplicitExplicitFilePath
					lsData:IndentationAndRemoveBraces_Seq2.lsData
				
				//Step4
				step Sleeps_Replacement_Seq4
					OutSleepFileName:sImplicitExplicitWaitFolderPath+sImplicitExplicitFilePath
					lsData:ConvertSelImplicitandExplicitWaitToATWaits_Seq3.lsImplicitExplicitData
				
				//Step5
				step Methods_Replacement_Seq5
					SleepFileName:sImplicitExplicitWaitFolderPath+sImplicitExplicitFilePath
					MethodOutFileName:sAscentialTestFolderPath+sAscentialFilePath
				// 
				//Step6
				step FinalStepZeeFile_Seq6
					sStepTextFile:sAscentialTestFolderPath+sAscentialFilePath
					sStepZeeFile:sAscentialTestFolderPath+sAscentialZeeFilePath
		// Print(lsMain)
		
class SeleniumTotalMigrationToAT_Final : Test
	%TestInfo[Desc="Converts Selenium Java Files Iinto AscentialTest Zee files",Group="MainConversionTest",Table="Dt_DataPaths"]
	parameter String TestCaseID
	Main()
		List<record_Paths> lrRecord_Paths = DataStore.Query ("Dt_DataPaths")
		Integer iReadFilePathCount
		String sJavaFilePath,sTxtFilePath,sIndentationFilePath,sImplicitExplicitFilePath,sAscentialFilePath,sAscentialZeeFilePath
		
		// PreRequisites Clear all Previous Run textfiles and creates a new folder for the new run
		step DeletingExistingConversionFolders
		step CreateFolderPathsForATConversion
		
		sTextFolderPath = sTextFolderPath + "\"
		sImplicitExplicitWaitFolderPath = sImplicitExplicitWaitFolderPath + "\"
		sAscentialTestFolderPath = sAscentialTestFolderPath + "\"
		
		// Actual TestCode
		for (Integer i = 1; i<=lrRecord_Paths.Count(); i++)
			iReadFilePathCount = DataStore.Query ("Dt_DataPaths[{i}].lsJavaFile").Count ()// //Fetching Source code file path from Data Tables
			for (Integer j = 1; j<=iReadFilePathCount; j++)
				sJavaFilePath="{lrRecord_Paths[i].lsJavaFile[j]}"
				sTxtFilePath = "{lrRecord_Paths[i].lsTxtFile[j]}"
				sIndentationFilePath="{lrRecord_Paths[i].lsIndentationFile[j]}"
				sImplicitExplicitFilePath="{lrRecord_Paths[i].lsImplicitExplicitWaitFile[j]}"
				sAscentialFilePath="{lrRecord_Paths[i].lsAscentialFile[j]}"
				sAscentialZeeFilePath="{lrRecord_Paths[i].sStepsZeeFile}"
				
				// Step1
				step ConvertSelMethodlineToATClassMethodFormat_Seq1
					FileName:sSeleniumJavaFolderPath+sJavaFilePath
				
				//Step2
				step IndentationAndRemoveBraces_Seq2
					FileName:sTextFolderPath+sTxtFilePath
					Indent_OutFileName:sTextFolderPath+sIndentationFilePath
					sFindParentfromJavaFileName:sJavaFilePath
				
				//Step3
				step ConvertSelImplicitandExplicitWaitToATWaits_Seq3
					Waits_OutputFileName:sTextFolderPath+sImplicitExplicitFilePath
					lsData:IndentationAndRemoveBraces_Seq2.lsData
				
				//Step4
				step Sleeps_Replacement_Seq4
					OutSleepFileName:sImplicitExplicitWaitFolderPath+sImplicitExplicitFilePath
					lsData:ConvertSelImplicitandExplicitWaitToATWaits_Seq3.lsImplicitExplicitData
				
				//Step5
				step Methods_Replacement_Seq5
					SleepFileName:sImplicitExplicitWaitFolderPath+sImplicitExplicitFilePath
					MethodOutFileName:sAscentialTestFolderPath+sAscentialFilePath
				// 
				//Step6
				step FinalStepZeeFile_Seq6
					sStepTextFile:sAscentialTestFolderPath+sAscentialFilePath
					sStepZeeFile:sAscentialTestFolderPath+sAscentialZeeFilePath
		
		
