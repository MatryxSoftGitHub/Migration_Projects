class MigrateSeleniumToAT_TC001 : Test
	%TestInfo[Desc="Migrating Selenium AppObject Path To Ascential Test AppObject Path",Group="AppObject",Table="Dt_MigrateSeleniumToAT"]
	parameter String TestCaseID
	Main()
		String sSearchData,sFormatFilePath,sSeleniumClass,sUnwantedCharacters,sATClassNames,sJavaFilePath, sATConvertedOutputFile
		List<String> lsOnlySeleniumAppObjPath = {}, lsSearchAttrNames, lsSelAttrNames, lsUnwantedClassName, lsATAttrNames, lsATConvertedOutputFile
		
		// Creating parent object with AppObject names and path.
		List<Record_MigrateSeleniumToAT> rAppObjectTB = DataStore.Query ("Dt_MigrateSeleniumToAT")
		for (Integer i = 1; i<=rAppObjectTB.Count(); i++)
			Integer iReadFilePathCount = DataStore.Query ("Dt_MigrateSeleniumToAT[{i}].lsReadFile").Count ()// //Fetching Source code file path from Data Tables.
			lsSearchAttrNames = rAppObjectTB[i].lsSearchData
			lsSelAttrNames = rAppObjectTB[i].lsSeleniumClass
			lsUnwantedClassName = rAppObjectTB[i].lsUnwantedCharacters
			lsATAttrNames = rAppObjectTB[i].lsATClassNames
			sATConvertedOutputFile =rAppObjectTB[i].sATAppObjOutputFile
			for (Integer j = 1; j<=iReadFilePathCount; j++)
				sJavaFilePath = "{rAppObjectTB[i].lsReadFile[j]}"
				// Step1 :Adding project source code of AppObject paths into ListOfString.
				step FetchingAppObjectPathFromProjectSourceCode
					sReadFilePath:sSeleniumJavaFolderPath+sJavaFilePath
				lsOnlySeleniumAppObjPath = FetchingAppObjectPathFromProjectSourceCode.lsSeleniumPaths
				
				// Step2 : Fetching the AppObject Classes and paths with respect to Ascential test.
				step SegregatingAppObjectsPathsWRTAscentialTestAppObjects
					lsSeleniumPaths:lsOnlySeleniumAppObjPath
					lsSearchData:lsSearchAttrNames
				
				// Step3 : Removing Duplicate ObjectClasses.
				step RemovingDuplicateObjectClasses
					lsData:SegregatingAppObjectsPathsWRTAscentialTestAppObjects.lsObjAndPaths
					lsSearchClasses:lsSelAttrNames
				
				// Step4 : Replacing selenium object classes and unwanted characters with respective Ascential test format.
				step ConvertAppObjectsIntoATFormat
					lsData:RemovingDuplicateObjectClasses.lsSelPath
				
				// Step5 : Getting parent object name from text file name.
				step GettingParentObjName
					sReadFile:sSeleniumJavaFolderPath+sJavaFilePath
				
				// Step6 : Create parent appObject by using child object.
				step CreateParentAppObject
					lsATPathData:ConvertAppObjectsIntoATFormat.lsATPathData
					sParentObj:GettingParentObjName.sParentObjName
				// 
				// Step7 : Replace selenium object class to Ascential test object classes.
				step ReplaceSeleniumObjectClassToAT
					lsATPathData:ConvertAppObjectsIntoATFormat.lsATPathData
					lsSeleniumClass:lsSelAttrNames
					lsATClassNames:lsATAttrNames
				// 
				// Step8 : Replace unwanted characters to necessary Ascential test characters.
				step ReplaceUnwantedCharactersToNecessaryCharacters
					lsATPath:ReplaceSeleniumObjectClassToAT.lsModifiedATPath
					lsUnwantedCharecters:lsUnwantedClassName
		
		// Step9 : Writing Appobjects into text file.
		step WritingAppObjectsIntoTextFile
			sPathFormatFile:sATConvertedOutputFile
		
		

