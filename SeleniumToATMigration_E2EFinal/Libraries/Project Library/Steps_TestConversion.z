class SplitFunctionLineIntoATFormatFromSELTestCasefile : Step
	%StepInfo[Desc="Split the methodname and its parameter to AT format",Group="SeleniumTestCaseToAT"]
	parameter String MethodLine
	out parameter List<String> lsMainMethodLine
	Main()
		String sClassName, sParameters, sStepInfo, sGroup, sDescription, sStepName,sTable,sTxtFilePath
		List<String> lsMethodName, lsParameter, lsReplaceCode, lsSplitFuncName
		String sOBraces = Char (123)
		String sCBraces = Char (125)
		// Splittting the MethodLine with space
		
		//sTxtFilePath=sTestsTextFolderPath+
		// Splitting classname, Paramters
		String sSplitWithParameter = MethodLine.GetField ("(", 1).Trim ()
		lsSplitFuncName =sSplitWithParameter.Split(" ")
		 sClassName =sSplitWithParameter.GetField (" ", lsSplitFuncName.Count())
		sParameters = MethodLine.GetField (sClassName, 2)
		sParameters = sParameters.GetField (")", 1)
		sParameters = sParameters.GetField ("(", 2)
		// Print (sParameters)
		
		// Formatting Function line into AT format
		lsParameter = sParameters.Split (",")
		sStepName = "class"+" "+sClassName+" : Test"
		
		// Adding step dsecription to AT format
		lsMainMethodLine.Add (sStepName)
		
		sStepInfo = '%TestInfo[Desc="{sClassName}",Group="{sGroup}",Table="{sTable}"]'
		lsMainMethodLine.Add (sStepInfo)
		
		//Adding parameters and Main to AT Format
		for (Integer j = 1; j<=lsParameter.Count(); j++)
			if (lsParameter[j].IsNullOrEmpty())
				//Nothing
			else
				lsParameter[j] = "parameter "+lsParameter[j]
				lsMainMethodLine.Add (lsParameter[j])
		lsMainMethodLine.Add ("Main()")
		Print (lsMainMethodLine)
		// 
		// lsMainMethodLine.WriteFile (SFuncTxtFile)
		
class ReplaceStepsinSeleniumToAtFormat : Step
	%StepInfo[Desc="Replace Function Lineby AT Steps format",Group="SeleniumTestCaseToAT"]
	parameter String sIntegratedOutFileName
	parameter List<String> lsData
	out parameter List<String> lsStepAddedData
	Main()
		String sReadData,sClassName, sParameters,sStepName, sTempParameterName, sOBraces, sCBraces, sTemp
		List<String> lsParameter,lsMainMethodLine,lsClassName,lsMatchedParameters, lsTemp, lsPageInitElements
		Integer iMethodStartLine,  j 
		sOBraces = Char (123)
		sCBraces = Char (125)
		Boolean bFound = false
		
		// Reads entire Seq1 Output file of all Selenium Java Files to be converted
		TextFile MyFile
		MyFile.Open (sIntegratedOutFileName, FileMode.Read)
		while MyFile.Read (sReadData)
			lsTemp.Add (sReadData)
		MyFile.Close()
		
		// Get all PageFactory InitElements variablenames
		for(Integer i=1;i<=lsData.Count();i++)
			if lsData[i].Contains("PageFactory.initElements")
				sTemp = lsData[i].Trim ().GetField ("=", 1)
				lsPageInitElements.Add( sTemp.Trim ().GetField (" ", 2))
				lsData.Remove(i)
				i--
				
		// Reads only function call and replaces by AT Steps Format
		for(Integer i=1;i<=lsData.Count();i++)
			bFound = false
			lsMatchedParameters = {}
			lsMainMethodLine = {}
			if (lsPageInitElements.Count()>0)
				for ( j = 1; j<=lsPageInitElements.Count(); j++)
					if lsData[i].Trim ().Contains (lsPageInitElements[j])
						bFound = true
						break
				if bFound == true
					sClassName = lsData[i].Trim ().GetField ("(", 1)
					sClassName=sClassName.GetField(".",2)
					sParameters = lsData[i].Trim ().GetField ("(", 2)
					sParameters = sParameters.GetField (")", 1)
					lsClassName.Add(sClassName)
					sStepName = "step"+" "+sClassName
					Print (sStepName)
					
					// Formatting Function line into AT format
					lsParameter = sParameters.Trim ().Split (",")
					Print ("lsParameter", lsParameter.Count())
					if lsParameter.Count()>0 && lsParameter[1].IsAlpha() 
						lsStepAddedData.Add (sStepName)// Gets ClassName
						lsStepAddedData.Add(sOBraces)
						for ( j = 1; j<=lsParameter.Count(); j++) // Splits of Sel Parameters into list
							if (lsParameter[j].IsNullOrEmpty())
								// Nothing
							else
								lsParameter[j] = " : " + lsParameter[j]
								lsMainMethodLine.Add (lsParameter[j])
						// Print (lsMainMethodLine)
								
						// Compares Subfunction name with ClassName and Fetches Parameter from the AT class until it find Main ()
						for (Integer k = 1; k<=lsTemp.Count(); k++)
							if lsTemp[k].Contains (sClassName.Trim()) && lsTemp[k].Contains ("class")
								for (Integer l = 2; l<=20; l++)
									if lsTemp[k+l].Contains ("Main()")
										break
										// do nothing
									else
										if lsTemp[k+l].Contains ("parameter") || lsTemp[k+l].Contains ("out parameter") || lsTemp[k+l].Contains ("shared")
											step GetRepaetableCharCount
												sData:lsTemp[k+l]
												sChar:" "
											sTempParameterName = lsTemp[k+l].GetField (" ", GetRepaetableCharCount.iRepeatCharCount + 1)
											lsMatchedParameters.Add(sTempParameterName)
											// Print(lsMatchedParameters)
										// Print(lsMainMethodLine.Count())
										// Print (lsMatchedParameters.Count())
						if (lsMainMethodLine.Count() == lsMatchedParameters.Count())
							for (Integer m= 1; m<=lsMainMethodLine.Count();m++)
								lsStepAddedData.Add(lsMatchedParameters[m] + lsMainMethodLine[m])
							lsStepAddedData.Add(sCBraces)
					else
						lsStepAddedData.Add (sStepName) // Gets ClassName
				else
					lsStepAddedData.Add(lsData[i])
		
		// Print(lsStepAddedData)
		// lsStepAddedData.WriteFile ("D:\Temp\FunctionReplacement.txt")
		
class SplitMultipleMethodsIntoaListTests : Step
	%StepInfo[Desc="Splits methods and its line into a List of String",Group="SeleniumTestCaseToAT"]
	parameter String FileName
	out parameter List<List<String>> llsSelMethods
	Main()
		String sReadData,sTemp="",sCBraces
		sCBraces = Char (125)
		List<String> lsSteps, lsTemp, lsMethodContentsOnly, lsSelConversionFormatOut
		
		step GettingOnlyMethodFromSeleniumJavaFile
			sReadFile:FileName
		lsMethodContentsOnly = GettingOnlyMethodFromSeleniumJavaFile.lsMethodContents
		
		step AddsNewLineForOpenAndCloseBraces
			lsOriginalSelData:lsMethodContentsOnly
		lsSelConversionFormatOut = AddsNewLineForOpenAndCloseBraces.lsSelConversionFormat
		
		// Split the methods and its line of code into a String , final output will be list of string
		for (Integer k = 1; k<=lsSelConversionFormatOut.Count(); k++)
			sTemp = sTemp+"???"+lsSelConversionFormatOut[k]
			// Print(sTemp)
		lsSteps = sTemp.Split ("public ")
		// Print (lsSteps)
		
		// Placing public text before void as it is lost after splitting
		for (Integer l = 1; l<=lsSteps.Count(); l++)
			if lsSteps[l].StartsWith ("???")// Removes the first empty ???
				lsSteps.Remove (l)
			lsSteps[l] = lsSteps[l].Insert (1, "public ")
		// Print(lsSteps)
		
		// Split "n" number of methods and its content into a list of list 
		for (Integer m = 1; m<=lsSteps.Count(); m++)
			lsTemp = lsSteps[m].Split ("???")
			llsSelMethods.Add (lsTemp)
		// Print (llsSelMethods)
		
		// 
		// 
		
class ConvertSelTestsMethodlineToATClassMethodFormat_Seq1 : Step
	%StepInfo[Desc="Converts the method line in Selenium to equivalent Class method format in AT",Group="SeleniumTestCaseToAT/Main"]
	parameter String FileName
	parameter String OutputFileName
	out parameter List<String> lsData
	Main()
		String sMethodName, sPublicLine, sParameters, sStepInfo
		List<String>lsMethodName, lsParameter,lsReplaceCode
		List<List<String>> llsTemp
		TextFile MyFile
		// MyFile.Open ("D:\Temp\YoutubeSignInPage.txt", FileMode.Append)
		MyFile.Open (OutputFileName, FileMode.Write)
		
		// Split n no of methods into a list of list
		step SplitMultipleMethodsIntoaList
			FileName:FileName
		
		List<List<String>> llsMethodsOnly = SplitMultipleMethodsIntoaList.llsSelMethods
		
		// Replacing the Function line with equivalent Step name in AT
		for (Integer i = 1; i<=llsMethodsOnly.Count(); i++)
			for (Integer j = 1; j<=llsMethodsOnly[i].Count(); j++)
				if llsMethodsOnly[i][j].Contains ("public void") || llsMethodsOnly[i][j].Contains ("public static void")
					sPublicLine = llsMethodsOnly[i][j]
					// Split function name , paramters into AT Format
					step SplitFunctionLineIntoATFormatFromSELTestCasefile
						MethodLine:sPublicLine
					for (Integer k = 1; k<=SplitFunctionLineIntoATFormatFromSELTestCasefile.lsMainMethodLine.Count(); k++)
						MyFile.Write (SplitFunctionLineIntoATFormatFromSELTestCasefile.lsMainMethodLine[k])
						lsData.Add (SplitFunctionLineIntoATFormatFromSELTestCasefile.lsMainMethodLine[k])
				else
					if llsMethodsOnly[i][j].IsNull() ||  llsMethodsOnly[i][j].IsEmpty ()
						// do nothing
					else
						MyFile.Write (llsMethodsOnly[i][j])
						lsData.Add (llsMethodsOnly[i][j])
		
		// 
		// 
		
class SelTestsIndentationAndRemoveBraces_Seq2 : Step
	%StepInfo[Desc="Indentation wrt AT and Replace braces with indentation",Group="SeleniumTestCaseToAT/Main"]
	parameter List<String> lsSeq1Data
	parameter String sIntegratedOutFileName
	parameter String Indent_OutFileName
	out parameter List<String> lsData
	Main()
		String sReadData, sSingleLine, sTime, sTime1, sObjectName, sWaitTime, sLine = "", sOBraces, sCBraces, sParaName, sObjName, sData, sKeyword, sDataBrace, print1, print2
		sOBraces = Char (123)
		sCBraces = Char (125)
		TextFile MyFile
		Integer iPos,i,iSeleniumMethodCount,iReplaceMethodCount, iCount=0, iLength, iSpaceCount=0
		List<String> lsData1,  lsWaitTime, lsMain, lsLines,lsBraces, lsprint
		List<List<String>> llsData
		List<Integer>liOBraces
		
		// TextFile textFile
		// textFile.Open (sReadFile, FileMode.Read, FileEncoding.ANSI)
		// while textFile.Read (sReadData)
			// lsSeq1Data.Add (sReadData.Trim())
		// Print (lsMainData)
		
		lsData1 = lsSeq1Data
		// Replaces Sel getAttribute and equlas methods to equivalent AT GetAttr and ==
		
		// Replaces all Function called into AT steps
		step ReplaceStepsinSeleniumToAtFormat
			sIntegratedOutFileName:sIntegratedOutFileName
			lsData:lsData1
		
		lsData = ReplaceStepsinSeleniumToAtFormat.lsStepAddedData
		// Print (lsData)
		//Indentation
		for(Integer i=1;i<=lsData.Count();i++)
			if (lsData[i].StartsWith("//") && (lsData[i+1].Contains("class") && lsData[i+1].Contains("Test"))) || (lsData[i].Contains("class") && lsData[i].Contains("Test"))
				//do nothing
			else
				lsData[i] = String.Tabs(1)+lsData[i]
		
		// lsData.WriteFile ("D:\Temp\TestIndent.txt")
		//Position of Close Braces
		for(Integer j=1;j<=lsData.Count();j++)
			if lsData[j].Contains(sOBraces) || lsData[j].Contains(sCBraces)
				lsBraces.Add(lsData[j])
				liOBraces.Add (j)
				
		// indentation for open and Close braces as per AT standards
		for (Integer l = 1, k = 1; l<=lsBraces.Count() && k<=liOBraces.Count(); l++,k++)
			if(l==lsBraces.Count() || k==liOBraces.Count())
				break
			else
				if lsBraces[l].Contains(sOBraces) && lsBraces[l+1].Contains(sOBraces)
					iCount++
					for (Integer m = (liOBraces[k]+1); m<=liOBraces[k+1]-1; m++)
						lsData[m] = String.Tabs(iCount)+lsData[m]
				else if( lsBraces[l].Contains(sOBraces) && lsBraces[l+1].Contains(sCBraces))
					iCount++
					for (Integer m = (liOBraces[k]+1); m<=liOBraces[k+1]-1; m++)
						lsData[m] = String.Tabs(iCount)+lsData[m]
				else if lsBraces[l].Contains(sCBraces) && lsBraces[l+1].Contains(sOBraces)
					iCount--
					for (Integer m = (liOBraces[k]+1); m<=liOBraces[k+1]-1; m++)
						lsData[m] = String.Tabs(iCount)+lsData[m]
				else if lsBraces[l].Contains(sCBraces) && lsBraces[l+1].Contains(sCBraces)
					iCount--
					for (Integer m = (liOBraces[k]+1); m<=liOBraces[k+1]-1; m++)
						lsData[m] = String.Tabs(iCount)+lsData[m]
		// Print(lsData)
		
		//Remove Braces
		for(Integer i=1;i<=lsData.Count();i++)
			if lsData[i].Contains(sOBraces) || lsData[i].Contains(sCBraces)
				lsData.Remove(i)
		
		//Remove Braces
		for(Integer i=1;i<=lsData.Count();i++)
			if lsData[i].Contains(sOBraces) || lsData[i].Contains(sCBraces)
				lsData.Remove(i)
		// Print(lsData)
		
		// Removes Semicolon synntax at the end of the line
		for (Integer i = 1; i<=lsData.Count(); i++)
			if lsData[i].EndsWith (";")
				lsData[i] = lsData[i].Replace (";", "")
			if lsData[i].Contains(";") && lsData[i].Contains("//") && ( ! lsData[i].Contains("for("))
				lsData[i] = lsData[i].Replace (";", "")
		
		lsData.WriteFile (Indent_OutFileName)
		
		
class Testszeefile : Step
	%StepInfo[Group="SeleniumTestCaseToAT"]
	parameter List<String> lsOutFile
	parameter String sStepZeeFile
	Main()
		String sReadData
		TextFile MyFile
		MyFile.Open (sStepZeeFile, FileMode.Append)
		for (Integer i = 1; i<=lsOutFile.Count(); i++)
			MyFile.Write (lsOutFile[i])
		
		
class DeleteDirectory_Tests : Step
	%StepInfo[Desc="Deletes all the pre existing converted folders created during last run",Group="SeleniumTestCaseToAT / Main"]
	Main()
		if System.FileExists (sTestsTextFolderPath)
			System.DeleteDir (sTestsTextFolderPath, DeleteFlags.{Force,Quiet,Recycle,Recurse})
		if System.FileExists (sTestImplicitExplicitWaitFolderPath)
			System.DeleteDir (sTestImplicitExplicitWaitFolderPath, DeleteFlags.{Force,Quiet,Recycle,Recurse})
		
class ConvertImplicitWaitFromTeststoATTest_Seq3 : Step
	%StepInfo[Desc="Converts Selenium Implicit, Explicit wait to AT waittwhilexists and WaituntilExists",Group="SeleniumTestCaseToAT / Main"]
	parameter String Waits_OutputFileName
	parameter List<String> lsData
	out parameter List<String> lsImplicitExplicitData
	Main()
		String  sObjectName, sWaitTime, sLine, sTemp
		List<String>  lsWaitTime
		TextFile MyFile
		
		// ImplicitWait to WaitUntilExists
		// Ignores Thread,//, driver./System.
		for(Integer i=1;i<=lsData.Count();i++)
			sObjectName =""
			if lsData[i].Contains ("implicitlyWait")
				sWaitTime = lsData[i].GetField ("implicitlyWait(", 2)
				sWaitTime=sWaitTime.GetField(",",1)
				if lsData[i+1].Contains("Thread.sleep") || lsData[i+1].Contains("//") || lsData[i+1].Contains("driver.") || lsData[i+1].Contains("System.")
					Print("Loop1", sObjectName)
					if lsData[i+2].Contains ("initElements")
						sTemp = lsData[i+2].GetField (",", 2)
						sObjectName = sTemp.GetField (".", 1)
					sObjectName = sObjectName.Trim()+".WaitWhileExists({sWaitTime})"
					Print (sObjectName)
				else
					if (lsData[i+1].Contains ("initElements"))
						sTemp = lsData[i+1].GetField (",", 2)
						sObjectName = sTemp.GetField (".", 1)
					sObjectName = sObjectName.Trim()+".WaitWhileExists({sWaitTime})"
				Print(lsData[i])
				step GetPositionofAlphaNumeric_String
					sData:lsData[i]
				// Print (GetPositionofAlphaNumeric_String.iGetAlphaPos)
				if sObjectName.IsNull ()== false
					sObjectName = String.Tabs(GetPositionofAlphaNumeric_String.iGetAlphaPos)+ sObjectName
				lsData[i] = lsData[i].Replace (lsData[i], sObjectName)
		
		for(Integer i=1;i<=lsData.Count();i++)
			if (lsData[i].Trim().StartsWith(".WaitWhileExists") || lsData[i].Contains("driver.quit"))
				lsData.Remove(i)
				i--
		
		lsImplicitExplicitData = lsData
		lsImplicitExplicitData.WriteFile (Waits_OutputFileName)
		// lsData.WriteFile ("D:\Temp\ImplictExplicitWait.txt")
		
class TestCaseMethodReplacement : Step
	%StepInfo[Desc="Replaces the methods in TestCase",Group="SeleniumTestCaseToAT"]
	parameter List<String> SelTestsIndentationAndRemoveBraces
	out parameter List<String> lsData
	Main()
		
		lsData=SelTestsIndentationAndRemoveBraces
		// Getting values and count from table
		record_TestMethodsReplacement rMethods = DataStore.Query ("Dt_TestCaseMethodReplace[1]")
		// Print (rMethods)
		
		for(Integer i=1;i<=lsData.Count();i++)
			for (Integer j = 1; j<=rMethods.SeleniumMethods.Count(); j++)
				if lsData[i].Contains (rMethods.SeleniumMethods[j])
					lsData[i] = lsData[i].Replace (rMethods.SeleniumMethods[j], rMethods.AscentialTestMethods[j])
		// Print (lsData)
class CreateDirectory_Tests : Step
	%StepInfo[Desc="Creates the directory required for Test Conversion",Group="SeleniumTestCaseToAT"]
	Main()
		if System.FileExists (sSeleniumTestsJavaFolderPath)
			//Do Nothing
		else
			System.CreateDir (sSeleniumTestsJavaFolderPath)
		if System.FileExists (sTestsTextFolderPath)
			//Do Nothing
		else
			System.CreateDir (sTestsTextFolderPath)
		if System.FileExists (sTestImplicitExplicitWaitFolderPath)
			//Do Nothing
		else
			System.CreateDir (sTestImplicitExplicitWaitFolderPath)
		


