List<String> FormatTime(String sResponseTime, String sDBTime, out List<String> lsResult)
	%FuncInfo[Desc="To replace ""T"" from the response to "" "" and removing millisecond from the DB date and Response Date"]
	List<String> lsFinalModifiedTime, lsLastModifiedTime
	
	// Step 1: Replace 'T' with whitespace in the ResponseTime
	String sUpdateModifiedTime = sResponseTime.Replace ("T", " ")
	// Step 2: Split ResponseTime and DBTime by dot (.)
	lsFinalModifiedTime = sUpdateModifiedTime.Split (".")
	lsLastModifiedTime = sDBTime.Split (".")
	// Step 3: Create an array containing the first parts of the split strings
	lsResult = {lsFinalModifiedTime[1], lsLastModifiedTime[1]}
	
	
	// public String[] formatTime(String ResponseTime, String DBTime) {
		// // Step 1: Replace 'T' with whitespace in the ResponseTime
		// String UpdateModifiedTime = ResponseTime.replace("T", " ");
		// 
		// // Step 2: Split ResponseTime and DBTime by dot (.)
		// String[] FinalModifiedTime = UpdateModifiedTime.split("\\.");
		// String[] lastModifiedTime = DBTime.split("\\.");
		// 
		// // Step 3: Create an array containing the first parts of the split strings
		// String[] result = [FinalModifiedTime[0], lastModifiedTime[0]];
		// 
		// // Step 4: Return the result array
		// return result;
	//}
	
String changeTime(String sTimeStamp, out String sIncrementTime)
	%FuncInfo[Desc="This method will decrement the time by 8hr 00mins"]
	DateTime dtDateTime,dtIncrementTime
	String sChangedTime,sDate6
	List<String> lsUpdatedTime
	// Step 1: Replace 'T' with whitespace in the timeStamp
	sChangedTime = sTimeStamp.Replace ("T", " ")
	// Step 2: Split timeStamp by dot (.)
	lsUpdatedTime = sChangedTime.Split (".")
	sDate6 = lsUpdatedTime[1]
	// Step 3: Parse the split time string into a Date object using SimpleDateFormat
	dtDateTime = DateTime.Parse ("yyyy-MM-dd HH:mm:ss", "{sDate6}")
	// Step 4: Increment the parsed date object by 5 hours and 30 minutes using TimeCategory
	dtIncrementTime = null
	dtIncrementTime = dtDateTime.Add (0, 5, 30)
	// Step 5: Format the incremented time to the desired format
	sIncrementTime = dtIncrementTime.Format ("yyyy-MM-dd HH:mm:ss")
	
	
	
	// public def changeTime(String timeStamp) {
		// // Step 1: Replace 'T' with whitespace in the timeStamp
		// def changedTime = timeStamp.replace("T", " ")
		// 
		// // Step 2: Split timeStamp by dot (.)
		// def updatedTime = changedTime.split("\\.")
		// String sDate6 = updatedTime[0]
	// 
		// // Step 3: Parse the split time string into a Date object using SimpleDateFormat
		// SimpleDateFormat formatter6 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		// Date date6 = formatter6.parse(sDate6);
	// 
		// // Step 4: Increment the parsed date object by 5 hours and 30 minutes using TimeCategory
		// def incrementTime = null;
		// use(TimeCategory) {
			// incrementTime = date6 + 5.hours + 30.minutes
		// }
	// 
		// // Step 5: Format the incremented time to the desired format
		// return incrementTime.format("yyyy-MM-dd HH:mm:ss")
	// }
	
String incrementMinute(String sDateTime, out String sIncrementTime)
	%FuncInfo[Desc="This method will be used to increment by a Minute for given date time."]
	DateTime dtdecrementedDateTime,dtDateTime,dtIncrementTime
	List<String> lsDateTimeSplit
	
	// Step 1: Split the input datetime string by dot (.)
	lsDateTimeSplit = sDateTime.Split (".")
	
	// Step 2: Parse the datetime string into a Date object using SimpleDateFormat
	dtDateTime = DateTime.Parse ("yyyy-MM-dd HH:mm:ss", sDateTime)
	
	// Step 3: Increment the parsed datetime by 1 minute using TimeCategory
	dtdecrementedDateTime = null
	dtIncrementTime = dtDateTime.Add (0, 0, 1)
	// Step 4: Format the incremented datetime to the desired format
	sIncrementTime = dtIncrementTime.Format ("YYYY-MM-dd'T'HH:mm")
	
	
	// 
	// public def incrementMinute(String datetime) {
		// // Step 1: Split the input datetime string by dot (.)
		// def dateTimesplit = datetime.split("\\.")
		// 
		// // Step 2: Parse the datetime string into a Date object using SimpleDateFormat
		// SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm");
		// Date dateTimeStamp = formatter.parse(datetime);
		// 
		// // Step 3: Increment the parsed datetime by 1 minute using TimeCategory
		// def decrementedDateTime = null;
		// use(TimeCategory) {
			// decrementedDateTime = dateTimeStamp + 1.minutes
		// }
		// 
		// // Step 4: Format the incremented datetime to the desired format
		// def finalDateTime = decrementedDateTime.format("YYYY-MM-dd'T'HH:mm")
		// 
		// // Step 5: Return the final formatted datetime string
		// return finalDateTime;
	// }
	
	
	
	
	
	
	
	
	
	
	
	//  public def incrementMinute(String datetime) {
	//    def dateTimesplit = datetime.split("\\.")
	//    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm");
	//    Date dateTimeStamp = formatter.parse(datetime);
	//    def decrementedDateTime = null;
	//    use(TimeCategory) {
		// decrementedDateTime = dateTimeStamp + 1. minutes
	//    }
	//    def finalDateTime = decrementedDateTime.format("YYYY-MM-dd'T'HH:mm")
	//    return finalDateTime;
	//   }
	// 
	
String getFormattedDateTime(String timeXpath, out String finalDateTime)
	%FuncInfo[Desc="Adding 'T' between Date and Time"]
	List<String> DateTimeSplit, splitTimeNanoSec
	
	// // Step 1: Split the input string by whitespace
	DateTimeSplit = timeXpath.Split (" ")
	// // Step 2: Split the time portion (hours:minutes:seconds.nanoseconds) by the dot (.)
	splitTimeNanoSec = DateTimeSplit[2].Split (".")
	// // Step 3: Concatenate the date and time parts with 'T' in between
	finalDateTime = DateTimeSplit[1] + "T" + splitTimeNanoSec[1]
	
	// 2024-02-28 15:30:45.123456789+05:00 
	// public def getFormattedDateTime(String timeXpath) {
		// // Step 1: Split the input string by whitespace
		// def DateTimeXpath = timeXpath
		// def DateTimeSplit = DateTimeXpath.split()
	// 
		// // Step 2: Split the time portion (hours:minutes:seconds.nanoseconds) by the dot (.)
		// def splitTimeNanoSec = DateTimeSplit[1].split("\\.")
	// 
		// // Step 3: Concatenate the date and time parts with 'T' in between
		// def finalDateTime = DateTimeSplit[0] + "T" + splitTimeNanoSec[0]
	// 
		// // Step 4: Return the final formatted date and time string
		// return finalDateTime
	// }
	// 
	
getTimeZoneOffset()
	
	
	
	
	DateTime dt = DateTime.Now()
	//   private String getTimeZoneOffset() {
	String timeStamp = dt.Format ("yyyy-MM-dd HH:mm:ss:nnn")
	Print (timeStamp)
	//    return timeStamp.substring(27, 33);
	//  }
	
getProjectDirectory(String sDirectory)
	%FuncInfo[Desc="This method will be used to Get Project Directory"]
	//  Split the directory path by the string "Projects"
	List<String> sFinalPath = sDirectory.Split ("Projects")
	// Set a global property named "projectDirectory" with the first part of the split path
	projectDirectory = sFinalPath[1]
	
	
	
	
	// public def getProjectDirectory(String directory) {
		// // Step 1: Assign the input directory string to a local variable
		// def ProjectDir = directory
		// 
		// // Step 2: Split the directory path by the string "Projects"
		// def finalPath = ProjectDir.split("Projects")
		// 
		// // Step 3: Set a global property named "projectDirectory" with the first part of the split path
		// com.eviware.soapui.SoapUI.globalProperties.setPropertyValue("projectDirectory", finalPath[0])
	// }
	

String decrementMinute(String sDateTime, out String sDecrementedDateTime)
	%FuncInfo[Desc="This method will be used to decrement by a Minute for given date time"]
	DateTime dtdecrementedDateTime,dtDateTime,dtIncrementTime
	List<String> lsDateTimeSplit
	
	// Step 1: Split the input datetime string by dot (.)
	lsDateTimeSplit = sDateTime.Split (".")
	
	// Step 2: Parse the datetime string into a Date object using SimpleDateFormat
	dtDateTime = DateTime.Parse ("yyyy-MM-dd HH:mm:ss", sDateTime)
	
	// Step 3: Decrement the parsed datetime by 1 minute using TimeCategory
	dtdecrementedDateTime = null
	dtIncrementTime = dtDateTime.Add (0, 0, -1)
	// Step 4: Format the decremented datetime to the desired format
	sDecrementedDateTime = dtIncrementTime.Format ("YYYY-MM-dd'T'HH:mm")
	
	
	
	
	// public def decrementMinute(String datetime) {
		// // Step 1: Split the input datetime string by dot (.)
		// def dateTimesplit = datetime.split("\\.")
	// 
		// // Step 2: Parse the datetime string into a Date object using SimpleDateFormat
		// SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm");
		// Date dateTimeStamp = formatter.parse(datetime);
	// 
		// // Step 3: Decrement the parsed datetime by 1 minute using TimeCategory
		// def decrementedDateTime = null;
		// use(TimeCategory) {
			// decrementedDateTime = dateTimeStamp - 1.minutes
		// }
	// 
		// // Step 4: Format the decremented datetime to the desired format
		// def finalDateTime = decrementedDateTime.format("YYYY-MM-dd'T'HH:mm")
	// 
		// // Step 5: Return the final formatted datetime string
		// return finalDateTime;
	// }
	// 
	
String changeDateFormat(String sTime, out String sChangeDateFormat)
	%FuncInfo[Desc="This method will be used to FormattedDateTime"]
	// Step 1: Split the input time string by dot (.)
	List<String> lsUpdatedChangeDateFormat = sTime.Split (".")
	// Step 2: Parse the first part of the split time string into a Date object and format it
	DateTime FinalChangeDateFormat = Date.Parse ("yyyy-MM-dd hh:mm:ss", lsUpdatedChangeDateFormat[1])
	// // Step 3: Return the final formatted date string
	sChangeDateFormat = FinalChangeDateFormat.Format ("MM/dd/yyyy HH:mm:ss")
	
	
	
	// public def changeDateFormat(String time) {
		// // Step 1: Split the input time string by dot (.)
		// def UpdatedChangeDateFormat = ChangeDateFormat.toString().split("\\.")
		// 
		// // Step 2: Parse the first part of the split time string into a Date object and format it
		// def FinalChangeDateFormat = Date.parse("yyyy-MM-dd hh:mm:ss", UpdatedChangeDateFormat[0]).format("MM/dd/yyyy HH:mm:ss")
	// 
		// // Step 3: Return the final formatted date string
		// return FinalChangeDateFormat;
	// }
	// 
	
encoderDecoder(String sPath, String sAction, String sTestString)
	List<
	// Step 2: Construct the command to execute
	def command = "${path} ${action} ${testString}";
	System.Execute(sCommand, lsOutput)
	
	
	
	// public def encoderDecoder(String Path, String Action, String TestString) {
		// // Step 1: Assign values to local variables
		// def testString = TestString
		// def action = Action
		// def path = Path
		// 
		// // Step 2: Construct the command to execute
		// def command = "${path} ${action} ${testString}";
		// 
		// // Step 3: Initialize an empty string to store output
		// String myList = "";
		// 
		// // Step 4: Execute the command
		// def process = Runtime.getRuntime().exec(command);
		// 
		// // Step 5: Close the output stream
		// process.getOutputStream().close();
		// 
		// // Step 6: Read the output from the process
		// BufferedReader stdout = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// def line;
		// while ((line = stdout.readLine()) != null) {
			// // Step 7: Concatenate each line of output to myList
			// myList = myList.concat(line + "\n")
		// }
		// 
		// // Step 8: Close the reader
		// stdout.close();
		// 
		// // Step 9: Return the concatenated output
		// return myList;
	// }
	// 
	
